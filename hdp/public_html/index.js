
/*C:\uniserver\www\hdp\public_html\lib/CocoonJS.js*/
(function() {
    // There should not be a CocoonJS object when this code is executed.
    // if (typeof window.CocoonJS !== 'undefined') throw("This is strange, a CocoonJS object already exists when trying to create it.");

    /**
     * The basic object for all the CocoonJS related specific APIs === extensions.
     * @namespace
     */
    CocoonJS = window.CocoonJS ? window.CocoonJS : {};

    CocoonJS.nativeExtensionObjectAvailable = typeof window.ext !== 'undefined';

    /**
     * This type represents a 2D size structure with horizontal and vertical values.
     * @class
     */
    CocoonJS.Size = {
        /**
         * The horizontal size value.
         */
        width: 0,

        /**
         * The vertical size value.
         */
        height: 0
    };

    /**
     * This utility function allows to create an object oriented like hierarchy between two functions using their prototypes.
     * This function adds a "superclass" and a "__super" attributes to the subclass and it's functions to reference the super class.
     * @param {function} subc The subclass function.
     * @param {function} superc The superclass function.
     */
    CocoonJS.extend = function(subc, superc) {
        var subcp = subc.prototype;

        // Class pattern.
        var CocoonJSExtendHierarchyChainClass = function() {};
        CocoonJSExtendHierarchyChainClass.prototype = superc.prototype;

        subc.prototype = new CocoonJSExtendHierarchyChainClass(); // chain prototypes.
        subc.superclass = superc.prototype;
        subc.prototype.constructor = subc;

        // Reset constructor. See Object Oriented Javascript for an in-depth explanation of this.
        if (superc.prototype.constructor === Object.prototype.constructor) {
            superc.prototype.constructor = superc;
        }

        // Check all the elements in the subclass prototype and add them to the chain object's prototype.
        for (var method in subcp) {
            if (subcp.hasOwnProperty(method)) {
                subc.prototype[method] = subcp[method];

                // // tenemos en super un metodo con igual nombre.
                // if ( superc.prototype[method]) 
                // {
                //     subc.prototype[method]= (function(fn, fnsuper) 
                //     {
                //         return function() 
                //         {
                //             var prevMethod= this.__super;

                //             this.__super= fnsuper;

                //             var retValue= fn.apply(
                //                     this,
                //                     Array.prototype.slice.call(arguments) );

                //             this.__super= prevMethod;

                //             return retValue;
                //         };
                //     })(subc.prototype[method], superc.prototype[method]);
                // }
            }
        }
    }

    /**
     * IMPORTANT: This function should only be used by Ludei.
     * This function allows a call to the native extension object function reusing the same arguments object.
     * Why is interesting to use this function instead of calling the native object's function directly?
     * As the CocoonJS object functions expicitly receive parameters, if they are not present and the native call is direcly mapped,
     * undefined arguments are passed to the native side. Some native functions do not check the parameters validation
     * correctly (just check the number of parameters passed).
     * Another solution instead of using this function call is to correctly check if the parameters are valid (not undefined) to make the
     * call, but it takes more work than using this approach.
     * @static
     * @param {string} nativeExtensionObjectName The name of the native extension object name. The object that is a member of the 'ext' object.
     * @param {string} nativeFunctionName The name of the function to be called inside the native extension object.
     * @param {object} arguments The arguments object of the CocoonJS extension object function. It contains all the arguments passed to the CocoonJS extension object function and these are the ones that will be passed to the native call too.
     * @param {boolean} [async] A flag to indicate if the makeCall (false or undefined) or the makeCallAsync function should be used to perform the native call.
     * @returns Whatever the native function call returns.
     */
    CocoonJS.makeNativeExtensionObjectFunctionCall = function(nativeExtensionObjectName, nativeFunctionName, args, async) {
        if (CocoonJS.nativeExtensionObjectAvailable) {
            var argumentsArray = Array.prototype.slice.call(args);
            argumentsArray.unshift(nativeFunctionName);
            var nativeExtensionObject = ext[nativeExtensionObjectName];
            var makeCallFunction = async ? nativeExtensionObject.makeCallAsync : nativeExtensionObject.makeCall;
            var ret = makeCallFunction.apply(nativeExtensionObject, argumentsArray);
            var finalRet = ret;
            if (typeof ret === "string") {
                try {
                    finalRet = JSON.parse(ret);
                } catch (error) {}
            }
            return finalRet;
        }
    };

    /**
     * Returns an object retrieved from a path specified by a dot specified text path starting from a given base object.
     * It could be useful to find the reference of an object from a defined base object. For example the base object could be window and the
     * path could be "CocoonJS.App" or "document.body".
     * @param {Object} baseObject The object to start from to find the object using the given text path.
     * @param {string} objectPath The path in the form of a text using the dot notation. i.e. "document.body"
     * For example:
     * var body = getObjectFromPath(window, "document.body");
     */
    CocoonJS.getObjectFromPath = function(baseObject, objectPath) {
        var parts = objectPath.split('.');
        var obj = baseObject;
        for (var i = 0, len = parts.length; i < len; ++i) {
            obj[parts[i]] = obj[parts[i]] || undefined;
            obj = obj[parts[i]];
        }
        return obj;
    };

    /**
     * Returns the key for a value in a dictionary. It looks for an specific value inside a dictionary and returns the corresponding key.
     * @param {Object} dictionary The dictionary to look for the value in and get the corresponding key.
     * @param {Object} value The value to look for inside the dictionary and return it's corresponding key.
     * @return The key that corresponds to the given value it is has been found or null.
     */
    CocoonJS.getKeyForValueInDictionary = function(dictionary, value) {
        var finalKey = null;
        for (var key in dictionary) {
            if (dictionary[key] === value) {
                finalKey = key;
                break;
            }
        }
        return finalKey;
    }

    /**
     * Finds a string inside a given array of strings by looking for a given substring. It can also
     * specify if the search must be performed taking care or not of the case sensitivity.
     * @param {Array} stringArray The array of strings in which to to look for the string.
     * @param {string} subString The substring to look for inside all the strings of the array.
     * @param {boolean} caseSensitive A flag to indicate if the search must be performed taking case of the
     * case sensitiveness (true) or not (false).
     * @return {string} The string that has been found or null if the substring is not inside any of the string of the array.
     */
    CocoonJS.findStringInStringArrayThatIsIndexOf = function(stringArray, subString, caseSensitive) {
        var foundString = null;
        subString = caseSensitive ? subString : subString.toUpperCase();
        for (var i = 0; foundString == null && i < stringArray.length; i++) {
            foundString = caseSensitive ? stringArray[i] : stringArray[i].toUpperCase();
            foundString = foundString.indexOf(subString) >= 0 ? stringArray[i] : null;
        }
        return foundString;
    };

    /**
     * A class that represents objects to handle events. Event handlers have always the same structure:
     * Mainly they provide the addEventListener and removeEventListener functions.
     * Both functions receive a callback function that will be added or removed. All the added callback
     * functions will be called when the event takes place.
     * Additionally they also allow the addEventListenerOnce and notifyEventListeners functions.
     * @constructor
     * @param {string} nativeExtensionObjectName The name of the native extension object (inside the ext object) to be used.
     * @param {string} cocoonJSExtensionObjectName The name of the sugarized extension object.
     * @param {string} nativeEventName The name of the native event inside the ext object.
     * @param {number} [chainFunction] An optional function used to preprocess the listener callbacks. This function, if provided,
     * will be called before any of the other listeners.
     */
    CocoonJS.EventHandler = function(nativeExtensionObjectName, cocoonJSExtensionObjectName, nativeEventName, chainFunction) {
        this.listeners = [];
        this.listenersOnce = [];
        this.chainFunction = chainFunction;

        /**
         * Adds a callback function so it can be called when the event takes place.
         * @param {function} listener The callback function to be added to the event handler object. See the referenced Listener function documentation for more detail in each event handler object's documentation.
         */
        this.addEventListener = function(listener) {
            if (chainFunction) {
                var f = function() {
                    chainFunction.call(this, arguments.callee.sourceListener, Array.prototype.slice.call(arguments));
                };
                listener.CocoonJSEventHandlerChainFunction = f;
                f.sourceListener = listener;
                listener = f;
            }

            var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            if (cocoonJSExtensionObject && cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].addEventListener(nativeEventName, listener);
            }
            var indexOfListener = this.listeners.indexOf(listener);
            if (indexOfListener < 0) {
                this.listeners.push(listener);
            }
        };

        this.addEventListenerOnce = function(listener) {
            if (chainFunction) {
                var f = function() {
                    chainFunction(arguments.callee.sourceListener, Array.prototype.slice.call(arguments));
                };
                f.sourceListener = listener;
                listener = f;
            }

            var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            if (cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].addEventListenerOnce(nativeEventName, listener);
            } else {
                var indexOfListener = this.listeners.indexOf(listener);
                if (indexOfListener < 0) {
                    this.listenersOnce.push(listener);
                }
            }
        };

        /**
         * Removes a callback function that was added to the event handler so it won't be called when the event takes place.
         * @param {function} listener The callback function to be removed from the event handler object. See the referenced Listener function documentation for more detail in each event handler object's documentation.
         */
        this.removeEventListener = function(listener) {

            if (chainFunction) {
                listener = listener.CocoonJSEventHandlerChainFunction;
                delete listener.CocoonJSEventHandlerChainFunction;
            }

            var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            if (cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].removeEventListener(nativeEventName, listener);
            } else {
                var indexOfListener = this.listeners.indexOf(listener);
                if (indexOfListener >= 0) {
                    this.listeners.splice(indexOfListener, 1);
                }
            }
        };

        this.notifyEventListeners = function() {
            var cocoonJSExtensionObject = CocoonJS.getObjectFromPath(CocoonJS, cocoonJSExtensionObjectName);
            var argumentsArray = Array.prototype.slice.call(arguments);
            if (cocoonJSExtensionObject && cocoonJSExtensionObject.nativeExtensionObjectAvailable) {
                ext[nativeExtensionObjectName].notifyEventListeners(nativeEventName, argumentsArray);
            } else {
                var listeners = Array.prototype.slice.call(this.listeners);
                var listenersOnce = Array.prototype.slice.call(this.listenersOnce);
                var _this = this;
                // Notify listeners after a while ;) === do not block this thread.
                setTimeout(function() {
                    for (var i = 0; i < listeners.length; i++) {
                        listeners[i].apply(_this, argumentsArray);
                    }
                    for (var i = 0; i < listenersOnce.length; i++) {
                        listenersOnce[i].apply(_this, argumentsArray);
                    }
                }, 0);

                _this.listenersOnce = [];
            }
        };
        return this;
    };

    /**
     * A simple timer class. Update it every loop iteration and get values from accumulated time to elapsed time in seconds or milliseconds.
     */
    CocoonJS.Timer = function() {
        this.reset();
        return this;
    };

    CocoonJS.Timer.prototype = {
        currentTimeInMillis: 0,
        lastTimeInMillis: 0,
        elapsedTimeInMillis: 0,
        elapsedTimeInSeconds: 0,
        accumTimeInMillis: 0,

        /**
		Resets the timer to 0.
		*/
        reset: function() {
            this.currentTimeInMillis = this.lastTimeInMillis = new Date().getTime();
            this.accumTimeInMillis = this.elapsedTimeInMillis = this.elapsedTimeInSeconds = 0;
        },

        /**
		Updates the timer calculating the elapsed time between update calls.
		*/
        update: function() {
            this.currentTimeInMillis = new Date().getTime();
            this.elapsedTimeInMillis = this.currentTimeInMillis - this.lastTimeInMillis;
            this.elapsedTimeInSeconds = this.elapsedTimeInMillis / 1000.0;
            this.lastTimeInMillis = this.currentTimeInMillis;
            this.accumTimeInMillis += this.elapsedTimeInMillis;
        }
    };

})();
/*C:\uniserver\www\hdp\public_html\lib/CocoonJS_App.js*/
(function () {
    // The CocoonJS must exist before creating the extension.
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before creating any extension object.");

    /**
     * This namespace represents all the basic functionalities available in the CocoonJS extension API.
     * @namespace
     */
    CocoonJS.App = CocoonJS.App ? CocoonJS.App : {};

    CocoonJS.App.nativeExtensionObjectAvailable = CocoonJS.nativeExtensionObjectAvailable && typeof window.ext.IDTK_APP !== 'undefined';

    /**
     * The predefined possible layouts for the FPS overlay.
     * @namespace
     * @enum
     */
    CocoonJS.App.FPSLayout = {
        TOP_LEFT:'top-left',
        TOP_RIGHT:'top-right',
        BOTTOM_LEFT:'bottom-left',
        BOTTOM_RIGHT:'bottom-right'
    };

    /**
    * The predefined possible orientations. there can be a bit level combination of them using the OR operator.
    * @namespace
    * @enum
    */
    CocoonJS.App.Orientations = {
        PORTRAIT : 1,
        PORTRAIT_UPSIDE_DOWN : 2,
        LANDSCAPE_LEFT : 4,
        LANDSCAPE_RIGHT : 8,
        PORTRAIT : 1 | 2,
        LANDSCAPE : 4 | 8,
        BOTH : 1 | 2 | 4 | 8
    };

    /**
     * Contains all the possible values to specify the input keyboard type to be used when introducing text.
     * @namespace
     * @enum
     */
    CocoonJS.App.KeyboardType = {
        /**
         * Represents a generic text input keyboard.
         */
        TEXT:"text",

        /**
         * Represents a number like input keyboard.
         */
        NUMBER:"num",

        /**
         * Represents a phone like input keyboard.
         */
        PHONE:"phone",

        /**
         * Represents an email like input keyboard.
         */
        EMAIL:"email",

        /**
         * Represents an URL like input keyboard.
         */
        URL:"url"
    };

    /**
     * The storage types to be used with file system related operations.
     * @namespace
     * @enum
     */
    CocoonJS.App.StorageType = {
        /**
         * Represents the application storage. The application storage is the place where all the resources that come with the application are stored.
         */
        APP_STORAGE:"APP_STORAGE",

        /**
         * Represents the internal storage. The internal storage is a different storage space that the application storage and only the data that the application has stored
         * in it will be in this storage. It is internal to the platform/device.
         */
        INTERNAL_STORAGE:"INTERNAL_STORAGE",

        /**
         * Represents an external storage. The external storage is similar to the internal storage in the sense that it only contains information that the application has written
         * in it but it represents an external storage device like a SD-CARD. If there is no exrernal storage, it will represent the same as the internal storage.
         */
        EXTERNAL_STORAGE:"EXTERNAL_STORAGE",

        /**
         * Represents the temporal storage. Same as the internal and external storage spaces in the sense that it only contains information that the application has written
         * in it but the main difference is that the information in this storage may dissapear without notice.
         */
        TEMPORARY_STORAGE:"TEMPORARY_STORAGE"
    };

    /**
     * The capture types to capture screenshots using CocoonJS native capabilities.
     * @namespace
     * @enum
     */
    CocoonJS.App.CaptureType = {
        /**
         Captures everything, both the CocoonJS GL hardware accelerated surface and the system views (like the WebView).
         */
        EVERYTHING:0,

        /**
         * Captures just the CocoonJS GL hardware accelerated surface.
         */
        JUST_COCOONJS_GL_SURFACE:1,

        /**
         * Captures just the sustem views (like the webview)
         */
        JUST_SYSTEM_VIEWS:2
    };

    /**
     * @ignore
     * Forward service might not be available if only one JS service is included
     */
    function isNativeBridgeServiceAvailable(){
        if (CocoonJS.App.forward.nativeAvailable === 'boolean') {
            //cached value
            return CocoonJS.App.forward.nativeAvailable;
        }
        else {
            var available = CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "forwardAvailable", arguments);
            available = !!available;
            CocoonJS.App.forward.nativeAvailable = available;
            return available;
        }

    }

    /**
     * Makes a forward call of some javascript code to be executed in a different environment (i.e. from CocoonJS to the WebView and viceversa).
     * It waits until the code is executed and the result of it is returned === synchronous.
     * @function
     * @param {string} javaScriptCode Some JavaScript code in a string to be forwarded and executed in a different JavaScript environment (i.e. from CocoonJS to the WebView and viceversa).
     * @return {string} The result of the execution of the passed JavaScript code in the different JavaScript environment.
     */
    CocoonJS.App.forward = function (javaScriptCode) {
        if (CocoonJS.App.nativeExtensionObjectAvailable && isNativeBridgeServiceAvailable()) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "forward", arguments);
        }
        else {
            if (window.name == 'CocoonJS_App_ForCocoonJS_WebViewIFrame') {
                return window.parent.eval(javaScriptCode);
            }
            else {
                //return window.parent.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
                return window.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
            }
        }
    };

    /**
     * Makes a forward call of some javascript code to be executed in a different environment (i.e. from CocoonJS to the WebView and viceversa).
     * It is asyncrhonous so it does not wait until the code is executed and the result of it is returned. Instead, it calls a callback function when the execution has finished to pass the result.
     * @function
     * @param {string} javaScriptCode Some JavaScript code in a string to be forwarded and executed in a different JavaScript environment (i.e. from CocoonJS to the WebView and viceversa).
     * @param {function} [returnCallback] A function callback that will be called when the passed JavaScript code is executed in a different thread to pass the result of the execution in the different JavaScript environment.
     */
    CocoonJS.App.forwardAsync = function (javaScriptCode, returnCallback) {
        if (CocoonJS.App.nativeExtensionObjectAvailable && isNativeBridgeServiceAvailable()) {
            if (typeof returnCallback !== 'undefined') {
                return ext.IDTK_APP.makeCallAsync("forward", javaScriptCode, returnCallback);
            }
            else {
                return ext.IDTK_APP.makeCallAsync("forward", javaScriptCode);
            }
        }
        else {
            if (window.name == 'CocoonJS_App_ForCocoonJS_WebViewIFrame') {
                return window.parent.eval(javaScriptCode);
            }
            else {
                return window.parent.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
                // window.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.eval(javaScriptCode);
            }
        }
    };

    /**
     * Pops up a text dialog so the user can introduce some text and the application can get it back. It is the first approach CocoonJS has taken to be able to introduce
     * text input in a easy way. The dialog execution events are passed to the application through the {@link CocoonJS.App.onTextDialogFinished} and the {@link CocoonJS.App.onTextDialogCancelled} event objects.
     * @function
     * @param {string} [title] Default value is "". The title to be displayed in the dialog.
     * @param {string} [message] Default value is "". The message to be displayed in the dialog, next to the text input field.
     * @param {string} [text] Default value is "". The initial text to be introduced in the text input field.
     * @param {CocoonJS.App.KeyboardType} [keyboardType] Default value is {@link CocoonJS.App.KeyboardType.TEXT}. The keyboard type to be used when the text has to be introduced.
     * @param {string} [cancelButtonText] Default value is "". The text to be displayed in the cancel button of the dialog.
     * @param {string} [okButtonText] Default value is "". The text to be displayed in the ok button of the dialog.
     * @see CocoonJS.App.onTextDialogFinished
     * @see CocoonJS.App.onTextDialogCancelled
     */
    CocoonJS.App.showTextDialog = function (title, message, text, keyboardType, cancelButtonText, okButtonText) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "showTextDialog", arguments, true);
        }
        else if (!navigator.isCocoonJS) {
            if (!message) {
                message = "";
            }
            if (!text) {
                text = "";
            }
            setTimeout(function() {
                var result = prompt(message, text);
                var eventObject = result ? CocoonJS.App.onTextDialogFinished : CocoonJS.App.onTextDialogCancelled;
                eventObject.notifyEventListeners(result);
            }, 0);
        }
    };

    /**
     * Pops up a message dialog so the user can decide between a yes or no like confirmation. The message box execution events are passed to the application through the {@link CocoonJS.App.onMessageBoxConfirmed} and the {@link CocoonJS.App.onMessageBoxDenied} event objects.
     * @function
     * @param {string} [title] Default value is "". The title to be displayed in the dialog.
     * @param {string} [message] Default value is "". The message to be displayed in the dialog, next to the text input field.
     * @param {string} [confirmButtonText] Default value is "Yes". The text to be displayed for the confirm button.
     * @param {string} [denyButtonText] Default value is "No". The text to be displayed for the deny button.
     * @see CocoonJS.App.onMessageBoxConfirmed
     * @see CocoonJS.App.onMessageBoxDenied
     */
    CocoonJS.App.showMessageBox = function (title, message, confirmButtonText, denyButtonText) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "showMessageBox", arguments, true);
        }
        else if (!navigator.isCocoonJS) {
            if (!message) {
                message = "";
            }
            setTimeout(function() {
                var result = confirm(message);
                var eventObject = result ? CocoonJS.App.onMessageBoxConfirmed : CocoonJS.App.onMessageBoxDenied;
                eventObject.notifyEventListeners();
            }, 0);
        }
    };

    /**
     * It allows to load a new JavaScript/HTML5 resource that can be loaded either locally (inside the platform/device storage) or using a remote URL.
     * @function
     * @param {string} path A path to a resource stored in the platform or in a URL to a remote resource.
     * @param {CocoonJS.App.StorageType} [storageType] If the path argument represents a locally stored resource, the developer can specify the storage where it is stored. If no value is passes, the {@link CocoonJS.App.StorageType.APP_STORAGE} value is used by default.
     */
    CocoonJS.App.load = function (path, storageType) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "loadPath", arguments);
        }
        else if (!navigator.isCocoonJS) {
            var xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function (event) {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        // TODO: As window load event is not being called (WHY???), I have decided to call the listeners directly
                        // var callback= function(event){
                        //     window.removeEventListener("load", callback);
                        var jsCode;
                        // If there is no webview, it means we are in the webview, so notify the CocoonJS environment
                        if (!CocoonJS.App.EmulatedWebViewIFrame) {
                            jsCode = "window.CocoonJS && window.CocoonJS.App.onLoadInTheWebViewSucceed.notifyEventListeners('" + path + "');";
                        }
                        // If there is a webview, it means we are in CocoonJS, so notify the webview environment
                        else {
                            jsCode = "window.CocoonJS && window.CocoonJS.App.onLoadInCocoonJSSucceed.notifyEventListeners('" + path + "');";
                        }
                        CocoonJS.App.forwardAsync(jsCode);
                        // };
                        // window.addEventListener("load", callback);
                        window.location.href = path;
                    }
                    else if (xhr.status === 404) {
                        this.onreadystatechange = null;
                        var jsCode;
                        // If there is no webview, it means we are in the webview, so notify the CocoonJS environment
                        if (!CocoonJS.App.EmulatedWebViewIFrame) {
                            jsCode = "CocoonJS && CocoonJS.App.onLoadInTheWebViewFailed.notifyEventListeners('" + path + "');";
                        }
                        // If there is a webview, it means we are in CocoonJS, so notify the webview environment
                        else {
                            jsCode = "CocoonJS && CocoonJS.App.onLoadInCocoonJSFailed.notifyEventListeners('" + path + "');";
                        }
                        CocoonJS.App.forwardAsync(jsCode);
                    }
                }
            };
            xhr.open("GET", path, true);
            xhr.send();
        }
    };

    /**
     * Reloads the last loaded path in the current context.
     * @function
     */
    CocoonJS.App.reload = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "reload", arguments);
        }
        else if (!navigator.isCocoonJS) {
            if (window.name == 'CocoonJS_App_ForCocoonJS_WebViewIFrame') {
                return window.parent.location.reload();
            }
            else {
                return window.parent.frames['CocoonJS_App_ForCocoonJS_WebViewIFrame'].window.location.reload();
            }
        }
    };

    /**
     * Opens a given URL using a system service that is able to open it. For example, open a HTTP URL using the system WebBrowser.+
     * @function
     * @param {string} url The URL to be opened by a system service.
     */
    CocoonJS.App.openURL = function (url) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "openURL", arguments, true);
        }
        else if (!navigator.isCocoonJS) {
            window.open(url, '_blank');
        }
    }

    /**
     * Forces the app to be finished.
     * @function
     */
    CocoonJS.App.forceToFinish = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "forceToFinish", arguments);
        }
        else if (!navigator.isCocoonJS) {
            window.close();
        }
    }

    /**
     * Enables or disables the auto lock to control if the screen keeps on after an inactivity period.
     * When the auto lock is enabled and the application has no user input for a short period, the system puts the device into a "sleep” state where the screen dims or turns off.
     * When the auto lock is disabled the screen keeps on even when there is no user input for long times.
     * @param enabled A boolean value that controls whether to enable or disable the auto lock.
     */
    CocoonJS.App.setAutoLockEnabled = function (enabled) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "setAutoLockEnabled", arguments);
        }
    }

    /**
     * Creates a canvas element that is automatically resized to the screen size. When the app is being executed
     * inside CocoonJS. This canvas is optimized for rendering so it is higly recommended to use it if it fits
     * your app needs. If your app uses one canvas as the main canvas where all other canvases and images are displayed, Ludei recommends to
     * call this function in order to create this main canvas. A usual 2x performance gain is achieved by doing so
     * depending on the device and the graphics card driver.
     * @function
     * @return {object} The canvas object that should be used as the main canvas and that is resized to the screen resolution.
     */
    CocoonJS.App.createScreenCanvas = function () {
        var screenCanvas;
        if (navigator.isCocoonJS) {
            screenCanvas = document.createElement("screencanvas");
        }
        else if (!navigator.isCocoonJS) {
            screenCanvas = document.createElement("canvas");
            screenCanvas.width = window.innerWidth;
            screenCanvas.height = window.innerHeight;
        }
        return screenCanvas;
    };

    /**
     * Disables the touch events in the CocoonJS environment.
     * @function
     */
    CocoonJS.App.disableTouchInCocoonJS = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("disableTouchLayer", "CocoonJSView");
        }
    };

    /**
     * Enables the touch events in the CocoonJS environment.
     * @function
     */
    CocoonJS.App.enableTouchInCocoonJS = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("enableTouchLayer", "CocoonJSView");
        }
    };

    /**
     * Disables the touch events in the WebView environment.
     * @function
     */
    CocoonJS.App.disableTouchInTheWebView = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("disableTouchLayer", "WebView");
        }
    };

    /**
     * Enables the touch events in the WebView environment.
     * @function
     */
    CocoonJS.App.enableTouchInTheWebView = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("enableTouchLayer", "WebView");
        }
    };

    /**
     * Setups the update interval in seconds (1 second / X frames) to receive the accelerometer updates.
     * It defines the rate at which the devicemotion events are updated.
     * @function
     * @param {number} updateIntervalInSeconds The update interval in seconds to be set.
     */
    CocoonJS.App.setAccelerometerUpdateIntervalInSeconds = function (updateIntervalInSeconds) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("setAccelerometerUpdateIntervalInSeconds", updateIntervalInSeconds);
        }
    };

    /**
     * Returns the update interval in seconds that is currently set for accelerometer related events.
     * @function
     * @return {number} The update interval in seconds that is currently set for accelerometer related events.
     */
    CocoonJS.App.getAccelerometerUpdateIntervalInSeconds = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("getAccelerometerUpdateIntervalInSeconds");
        }
    };

    /**
     * Setups the update interval in seconds (1 second / X frames) to receive the gyroscope updates.
     * It defines the rate at which the devicemotion and deviceorientation events are updated.
     * @function
     * @param {number} updateIntervalInSeconds The update interval in seconds to be set.
     */
    CocoonJS.App.setGyroscopeUpdateIntervalInSeconds = function (updateIntervalInSeconds) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("setGyroscopeUpdateIntervalInSeconds", updateIntervalInSeconds);
        }
    };

    /**
     * Returns the update interval in seconds that is currently set for gyroscope related events.
     * @function
     * @return {number} The update interval in seconds that is currently set for gyroscope related events.
     */
    CocoonJS.App.getGyroscopeUpdateIntervalInSeconds = function () {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("getGyroscopeUpdateIntervalInSeconds");
        }
    };


    /**
     * Setups a origin proxy for a given typeName. What this means is that after calling this function the environment that makes this call will suddenly
     * have a way of creating instances of the given typeName and those instances will act as a transparent proxy to counterpart instances in the destination environment.
     * Manipulating attributes, calling funcitions or handling events will all be performed in the destination environment but the developer will think they will be
     * happening in the origin environment.
     * IMPORTANT NOTE: These proxies only work with types that use attributes and function parameters and return types that are primitive like numbers, strings or arrays.
     * @param {string} typeName The name of the type to be proxified.
     * @param {array} [attributeNames] A list of the names of the attributes to be proxified.
     * @param {array} [functionNames] A list of the names of the functions to be proxified.
     * @param {array} [eventHandlerNames] A list of the names of the event handlers to be proxified (onXXXX like attributes that represent callbacks).
     * A valid typeName and at least one valid array for attribute, function or event handler names is mandatory.
     */
    CocoonJS.App.setupOriginProxyType = function (typeName, attributeNames, functionNames, eventHandlerNames) {
        // Control the parameters.
        if (!typeName) throw "The given typeName must be valid.";
        if (!attributeNames && !functionNames && !eventHandlerNames) throw "There is no point on setting up a proxy for no attributes, functions nor eventHandlers.";
        attributeNames = attributeNames ? attributeNames : [];
        functionNames = functionNames ? functionNames : [];
        eventHandlerNames = eventHandlerNames ? eventHandlerNames : [];

        // The parent object will be the window. It could be another object but careful, the destination side should know about this.
        // TODO: Specify the parentObject as a parameter, obtain it's path from the window object and pass it to the destination environment so it knows about it.
        var parentObject = window;

        // Setup the destination side too.
        var jsCode = "CocoonJS.App.setupDestinationProxyType(" + JSON.stringify(typeName) + ", " + JSON.stringify(eventHandlerNames) + ");";
        CocoonJS.App.forward(jsCode);

        var originalType = parentObject[typeName];

        // Constructor. This will be the new proxified type in the origin environment. Instances of this type will be created by the developer without knowing that they are
        // internally calling to their counterparts in the destination environment.
        parentObject[typeName] = function () {
            var _this = this;

            // Each proxy object will have a origin object inside with all the necessary information to be a proxy to the destination.
            this._cocoonjs_proxy_object_data = {};
            // The id is obtained calling to the destination side to create an instance of the type.
            var jsCode = "CocoonJS.App.newDestinationProxyObject(" + JSON.stringify(typeName) + ");";
            this._cocoonjs_proxy_object_data.id = CocoonJS.App.forward(jsCode);
            // The eventHandlers dictionary contains objects of the type { eventHandlerName : string, eventHandler : function } to be able to make the callbacks when the 
            // webview makes the corresponding calls.
            this._cocoonjs_proxy_object_data.eventHandlers = {};
            // Also store the typename inside each instance.
            this._cocoonjs_proxy_object_data.typeName = typeName;
            // A dictionary to store the event handlers
            this._cocoonjs_proxy_object_data.eventListeners = {};

            // TODO: eventHandlers and eventListeners should be in the same list ;)

            // Store all the proxy instances in a list that belongs to the type itself.
            parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[this._cocoonjs_proxy_object_data.id] = this;

            // Create a setter and a getter for all the attribute names that have been specified. When the attributes are accessed (set or get) a call to the destination counterpart will be performed.
            for (var i = 0; i < attributeNames.length; i++) {
                (function (attributeName) {
                    _this.__defineSetter__(attributeName, function (value) {
                        var jsCode = "CocoonJS.App.setDestinationProxyObjectAttribute(" + JSON.stringify(typeName) + ", " + _this._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(attributeName) + ", " + JSON.stringify(value) + ");";
                        return CocoonJS.App.forward(jsCode);
                    });
                    _this.__defineGetter__(attributeName, function () {
                        var jsCode = "CocoonJS.App.getDestinationProxyObjectAttribute(" + JSON.stringify(typeName) + ", " + _this._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(attributeName) + ");";
                        return CocoonJS.App.forward(jsCode);
                    });
                })(attributeNames[i]);
            }

            // Create a function that performs a call to the destination environment counterpart for all the function names that have been specified.
            for (var i = 0; i < functionNames.length; i++) {
                (function (functionName) {
                    _this[functionName] = function () {
                        // Get the arguments as an array and add the typeName, the proxy id and the functionName before all the other arguments before making the call to the destination counterpart.
                        var argumentsArray = Array.prototype.slice.call(arguments);
                        argumentsArray.unshift(functionName);
                        argumentsArray.unshift(this._cocoonjs_proxy_object_data.id);
                        argumentsArray.unshift(typeName);
                        // Use the array to create the correct function call.
                        var jsCode = "CocoonJS.App.callDestinationProxyObjectFunction(";
                        for (var i = 0; i < argumentsArray.length; i++) {
                            // The second argument (the id) should not be stringified
                            jsCode += (i !== 1 ? JSON.stringify(argumentsArray[i]) : argumentsArray[i]) + (i < argumentsArray.length - 1 ? ", " : "");
                        }
                        jsCode += ");";
                        // TODO: This next call should be synchronous but it seems that some customers are experiencing some crash issues. Making it async solves these crashes.
                        // Another possible solution could be to be able to specify which calls could be async and which sync in the proxification array.
                        var ret = CocoonJS.App.forwardAsync(jsCode);
                        return ret;
                    };
                })(functionNames[i]);
            }

            // Create a setter and getter for all the event handler names that have been specified. When the event handlers are accessed, store them inside the corresponding position on the eventHandlers
            // array so they can be called when the destination environment makes the corresponding callback call.
            for (var i = 0; i < eventHandlerNames.length; i++) {
                (function (eventHandlerName) {
                    _this.__defineSetter__(eventHandlerName, function (value) {
                        _this._cocoonjs_proxy_object_data.eventHandlers[eventHandlerName] = value;
                    });
                    _this.__defineGetter__(eventHandlerName, function () {
                        return _this._cocoonjs_proxy_object_data.eventHandlers[eventHandlerName];
                    });
                })(eventHandlerNames[i]);
            }

            // Setup the add and remove event listeners in the proxy object
            _this.addEventListener = function (eventTypeName, eventCallback) {
                var addEventCallback = true;
                // Check for the eventListeners
                var eventListeners = _this._cocoonjs_proxy_object_data.eventListeners[eventTypeName];
                if (eventListeners) {
                    // As the eventListeners were already added, check that the same callback has not been added.
                    addEventCallback = eventListeners.indexOf(eventCallback) < 0;
                }
                else {
                    // There are no event listeners, so add the one and add the listeners array for the specific event type name
                    eventListeners = [];
                    _this._cocoonjs_proxy_object_data.eventListeners[eventTypeName] = eventListeners;

                    // Forward the call so the other end registers a event listener (only one is needed).
                    var jsCode = "CocoonJS.App.addDestinationProxyObjectEventListener(" + JSON.stringify(_this._cocoonjs_proxy_object_data.typeName) + ", " + _this._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(eventTypeName) + ");";
                    CocoonJS.App.forwardAsync(jsCode);
                }
                // Only if the alforithm above specify so, add the eventcallback and notify the destination environment to do the same
                if (addEventCallback) {
                    eventListeners.push(eventCallback);
                }
            };

            _this.removeEventListener = function (eventTypeName, eventCallback) {
                // Check for the eventListeners
                var eventListeners = _this._cocoonjs_proxy_object_data.eventListeners[eventTypeName];
                if (eventListeners) {
                    var eventCallbackIndex = eventListeners.indexOf(eventCallback);
                    if (eventCallbackIndex >= 0) {
                        eventListeners.splice(eventCallbackIndex, 1);
                    }
                }
            };

            // Return the proxy instance.
            return this;
        };

        // The type will contain a proxy data structure to store all the instances that are created so they are available when the destination environment calls back. 
        parentObject[typeName]._cocoonjs_proxy_type_data =
        {
            originalType:originalType,
            proxyObjects:[]
        };

        /**
         * Deletes a proxy instance from both the CocoonJS environment structures and also deleting it's webview environment counterpart.
         * This function should be manually called whenever a proxy instance won't be accessed anymore.
         * @param {object} object The proxy object to be deleted.
         */
        parentObject[typeName]._cocoonjs_proxy_type_data.deleteProxyObject = function (object) {
            var proxyObjectKey = CocoonJS.getKeyForValueInDictionary(this.proxyObjects, object);
            if (proxyObjectKey) {
                var jsCode = "CocoonJS.App.deleteDestinationProxyObject(" + JSON.stringify(typeName) + ", " + object._cocoonjs_proxy_object_data.id + ");";
                CocoonJS.App.forwardAsync(jsCode);
                object._cocoonjs_proxy_object_data = null;
                delete this.proxyObjects[proxyObjectKey];
            }
        };

        /**
         * Calls a event handler for the given proxy object id and eventHandlerName.
         * @param {number} id The id to be used to look for the proxy object for which to make the call to it's event handler.
         * @param {string} eventHandlerName The name of the handler to be called.
         * NOTE: Events are a complex thing in the HTML specification. This function just performs a call but at least provides a
         * structure to the event passing the target (the proxy object).
         * TODO: The destination should serialize the event object as far as it can so many parameters can be passed to the origin
         * side. Using JSON.stringify in the destination side and parse in origin side maybe? Still must add the target to the event structure though.
         */
        parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventHandler = function (id, eventHandlerName) {
            var object = this.proxyObjects[id];
            var eventHandler = object._cocoonjs_proxy_object_data.eventHandlers[eventHandlerName];
            if (eventHandler) {
                eventHandler({ target:object });
            }
        };

        parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventListeners = function (id, eventTypeName) {
            var object = this.proxyObjects[id];
            var eventListeners = object._cocoonjs_proxy_object_data.eventListeners[eventTypeName].slice();
            for (var i = 0; i < eventListeners.length; i++) {
                eventListeners[i]({ target:object });
            }
        };
    };

    /**
     * Takes down the proxification of a type and restores it to it's original type. Do not worry if you pass a type name that is not proxified yet. The
     * function will handle it correctly for compativility reasons.
     * @param {string} typeName The name of the type to be deproxified (take down the proxification and restore the type to it's original state)
     */
    CocoonJS.App.takedownOriginProxyType = function (typeName) {
        var parentObject = window;
        if (parentObject[typeName] && parentObject[typeName]._cocoonjs_proxy_type_data) {
            parentObject[typeName] = parentObject[typeName]._cocoonjs_proxy_type_data.originalType;
        }
    };

    /**
     * Deletes everything related to a proxy object in both environments. Do not worry of you do not pass a proxified object to the
     * function. For compatibility reasons, you can still have calls to this function even when no poxification of a type has been done.
     * @param {object} object The proxified object to be deleted.
     */
    CocoonJS.App.deleteOriginProxyObject = function (object) {
        var parentObject = window;
        if (object && object._cocoonjs_proxy_object_data) {
            parentObject[object._cocoonjs_proxy_object_data.typeName]._cocoonjs_proxy_type_data.deleteProxyObject(object);
        }
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the destination environment whenever it is needed to work with proxy objects.
     * It calls the origin proxy object when an event handler need to be updated/called from the destination environment.
     * @param {string} typeName The type name of the proxified type.
     * @param {number} id The id of the proxy object.
     * @param {string} eventHandlerName The name of the event handler to be called.
     */
    CocoonJS.App.callOriginProxyObjectEventHandler = function (typeName, id, eventHandlerName) {
        var parentObject = window;
        parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventHandler(id, eventHandlerName);
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the destination environment whenever it is needed to work with proxy objects.
     * It calls the origin proxy object when all the event listeners related to a specific event need to be updated/called from the destination environment.
     * @param {string} typeName The type name of the proxified type.
     * @param {number} id The id of the proxy object.
     * @param {string} eventTypeName The name of the event type to call the listeners related to it.
     */
    CocoonJS.App.callOriginProxyObjectEventListeners = function (typeName, id, eventTypeName) {
        var parentObject = window;
        parentObject[typeName]._cocoonjs_proxy_type_data.callProxyObjectEventListeners(id, eventTypeName);
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the origin environment whenever it is needed to work with proxy objects.
     * Setups all the structures that are needed to proxify a destination type to an origin type.
     * @param {string} typeName The name of the type to be proxified.
     * @param {array} eventHandlerNames An array with al the event handlers to be proxified. Needed in order to be able to create callbacks for all the event handlers
     * and call to the CocoonJS counterparts accordingly.
     */
    CocoonJS.App.setupDestinationProxyType = function (typeName, eventHandlerNames) {
        var parentObject = window;

        // Add a cocoonjs structure to the destination proxified type to store some useful information like all the proxy instances that are created, plus the id counter 
        // and the names of all the event handlers and some utility functions.
        parentObject[typeName]._cocoonjs_proxy_type_data =
        {
            nextId:0,
            proxyObjects:{},
            eventHandlerNames:eventHandlerNames
        }
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the origin environment whenever it is needed to work with proxy objects.
     * Takes down the proxy type at the destination environment. Just removes the data structure related to proxies that was added to the type when proxification tool place.
     * @param {string} typeName The name of the type to take the proxification down.
     */
    CocoonJS.App.takedownDestinationProxyType = function (typeName) {
        var parentObject = window;
        if (parent[typeName] && parentObject[typeName]._cocoonjs_proxy_type_data) {
            delete parentObject[typeName]._cocoonjs_proxy_type_data;
        }
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Creates a new destination object instance and generates a id to reference it from the original environment.
     * @param {string} typeName The name of the type to be proxified and to generate an instance.
     * @return The id to be used from the original environment to identify the corresponding destination object instance.
     */
    CocoonJS.App.newDestinationProxyObject = function (typeName) {
        var parentObject = window;

        var proxyObject = new parentObject[typeName]();
        // Also store some additional information in the proxy object
        proxyObject._cocoonjs_proxy_object_data = {};
        // Like the type name, that could be useful late ;)
        proxyObject._cocoonjs_proxy_object_data.typeName = typeName;
        // Caculate the id for the object. It will be returned to the origin environment so this object can be referenced later
        var proxyObjectId = parentObject[typeName]._cocoonjs_proxy_type_data.nextId;
        // Store the created object in the structure defined in the setup of proxification with an id associated to it
        parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[proxyObjectId] = proxyObject;
        // Also store the id inside the proxy object itself
        proxyObject._cocoonjs_proxy_object_data.id = proxyObjectId;
        // Calculate a new id for the next object.
        parentObject[typeName]._cocoonjs_proxy_type_data.nextId++;

        // Setup all the event handlers.
        for (var i = 0; i < parentObject[typeName]._cocoonjs_proxy_type_data.eventHandlerNames.length; i++) {
            (function (eventHandlerName) {
                proxyObject[eventHandlerName] = function (event) {
                    var proxyObject = this; // event.target;
                    // var eventHandlerName = CocoonJS.getKeyForValueInDictionary(proxyObject, this); // Avoid closures ;)
                    var jsCode = "CocoonJS.App.callOriginProxyObjectEventHandler(" + JSON.stringify(proxyObject._cocoonjs_proxy_object_data.typeName) + ", " + proxyObject._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(eventHandlerName) + ");";
                    CocoonJS.App.forwardAsync(jsCode);
                };
            })(parentObject[typeName]._cocoonjs_proxy_type_data.eventHandlerNames[i]);
        }

        // Add the dictionary where the event listeners (callbacks) will be added.
        proxyObject._cocoonjs_proxy_object_data.eventListeners = {};

        return proxyObjectId;
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the origin environement whenever it is needed to work with proxy objects.
     * Calls a function of a destination object idetified by it's typeName and id.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     * @param {string} functionName The name of the function to be called.
     * @return Whatever the function call returns.
     */
    CocoonJS.App.callDestinationProxyObjectFunction = function (typeName, id, functionName) {
        var parentObject = window;
        var argumentsArray = Array.prototype.slice.call(arguments);
        argumentsArray.splice(0, 3);
        var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
        var result = proxyObject[functionName].apply(proxyObject, argumentsArray);
        return result;
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Sets a value to the corresponding attributeName of a proxy object represented by it's typeName and id.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     * @param {string} attributeName The name of the attribute to be set.
     * @param {unknown} attributeValue The value to be set to the attribute.
     */
    CocoonJS.App.setDestinationProxyObjectAttribute = function (typeName, id, attributeName, attributeValue) {
        var parentObject = window;
        var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
        proxyObject[attributeName] = attributeValue;
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Retrieves the value of the corresponding attributeName of a proxy object represented by it's typeName and id.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     * @param {string} attributeName The name of the attribute to be retrieved.
     */
    CocoonJS.App.getDestinationProxyObjectAttribute = function (typeName, id, attributeName) {
        var parentObject = window;
        var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
        return proxyObject[attributeName];
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     * Deletes a proxy object identifying it using it's typeName and id. Deleting a proxy object mainly means to remove the instance from the global structure
     * that hold all the instances.
     * @param {string} typeName The name of the type of the proxy.
     * @param {number} id The id of the proxy object.
     */
    CocoonJS.App.deleteDestinationProxyObject = function (typeName, id) {
        var parentObject = window;
        delete parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];
    };

    /**
     * @ignore
     * NOTE: This function should never be directly called. It will be called from the original environment whenever it is needed to work with proxy objects.
     */
    CocoonJS.App.addDestinationProxyObjectEventListener = function (typeName, id, eventTypeName) {
        var parentObject = window;
        // Look for the proxy object
        var proxyObject = parentObject[typeName]._cocoonjs_proxy_type_data.proxyObjects[id];

        var callback = function (event) {
            var proxyObject = this; // event.target;
            // var eventTypeName = CocoonJS.getKeyForValueInDictionary(proxyObject._cocoonjs_proxy_object_data.eventListeners, this); // Avoid closures ;)
            // TODO: Is there a way to retrieve the callbackId without a closure?
            var jsCode = "CocoonJS.App.callOriginProxyObjectEventListeners(" + JSON.stringify(proxyObject._cocoonjs_proxy_object_data.typeName) + ", " + proxyObject._cocoonjs_proxy_object_data.id + ", " + JSON.stringify(eventTypeName) + ");";
            CocoonJS.App.forwardAsync(jsCode);
        };

        proxyObject._cocoonjs_proxy_object_data.eventListeners[eventTypeName] = callback;

        // Finally add the event listener callback to the proxy object
        proxyObject.addEventListener(eventTypeName, callback);
    };

    // TODO: We could add a removeDestinationProxyObjectEventListener although it seems that is not completely necessary.

    /**
     * Proxifies the XMLHttpRequest type for the environment where this call is made. After calling this function, all the new objects
     * of XMLHttpRequest that are instantiated, will be proxified objects that will make calls to the counterparts in the other environment (CocoonJS <-> WebView viceversa).
     * IMPORTANT NOTE: Remember to take down the proxification once you are done or to delete proxy objects whenever they are not needed anymore or memory leaks may occur.
     */
    CocoonJS.App.proxifyXHR = function () {
        var ATTRIBUTE_NAMES =
            [
                "timeout",
                "withCredentials",
                "upload",
                "status",
                "statusText",
                "responseType",
                "response",
                "responseText",
                "responseXML",
                "readyState"
            ];
        var FUNCTION_NAMES =
            [
                "open",
                "setRequestHeader",
                "send",
                "abort",
                "getResponseHeader",
                "getAllResponseHeaders",
                "overrideMimeType"
            ];
        var EVENT_HANDLER_NAMES =
            [
                "onloadstart",
                "onprogress",
                "onabort",
                "onerror",
                "onload",
                "ontimeout",
                "onloadend",
                "onreadystatechange"
            ];
        CocoonJS.App.setupOriginProxyType("XMLHttpRequest", ATTRIBUTE_NAMES, FUNCTION_NAMES, EVENT_HANDLER_NAMES);
    };

    /**
     * Proxifies the Audio type for the environment where this call is made. After calling this function, all the new objects
     * of Audio that are instantiated, will be proxified objects that will make calls to the counterparts in the other environment (CocoonJS <-> WebView viceversa).
     * IMPORTANT NOTE: Remember to take down the proxification once you are done or to delete proxy objects whenever they are not needed anymore or memory leaks may occur.
     */
    CocoonJS.App.proxifyAudio = function () {
        var ATTRIBUTE_NAMES =
            [
                "src",
                "loop",
                "volume",
                "preload"
            ];
        var FUNCTION_NAMES =
            [
                "play",
                "pause",
                "load",
                "canPlayType"
            ];
        var EVENT_HANDLER_NAMES =
            [
                "onended",
                "oncanplay",
                "oncanplaythrough",
                "onerror"
            ];
        CocoonJS.App.setupOriginProxyType("Audio", ATTRIBUTE_NAMES, FUNCTION_NAMES, EVENT_HANDLER_NAMES);
    };

    /**
     * Captures a image of the screen synchronously and saves it to a file. Sync mode allows to capture the screen in the middle of a frame rendering.
     * @param {string} fileName Desired file name and format (png or jpg). If no value is passed, "capture.png" value is used by default
     * @param {CocoonJS.App.StorageType} storageType The developer can specify the storage where it is stored. If no value is passed, the {@link CocoonJS.App.StorageType.TMP_STORAGE} value is used by default.
     * @param {CocoonJS.App.CaptureType} captureType. Optional value to choose capture type. [0: captures everything, 1: only captures cocoonjs surface 2: only captures system views]. @see CocoonJS.App.CaptureType
     * @return The URL of the saved file.
     * @throws exception if the image fails to be stored or there is another error.
     * @see CocoonJS.App.onCaptureScreenSucceeded
     * @see CocoonJS.App.onCaptureScreenFailed
     */
    CocoonJS.App.captureScreen = function (fileName, storageType, captureType) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("captureScreen", fileName, storageType, captureType);
        }
    };

    /**
     * Captures a image of the screen asynchronously and saves it to a file.
     * Async mode captures a final frame as soon as possible.
     * @param {string} Desired file name and format (png or jpg). If no value is passed, "capture.png" value is used by default
     * @param {CocoonJS.App.StorageType} [storageType] The developer can specify the storage where it is stored. If no value is passed, the {@link CocoonJS.App.StorageType.TMP_STORAGE} value is used by default.
     * @param {CocoonJS.App.CaptureType} captureType. Optional value to choose capture type. [0: captures everything, 1: only captures cocoonjs surface, 2: only captures system views]. @see CocoonJS.App.CaptureType
     * @param {function} callback. Response callback, check the error property to monitor errors. Check the 'url' property to get the URL of the saved Image
     */
    CocoonJS.App.captureScreenAsync = function (fileName, storageType, captureType, callback) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCallAsync("captureScreen", fileName, storageType, captureType, callback);
        }
    };

    /**
     * Returns the device UUID
     * @return {string} The device UUID
     */
    CocoonJS.App.getDeviceId = function() {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("getDeviceId");
        }
    };

    /**
     * Structure that defines the getDeviceInfo returned information
     */
    CocoonJS.App.DeviceInfo = {

        /**
        * The operating system name (ios, android,...)
        * @type string
        */
        os: null,

        /**
        * The operating system version (4.2.2, 5.0,...)
        * @type string
        */
        version: null,

        /**
        * The operating system screen density in dpi
        * @type string
        */
        dpi: null,

        /**
        * The device manufacturer (apple, samsung, lg,...)
        * @type string
        */
        brand: null,

        /**
        * The device model (iPhone 4S, SAMSUNG-SGH-I997, SAMSUNG-SGH-I997R, etc)
        * @type string
        */
        model: null,

        /**
        * The phone IMEI
        * Android: The phone IMEI is returned or null if the device has not telepohny
        * iOS: null is returned as we cannot get the IMEI in iOS, no public API available for that yet.
        * @type string
        */
        imei: null,

        /**
        * The platform Id
        * Android: The ANDROID_ID is used.
        * iOS: The OpenUDID is used as there is no Android ANDROID_ID equivalent in iOS
        * @type string
        */
        platformId: null,

        /**
        * The Odin generated id https://code.google.com/p/odinmobile/
        * @type string
        */
        odin: null,

        /**
        * The OpenUDID generated Id https://github.com/ylechelle/OpenUDID
        * @type string
        */
        openudid: null
    };

    /**
     * Returns the device Info
     * @return {CocoonJS.App.DeviceInfo} The device Info
     */
    CocoonJS.App.getDeviceInfo = function() {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("getDeviceInfo");
        }
    };

    /**
     *
     * @constructor
     */
    CocoonJS.App.WebDialog = function() {

        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            this.webDialogID = window.ext.IDTK_APP.makeCall("createWebDialog");
        }
        else {
            var iframe = document.createElement("iframe");
            iframe.id = "CocoonJSWebDialogIFrame";
            iframe.name = "CocoonJSWebDialogIFrame";
            iframe.style.cssText = "position:fixed;left:0;top:0;bottom:0;right:0; width:100%; height:100%;margin:0;padding:0;";
            var me = this;
            iframe.onload = function(){
                me.iframeloaded = true;
                var js = "CocoonJS = {}; CocoonJS.WebDialog = {}; CocoonJS.WebDialog.close = function()" +
                    "{" +
                    "   window.parent.CocoonJSCloseWebDialog();" +
                    "};";
                me.evalIframe(js);
                for (var i = 0; i < me.pendingEvals.length; ++i) {
                    me.evalIframe(me.pendingEvals[i]);
                }
                me.pendingEvals = [];
            }
            iframe.onerror = function(){
                me.close();
            }
            this.iframe = iframe;
            this.pendingEvals = [];

            window.CocoonJSCloseWebDialog = function() {
               me.close();
            }
        }

    }

    CocoonJS.App.WebDialog.prototype = {

        show: function(url, callback) {
            this.closeCallback = function() {
                CocoonJS.App.enableTouchInCocoonJS();
                if (callback)
                    callback();
            }
            if (CocoonJS.App.nativeExtensionObjectAvailable) {
                CocoonJS.App.disableTouchInCocoonJS();
                return window.ext.IDTK_APP.makeCallAsync("showWebDialog", this.webDialogID, url, this.closeCallback);
            }
            else {
                this.iframe.src = url;
                document.body.appendChild(this.iframe);
            }

        },
        close: function() {
            if (CocoonJS.App.nativeExtensionObjectAvailable) {
                return window.ext.IDTK_APP.makeCallAsync("closeWebDialog", this.webDialogID);
            }
            else {
                if (this.iframe.parentNode) {
                    this.iframe.parentNode.removeChild(this.iframe);
                }
            }
            if (this.closeCallback)
                this.closeCallback();
        },
        evalIframe: function(js) {
            window.frames["CocoonJSWebDialogIFrame"].eval(js);
        },
        eval: function(js) {
            if (CocoonJS.App.nativeExtensionObjectAvailable) {
                return window.ext.IDTK_APP.makeCallAsync("evalWebDialog", this.webDialogID, js);
            }
            else {
                if (this.iframeloaded)
                    this.evalIframe(js);
                else
                    this.pendingEvals.push(js);
            }
        }

    };


    /**
    * Retrieves the preferred orientation that has been set in the system.
    * @return {number} The preferred orientation in the system as a combination of the possible {@link CocoonJS.App.Orientations}
    */
    CocoonJS.App.getPreferredOrientation = function() {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            return window.ext.IDTK_APP.makeCall("getPreferredOrientation");
        }
        else {
            return 0;
        }
    };

    /**
    * Sets the preferred orientation in the system.
    * @param {number} preferredOrientation The preferred orientation to be set. A combinatio of the possible {@link CocoonJS.App.Orientations}
    */
    CocoonJS.App.setPreferredOrientation = function(preferredOrientation) {
        if (CocoonJS.App.nativeExtensionObjectAvailable) {
            window.ext.IDTK_APP.makeCall("setPreferredOrientation", preferredOrientation);
        }
    }

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by accepting it's content.
     * The callback function's documentation is represented by {@link CocoonJS.App.OnTextDialogFinishedListener}
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onTextDialogFinished = new CocoonJS.EventHandler("IDTK_APP", "App", "ontextdialogfinish");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by dismissing it's content.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onTextDialogCancelled = new CocoonJS.EventHandler("IDTK_APP", "App", "ontextdialogcancel");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by accepting it's content.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onMessageBoxConfirmed = new CocoonJS.EventHandler("IDTK_APP", "App", "onmessageboxconfirmed");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the text dialog is finished by dismissing it's content.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onMessageBoxDenied = new CocoonJS.EventHandler("IDTK_APP", "App", "onmessageboxdenied");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the application is suspended.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onSuspended = new CocoonJS.EventHandler("IDTK_APP", "App", "onsuspended");

    /**
     * This {@link CocoonJS.EventHandler} object allows listening to events called when the application is activated.
     * The callback function does not receive any parameter.
     * @event
     * @static
     * @memberOf CocoonJS.App
     */
    CocoonJS.App.onActivated = new CocoonJS.EventHandler("IDTK_APP", "App", "onactivated");

})();

/*C:\uniserver\www\hdp\public_html\lib/CocoonJS_App_ForCocoonJS.js*/
(function()
{
    if (typeof window.CocoonJS === 'undefined' || window.CocoonJS === null) throw("The CocoonJS object must exist and be valid before adding more functionalities to an extension.");
    if (typeof window.CocoonJS.App === 'undefined' || window.CocoonJS.App === null) throw("The CocoonJS.App object must exist and be valid before adding more functionalities to it.");

    /**
    * This namespace represents all the basic functionalities available in the CocoonJS extension API.
    * @namespace
    */
    CocoonJS.App = CocoonJS.App ? CocoonJS.App : {};

    /**
     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.App.onLoadInTheWebViewSucceed} event calls.
     * @name OnLoadInTheWebViewSucceedListener
     * @function
     * @static
     * @memberOf CocoonJS.App
     * @param {string} pageURL The URL of the page that had been loaded in the webview.
     */
    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the WebView load has completed successfully.
    * The callback function's documentation is represented by {@link CocoonJS.App.OnLoadInTheWebViewSucceedListener}
    * @event
    * @static
    * @memberOf CocoonJS.App
    * @param {string} pageURL A string that represents the page URL loaded.
    */
    CocoonJS.App.onLoadInTheWebViewSucceed = new CocoonJS.EventHandler("IDTK_APP", "App", "forwardpageload");

    /**
     * FOR DOCUMENTATION PURPOSE ONLY! The documentation of the function callback for the {@link CocoonJS.App.onLoadInTheWebViewFailed} event calls.
     * @name OnLoadInTheWebViewFailedListener
     * @function
     * @static
     * @memberOf CocoonJS.App
     * @param {string} pageURL The URL of the page that had been loaded in the webview.
     */
    /**
    * This {@link CocoonJS.EventHandler} object allows listening to events called when the WebView load fails.
    * The callback function's documentation is represented by {@link CocoonJS.App.OnLoadInTheWebViewFailedListener}
    * @event
    * @static
    * @memberOf CocoonJS.App
    */
    CocoonJS.App.onLoadInTheWebViewFailed = new CocoonJS.EventHandler("IDTK_APP", "App", "forwardpagefail");

    function checkEmulatedWebViewReady() {
        var emulatedWB = CocoonJS.App.EmulatedWebView;
        if (emulatedWB) {
            return; //ready
        }

        emulatedWB = document.createElement('div'); 
        emulatedWB.setAttribute('id', 'CocoonJS_App_ForCocoonJS_WebViewDiv'); 
        emulatedWB.style.width = 0; 
        emulatedWB.style.height = 0; 
        emulatedWB.style.position = "absolute"; 
        emulatedWB.style.left = 0; 
        emulatedWB.style.top = 0;
        emulatedWB.style.backgroundColor = 'transparent';
        emulatedWB.style.border = "0px solid #000"; 

        var frame = document.createElement("IFRAME");
        frame.setAttribute('id', 'CocoonJS_App_ForCocoonJS_WebViewIFrame');
        frame.setAttribute('name', 'CocoonJS_App_ForCocoonJS_WebViewIFrame');
        frame.style.width = 0; 
        frame.style.height = 0; 
        frame.frameBorder = 0;
        frame.allowtransparency = true;

        emulatedWB.appendChild(frame);
        CocoonJS.App.EmulatedWebView = emulatedWB;
        CocoonJS.App.EmulatedWebViewIFrame = frame;

        if(!document.body) {
            document.body = document.createElement("body");
        }
        document.body.appendChild(CocoonJS.App.EmulatedWebView);
    }

    /**
    * Pauses the CocoonJS JavaScript execution loop.
    * @function
    * @augments CocoonJS.App
    */
    CocoonJS.App.pause = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "pause", arguments);
        }
    };

    /**
    * Resumes the CocoonJS JavaScript execution loop.
    * @static
    * @function
    */
    CocoonJS.App.resume = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "resume", arguments);
        }
    };

    /**
    * Loads a resource in the WebView environment from the CocoonJS environment.
    * @function
    * @param {string} path The path to the resource. It can be a remote URL or a path to a local file.
    * @param {CocoonJS.App.StorageType} [storageType] An optional parameter to specify at which storage in the device the file path is stored. By default, APP_STORAGE is used.
    * @see CocoonJS.App.load
    * @see CocoonJS.App.onLoadInTheWebViewSucceed
    * @see CocoonJS.App.onLoadInTheWebViewFailed
    */
    CocoonJS.App.loadInTheWebView = function(path, storageType)
    {
        if (navigator.isCocoonJS && CocoonJS.App.nativeExtensionObjectAvailable)
        {
            CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "loadInTheWebView", arguments)
        }
        else
        {
            var xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function(event) {
                if (xhr.readyState === 4)
                {
                    if (xhr.status === 200)
                    {

                        checkEmulatedWebViewReady();
                        var callback= function(event){
                            CocoonJS.App.onLoadInTheWebViewSucceed.notifyEventListeners(path);
                            CocoonJS.App.EmulatedWebViewIFrame.removeEventListener("load", callback);
                        };

                        CocoonJS.App.EmulatedWebViewIFrame.addEventListener(
                            "load", 
                            callback
                        );
                        CocoonJS.App.EmulatedWebViewIFrame.contentWindow.location.href= path;
                    }
                    else if (xhr.status === 404)
                    {
                        this.onreadystatechange = null;
                        CocoonJS.App.onLoadInTheWebViewFailed.notifyEventListeners(path);
                    }
                }
            };
            xhr.open("GET", path, true);
            xhr.send();
        }
    };

    /**
     * Reloads the last loaded path in the WebView context.
     * @function
     */
    CocoonJS.App.reloadWebView = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable && navigator.isCocoonJS)
        {
            CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "reloadWebView", arguments);
        }
        else
        {
            checkEmulatedWebViewReady();
            CocoonJS.App.EmulatedWebViewIFrame.contentWindow.location.reload();
        }
    };

    /**
    * Shows the webview.
    * @function
    * @param {int} x The top lef x coordinate of the rectangle where the webview will be shown.
    * @param {int} y The top lef y coordinate of the rectangle where the webview will be shown.
    * @param {width} y The width of the rectangle where the webview will be shown.
    * @param {height} y The height of the rectangle where the webview will be shown.
    */
    CocoonJS.App.showTheWebView = function(x, y, width, height)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable && navigator.isCocoonJS)
        {
            CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "showTheWebView", arguments)
        }
        else
        {
            checkEmulatedWebViewReady();
            CocoonJS.App.EmulatedWebViewIFrame.style.width = (width ? width/window.devicePixelRatio : window.innerWidth)+'px';
            CocoonJS.App.EmulatedWebViewIFrame.style.height = (height ? height/window.devicePixelRatio : window.innerHeight)+'px';
            CocoonJS.App.EmulatedWebView.style.left = (x ? x : 0)+'px';
            CocoonJS.App.EmulatedWebView.style.top = (y ? y : 0)+'px';
            CocoonJS.App.EmulatedWebView.style.width = (width ? width/window.devicePixelRatio : window.innerWidth)+'px';
            CocoonJS.App.EmulatedWebView.style.height = (height ? height/window.devicePixelRatio : window.innerHeight)+'px';
            CocoonJS.App.EmulatedWebView.style.display = "block";

            console.log(CocoonJS.App.EmulatedWebViewIFrame.style.cssText);
        }
    };

    /**
    * Hides the webview.
    * @function
    */
    CocoonJS.App.hideTheWebView = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            var javaScriptCodeToForward = "ext.IDTK_APP.makeCall('hide');";
            return CocoonJS.App.forwardAsync(javaScriptCodeToForward);
        }
        else if (!navigator.isCocoonJS)
        {
            checkEmulatedWebViewReady();
            CocoonJS.App.EmulatedWebView.style.display = "none";
        }
    };

    /**
    * Marks a audio file to be used as music by the system. CocoonJS, internally, differentiates among music files and sound files.
    * Music files are usually bigger in size and longer in duration that sound files. There can only be just one music file 
    * playing at a specific given time. The developer can mark as many files as he/she wants to be treated as music. When the corresponding
    * HTML5 audio object is used, the system will automatically know how to treat the audio resource as music or as sound.
    * Note that it is not mandatory to use this function. The system automatically tries to identify if a file is suitable to be treated as music
    * or as sound by checking file size and duration thresholds. It is recommended, though, that the developer specifies him/herself what he/she considers
    * to be music.
    * @function
    * @param {string} audioFilePath The same audio file path that will be used to create HTML5 audio objects.
    */
    CocoonJS.App.markAsMusic = function(audioFilePath)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
           return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "addForceMusic", arguments);
        }
    };

    /**
    * Activates or deactivates the antialas functionality from the CocoonJS rendering.
    * @function
    * @param {boolean} enable A flag that indicates if the antialas should be activated (true) or deactivated (false).
    */
    CocoonJS.App.setAntialias = function(enable)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
           return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "setDefaultAntialias", arguments);
        }
    };

    /**
    * Sets a callback function that will be called whenever the system tries to finish the app.
    * The developer can specify how the system will react to the finish of the app by returning a
    * boolean value in the callback function: true means, close the app, false means that the developer
    * will handle the app close.
    * A common example of this is the back button in Android devices. When the back button is pressed, this
    * callback will be called and the system will react depending on the developers choice finishing, or not,
    * the application.
    * @function
    * @param {function} appShouldFinishCallback A function object that will be called when the system
    * determines that the app should be finished. This function must return a true or a false value
    * depending on what the developer wants: true === finish the app, false === do not close the app.
    */
    CocoonJS.App.setAppShouldFinishCallback = function(appShouldFinishCallback)
    {
        if (navigator.isCocoonJS)
        {
            window.onidtkappfinish = appShouldFinishCallback;
        }
    }

    /**
    * Sets the texture reduction options. The texture reduction is a process that allows big images to be reduced/scaled down when they are loaded.
    * Although the quality of the images may decrease, it can be very useful in low end devices or those with limited amount of memory.
    * The function sets the threshold on image size (width or height) that will be used in order to know if an image should be reduced or not.
    * It also allows to specify a list of strings to identify in which images file paths should be applied (when they meet the size threshold requirement) 
    * The developer will still think that the image is of the original size. CocoonJS handles all of the internals to be able to show the image correctly.
    * IMPORTANT NOTE: This function should be called when the application is initialized before any image is set to be loaded for obvious reasons ;).
    * and in which sould be forbid (even if they meet the threshold requirement).
    * @function
    * @param {number} sizeThreshold This parameter specifies the minimun size (either width or height) that an image should have in order to be reduced.
    * @param {string or array} [applyTo] This parameter can either be a string or an array of strings. It's purpose is to specify one (the string) or more (the array) substring(s) 
    * that will be compared against the file path of an image to be loaded in order to know if the reduction should be applied or not. If the image meets the
    * threshold size requirement and it's file path contains this string (or strings), it will be reduced. This parameter can also be null.
    * @param {string or array} [forbidFor] This parameter can either be a string or an array of strings. It's purpose is to specify one (the string) or more (the array) substring(s) 
    * that will be compared against the file path of an image to be loaded in order to know if the reduction should be applied or not. If the image meets the
    * threshold size requirement and it's file path contains this string (or strings), it won't be reduced. This parameter should be used in order to mantain the 
    * quality of some images even they meet the size threshold requirement.
    */
    CocoonJS.App.setTextureReduction = function(sizeThreshold, applyTo, forbidFor)
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "setDefaultTextureReducerThreshold", arguments);
        }
    };


    /**
    * Prints to the console the memory usage of the currently alive textures
    * @function
    */
    CocoonJS.App.logMemoryInfo = function()
    {
        if (CocoonJS.App.nativeExtensionObjectAvailable)
        {
            return CocoonJS.makeNativeExtensionObjectFunctionCall("IDTK_APP", "logMemoryInfo", arguments);
        }
    };

    /**
    * Enable CocoonJS Webview FPS overlay.
    * @function
    */
    CocoonJS.App.enableFPSInTheWebView = function(fpsLayout, textColor)
    {
        if (!CocoonJS.App.fpsInTheWebViewEnabled)
        {
            fpsLayout = fpsLayout ? fpsLayout : CocoonJS.App.FPSLayout.TOP_RIGHT;
            textColor = textColor ? textColor : "white";
            var jsCode = "" +
                "(function()" +
                "{" +
                    "var COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES = ['js/CocoonJSExtensions/CocoonJS.js', 'js/CocoonJSExtensions/CocoonJS_App.js', 'js/CocoonJSExtensions/CocoonJS_App_ForWebView.js'];" +
                    "var loadedScriptCounter = 0;" + 
                    "var loadedScriptFunction = function() " +
                    "{ " +
                        "loadedScriptCounter++;"+
                        "if (loadedScriptCounter >= COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES.length)"+
                        "{"+
                            "CocoonJS.App.enableFPS(" + JSON.stringify(fpsLayout) + ", " + JSON.stringify(textColor) + ");"+
                        "}"+
                    "};"+
                    "for (var i = 0; i < COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES.length; i++)"+
                    "{"+
                        "var s = document.createElement('script');"+
                        "s.onload = loadedScriptFunction;"+
                        "s.src = COCOONJS_WEBVIEW_EXTENSION_SCRIPT_FILES[i];"+
                        "document.body.appendChild(s);"+
                    "}" +
                "})();";
            setTimeout(function()
            {
                CocoonJS.App.forward(jsCode);
            }, 3000);
            CocoonJS.App.fpsInTheWebViewEnabled = true;
        }
    };

    /**
    * Disable CocoonJS Webview FPS overlay.
    * @function
    */
    CocoonJS.App.disableFPSInTheWebView = function()
    {
        // TODO: Implement this function.
    };

    
})();

/*C:\uniserver\www\hdp\public_html\lib/m-crafty.js*/
/**
 * crafty 0.6.2
 * http://craftyjs.com/
 *
 * Copyright 2014, Louis Stowasser
 * Dual licensed under the MIT or GPL licenses.
 */


var Crafty = {};
var version = "0.6.2";
var document = window.document;



/**
 * Spatial HashMap for broad phase collision
 *
 * @author Louis Stowasser
 */

    /**@
     * #Crafty.HashMap.constructor
     * @comp Crafty.HashMap
     * @sign public void Crafty.HashMap([cellsize])
     * @param cellsize - the cell size. If omitted, `cellsize` is 64.
     *
     * Set `cellsize`.
     * And create `this.map`.
     */
    var cellsize,

        HashMap = function (cell) {
            cellsize = cell || 64;
            this.map = {};
        },

        SPACE = " ",
        keyHolder = {};

    HashMap.prototype = {
        /**@
         * #Crafty.map.insert
         * @comp Crafty.map
         * @sign public Object Crafty.map.insert(Object obj)
         * @param obj - An entity to be inserted.
         *
         * `obj` is inserted in '.map' of the corresponding broad phase cells. An object of the following fields is returned.
         * ~~~
         * - the object that keep track of cells (keys)
         * - `obj`
         * - the HashMap object
         * ~~~
         */
        insert: function (obj) {
            var keys = HashMap.key(obj),
                entry = new Entry(keys, obj, this),
                i = 0,
                j,
                hash;

            //insert into all x buckets
            for (i = keys.x1; i <= keys.x2; i++) {
                //insert into all y buckets
                for (j = keys.y1; j <= keys.y2; j++) {
                    hash = (i << 16) ^ j;
                    if (!this.map[hash]) this.map[hash] = [];
                    this.map[hash].push(obj);
                }
            }

            return entry;
        },

        /**@
         * #Crafty.map.search
         * @comp Crafty.map
         * @sign public Object Crafty.map.search(Object rect[, Boolean filter])
         * @param rect - the rectangular region to search for entities.
         * @param filter - Default value is true. Otherwise, must be false.
         *
         * - If `filter` is `false`, just search for all the entries in the give `rect` region by broad phase collision. Entity may be returned duplicated.
         * - If `filter` is `true`, filter the above results by checking that they actually overlap `rect`.
         * The easier usage is with `filter`=`true`. For performance reason, you may use `filter`=`false`, and filter the result yourself. See examples in drawing.js and collision.js
         */

        search: function (rect, filter) {
            var keys = HashMap.key(rect, keyHolder),
                i, j, k,
                results = [];

            if (filter === undefined) filter = true; //default filter to true

            //search in all x buckets
            for (i = keys.x1; i <= keys.x2; i++) {
                //insert into all y buckets
                for (j = keys.y1; j <= keys.y2; j++) {
                    cell = this.map[(i << 16) ^ j];
                    if (cell) {
                        for (k = 0; k < cell.length; k++)
                            results.push(cell[k]);
                    }
                }
            }

            if (filter) {
                var obj, id, finalresult = [],
                    found = {};
                //add unique elements to lookup table with the entity ID as unique key
                for (i = 0, l = results.length; i < l; i++) {
                    obj = results[i];
                    if (!obj) continue; //skip if deleted
                    id = obj[0]; //unique ID
                    obj = obj._mbr || obj;
                    //check if not added to hash and that actually intersects
                    if (!found[id] && obj._x < rect._x + rect._w && obj._x + obj._w > rect._x &&
                        obj._y < rect._y + rect._h && obj._h + obj._y > rect._y)
                        found[id] = results[i];
                }

                //loop over lookup table and copy to final array
                for (obj in found) finalresult.push(found[obj]);

                return finalresult;
            } else {
                return results;
            }
        },

        /**@
         * #Crafty.map.remove
         * @comp Crafty.map
         * @sign public void Crafty.map.remove([Object keys, ]Object obj)
         * @param keys - key region. If omitted, it will be derived from obj by `Crafty.HashMap.key`.
         * @param obj - need more document.
         *
         * Remove an entity in a broad phase map.
         * - The second form is only used in Crafty.HashMap to save time for computing keys again, where keys were computed previously from obj. End users should not call this form directly.
         *
         * @example
         * ~~~
         * Crafty.map.remove(e);
         * ~~~
         */
        remove: function (keys, obj) {
            var i = 0,
                j, hash;

            if (arguments.length == 1) {
                obj = keys;
                keys = HashMap.key(obj, keyHolder);
            }

            //search in all x buckets
            for (i = keys.x1; i <= keys.x2; i++) {
                //insert into all y buckets
                for (j = keys.y1; j <= keys.y2; j++) {
                    hash = (i << 16) ^ j;

                    if (this.map[hash]) {
                        var cell = this.map[hash],
                            m, n = cell.length;
                        //loop over objs in cell and delete
                        for (m = 0; m < n; m++)
                            if (cell[m] && cell[m][0] === obj[0])
                                cell.splice(m, 1);
                    }
                }
            }
        },

        /**@
         * #Crafty.map.refresh
         * @comp Crafty.map
         * @sign public void Crafty.map.remove(Entry entry)
         * @param entry - An entry to update
         *
         * Refresh an entry's keys, and its position in the broad phrase map.
         *
         * @example
         * ~~~
         * Crafty.map.refresh(e);
         * ~~~
         */
        refresh: function (entry) {
            var keys = entry.keys;
            var obj = entry.obj;
            var cell, i, j, m, n;

            //First delete current object from appropriate cells
            for (i = keys.x1; i <= keys.x2; i++) {
                for (j = keys.y1; j <= keys.y2; j++) {
                    cell = this.map[(i << 16) ^ j];
                    if (cell) {
                        n = cell.length;
                        //loop over objs in cell and delete
                        for (m = 0; m < n; m++)
                            if (cell[m] && cell[m][0] === obj[0])
                                cell.splice(m, 1);
                    }
                }
            }

            //update keys
            HashMap.key(obj, keys);

            //insert into all rows and columns
            for (i = keys.x1; i <= keys.x2; i++) {
                for (j = keys.y1; j <= keys.y2; j++) {
                    cell = this.map[(i << 16) ^ j];
                    if (!cell) cell = this.map[(i << 16) ^ j] = [];
                    cell.push(obj);
                }
            }

            return entry;
        },




        /**@
         * #Crafty.map.boundaries
         * @comp Crafty.map
         * @sign public Object Crafty.map.boundaries()
         *
         * The return `Object` is of the following format.
         * ~~~
         * {
         *   min: {
         *     x: val_x,
         *     y: val_y
         *   },
         *   max: {
         *     x: val_x,
         *     y: val_y
         *   }
         * }
         * ~~~
         */
        boundaries: function () {
            var k, ent,
                hash = {
                    max: {
                        x: -Infinity,
                        y: -Infinity
                    },
                    min: {
                        x: Infinity,
                        y: Infinity
                    }
                },
                coords = {
                    max: {
                        x: -Infinity,
                        y: -Infinity
                    },
                    min: {
                        x: Infinity,
                        y: Infinity
                    }
                };

            //Using broad phase hash to speed up the computation of boundaries.
            for (var h in this.map) {
                if (!this.map[h].length) continue;

                //broad phase coordinate
                var i = h >> 16,
                    j = (h << 16) >> 16;
                if (j < 0) {
                    i = i ^ -1;
                }
                if (i >= hash.max.x) {
                    hash.max.x = i;
                    for (k in this.map[h]) {
                        ent = this.map[h][k];
                        //make sure that this is a Crafty entity
                        if (typeof ent == 'object' && 'requires' in ent) {
                            coords.max.x = Math.max(coords.max.x, ent.x + ent.w);
                        }
                    }
                }
                if (i <= hash.min.x) {
                    hash.min.x = i;
                    for (k in this.map[h]) {
                        ent = this.map[h][k];
                        if (typeof ent == 'object' && 'requires' in ent) {
                            coords.min.x = Math.min(coords.min.x, ent.x);
                        }
                    }
                }
                if (j >= hash.max.y) {
                    hash.max.y = j;
                    for (k in this.map[h]) {
                        ent = this.map[h][k];
                        if (typeof ent == 'object' && 'requires' in ent) {
                            coords.max.y = Math.max(coords.max.y, ent.y + ent.h);
                        }
                    }
                }
                if (j <= hash.min.y) {
                    hash.min.y = j;
                    for (k in this.map[h]) {
                        ent = this.map[h][k];
                        if (typeof ent == 'object' && 'requires' in ent) {
                            coords.min.y = Math.min(coords.min.y, ent.y);
                        }
                    }
                }
            }

            return coords;
        }
    };

    /**@
     * #Crafty.HashMap
     * @category 2D
     * Broad-phase collision detection engine. See background information at
     *
     * - [N Tutorial B - Broad-Phase Collision](http://www.metanetsoftware.com/technique/tutorialB.html)
     * - [Broad-Phase Collision Detection with CUDA](http.developer.nvidia.com/GPUGems3/gpugems3_ch32.html)
     * @see Crafty.map
     */

    /**@
     * #Crafty.HashMap.key
     * @comp Crafty.HashMap
     * @sign public Object Crafty.HashMap.key(Object obj)
     * @param obj - an Object that has .mbr() or _x, _y, _w and _h.
     * Get the rectangular region (in terms of the grid, with grid size `cellsize`), where the object may fall in. This region is determined by the object's bounding box.
     * The `cellsize` is 64 by default.
     *
     * @see Crafty.HashMap.constructor
     */
    HashMap.key = function (obj, keys) {
        if (obj._mbr) {
            obj = obj._mbr;
        }
        if (!keys) {
            keys = {};
        }

        keys.x1 = Math.floor(obj._x / cellsize);
        keys.y1 = Math.floor(obj._y / cellsize);
        keys.x2 = Math.floor((obj._w + obj._x) / cellsize);
        keys.y2 = Math.floor((obj._h + obj._y) / cellsize);
        return keys;
    };

    HashMap.hash = function (keys) {
        return keys.x1 + SPACE + keys.y1 + SPACE + keys.x2 + SPACE + keys.y2;
    };

    function Entry(keys, obj, map) {
        this.keys = keys;
        this.map = map;
        this.obj = obj;
    }

    Entry.prototype = {
        update: function (rect) {
            //check if buckets change
            if (HashMap.hash(HashMap.key(rect, keyHolder)) != HashMap.hash(this.keys)) {
                this.map.refresh(this);
            }
        }
    };







/**@
 * #Crafty
 * @category Core
 * Select a set of or single entities by components or an entity's ID.
 *
 * Crafty uses syntax similar to jQuery by having a selector engine to select entities by their components.
 *
 * If there is more than one match, the return value is an Array-like object listing the ID numbers of each matching entity. If there is exactly one match, the entity itself is returned. If you're not sure how many matches to expect, check the number of matches via Crafty(...).length. Alternatively, use Crafty(...).each(...), which works in all cases.
 *
 * @example
 * ~~~
 *    Crafty("MyComponent")
 *    Crafty("Hello 2D Component")
 *    Crafty("Hello, 2D, Component")
 * ~~~
 *
 * The first selector will return all entities that have the component `MyComponent`. The second will return all entities that have `Hello` and `2D` and `Component` whereas the last will return all entities that have at least one of those components (or).
 *
 * ~~~
 *   Crafty("*")
 * ~~~
 * Passing `*` will select all entities.
 *
 * ~~~
 *   Crafty(1)
 * ~~~
 * Passing an integer will select the entity with that `ID`.
 *
 * To work directly with an array of entities, use the `get()` method on a selection.
 * To call a function in the context of each entity, use the `.each()` method.
 *
 * The event related methods such as `bind` and `trigger` will work on selections of entities.
 *
 * @see .get
 * @see .each
 */

var Crafty = function (selector) {
    return new Crafty.fn.init(selector);
},
    // Internal variables
    GUID, frame, components, entities, handlers, onloads,
    slice, rlist, rspace, milliSecPerFrame;


    initState = function () {
        GUID = 1, //GUID for entity IDs
        frame = 0;

        components = {}; //map of components and their functions
        entities = {}; //map of entities and their data
        handlers = {}; //global event handlers
        onloads = []; //temporary storage of onload handlers

        slice = Array.prototype.slice;
        rlist = /\s*,\s*/;
        rspace = /\s+/;
    };

initState();

/**@
 * #Crafty Core
 * @category Core
 * @trigger NewEntityName - After setting new name for entity - String - entity name
 * @trigger NewComponent - when a new component is added to the entity - String - Component
 * @trigger RemoveComponent - when a component is removed from the entity - String - Component
 * @trigger Remove - when the entity is removed by calling .destroy()
 *
 * Set of methods added to every single entity.
 */
Crafty.fn = Crafty.prototype = {

    init: function (selector) {
        //select entities by component
        if (typeof selector === "string") {
            var elem = 0, //index elements
                e, //entity forEach
                current,
                and = false, //flags for multiple
                or = false,
                del,
                comps,
                score,
                i, l;

            if (selector === '*') {
                i = 0;
                for (e in entities) {
                    // entities is something like {2:entity2, 3:entity3, 11:entity11, ...}
                    // The for...in loop sets e to "2", "3", "11", ... i.e. all
                    // the entity ID numbers. e is a string, so +e converts to number type.
                    this[i] = +e;
                    i++;
                }
                this.length = i;
                // if there's only one entity, return the actual entity
                if (i === 1) {
                    return entities[this[0]];
                }
                return this;
            }

            //multiple components OR
            if (selector.indexOf(',') !== -1) {
                or = true;
                del = rlist;
                //deal with multiple components AND
            } else if (selector.indexOf(' ') !== -1) {
                and = true;
                del = rspace;
            }

            //loop over entities
            for (e in entities) {
                if (!entities.hasOwnProperty(e)) continue; //skip
                current = entities[e];

                if (and || or) { //multiple components
                    comps = selector.split(del);
                    i = 0;
                    l = comps.length;
                    score = 0;

                    for (; i < l; i++) //loop over components
                        if (current.__c[comps[i]]) score++; //if component exists add to score

                        //if anded comps and has all OR ored comps and at least 1
                    if (and && score === l || or && score > 0) this[elem++] = +e;

                } else if (current.__c[selector]) this[elem++] = +e; //convert to int
            }

            //extend all common components
            if (elem > 0 && !and && !or) this.extend(components[selector]);
            if (comps && and)
                for (i = 0; i < l; i++) this.extend(components[comps[i]]);

            this.length = elem; //length is the last index (already incremented)

            // if there's only one entity, return the actual entity
            if (elem === 1) {
                return entities[this[elem - 1]];
            }

        } else { //Select a specific entity

            if (!selector) { //nothin passed creates God entity
                selector = 0;
                if (!(selector in entities)) entities[selector] = this;
            }

            //if not exists, return undefined
            if (!(selector in entities)) {
                this.length = 0;
                return this;
            }

            this[0] = selector;
            this.length = 1;

            //update from the cache
            if (!this.__c) this.__c = {};

            //update to the cache if NULL
            if (!entities[selector]) entities[selector] = this;
            return entities[selector]; //return the cached selector
        }

        return this;
    },

    /**@
     * #.setName
     * @comp Crafty Core
     * @sign public this .setName(String name)
     * @param name - A human readable name for debugging purposes.
     *
     * @example
     * ~~~
     * this.setName("Player");
     * ~~~
     */
    setName: function (name) {
        var entityName = String(name);

        this._entityName = entityName;

        this.trigger("NewEntityName", entityName);
        return this;
    },

    /**@
     * #.addComponent
     * @comp Crafty Core
     * @sign public this .addComponent(String componentList)
     * @param componentList - A string of components to add separated by a comma `,`
     * @sign public this .addComponent(String Component1[, .., String ComponentN])
     * @param Component# - Component ID to add.
     * Adds a component to the selected entities or entity.
     *
     * Components are used to extend the functionality of entities.
     * This means it will copy properties and assign methods to
     * augment the functionality of the entity.
     *
     * For adding multiple components, you can either pass a string with
     * all the component names (separated by commas), or pass each component name as
     * an argument.
     *
     * If the component has a function named `init` it will be called.
     *
     * If the entity already has the component, the component is skipped (nothing happens).
     *
     * @example
     * ~~~
     * this.addComponent("2D, Canvas");
     * this.addComponent("2D", "Canvas");
     * ~~~
     */
    addComponent: function (id) {
        var uninit = [],
            c = 0,
            ul, //array of components to init
            i = 0,
            l, comps, comp;

        //add multiple arguments
        if (arguments.length > 1) {
            l = arguments.length;
            for (; i < l; i++) {
                uninit.push(arguments[i]);
            }
            //split components if contains comma
        } else if (id.indexOf(',') !== -1) {
            comps = id.split(rlist);
            l = comps.length;
            for (; i < l; i++) {
                uninit.push(comps[i]);
            }
            //single component passed
        } else {
            uninit.push(id);
        }

        //extend the components
        ul = uninit.length;
        for (; c < ul; c++) {
            if (this.__c[uninit[c]] === true)
                continue;
            this.__c[uninit[c]] = true;
            comp = components[uninit[c]];
            this.extend(comp);
            //if constructor, call it
            if (comp && "init" in comp) {
                comp.init.call(this);
            }
        }

        this.trigger("NewComponent", uninit);
        return this;
    },

    /**@
     * #.toggleComponent
     * @comp Crafty Core
     * @sign public this .toggleComponent(String ComponentList)
     * @param ComponentList - A string of components to add or remove separated by a comma `,`
     * @sign public this .toggleComponent(String Component1[, .., String componentN])
     * @param Component# - Component ID to add or remove.
     * Add or Remove Components from an entity.
     *
     * @example
     * ~~~
     * var e = Crafty.e("2D,DOM,Test");
     * e.toggleComponent("Test,Test2"); //Remove Test, add Test2
     * e.toggleComponent("Test,Test2"); //Add Test, remove Test2
     * ~~~
     *
     * ~~~
     * var e = Crafty.e("2D,DOM,Test");
     * e.toggleComponent("Test","Test2"); //Remove Test, add Test2
     * e.toggleComponent("Test","Test2"); //Add Test, remove Test2
     * e.toggleComponent("Test");         //Remove Test
     * ~~~
     */
    toggleComponent: function (toggle) {
        var i = 0,
            l, comps;
        if (arguments.length > 1) {
            l = arguments.length;

            for (; i < l; i++) {
                if (this.has(arguments[i])) {
                    this.removeComponent(arguments[i]);
                } else {
                    this.addComponent(arguments[i]);
                }
            }
            //split components if contains comma
        } else if (toggle.indexOf(',') !== -1) {
            comps = toggle.split(rlist);
            l = comps.length;
            for (; i < l; i++) {
                if (this.has(comps[i])) {
                    this.removeComponent(comps[i]);
                } else {
                    this.addComponent(comps[i]);
                }
            }

            //single component passed
        } else {
            if (this.has(toggle)) {
                this.removeComponent(toggle);
            } else {
                this.addComponent(toggle);
            }
        }

        return this;
    },

    /**@
     * #.requires
     * @comp Crafty Core
     * @sign public this .requires(String componentList)
     * @param componentList - List of components that must be added
     *
     * Makes sure the entity has the components listed. If the entity does not
     * have the component, it will add it.
     *
     * (In the current version of Crafty, this function behaves exactly the same
     * as `addComponent`. By convention, developers have used `requires` for
     * component dependencies -- i.e. to indicate specifically that one component
     * will only work properly if another component is present -- and used
     * `addComponent` in all other situations.)
     *
     * @see .addComponent
     */
    requires: function (list) {
        return this.addComponent(list);
    },

    /**@
     * #.removeComponent
     * @comp Crafty Core
     * @sign public this .removeComponent(String Component[, soft])
     * @param component - Component to remove
     * @param soft - Whether to soft remove it (defaults to `true`)
     *
     * Removes a component from an entity. A soft remove (the default) will only
     * refrain `.has()` from returning true. Hard will remove all
     * associated properties and methods.
     *
     * @example
     * ~~~
     * var e = Crafty.e("2D,DOM,Test");
     * e.removeComponent("Test");        //Soft remove Test component
     * e.removeComponent("Test", false); //Hard remove Test component
     * ~~~
     */
    removeComponent: function (id, soft) {
        var comp = components[id];
        this.trigger("RemoveComponent", id);
        if (comp && "remove" in comp) {
            comp.remove.call(this, false);
        }
        if (soft === false && comp) {
            for (var prop in comp) {
                delete this[prop];
            }
        }
        delete this.__c[id];


        return this;
    },

    /**@
     * #.getId
     * @comp Crafty Core
     * @sign public Number .getId(void)
     * Returns the ID of this entity.
     *
     * For better performance, simply use the this[0] property.
     *
     * @example
     * Finding out the `ID` of an entity can be done by returning the property `0`.
     * ~~~
     *    var ent = Crafty.e("2D");
     *    ent[0]; //ID
     *    ent.getId(); //also ID
     * ~~~
     */
    getId: function () {
        return this[0];
    },

    /**@
     * #.has
     * @comp Crafty Core
     * @sign public Boolean .has(String component)
     * Returns `true` or `false` depending on if the
     * entity has the given component.
     *
     * For better performance, simply use the `.__c` object
     * which will be `true` if the entity has the component or
     * will not exist (or be `false`).
     */
    has: function (id) {
        return !!this.__c[id];
    },

    /**@
     * #.attr
     * @comp Crafty Core
     * @sign public this .attr(String property, * value)
     * @param property - Property of the entity to modify
     * @param value - Value to set the property to
     * @sign public this .attr(Object map)
     * @param map - Object where the key is the property to modify and the value as the property value
     * @trigger Change - when properties change - {key: value}
     *
     * Use this method to set any property of the entity.
     *
     * @example
     * ~~~
     * this.attr({key: "value", prop: 5});
     * this.key; //value
     * this.prop; //5
     *
     * this.attr("key", "newvalue");
     * this.key; //newvalue
     * ~~~
     */
    attr: function (key, value) {
        if (arguments.length === 1) {
            //if just the key, return the value
            if (typeof key === "string") {
                return this[key];
            }

            //extend if object
            this.extend(key);
            this.trigger("Change", key); //trigger change event
            return this;
        }
        //if key value pair
        this[key] = value;

        var change = {};
        change[key] = value;
        this.trigger("Change", change); //trigger change event
        return this;
    },

    /**@
     * #.toArray
     * @comp Crafty Core
     * @sign public this .toArray(void)
     *
     * This method will simply return the found entities as an array of ids.  To get an array of the actual entities, use `get()`.
     * @see .get
     */
    toArray: function () {
        return slice.call(this, 0);
    },

    /**@
    * #.timeout
    * @comp Crafty Core
    * @sign public this .timeout(Function callback, Number delay)
    * @param callback - Method to execute after given amount of milliseconds
    * @param delay - Amount of milliseconds to execute the method
    *
    * The delay method will execute a function after a given amount of time in milliseconds.
    *
    * Essentially a wrapper for `setTimeout`.
    *
    * @example
    * Destroy itself after 100 milliseconds
    * ~~~
    * this.timeout(function() {
         this.destroy();
    * }, 100);
    * ~~~
    */
    timeout: function (callback, duration) {
        this.each(function () {
            var self = this;
            setTimeout(function () {
                callback.call(self);
            }, duration);
        });
        return this;
    },

    /**@
     * #.bind
     * @comp Crafty Core
     * @sign public this .bind(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute when the event is triggered
     * Attach the current entity (or entities) to listen for an event.
     *
     * Callback will be invoked when an event with the event name passed
     * is triggered. Depending on the event, some data may be passed
     * via an argument to the callback function.
     *
     * The first argument is the event name (can be anything) whilst the
     * second argument is the callback. If the event has data, the
     * callback should have an argument.
     *
     * Events are arbitrary and provide communication between components.
     * You can trigger or bind an event even if it doesn't exist yet.
     *
     * Unlike DOM events, Crafty events are exectued synchronously.
     *
     * @example
     * ~~~
     * this.attr("triggers", 0); //set a trigger count
     * this.bind("myevent", function() {
     *     this.triggers++; //whenever myevent is triggered, increment
     * });
     * this.bind("EnterFrame", function() {
     *     this.trigger("myevent"); //trigger myevent on every frame
     * });
     * ~~~
     *
     * @see .trigger, .unbind
     */
    bind: function (event, callback) {

        // (To learn how the handlers object works, see inline comment at Crafty.bind)

        //optimization for 1 entity
        if (this.length === 1) {
            if (!handlers[event]) handlers[event] = {};
            var h = handlers[event];

            if (!h[this[0]]) h[this[0]] = []; //init handler array for entity
            h[this[0]].push(callback); //add current callback
            return this;
        }

        this.each(function () {
            //init event collection
            if (!handlers[event]) handlers[event] = {};
            var h = handlers[event];

            if (!h[this[0]]) h[this[0]] = []; //init handler array for entity
            h[this[0]].push(callback); //add current callback
        });
        return this;
    },

    /**@
     * #.uniqueBind
     * @comp Crafty Core
     * @sign public Number .uniqueBind(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns ID of the current callback used to unbind
     *
     * Works like Crafty.bind, but prevents a callback from being bound multiple times.
     *
     * @see .bind
     */
    uniqueBind: function (event, callback) {
        this.unbind(event, callback);
        this.bind(event, callback);

    },

    /**@
     * #.one
     * @comp Crafty Core
     * @sign public Number one(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns ID of the current callback used to unbind
     *
     * Works like Crafty.bind, but will be unbound once the event triggers.
     *
     * @see .bind
     */
    one: function (event, callback) {
        var self = this;
        var oneHandler = function (data) {
            callback.call(self, data);
            self.unbind(event, oneHandler);
        };
        return self.bind(event, oneHandler);

    },

    /**@
     * #.unbind
     * @comp Crafty Core
     * @sign public this .unbind(String eventName[, Function callback])
     * @param eventName - Name of the event to unbind
     * @param callback - Function to unbind
     * Removes binding with an event from current entity.
     *
     * Passing an event name will remove all events bound to
     * that event. Passing a reference to the callback will
     * unbind only that callback.
     * @see .bind, .trigger
     */
    unbind: function (event, callback) {
        // (To learn how the handlers object works, see inline comment at Crafty.bind)
        this.each(function () {
            var hdl = handlers[event],
                i = 0,
                l, current;
            //if no events, cancel
            if (hdl && hdl[this[0]]) l = hdl[this[0]].length;
            else return this;

            //if no function, delete all
            if (!callback) {
                delete hdl[this[0]];
                return this;
            }
            //look for a match if the function is passed
            for (; i < l; i++) {
                current = hdl[this[0]];
                if (current[i] == callback) {
                    delete current[i];
                }
            }
        });

        return this;
    },

    /**@
     * #.trigger
     * @comp Crafty Core
     * @sign public this .trigger(String eventName[, Object data])
     * @param eventName - Event to trigger
     * @param data - Arbitrary data that will be passed into every callback as an argument
     * Trigger an event with arbitrary data. Will invoke all callbacks with
     * the context (value of `this`) of the current entity object.
     *
     * *Note: This will only execute callbacks within the current entity, no other entity.*
     *
     * The first argument is the event name to trigger and the optional
     * second argument is the arbitrary event data. This can be absolutely anything.
     *
     * Unlike DOM events, Crafty events are exectued synchronously.
     */
    trigger: function (event, data) {
        // (To learn how the handlers object works, see inline comment at Crafty.bind)
		// Aquí se triggerean los eventos: MouseDown, MouseMove, MouseOut, 
        /*if (event != "Draw" && event != "FrameChange" && event != "Invalidate")
			console.log("trigger " + event);*/
		
		if (this.length === 1) {
            //find the handlers assigned to the event and entity
            if (handlers[event] && handlers[event][this[0]]) {
                var callbacks = handlers[event][this[0]],
                    i;
                for (i = 0; i < callbacks.length; i++) {
                    if (typeof callbacks[i] === "undefined") {
                        callbacks.splice(i, 1);
                        i--;
                    } else {
                        callbacks[i].call(this, data);
                    }
                }
            }
            return this;
        }

        this.each(function () {
            //find the handlers assigned to the event and entity
            if (handlers[event] && handlers[event][this[0]]) {
                var callbacks = handlers[event][this[0]],
                    i;
                for (i = 0; i < callbacks.length; i++) {
                    if (typeof callbacks[i] === "undefined") {
                        callbacks.splice(i, 1);
                        i--;
                    } else {
                        callbacks[i].call(this, data);
                    }
                }
            }
        });
        return this;
    },

    /**@
     * #.each
     * @comp Crafty Core
     * @sign public this .each(Function method)
     * @param method - Method to call on each iteration
     * Iterates over found entities, calling a function for every entity.
     *
     * The function will be called for every entity and will pass the index
     * in the iteration as an argument. The context (value of `this`) of the
     * function will be the current entity in the iteration.
     *
     * @example
     * Destroy every second 2D entity
     * ~~~
     * Crafty("2D").each(function(i) {
     *     if(i % 2 === 0) {
     *         this.destroy();
     *     }
     * });
     * ~~~
     */
    each: function (func) {
        var i = 0,
            l = this.length;
        for (; i < l; i++) {
            //skip if not exists
            if (!entities[this[i]]) continue;
            func.call(entities[this[i]], i);
        }
        return this;
    },

    /**@
     * #.get
     * @comp Crafty Core
     * @sign public Array .get()
     * @returns An array of entities corresponding to the active selector
     * 
     * @sign public Entity .get(Number index)
     * @returns an entity belonging to the current selection
     * @param index - The index of the entity to return.  If negative, counts back from the end of the array.
     * 
     *
     * @example
     * Get an array containing every "2D" entity
     * ~~~
     * var arr = Crafty("2D").get()
     * ~~~
     * Get the first entity matching the selector
     * ~~~
     * // equivalent to Crafty("2D").get()[0], but doesn't create a new array
     * var e = Crafty("2D").get(0)
     * ~~~
     * Get the last "2D" entity matching the selector
     * ~~~
     * var e = Crafty("2D").get(-1)
     * ~~~
     * 
     */
    get: function(index) {
        var l = this.length;
        if (typeof index !== "undefined") {
            if (index >= l || index+l < 0)
                return undefined;
            if (index>=0)
                return entities[this[index]];
            else
                return entities[this[index+l]];
        } else {
            var i=0, result = [];
            for (; i < l; i++) {
                //skip if not exists
                if (!entities[this[i]]) continue;
                result.push( entities[this[i]] );
            }
            return result;
        }
    },

    /**@
     * #.clone
     * @comp Crafty Core
     * @sign public Entity .clone(void)
     * @returns Cloned entity of the current entity
     *
     * Method will create another entity with the exact same
     * properties, components and methods as the current entity.
     */
    clone: function () {
        var comps = this.__c,
            comp,
            prop,
            clone = Crafty.e();

        for (comp in comps) {
            clone.addComponent(comp);
        }
        for (prop in this) {
            if (prop != "0" && prop != "_global" && prop != "_changed" && typeof this[prop] != "function" && typeof this[prop] != "object") {
                clone[prop] = this[prop];
            }
        }

        return clone;
    },

    /**@
     * #.setter
     * @comp Crafty Core
     * @sign public this .setter(String property, Function callback)
     * @param property - Property to watch for modification
     * @param callback - Method to execute if the property is modified
     * Will watch a property waiting for modification and will then invoke the
     * given callback when attempting to modify.
     *
     */
    setter: function (prop, callback) {
        if (Crafty.support.setter) {
            this.__defineSetter__(prop, callback);
        } else if (Crafty.support.defineProperty) {
            Object.defineProperty(this, prop, {
                set: callback,
                configurable: true
            });
        }
        return this;
    },

    /**@
     * #.destroy
     * @comp Crafty Core
     * @sign public this .destroy(void)
     * Will remove all event listeners and delete all properties as well as removing from the stage
     */
    destroy: function () {
        //remove all event handlers, delete from entities
        this.each(function () {
            var comp;
            this.trigger("Remove");
            for (var compName in this.__c) {
                comp = components[compName];
                if (comp && "remove" in comp)
                    comp.remove.call(this, true);
            }
            for (var e in handlers) {
                this.unbind(e);
            }

            delete entities[this[0]];
        });
    }
};

//give the init instances the Crafty prototype
Crafty.fn.init.prototype = Crafty.fn;


/**@
 * #Crafty.extend
 * @category Core
 * Used to extend the Crafty namespace.
 *
 */
Crafty.extend = Crafty.fn.extend = function (obj) {
    var target = this,
        key;

    //don't bother with nulls
    if (!obj) return target;

    for (key in obj) {
        if (target === obj[key]) continue; //handle circular reference
        target[key] = obj[key];
    }

    return target;
};


Crafty.extend({
    /**@
     * #Crafty.init
     * @category Core
     * @trigger Load - Just after the viewport is initialised. Before the EnterFrame loops is started
     * @sign public this Crafty.init([Number width, Number height, String stage_elem])
     * @sign public this Crafty.init([Number width, Number height, HTMLElement stage_elem])
     * @param Number width - Width of the stage
     * @param Number height - Height of the stage
     * @param String or HTMLElement stage_elem - the element to use for the stage
     *
     * Sets the element to use as the stage, creating it if necessary.  By default a div with id 'cr-stage' is used, but if the 'stage_elem' argument is provided that will be used instead.  (see `Crafty.viewport.init`)
     *
     * Starts the `EnterFrame` interval. This will call the `EnterFrame` event for every frame.
     *
     * Can pass width and height values for the stage otherwise will default to window size (see `Crafty.DOM.window`).
     *
     * All `Load` events will be executed.
     *
     * Uses `requestAnimationFrame` to sync the drawing with the browser but will default to `setInterval` if the browser does not support it.
     * @see Crafty.stop,  Crafty.viewport
     */
    init: function (w, h, stage_elem) {
        Crafty.viewport.init(w, h, stage_elem);
		Crafty.canvas.init();
		
        //call all arbitrary functions attached to onload
        this.trigger("Load");
        this.timer.init();

        return this;
    },

    /**@
     * #Crafty.getVersion
     * @category Core
     * @sign public String Crafty.getVersion()
     * @returns Current version of Crafty as a string
     *
     * Return current version of crafty
     *
     * @example
     * ~~~
     * Crafty.getVersion(); //'0.5.2'
     * ~~~
     */
    getVersion: function () {
        return version;
    },

    /**@
     * #Crafty.stop
     * @category Core
     * @trigger CraftyStop - when the game is stopped
     * @sign public this Crafty.stop([bool clearState])
     * @param clearState - if true the stage and all game state is cleared.
     *
     * Stops the EnterFrame interval and removes the stage element.
     *
     * To restart, use `Crafty.init()`.
     * @see Crafty.init
     */
    stop: function (clearState) {
        this.timer.stop();
        if (clearState) {
            Crafty.audio.remove();
            if (Crafty.stage && Crafty.stage.elem.parentNode) {
                var newCrStage = document.createElement('div');
                newCrStage.id = Crafty.stage.elem.id;
                Crafty.stage.elem.parentNode.replaceChild(newCrStage, Crafty.stage.elem);
            }
            initState();
        }

        Crafty.trigger("CraftyStop");

        return this;
    },

    /**@
     * #Crafty.pause
     * @category Core
     * @trigger Pause - when the game is paused
     * @trigger Unpause - when the game is unpaused
     * @sign public this Crafty.pause(void)
     *
     * Pauses the game by stopping the EnterFrame event from firing. If the game is already paused it is unpaused.
     * You can pass a boolean parameter if you want to pause or unpause mo matter what the current state is.
     * Modern browsers pauses the game when the page is not visible to the user. If you want the Pause event
     * to be triggered when that happens you can enable autoPause in `Crafty.settings`.
     *
     * @example
     * Have an entity pause the game when it is clicked.
     * ~~~
     * button.bind("click", function() {
     *     Crafty.pause();
     * });
     * ~~~
     */
    pause: function (toggle) {
        if (arguments.length === 1 ? toggle : !this._paused) {
            this.trigger('Pause');
            this._paused = true;
            setTimeout(function () {
                Crafty.timer.stop();
            }, 0);
            Crafty.keydown = {};
        } else {
            this.trigger('Unpause');
            this._paused = false;
            setTimeout(function () {
                Crafty.timer.init();
            }, 0);
        }
        return this;
    },

    /**@
     * #Crafty.isPaused
     * @category Core
     * @sign public this Crafty.isPaused()
     *
     * Check whether the game is already paused or not.
     *
     * @example
     * ~~~
     * Crafty.isPaused();
     * ~~~
     */
    isPaused: function () {
        return this._paused;
    },

    /**@
     * #Crafty.timer
     * @category Game Loop
     * Handles game ticks
     */
    timer: (function () {
        /*
         * `window.requestAnimationFrame` or its variants is called for animation.
         * `.requestID` keeps a record of the return value previous `window.requestAnimationFrame` call.
         * This is an internal variable. Used to stop frame.
         */
        var tick, requestID;

        // Internal variables used to control the game loop.  Use Crafty.timer.steptype() to set these.
        var mode = "fixed",
            maxFramesPerStep = 5,
            maxTimestep = 40;

        // variables used by the game loop to track state
        var endTime = 0,
            timeSlip = 0,
            gameTime;

        // Controls the target rate of fixed mode loop.  Set these with the Crafty.timer.FPS function
        var FPS = 50,
            milliSecPerFrame = 1000 / FPS;




        return {
            init: function () {
                // When first called, set the  gametime one frame before now!
                if (typeof gameTime === "undefined")
                    gameTime = (new Date().getTime()) - milliSecPerFrame;
                var onFrame = window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimationFrame ||
                    null;

                if (onFrame) {
                    tick = function () {
                        Crafty.timer.step();
                        requestID = onFrame(tick);
                        //console.log(requestID + ', ' + frame)
                    };

                    tick();
                } else {
                    tick = setInterval(function () {
                        Crafty.timer.step();
                    }, 1000 / FPS);
                }
            },

            stop: function () {
                Crafty.trigger("CraftyStopTimer");

                if (typeof tick === "number") clearInterval(tick);

                var onFrame = window.cancelRequestAnimationFrame ||
                    window.webkitCancelRequestAnimationFrame ||
                    window.mozCancelRequestAnimationFrame ||
                    window.oCancelRequestAnimationFrame ||
                    window.msCancelRequestAnimationFrame ||
                    null;

                if (onFrame) onFrame(requestID);
                tick = null;
            },


            /**@
             * #Crafty.timer.steptype
             * @comp Crafty.timer
             * @sign public void Crafty.timer.steptype(mode [, maxTimeStep])
             * Can be called to set the type of timestep the game loop uses
             * @param mode - the type of time loop.  Allowed values are "fixed", "semifixed", and "variable".  Crafty defaults to "fixed".
             * @param mode - For "fixed", sets the max number of frames per step.   For "variable" and "semifixed", sets the maximum time step allowed.
             *
             * * In "fixed" mode, each frame is sent the same value of `dt`, and to achieve the target game speed, mulitiple frame events are triggered before each render.
             * * In "variable" mode, there is only one frame triggered per render.  This recieves a value of `dt` equal to the actual elapsed time since the last frame.
             * * In "semifixed" mode, multiple frames per render are processed, and the total time since the last frame is divided evenly between them.
             *
             */

            steptype: function (newmode, option) {
                if (newmode === "variable" || newmode === "semifixed") {
                    mode = newmode;
                    if (option)
                        maxTimestep = option;

                } else if (newmode === "fixed") {
                    mode = "fixed";
                    if (option)
                        maxFramesPerStep = option;
                } else {
                    throw "Invalid step type specified";
                }


            },

            /**@
             * #Crafty.timer.step
             * @comp Crafty.timer
             * @sign public void Crafty.timer.step()
             * @trigger EnterFrame - Triggered on each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }
             * @trigger RenderScene - Triggered every time a scene should be rendered
             * @trigger MeasureWaitTime - Triggered at the beginning of each step after the first.  Passes the time the game loop waited between steps. - Number
             * @trigger MeasureFrameTime - Triggered after each step.  Passes the time it took to advance one frame. - Number
             * @trigger MeasureRenderTime - Triggered after each render. Passes the time it took to render the scene - Number
             * Advances the game by triggering `EnterFrame` and `RenderScene`
             */
            step: function () {
                var drawTimeStart, dt, lastFrameTime, loops = 0;

                currentTime = new Date().getTime();
                if (endTime > 0)
                    Crafty.trigger("MeasureWaitTime", currentTime - endTime);

                // If we're currently ahead of the current time, we need to wait until we're not!
                if (gameTime + timeSlip >= currentTime) {
                    endTime = currentTime;
                    return;
                }

                var netTimeStep = currentTime - (gameTime + timeSlip);
                // We try to keep up with the target FPS by processing multiple frames per render
                // If we're hopelessly behind, stop trying to catch up.
                if (netTimeStep > milliSecPerFrame * 20) {
                    //gameTime = currentTime - milliSecPerFrame;
                    timeSlip += netTimeStep - milliSecPerFrame;
                    netTimeStep = milliSecPerFrame;
                }

                // Set up how time is incremented
                if (mode === "fixed") {
                    loops = Math.ceil(netTimeStep / milliSecPerFrame);
                    // maxFramesPerStep adjusts how willing we are to delay drawing in order to keep at the target FPS
                    loops = Math.min(loops, maxFramesPerStep);
                    dt = milliSecPerFrame;
                } else if (mode === "variable") {
                    loops = 1;
                    dt = netTimeStep;
                    // maxTimestep is the maximum time to be processed in a frame.  (Large dt => unstable physics)
                    dt = Math.min(dt, maxTimestep);
                } else if (mode === "semifixed") {
                    loops = Math.ceil(netTimeStep / maxTimestep);
                    dt = netTimeStep / loops;
                }

                // Process frames, incrementing the game clock with each frame.
                // dt is determined by the mode
                for (var i = 0; i < loops; i++) {
                    lastFrameTime = currentTime;
                    // Everything that changes over time hooks into this event
                    Crafty.trigger("EnterFrame", {
                        frame: frame++,
                        dt: dt,
                        gameTime: gameTime
                    });
                    gameTime += dt;
                    currentTime = new Date().getTime();
                    Crafty.trigger("MeasureFrameTime", currentTime - lastFrameTime);
                }

                //If any frames were processed, render the results
                if (loops > 0) {
                    drawTimeStart = currentTime;
                    Crafty.trigger("RenderScene");
                    // Post-render cleanup opportunity
                    Crafty.trigger("PostRender");
                    currentTime = new Date().getTime();
                    Crafty.trigger("MeasureRenderTime", currentTime - drawTimeStart);
                }

                endTime = currentTime;
            },
            /**@
             * #Crafty.timer.FPS
             * @comp Crafty.timer
             * @sign public void Crafty.timer.FPS()
             * Returns the target frames per second. This is not an actual frame rate.
             * @sign public void Crafty.timer.FPS(Number value)
             * @param value - the target rate
             * Sets the target frames per second. This is not an actual frame rate.
             * The default rate is 50.
             */
            FPS: function (value) {
                if (typeof value == "undefined")
                    return FPS;
                else {
                    FPS = value;
                    milliSecPerFrame = 1000 / FPS;
                }
            },

            /**@
             * #Crafty.timer.simulateFrames
             * @comp Crafty.timer
             * @sign public this Crafty.timer.simulateFrames(Number frames[, Number timestep])
             * Advances the game state by a number of frames and draws the resulting stage at the end. Useful for tests and debugging.
             * @param frames - number of frames to simulate
             * @param timestep - the duration to pass each frame.  Defaults to milliSecPerFrame (20 ms) if not specified.
             */
            simulateFrames: function (frames, timestep) {
                if (typeof timestep === "undefined")
                    timestep = milliSecPerFrame;
                while (frames-- > 0) {
                    Crafty.trigger("EnterFrame", {
                        frame: frame++,
                        dt: timestep
                    });
                }
                Crafty.trigger("RenderScene");
            }
        };
    })(),


    /**@
     * #Crafty.e
     * @category Core
     * @trigger NewEntity - When the entity is created and all components are added - { id:Number }
     * @sign public Entity Crafty.e(String componentList)
     * @param componentList - List of components to assign to new entity
     * @sign public Entity Crafty.e(String component1[, .., String componentN])
     * @param component# - Component to add
     *
     * Creates an entity. Any arguments will be applied in the same
     * way `.addComponent()` is applied as a quick way to add components.
     *
     * Any component added will augment the functionality of
     * the created entity by assigning the properties and methods from the component to the entity.
     *
     * @example
     * ~~~
     * var myEntity = Crafty.e("2D, DOM, Color");
     * ~~~
     *
     * @see Crafty.c
     */
    e: function () {
        var id = UID(),
            craft;

        entities[id] = null; //register the space
        entities[id] = craft = Crafty(id);

        if (arguments.length > 0) {
            craft.addComponent.apply(craft, arguments);
        }
        craft.setName('Entity #' + id); //set default entity human readable name
        craft.addComponent("obj"); //every entity automatically assumes obj

        Crafty.trigger("NewEntity", {
            id: id
        });

        return craft;
    },

    /**@
     * #Crafty.c
     * @category Core
     * @sign public void Crafty.c(String name, Object component)
     * @param name - Name of the component
     * @param component - Object with the component's properties and methods
     * Creates a component where the first argument is the ID and the second
     * is the object that will be inherited by entities.
     *
     * A couple of methods are treated specially. They are invoked in partiular contexts, and (in those contexts) cannot be overridden by other components.
     *
     * - `init` will be called when the component is added to an entity
     * - `remove` will be called just before a component is removed, or before an entity is destroyed. It is passed a single boolean parameter that is `true` if the entity is being destroyed.
     *
     * In addition to these hardcoded special methods, there are some conventions for writing components.
     *
     * - Properties or methods that start with an underscore are considered private.
     * - A method with the same name as the component is considered to be a constructor
     * and is generally used when you need to pass configuration data to the component on a per entity basis.
     *
     * @example
     * ~~~
     * Crafty.c("Annoying", {
     *     _message: "HiHi",
     *     init: function() {
     *         this.bind("EnterFrame", function() { alert(this.message); });
     *     },
     *     annoying: function(message) { this.message = message; }
     * });
     *
     * Crafty.e("Annoying").annoying("I'm an orange...");
     * ~~~
     *
     *
     * WARNING:
     *
     * in the example above the field _message is local to the entity. That is, if you create many entities with the Annoying component they can all have different values for _message. That is because it is a simple value, and simple values are copied by value. If however the field had been an object or array, the value would have been shared by all entities with the component because complex types are copied by reference in javascript. This is probably not what you want and the following example demonstrates how to work around it:
     *
     * ~~~
     * Crafty.c("MyComponent", {
     *     _iAmShared: { a: 3, b: 4 },
     *     init: function() {
     *         this._iAmNotShared = { a: 3, b: 4 };
     *     },
     * });
     * ~~~
     *
     * @see Crafty.e
     */
    c: function (compName, component) {
        components[compName] = component;
    },

    /**@
     * #Crafty.trigger
     * @category Core, Events
     * @sign public void Crafty.trigger(String eventName, * data)
     * @param eventName - Name of the event to trigger
     * @param data - Arbitrary data to pass into the callback as an argument
     *
     * This method will trigger every single callback attached to the event name. This means
     * every global event and every entity that has a callback.
     *
     * @see Crafty.bind
     */
    trigger: function (event, data) {

        // (To learn how the handlers object works, see inline comment at Crafty.bind)
        var hdl = handlers[event],
            h, i, l, callbacks, context;
        //loop over every object bound
        for (h in hdl) {

            // Check whether h needs to be processed
            if (!hdl.hasOwnProperty(h)) continue;
            callbacks = hdl[h];
            if (!callbacks || callbacks.length === 0) continue;

            //if an entity, call with that context; else the global context
            if (entities[h])
                context = Crafty(+h);
            else
                context = Crafty;

            //loop over every handler within object
            for (i = 0; i < callbacks.length; i++) {
                // Remove a callback if it has been deleted
                if (typeof callbacks[i] === "undefined") {
                    callbacks.splice(i, 1);
                    i--;
                } else
                    callbacks[i].call(context, data);
            }
        }
    },

    /**@
     * #Crafty.bind
     * @category Core, Events
     * @sign public Number bind(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns callback function which can be used for unbind
     *
     * Binds to a global event. Method will be executed when `Crafty.trigger` is used
     * with the event name.
     *
     * @see Crafty.trigger, Crafty.unbind
     */
    bind: function (event, callback) {

        // Background: The structure of the global object "handlers"
        // ---------------------------------------------------------
        // Here is an example of what "handlers" can look like:
        // handlers ===
        //    { Move:  {5:[fnA], 6:[fnB, fnC], global:[fnD]},
        //     Change: {6:[fnE]}
        //    }
        // In this example, when the 'Move' event is triggered on entity #6 (e.g.
        // entity6.trigger('Move')), it causes the execution of fnB() and fnC(). When
        // the Move event is triggered globally (i.e. Crafty.trigger('Move')), it
        // will execute fnA, fnB, fnC, fnD.
        //
        // In this example, "this" is bound to entity #6 whenever fnB() is executed, and
        // "this" is bound to Crafty whenever fnD() is executed.
        //
        // In other words, the structure of "handlers" is:
        //
        // handlers[event][entityID or 'global'] === (Array of callback functions)

        if (!handlers[event]) handlers[event] = {};
        var hdl = handlers[event];

        if (!hdl.global) hdl.global = [];
        hdl.global.push(callback);
        return callback;
    },


    /**@
     * #Crafty.uniqueBind
     * @category Core, Events
     * @sign public Number uniqueBind(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns callback function which can be used for unbind
     *
     * Works like Crafty.bind, but prevents a callback from being bound multiple times.
     *
     * @see Crafty.bind
     */
    uniqueBind: function (event, callback) {
        this.unbind(event, callback);
        return this.bind(event, callback);
    },

    /**@
     * #Crafty.one
     * @category Core, Events
     * @sign public Number one(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns callback function which can be used for unbind
     *
     * Works like Crafty.bind, but will be unbound once the event triggers.
     *
     * @see Crafty.bind
     */
    one: function (event, callback) {
        var self = this;
        var oneHandler = function (data) {
            callback.call(self, data);
            self.unbind(event, oneHandler);
        };
        return self.bind(event, oneHandler);
    },

    /**@
     * #Crafty.unbind
     * @category Core, Events
     * @sign public Boolean Crafty.unbind(String eventName, Function callback)
     * @param eventName - Name of the event to unbind
     * @param callback - Function to unbind
     * @sign public Boolean Crafty.unbind(String eventName, Number callbackID)
     * @param callbackID - ID of the callback
     * @returns True or false depending on if a callback was unbound
     * Unbind any event from any entity or global event.
     * @example
     * ~~~
     *    var play_gameover_sound = function () {...};
     *    Crafty.bind('GameOver', play_gameover_sound);
     *    ...
     *    Crafty.unbind('GameOver', play_gameover_sound);
     * ~~~
     *
     * The first line defines a callback function. The second line binds that
     * function so that `Crafty.trigger('GameOver')` causes that function to
     * run. The third line unbinds that function.
     *
     * ~~~
     *    Crafty.unbind('GameOver');
     * ~~~
     *
     * This unbinds ALL global callbacks for the event 'GameOver'. That
     * includes all callbacks attached by `Crafty.bind('GameOver', ...)`, but
     * none of the callbacks attached by `some_entity.bind('GameOver', ...)`.
     */
    unbind: function (event, callback) {
        // (To learn how the handlers object works, see inline comment at Crafty.bind)
        var hdl = handlers[event],
            i, l, global_callbacks, found_match;

        if (hdl === undefined || hdl.global === undefined || hdl.global.length === 0) {
            return false;
        }

        // If no callback was supplied, delete everything
        if (arguments.length === 1) {
            delete hdl.global;
            return true;
        }

        // loop over the globally-attached events
        global_callbacks = hdl.global;
        found_match = false;
        for (i = 0, l = global_callbacks.length; i < l; i++) {
            if (global_callbacks[i] === callback) {
                found_match = true;
                delete global_callbacks[i];
            }
        }
        return found_match;
    },

    /**@
     * #Crafty.frame
     * @category Core
     * @sign public Number Crafty.frame(void)
     * Returns the current frame number
     */
    frame: function () {
        return frame;
    },

    components: function () {
        return components;
    },

    isComp: function (comp) {
        return comp in components;
    },

    debug: function (str) {
        // access internal variables - handlers or entities
        if (str === 'handlers') {
            return handlers;
        }
        return entities;
    },

    /**@
     * #Crafty.settings
     * @category Core
     * Modify the inner workings of Crafty through the settings.
     */
    settings: (function () {
        var states = {},
            callbacks = {};

        return {
            /**@
             * #Crafty.settings.register
             * @comp Crafty.settings
             * @sign public void Crafty.settings.register(String settingName, Function callback)
             * @param settingName - Name of the setting
             * @param callback - Function to execute when use modifies setting
             *
             * Use this to register custom settings. Callback will be executed when `Crafty.settings.modify` is used.
             *
             * @see Crafty.settings.modify
             */
            register: function (setting, callback) {
                callbacks[setting] = callback;
            },

            /**@
             * #Crafty.settings.modify
             * @comp Crafty.settings
             * @sign public void Crafty.settings.modify(String settingName, * value)
             * @param settingName - Name of the setting
             * @param value - Value to set the setting to
             *
             * Modify settings through this method.
             *
             * @see Crafty.settings.register, Crafty.settings.get
             */
            modify: function (setting, value) {
                if (!callbacks[setting]) return;
                callbacks[setting].call(states[setting], value);
                states[setting] = value;
            },

            /**@
             * #Crafty.settings.get
             * @comp Crafty.settings
             * @sign public * Crafty.settings.get(String settingName)
             * @param settingName - Name of the setting
             * @returns Current value of the setting
             *
             * Returns the current value of the setting.
             *
             * @see Crafty.settings.register, Crafty.settings.get
             */
            get: function (setting) {
                return states[setting];
            }
        };
    })(),

    clone: clone
});


/**
 * Return a unique ID
 */

function UID() {
    var id = GUID++;
    //if GUID is not unique
    if (id in entities) {
        return UID(); //recurse until it is unique
    }
    return id;
}

/**@
 * #Crafty.clone
 * @category Core
 * @sign public Object .clone(Object obj)
 * @param obj - an object
 *
 * Deep copy (a.k.a clone) of an object.
 */

function clone(obj) {
    if (obj === null || typeof (obj) != 'object')
        return obj;

    var temp = obj.constructor(); // changed

    for (var key in obj)
        temp[key] = clone(obj[key]);
    return temp;
}

// export Crafty
if (typeof define === 'function') { // AMD
    define('crafty', [], function () {
        return Crafty;
    });
}

window.Crafty = Crafty;



// Crafty._rectPool
//
// This is a private object used internally by 2D methods
// Cascade and _attr need to keep track of an entity's old position,
// but we want to avoid creating temp objects every time an attribute is set.
// The solution is to have a pool of objects that can be reused.
//
// The current implementation makes a BIG ASSUMPTION:  that if multiple rectangles are requested,
// the later one is recycled before any preceding ones.  This matches how they are used in the code.
// Each rect is created by a triggered event, and will be recycled by the time the event is complete.
Crafty._rectPool = (function () {
    var pool = [],
        pointer = 0;
    return {
        get: function (x, y, w, h) {
            if (pool.length <= pointer)
                pool.push({});
            var r = pool[pointer++];
            r._x = x;
            r._y = y;
            r._w = w;
            r._h = h;
            return r;
        },

        copy: function (o) {
            if (pool.length <= pointer)
                pool.push({});
            var r = pool[pointer++];
            r._x = o._x;
            r._y = o._y;
            r._w = o._w;
            r._h = o._h;
            return r;
        },

        recycle: function (o) {
            pointer--;
        }
    };
})();









/**@
 * #Crafty.support
 * @category Misc, Core
 * Determines feature support for what Crafty can do.
 */
(function testSupport() {
    var support = Crafty.support = {},
        ua = 'webkit',
        match = true,
        mobile = 'Android';

    /**@
     * #Crafty.mobile
     * @comp Crafty.device
     *
     * Determines if Crafty is running on mobile device.
     *
     * If Crafty.mobile is equal true Crafty does some things under hood:
     * ~~~
     * - set viewport on max device width and height
     * - set Crafty.stage.fullscreen on true
     * - hide window scrollbars
     * ~~~
     *
     * @see Crafty.viewport
     */
    //if (mobile) Crafty.mobile = mobile[0];

    /**@
     * #Crafty.support.setter
     * @comp Crafty.support
     * Is `__defineSetter__` supported?
     */
    support.setter = ('__defineSetter__' in this && '__defineGetter__' in this);

    /**@
     * #Crafty.support.defineProperty
     * @comp Crafty.support
     * Is `Object.defineProperty` supported?
     */
    support.defineProperty = (function () {
        if (!('defineProperty' in Object)) return false;
        try {
            Object.defineProperty({}, 'x', {});
        } catch (e) {
            return false;
        }
        return true;
    })();

    /**@
     * #Crafty.support.audio
     * @comp Crafty.support
     * Is HTML5 `Audio` supported?
     */
    support.audio = true;

    /**@
     * #Crafty.support.prefix
     * @comp Crafty.support
     * Returns the browser specific prefix (`Moz`, `O`, `ms`, `webkit`).
     */
    support.prefix = 'webkit';

    /**@
     * #Crafty.support.canvas
     * @comp Crafty.support
     * Is the `canvas` element supported?
     */
    support.canvas = true;

    /**@
     * #Crafty.support.webgl
     * @comp Crafty.support
     * Is WebGL supported on the canvas element?
     */
	support.webgl = true;
    
    /**@
     * #Crafty.support.css3dtransform
     * @comp Crafty.support
     * Is css3Dtransform supported by browser.
     */
    support.css3dtransform = false;

    /**@
     * #Crafty.support.deviceorientation
     * @comp Crafty.support
     * Is deviceorientation event supported by browser.
     */
    support.deviceorientation = true;

    /**@
     * #Crafty.support.devicemotion
     * @comp Crafty.support
     * Is devicemotion event supported by browser.
     */
    support.devicemotion = true;

})();


Crafty.extend({
    _events: {},

    /**@
     * #Crafty.addEvent
     * @category Events, Misc
     * @sign public this Crafty.addEvent(Object ctx, HTMLElement obj, String event, Function callback)
     * @param ctx - Context of the callback or the value of `this`
     * @param obj - Element to add the DOM event to
     * @param event - Event name to bind to
     * @param callback - Method to execute when triggered
     *
     * Adds DOM level 3 events to elements. The arguments it accepts are the call
     * context (the value of `this`), the DOM element to attach the event to,
     * the event name (without `on` (`click` rather than `onclick`)) and
     * finally the callback method.
     *
     * If no element is passed, the default element will be `window.document`.
     *
     * Callbacks are passed with event data.
     *
     * @example
     * Will add a stage-wide MouseDown event listener to the player. Will log which button was pressed
     * & the (x,y) coordinates in viewport/world/game space.
     * ~~~
     * var player = Crafty.e("2D");
     *     player.onMouseDown = function(e) {
     *         console.log(e.mouseButton, e.realX, e.realY);
     *     };
     * Crafty.addEvent(player, Crafty.stage.elem, "mousedown", player.onMouseDown);
     * ~~~
     * @see Crafty.removeEvent
     */
    addEvent: function (ctx, obj, type, callback) {
		obj = Crafty.canvas._canvas;
        //console.log("addEvent: " + type);
		if (arguments.length === 3) {
            callback = type;
            type = obj;
            obj = Crafty.canvas._canvas;//obj = window.document;
        }

        //save anonymous function to be able to remove
        var afn = function (e) {
            e = e || window.event;

            if (typeof callback === 'function') {
            	callback.call(ctx, e);
            }
        },
            id = ctx[0] || "";

        if (!this._events[id + obj + type + callback]) this._events[id + obj + type + callback] = afn;
        else return;

        
		//if (obj.attachEvent) { //IE
		//	obj.attachEvent('on' + type, afn);
        //} else { //Everyone else
            obj.addEventListener(type, afn, false);
        //}
    },

    /**@
     * #Crafty.removeEvent
     * @category Events, Misc
     * @sign public this Crafty.removeEvent(Object ctx, HTMLElement obj, String event, Function callback)
     * @param ctx - Context of the callback or the value of `this`
     * @param obj - Element the event is on
     * @param event - Name of the event
     * @param callback - Method executed when triggered
     *
     * Removes events attached by `Crafty.addEvent()`. All parameters must
     * be the same that were used to attach the event including a reference
     * to the callback method.
     *
     * @see Crafty.addEvent
     */
    removeEvent: function (ctx, obj, type, callback) {
        obj = Crafty.canvas._canvas;
		
		if (arguments.length === 3) {
            callback = type;
            type = obj;
            obj = Crafty.canvas._canvas;//obj = window.document;
        }

        //retrieve anonymous function
        var id = ctx[0] || "",
            afn = this._events[id + obj + type + callback];

        if (afn) {
            if (obj.detachEvent) {
                obj.detachEvent('on' + type, afn);
            } else obj.removeEventListener(type, afn, false);
            delete this._events[id + obj + type + callback];
        }
    },

    /**@
     * #Crafty.background
     * @category Graphics, Stage
     * @sign public void Crafty.background(String value)
     * @param style - Modify the background with a color or image
     *
     * This method is a shortcut for adding a background
     * style to the stage element, i.e.
     * `Crafty.stage.elem.style.background = ...`
     * 
     * For example, if you want the background to be white,
     * with an image in the center, you might use:
     * ~~~
     * Crafty.background('#FFFFFF url(landscape.png) no-repeat center center');
     * ~~~
     *  
     */
    background: function (style) {
        Crafty.e("2D, Canvas, Image")
				.attr({ w: Crafty.viewport.width, h: Crafty.viewport.height })
				.image(style);
    }
});






Crafty.extend({
    /**@
     * #Crafty.viewport
     * @category Stage
     * @trigger ViewportScroll - when the viewport's x or y coordinates change
     * @trigger ViewportScale - when the viewport's scale changes
     * @trigger ViewportResize - when the viewport's dimension's change
     * @trigger InvalidateViewport - when the viewport changes
     * @trigger StopCamera - when any camera animations should stop, such as at the start of a new animation.
     * @trigger CameraAnimationDone - when a camera animation comes reaches completion
     *
     * Viewport is essentially a 2D camera looking at the stage. Can be moved or zoomed, which
     * in turn will react just like a camera moving in that direction.
     * 
     * Tip: At any given moment, the stuff that you can see is...
     * 
     * `x` between `(-Crafty.viewport._x)` and `(-Crafty.viewport._x + (Crafty.viewport._width / Crafty.viewport._scale))`
     * 
     * `y` between `(-Crafty.viewport._y)` and `(-Crafty.viewport._y + (Crafty.viewport._height / Crafty.viewport._scale))` 
     */
    viewport: {
        /**@
         * #Crafty.viewport.clampToEntities
         * @comp Crafty.viewport
         *
         * Decides if the viewport functions should clamp to game entities.
         * When set to `true` functions such as Crafty.viewport.mouselook() will not allow you to move the
         * viewport over areas of the game that has no entities.
         * For development it can be useful to set this to false.
         */
        clampToEntities: true,
        _width: 0,
        _height: 0,
        /**@
         * #Crafty.viewport.x
         * @comp Crafty.viewport
         *
         * Will move the stage and therefore every visible entity along the `x`
         * axis in the opposite direction.
         *
         * When this value is set, it will shift the entire stage. This means that entity
         * positions are not exactly where they are on screen. To get the exact position,
         * simply add `Crafty.viewport.x` onto the entities `x` position.
         */
        _x: 0,
        /**@
         * #Crafty.viewport.y
         * @comp Crafty.viewport
         *
         * Will move the stage and therefore every visible entity along the `y`
         * axis in the opposite direction.
         *
         * When this value is set, it will shift the entire stage. This means that entity
         * positions are not exactly where they are on screen. To get the exact position,
         * simply add `Crafty.viewport.y` onto the entities `y` position.
         */
        _y: 0,

        /**@
         * #Crafty.viewport._scale
         * @comp Crafty.viewport
         *
         * This value is the current scale (zoom) of the viewport. When the value is bigger than 1, everything
         * looks bigger (zoomed in). When the value is less than 1, everything looks smaller (zoomed out). This
         * does not alter the size of the stage itself, just the magnification of what it shows.
         * 
         * This is a read-only property: Do not set it directly. Instead, use `Crafty.viewport.scale(...)`
         * or `Crafty.viewport.zoom(...)`
         */

        _scale: 1,

        /**@
         * #Crafty.viewport.bounds
         * @comp Crafty.viewport
         *
         * A rectangle which defines the bounds of the viewport.
         * It should be an object with two properties, `max` and `min`,
         * which are each an object with `x` and `y` properties.
         *
         * If this property is null, Crafty uses the bounding box of all the items
         * on the stage.  This is the initial value.  (To prevent this behavior, set `Crafty.viewport.clampToEntities` to `false`)
         *
         * If you wish to bound the viewport along one axis but not the other, you can use `-Infinity` and `+Infinity` as bounds.
         *
         * @see Crafty.viewport.clampToEntities
         *
         * @example
         * Set the bounds to a 500 by 500 square:
         *
         * ~~~
         * Crafty.viewport.bounds = {min:{x:0, y:0}, max:{x:500, y:500}};
         * ~~~
         */
        bounds: null,

        /**@
         * #Crafty.viewport.scroll
         * @comp Crafty.viewport
         * @sign Crafty.viewport.scroll(String axis, Number val)
         * @param axis - 'x' or 'y'
         * @param val - The new absolute position on the axis
         *
         * Will move the viewport to the position given on the specified axis
         *
         * @example
         * Will move the camera 500 pixels right of its initial position, in effect
         * shifting everything in the viewport 500 pixels to the left.
         *
         * ~~~
         * Crafty.viewport.scroll('_x', 500);
         * ~~~
         */
        scroll: function (axis, val) {
            this[axis] = val;
            Crafty.trigger("ViewportScroll");
            Crafty.trigger("InvalidateViewport");
        },

        rect_object: { _x: 0, _y: 0, _w: 0, _h: 0},

        rect: function () {
            this.rect_object._x = -this._x;
            this.rect_object._y = -this._y;
            this.rect_object._w = this._width / this._scale;
            this.rect_object._h = this._height / this._scale;
            return this.rect_object;
        },

        /**@ 

         * #Crafty.viewport.pan
         * @comp Crafty.viewport
         * @sign public void Crafty.viewport.pan(String axis, Number v, Number time)
         * @param String axis - 'x' or 'y'. The axis to move the camera on
         * @param Number v - the distance to move the camera by
         * @param Number time - The duration in ms for the entire camera movement
         *
         * Pans the camera a given number of pixels over the specified time
         */
        pan: (function () {
            var tweens = {}, i, bound = false;
            var targetX, targetY, startingX, startingY, easing;

            function enterFrame(e) {
                easing.tick(e.dt);
                var v = easing.value();
                Crafty.viewport.x = (1-v) * startingX + v * targetX;
                Crafty.viewport.y = (1-v) * startingY + v * targetY;
                Crafty.viewport._clamp();

                if (easing.complete){
                    stopPan();
                    Crafty.trigger("CameraAnimationDone");
                }
            }

            function stopPan(){
                Crafty.unbind("EnterFrame", enterFrame);
            }

            Crafty.bind("StopCamera", stopPan);

            return function (dx, dy, time) {
                // Cancel any current camera control
                Crafty.trigger("StopCamera");

                // Handle request to reset
                if (dx == 'reset') {
                   return;
                }

                startingX = Crafty.viewport._x;
                startingY = Crafty.viewport._y;
                targetX = startingX - dx;
                targetY = startingY - dy;

                easing = new Crafty.easing(time);

                // bind to event, using uniqueBind prevents multiple copies from being bound
                Crafty.uniqueBind("EnterFrame", enterFrame);
                       
            };
        })(),

        /**@
         * #Crafty.viewport.follow
         * @comp Crafty.viewport
         * @sign public void Crafty.viewport.follow(Object target, Number offsetx, Number offsety)
         * @param Object target - An entity with the 2D component
         * @param Number offsetx - Follow target should be offsetx pixels away from center
         * @param Number offsety - Positive puts target to the right of center
         *
         * Follows a given entity with the 2D component. If following target will take a portion of
         * the viewport out of bounds of the world, following will stop until the target moves away.
         *
         * @example
         * ~~~
         * var ent = Crafty.e('2D, DOM').attr({w: 100, h: 100:});
         * Crafty.viewport.follow(ent, 0, 0);
         * ~~~
         */
        follow: (function () {
            var oldTarget, offx, offy;

            function change() {
                Crafty.viewport.scroll('_x', -(this.x + (this.w / 2) - (Crafty.viewport.width / 2) - offx));
                Crafty.viewport.scroll('_y', -(this.y + (this.h / 2) - (Crafty.viewport.height / 2) - offy));
                Crafty.viewport._clamp();
            }

            function stopFollow(){
                if (oldTarget)
                    oldTarget.unbind('Move', change);
            }

            Crafty.bind("StopCamera", stopFollow);

            return function (target, offsetx, offsety) {
                if (!target || !target.has('2D'))
                    return;
                Crafty.trigger("StopCamera");

                oldTarget = target;
                offx = (typeof offsetx != 'undefined') ? offsetx : 0;
                offy = (typeof offsety != 'undefined') ? offsety : 0;

                target.bind('Move', change);
                change.call(target);
            };
        })(),

        /**@
         * #Crafty.viewport.centerOn
         * @comp Crafty.viewport
         * @sign public void Crafty.viewport.centerOn(Object target, Number time)
         * @param Object target - An entity with the 2D component
         * @param Number time - The duration in ms of the camera motion
         *
         * Centers the viewport on the given entity.
         */
        centerOn: function (targ, time) {
            var x = targ.x + Crafty.viewport.x,
                y = targ.y + Crafty.viewport.y,
                mid_x = targ.w / 2,
                mid_y = targ.h / 2,
                cent_x = Crafty.viewport.width / 2,
                cent_y = Crafty.viewport.height / 2,
                new_x = x + mid_x - cent_x,
                new_y = y + mid_y - cent_y;

            Crafty.viewport.pan(new_x, new_y, time);
        },

        /**@
         * #Crafty.viewport.zoom
         * @comp Crafty.viewport
         * @sign public void Crafty.viewport.zoom(Number amt, Number cent_x, Number cent_y, Number time)
         * @param Number amt - amount to zoom in on the target by (eg. 2, 4, 0.5)
         * @param Number cent_x - the center to zoom on
         * @param Number cent_y - the center to zoom on
         * @param Number time - the duration in ms of the entire zoom operation
         *
         * Zooms the camera in on a given point. amt > 1 will bring the camera closer to the subject
         * amt < 1 will bring it farther away. amt = 0 will reset to the default zoom level
         * Zooming is multiplicative. To reset the zoom amount, pass 0.
         */
        zoom: (function () {
            

            function stopZoom(){
                Crafty.unbind("EnterFrame", enterFrame);
            }
            Crafty.bind("StopCamera", stopZoom);

            var startingZoom, finalZoom, finalAmount, startingX, finalX, startingY, finalY, easing;

            function enterFrame(e){
                var amount, v;

                easing.tick(e.dt);

                // The scaling should happen smoothly -- start at 1, end at finalAmount, and at half way scaling should be by finalAmount^(1/2)
                // Since value goes smoothly from 0 to 1, this fufills those requirements
                amount = Math.pow(finalAmount, easing.value() );

                // The viewport should move in such a way that no point reverses
                // If a and b are the top left/bottom right of the viewport, then the below can be derived from
                //      (a_0-b_0)/(a-b) = amount,
                // and the assumption that both a and b have the same form
                //      a = a_0 * (1-v) + a_f * v,
                //      b = b_0 * (1-v) + b_f * v.
                // This is just an arbitrary parameterization of the only sensible path for the viewport corners to take.
                // And by symmetry they should be parameterized in the same way!  So not much choice here.
                if (finalAmount === 1)
                    v = easing.value();  // prevent NaN!  If zoom is used this way, it'll just become a pan.
                else
                    v = (1/amount - 1 ) / (1/finalAmount - 1);

                // Set new scale and viewport position
                Crafty.viewport.scale( amount * startingZoom );
                Crafty.viewport.scroll("_x", startingX * (1-v) + finalX * v );
                Crafty.viewport.scroll("_y", startingY * (1-v) + finalY * v );
                Crafty.viewport._clamp();

                if (easing.complete){
                    stopZoom();
                    Crafty.trigger("CameraAnimationDone");
                }


            }

            return function (amt, cent_x, cent_y, time){
                if (!amt) { // we're resetting to defaults
                    Crafty.viewport.scale(1);
                    return;
                }

                if (arguments.length <= 2) {
                    time = cent_x;
                    cent_x = Crafty.viewport.x - Crafty.viewport.width;
                    cent_y = Crafty.viewport.y - Crafty.viewport.height;
                }

                Crafty.trigger("StopCamera");
                startingZoom = Crafty.viewport._scale;
                finalAmount = amt;
                finalZoom = startingZoom * finalAmount;
                

                startingX = Crafty.viewport.x;
                startingY = Crafty.viewport.y;
                finalX = - (cent_x - Crafty.viewport.width  / (2 * finalZoom) );
                finalY = - (cent_y - Crafty.viewport.height / (2 * finalZoom) );

                easing = new Crafty.easing(time);

                Crafty.uniqueBind("EnterFrame", enterFrame);
            };

            
        })(),
        /**@
         * #Crafty.viewport.scale
         * @comp Crafty.viewport
         * @sign public void Crafty.viewport.scale(Number amt)
         * @param Number amt - amount to zoom/scale in on the elements
         *
         * Adjusts the scale (zoom). When `amt` is 1, it is set to the normal scale,
         * e.g. an entity with `this.w == 20` would appear exactly 20 pixels wide.
         * When `amt` is 10, that same entity would appear 200 pixels wide (i.e., zoomed in
         * by a factor of 10), and when `amt` is 0.1, that same entity would be 2 pixels wide
         * (i.e., zoomed out by a factor of `(1 / 0.1)`).
         * 
         * If you pass an `amt` of 0, it is treated the same as passing 1, i.e. the scale is reset.
         *
         * This method sets the absolute scale, while `Crafty.viewport.zoom` sets the scale relative to the existing value.
         * @see Crafty.viewport.zoom
         *
         * @example
         * ~~~
         * Crafty.viewport.scale(2); // Zoom in -- all entities will appear twice as large.
         * ~~~
         */
        scale: (function () {
            return function (amt) {
                this._scale = amt ? amt : 1;
                Crafty.trigger("InvalidateViewport");
                Crafty.trigger("ViewportScale");

            };
        })(),
        /**@
         * #Crafty.viewport.mouselook
         * @comp Crafty.viewport
         * @sign public void Crafty.viewport.mouselook(Boolean active)
         * @param Boolean active - Activate or deactivate mouselook
         *
         * Toggle mouselook on the current viewport.
         * Simply call this function and the user will be able to
         * drag the viewport around.
         *
         * If the user starts a drag, "StopCamera" will be triggered, which will cancel any existing camera animations.
         */
        mouselook: (function () {
            var active = false,
                dragging = false,
                lastMouse = {};
            old = {};
            function stopLook(){
                dragging = false;
            }


            return function (op, arg) {
                if (typeof op == 'boolean') {
                    active = op;
                    if (active) {
                        Crafty.mouseObjs++;
                    } else {
                        Crafty.mouseObjs = Math.max(0, Crafty.mouseObjs - 1);
                    }
                    return;
                }
                if (!active) return;
                switch (op) {
                case 'move':
                case 'drag':
                    if (!dragging) return;
                    diff = {
                        x: arg.clientX - lastMouse.x,
                        y: arg.clientY - lastMouse.y
                    };

                    lastMouse.x = arg.clientX;
                    lastMouse.y = arg.clientY;

                    Crafty.viewport.x += diff.x;
                    Crafty.viewport.y += diff.y;
                    Crafty.viewport._clamp();
                    break;
                case 'start':
                    Crafty.trigger("StopCamera");
                    lastMouse.x = arg.clientX;
                    lastMouse.y = arg.clientY;
                    dragging = true;
                    break;
                case 'stop':
                    dragging = false;
                    break;
                }
            };
        })(),
        _clamp: function () {
            // clamps the viewport to the viewable area
            // under no circumstances should the viewport see something outside the boundary of the 'world'
            if (!this.clampToEntities) return;
            var bound = this.bounds || Crafty.map.boundaries();
            bound.max.x *= this._scale;
            bound.min.x *= this._scale;
            bound.max.y *= this._scale;
            bound.min.y *= this._scale;
            if (bound.max.x - bound.min.x > Crafty.viewport.width) {
                if (Crafty.viewport.x < -bound.max.x + Crafty.viewport.width) {
                    Crafty.viewport.x = -bound.max.x + Crafty.viewport.width;
                } else if (Crafty.viewport.x > -bound.min.x) {
                    Crafty.viewport.x = -bound.min.x;
                }
            } else {
                Crafty.viewport.x = -1 * (bound.min.x + (bound.max.x - bound.min.x) / 2 - Crafty.viewport.width / 2);
            }
            if (bound.max.y - bound.min.y > Crafty.viewport.height) {
                if (Crafty.viewport.y < -bound.max.y + Crafty.viewport.height) {
                    Crafty.viewport.y = -bound.max.y + Crafty.viewport.height;
                } else if (Crafty.viewport.y > -bound.min.y) {
                    Crafty.viewport.y = -bound.min.y;
                }
            } else {
                Crafty.viewport.y = -1 * (bound.min.y + (bound.max.y - bound.min.y) / 2 - Crafty.viewport.height / 2);
            }
        },

        /**@
         * #Crafty.viewport.init
         * @comp Crafty.viewport
         * @sign public void Crafty.viewport.init([Number width, Number height, String stage_elem])
         * @sign public void Crafty.viewport.init([Number width, Number height, HTMLElement stage_elem])
         * @param Number width - Width of the viewport
         * @param Number height - Height of the viewport
         * @param String or HTMLElement stage_elem - the element to use as the stage (either its id or the actual element).
         *
         * Initialize the viewport. If the arguments 'width' or 'height' are missing, use Crafty.DOM.window.width and Crafty.DOM.window.height (full screen model).
         *
         * The argument 'stage_elem' is used to specify a stage element other than the default, and can be either a string or an HTMLElement.  If a string is provided, it will look for an element with that id and, if none exists, create a div.  If an HTMLElement is provided, that is used directly.  Omitting this argument is the same as passing an id of 'cr-stage'.
         *
         * @see Crafty.device, Crafty.DOM, Crafty.stage
         */
        init: function (w, h, stage_elem) {
            //Crafty.DOM.window.init();
			
			
            // setters+getters for the viewport
            this._defineViewportProperties();
            // If no width or height is defined, the width and height is set to fullscreen
            this._width = (!w) ? Crafty.DOM.window.width : w;
            this._height = (!h) ? Crafty.DOM.window.height : h;


            //check if stage exists
            if (typeof stage_elem === 'undefined')
                stage_elem = "cr-stage";

            //var crstage = Crafty.canvas._canvas;
			/*if (typeof stage_elem === 'string')
                crstage = document.getElementById(stage_elem);
            else if (typeof HTMLElement !== "undefined" ? stage_elem instanceof HTMLElement : stage_elem instanceof Element)
                crstage = stage_elem;
            else
                throw new TypeError("stage_elem must be a string or an HTMLElement");*/

            /**@
             * #Crafty.stage
             * @category Core
             * The stage where all the DOM entities will be placed.
             */

            /**@
             * #Crafty.stage.elem
             * @comp Crafty.stage
             * The `#cr-stage` div element.
             */

            /**@
             * #Crafty.stage.inner
             * @comp Crafty.stage
             * `Crafty.stage.inner` is a div inside the `#cr-stage` div that holds all DOM entities.
             * If you use canvas, a `canvas` element is created at the same level in the dom
             * as the the `Crafty.stage.inner` div. So the hierarchy in the DOM is
             *  
             * ~~~
             * Crafty.stage.elem
             *  - Crafty.stage.inner (a div HTMLElement)
             *  - Crafty.canvas._canvas (a canvas HTMLElement)
             * ~~~
             */

            //create stage div to contain everything
            Crafty.stage = {
                x: 0,
                y: 0,
                fullscreen: false,
                elem: Crafty.canvas._canvas,
                inner: Crafty.canvas._canvas//document.createElement("div")
            };

            /*
			//fullscreen, stop scrollbars
            if (!w && !h) {
                document.body.style.overflow = "hidden";
                Crafty.stage.fullscreen = true;
            }*/

            //Crafty.addEvent(this, window, "resize", Crafty.viewport.reload);

            /*Crafty.addEvent(this, window, "blur", function () {
                if (Crafty.settings.get("autoPause")) {
                    if (!Crafty._paused) Crafty.pause();
                }
            });
            Crafty.addEvent(this, window, "focus", function () {
                if (Crafty._paused && Crafty.settings.get("autoPause")) {
                    Crafty.pause();
                }
            });

            //make the stage unselectable
            Crafty.settings.register("stageSelectable", function (v) {
                Crafty.stage.elem.onselectstart = v ? function () {
                    return true;
                } : function () {
                    return false;
                };
            });
            Crafty.settings.modify("stageSelectable", false);

            //make the stage have no context menu
            Crafty.settings.register("stageContextMenu", function (v) {
                Crafty.stage.elem.oncontextmenu = v ? function () {
                    return true;
                } : function () {
                    return false;
                };
            });
            Crafty.settings.modify("stageContextMenu", false);*/

            Crafty.settings.register("autoPause", function () {});
            Crafty.settings.modify("autoPause", false);

            //add to the body and give it an ID if not exists
			/*
            if (!crstage) {
                document.body.appendChild(Crafty.stage.elem);
                Crafty.stage.elem.id = stage_elem;
            }

            var elem = Crafty.stage.elem.style,
                offset;

            /*Crafty.stage.elem.appendChild(Crafty.stage.inner);
            Crafty.stage.inner.style.position = "absolute";
            Crafty.stage.inner.style.zIndex = "1";
            Crafty.stage.inner.style.transformStyle = "preserve-3d"; // Seems necessary for Firefox to preserve zIndexes?

            //css style
            elem.width = this.width + "px";
            elem.height = this.height + "px";
            elem.overflow = "hidden";*/


            // resize events
            Crafty.bind("ViewportResize", function(){Crafty.trigger("InvalidateViewport");});

            /*if (Crafty.mobile) {
				
                // remove default gray highlighting after touch
                if (typeof elem.webkitTapHighlightColor !== undefined) {
                    elem.webkitTapHighlightColor = "rgba(0,0,0,0)";
                }

				var meta = document.createElement("meta"),
                    head = document.getElementsByTagName("HEAD")[0];

                //hide the address bar
                meta = document.createElement("meta");
                meta.setAttribute("name", "apple-mobile-web-app-capable");
                meta.setAttribute("content", "yes");
                head.appendChild(meta);

                Crafty.addEvent(this, Crafty.stage.elem, "touchmove", function (e) {
                    e.preventDefault();
                });
            } else {
                /*elem.position = "relative";
                //find out the offset position of the stage
                offset = Crafty.DOM.inner(Crafty.stage.elem);
                Crafty.stage.x = offset.x;
                Crafty.stage.y = offset.y;
            }*/
      
        },

        // Create setters/getters for x, y, width, height
        _defineViewportProperties: function(){
            
                //define getters and setters to scroll the viewport
                this.__defineSetter__('x', function (v) {
                    this.scroll('_x', v);
                });
                this.__defineSetter__('y', function (v) {
                    this.scroll('_y', v);
                });
                this.__defineSetter__('width', function (v) {
                    this._width = v;
                    Crafty.trigger("ViewportResize");
                });
                this.__defineSetter__('height', function (v) {
                    this._height = v;
                    Crafty.trigger("ViewportResize");
                });
                this.__defineGetter__('x', function () {
                    return this._x;
                });
                this.__defineGetter__('y', function () {
                    return this._y;
                });
                this.__defineGetter__('width', function () {
                    return this._width;
                });
                this.__defineGetter__('height', function () {
                    return this._height;
                });



        },

        /**@
         * #Crafty.viewport.reload
         * @comp Crafty.stage
         *
         * @sign public Crafty.viewport.reload()
         *
         * Recalculate and reload stage width, height and position.
         * Useful when browser return wrong results on init (like safari on Ipad2).
         *
         */
        reload: function () {
            Crafty.DOM.window.init();
            var w = Crafty.DOM.window.width,
                h = Crafty.DOM.window.height,
                offset;


            if (Crafty.stage.fullscreen) {
                this._width = w;
                this._height = h;
                Crafty.trigger("ViewportResize");
            }

            //offset = Crafty.DOM.inner(Crafty.stage.elem);
            Crafty.stage.x = 0;//offset.x;
            Crafty.stage.y = 0;//offset.y;
        },

        /**@
         * #Crafty.viewport.reset
         * @comp Crafty.stage
         * @trigger StopCamera - called to cancel camera animations
         *
         * @sign public Crafty.viewport.reset()
         *
         * Resets the viewport to starting values, and cancels any existing camera animations.
         * Called when scene() is run.
         */
        reset: function () {
            Crafty.viewport.mouselook("stop");
            Crafty.trigger("StopCamera");
            Crafty.viewport.scale(1);
        }
    }
});






/**@
 * #Crafty.DrawManager
 * @category Graphics
 * @sign Crafty.DrawManager
 *
 * An internal object manage objects to be drawn and implement
 * the best method of drawing in both DOM and canvas
 */
Crafty.DrawManager = (function () {
    /** Helper function to sort by globalZ */
    function zsort(a, b) {
        return a._globalZ - b._globalZ;
    }

    /** array of dirty rects on screen */
    var dirty_rects = [],
        changed_objs = [],
        /** array of DOMs needed updating */
        dom = [],

        dirtyViewport = false,


        /** recManager: an object for managing dirty rectangles. */
        rectManager = {
            /** Finds smallest rectangles that overlaps a and b, merges them into target */
            merge: function (a, b, target) {
                if (typeof target === 'undefined')
                    target = {};
                // Doing it in this order means we can use either a or b as the target, with no conflict
                target._h = Math.max(a._y + a._h, b._y + b._h);
                target._w = Math.max(a._x + a._w, b._x + b._w);
                target._x = Math.min(a._x, b._x);
                target._y = Math.min(a._y, b._y);
                target._w -= target._x;
                target._h -= target._y;

                return target;
            },

            /** cleans up current dirty state, stores stale state for future passes */
            clean: function () {
                var rect, obj, i;
                for (i = 0, l = changed_objs.length; i < l; i++) {
                    obj = changed_objs[i];
                    rect = obj._mbr || obj;
                    if (typeof obj.staleRect === 'undefined')
                        obj.staleRect = {};
                    obj.staleRect._x = rect._x;
                    obj.staleRect._y = rect._y;
                    obj.staleRect._w = rect._w;
                    obj.staleRect._h = rect._h;

                    obj._changed = false;
                }
                changed_objs.length = 0;
                dirty_rects.length = 0;

            },

            /** Takes the current and previous position of an object, and pushes the dirty regions onto the stack
             *  If the entity has only moved/changed a little bit, the regions are squashed together */
            createDirty: function (obj) {
                var rect = obj._mbr || obj;
                if (obj.staleRect) {
                    //If overlap, merge stale and current position together, then return
                    //Otherwise just push stale rectangle
                    if (rectManager.overlap(obj.staleRect, rect)) {
                        rectManager.merge(obj.staleRect, rect, obj.staleRect);
                        dirty_rects.push(obj.staleRect);
                        return;
                    } else {
                        dirty_rects.push(obj.staleRect);
                    }
                }

                // We use the intermediate "currentRect" so it can be modified without messing with obj
                obj.currentRect._x = rect._x;
                obj.currentRect._y = rect._y;
                obj.currentRect._w = rect._w;
                obj.currentRect._h = rect._h;
                dirty_rects.push(obj.currentRect);

            },

            /** Checks whether two rectangles overlap */
            overlap: function (a, b) {
                return (a._x < b._x + b._w && a._y < b._y + b._h && a._x + a._w > b._x && a._y + a._h > b._y);
            }

        };

    Crafty.bind("InvalidateViewport", function () {
        dirtyViewport = true;
    });
    Crafty.bind("PostRender", function () {
        dirtyViewport = false;
    });

    return {
        /**@
         * #Crafty.DrawManager.total2D
         * @comp Crafty.DrawManager
         *
         * Total number of the entities that have the `2D` component.
         */
        total2D: Crafty("2D").length,

        /**@
         * #Crafty.DrawManager.onScreen
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.onScreen(Object rect)
         * @param rect - A rectangle with field {_x: x_val, _y: y_val, _w: w_val, _h: h_val}
         *
         * Test if a rectangle is completely in viewport
         */
        onScreen: function (rect) {
            return Crafty.viewport._x + rect._x + rect._w > 0 && Crafty.viewport._y + rect._y + rect._h > 0 &&
                Crafty.viewport._x + rect._x < Crafty.viewport.width && Crafty.viewport._y + rect._y < Crafty.viewport.height;
        },

        /**@
         * #Crafty.DrawManager.mergeSet
         * @comp Crafty.DrawManager
         * @sign public Object Crafty.DrawManager.mergeSet(Object set)
         * @param set - an array of rectangular regions
         *
         * Merge any consecutive, overlapping rects into each other.
         * Its an optimization for the redraw regions.
         *
         * The order of set isn't strictly meaningful,
         * but overlapping objects will often cause each other to change,
         * and so might be consecutive.
         */
        mergeSet: function (set) {
            var i = 0;
            while (i < set.length - 1) {
                // If current and next overlap, merge them together into the first, removing the second
                // Then skip the index backwards to compare the previous pair.
                // Otherwise skip forward
                if (rectManager.overlap(set[i], set[i + 1])) {
                    rectManager.merge(set[i], set[i + 1], set[i]);
                    set.splice(i + 1, 1);
                    if (i > 0) i--;
                } else
                    i++;
            }

            return set;
        },

        /**@
         * #Crafty.DrawManager.addCanvas
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.addCanvas(ent)
         * @param ent - The entity to add
         *
         * Add an entity to the list of Canvas objects to draw
         */
        addCanvas: function addCanvas(ent) {
            changed_objs.push(ent);
        },

        /**@
         * #Crafty.DrawManager.addDom
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.addDom(ent)
         * @param ent - The entity to add
         *
         * Add an entity to the list of DOM object to draw
         */
        addDom: function addDom(ent) {
            dom.push(ent);
        },

        /**@
         * #Crafty.DrawManager.debug
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.debug()
         */
        debug: function () {
            console.log(changed_objs, dom);
        },

        /**@
         * #Crafty.DrawManager.drawAll
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.drawAll([Object rect])
         * @param rect - a rectangular region {_x: x_val, _y: y_val, _w: w_val, _h: h_val}
         *
         * - If rect is omitted, redraw within the viewport
         * - If rect is provided, redraw within the rect
         */
        drawAll: function (rect) {
            rect = rect || Crafty.viewport.rect();
            var q = Crafty.map.search(rect),
                i = 0,
                l = q.length,
                ctx = Crafty.canvas.context,
                current;

            //ctx.clearRect(rect._x, rect._y, rect._w, rect._h);
			ctx.clearRect(0, 0, 1280, 800);

            //sort the objects by the global Z
            q.sort(zsort);
            for (; i < l; i++) {
                current = q[i];
                if (current._visible && current.__c.Canvas) {
                    current.draw();
                    current._changed = false;
                }
            }
        },

        /**@
         * #Crafty.DrawManager.boundingRect
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.boundingRect(set)
         * @param set - Undocumented
         *
         * - Calculate the common bounding rect of multiple canvas entities.
         * - Returns coords
         */
        boundingRect: function (set) {
            if (!set || !set.length) return;
            var newset = [],
                i = 1,
                l = set.length,
                current, master = set[0],
                tmp;
            master = [master._x, master._y, master._x + master._w, master._y + master._h];
            while (i < l) {
                current = set[i];
                tmp = [current._x, current._y, current._x + current._w, current._y + current._h];
                if (tmp[0] < master[0]) master[0] = tmp[0];
                if (tmp[1] < master[1]) master[1] = tmp[1];
                if (tmp[2] > master[2]) master[2] = tmp[2];
                if (tmp[3] > master[3]) master[3] = tmp[3];
                i++;
            }
            tmp = master;
            master = {
                _x: tmp[0],
                _y: tmp[1],
                _w: tmp[2] - tmp[0],
                _h: tmp[3] - tmp[1]
            };

            return master;
        },



        /**@
         * #Crafty.DrawManager.renderCanvas
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.renderCanvas()
         *
         * - Triggered by the "RenderScene" event
         * - If the number of rects is over 60% of the total number of objects
         *	do the naive method redrawing `Crafty.DrawManager.drawAll`
         * - Otherwise, clear the dirty regions, and redraw entities overlapping the dirty regions.
         *
         * @see Canvas.draw
         */

        renderCanvas: function () {
            var l = changed_objs.length;
            /*if (!l && !dirtyViewport) {
                return;
            }*/

            var i = 0,
                rect, q,
                j, len, obj, ent, ctx = Crafty.canvas.context,
                DM = Crafty.DrawManager;


            /*if (dirtyViewport) {
                var view = Crafty.viewport;
                ctx.setTransform(view._scale, 0, 0, view._scale, view._x*view._scale, view._y*view._scale);

            }*/
            //if the amount of changed objects is over 60% of the total objects
            //do the naive method redrawing
            // TODO: I'm not sure this condition really makes that much sense!
            //if (l / DM.total2D > 0.6 || dirtyViewport) {
				ctx.fillStyle = "black";
				ctx.clear();
				DM.drawAll();
				rectManager.clean();
				return;
            //}

            // Calculate dirty_rects from all changed objects, then merge some overlapping regions together
            /*
			for (i = 0; i < l; i++) {
                rectManager.createDirty(changed_objs[i]);
            }
            dirty_rects = DM.mergeSet(dirty_rects);


            l = dirty_rects.length;
            var dupes = [],
                objs = [];
            // For each dirty rectangle, find entities near it, and draw the overlapping ones
            for (i = 0; i < l; ++i) { //loop over every dirty rect
                rect = dirty_rects[i];
                dupes.length = 0;
                objs.length = 0;
                if (!rect) continue;

                // Find the smallest rectangle with integer coordinates that encloses rect
                rect._w = rect._x + rect._w;
                rect._h = rect._y + rect._h;
                rect._x = (rect._x > 0) ? (rect._x|0) : (rect._x|0) - 1;
                rect._y = (rect._y > 0) ? (rect._y|0) : (rect._y|0) - 1;
                rect._w -= rect._x;
                rect._h -= rect._y;
                rect._w = (rect._w === (rect._w|0)) ? rect._w : (rect._w|0) + 1;
                rect._h = (rect._h === (rect._h|0)) ? rect._h : (rect._h|0) + 1;

                //search for ents under dirty rect
                q = Crafty.map.search(rect, false);

                //clear the rect from the main canvas
                ctx.clearRect(rect._x, rect._y, rect._w, rect._h);

                //Then clip drawing region to dirty rectangle
                ctx.save();
                ctx.beginPath();
                ctx.rect(rect._x, rect._y, rect._w, rect._h);
                ctx.clip();

                // Loop over found objects removing dupes and adding visible canvas objects to array
                for (j = 0, len = q.length; j < len; ++j) {
                    obj = q[j];

                    if (dupes[obj[0]] || !obj._visible || !obj.__c.Canvas)
                        continue;
                    dupes[obj[0]] = true;
                    objs.push(obj);
                }

                // Sort objects by z level
                objs.sort(zsort);

                // Then draw each object in that order
                for (j = 0, len = objs.length; j < len; ++j) {
                    obj = objs[j];
                    var area = obj._mbr || obj;
                    if (rectManager.overlap(area, rect))
                        obj.draw();
                    obj._changed = false;
                }

                // Close rectangle clipping
                ctx.closePath();
                ctx.restore();

            }

            // Draw dirty rectangles for debugging, if that flag is set
            if (Crafty.DrawManager.debugDirty === true) {
                ctx.strokeStyle = 'red';
                for (i = 0, l = dirty_rects.length; i < l; ++i) {
                    rect = dirty_rects[i];
                    ctx.strokeRect(rect._x, rect._y, rect._w, rect._h);
                }
            }
            //Clean up lists etc
            rectManager.clean();
			*/
        },

        /**@
         * #Crafty.DrawManager.renderDOM
         * @comp Crafty.DrawManager
         * @sign public Crafty.DrawManager.renderDOM()
         *
         * When "RenderScene" is triggered, draws all DOM entities that have been flagged
         *
         * @see DOM.draw
         */
        renderDOM: function () {
            // Adjust the viewport
            if (dirtyViewport) {
                var style = Crafty.stage.inner.style,
                    view = Crafty.viewport;

                style.transform = style[Crafty.support.prefix + "Transform"] = "scale(" + view._scale + ", " + view._scale + ")";
                style.left = view.x * view._scale + "px";
                style.top = view.y * view._scale + "px";
                style.zIndex = 10;
            }

            //if no objects have been changed, stop
            if (!dom.length) return;

            var i = 0,
                k = dom.length;
            //loop over all DOM elements needing updating
            for (; i < k; ++i) {
                dom[i].draw()._changed = false;
            }

            //reset DOM array
            dom.length = 0;

        }


    };
})();







/**@
 * #Crafty.map
 * @category 2D
 * Functions related with querying entities.
 * @see Crafty.HashMap
 */
Crafty.map = new HashMap();
var M = Math,
    Mc = M.cos,
    Ms = M.sin,
    PI = M.PI,
    DEG_TO_RAD = PI / 180;

Crafty.extend({
    zeroFill: function (number, width) {
        width -= number.toString().length;
        if (width > 0)
            return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
        return number.toString();
    }
});

/**@
 * #2D
 * @category 2D
 * Component for any entity that has a position on the stage.
 * @trigger Move - when the entity has moved - { _x:Number, _y:Number, _w:Number, _h:Number } - Old position
 * @trigger Invalidate - when the entity needs to be redrawn
 * @trigger Rotate - when the entity is rotated - { cos:Number, sin:Number, deg:Number, rad:Number, o: {x:Number, y:Number}}
 */
Crafty.c("2D", {
    /**@
     * #.x
     * @comp 2D
     * The `x` position on the stage. When modified, will automatically be redrawn.
     * Is actually a getter/setter so when using this value for calculations and not modifying it,
     * use the `._x` property.
     * @see ._attr
     */
    _x: 0,
    /**@
     * #.y
     * @comp 2D
     * The `y` position on the stage. When modified, will automatically be redrawn.
     * Is actually a getter/setter so when using this value for calculations and not modifying it,
     * use the `._y` property.
     * @see ._attr
     */
    _y: 0,
    /**@
     * #.w
     * @comp 2D
     * The width of the entity. When modified, will automatically be redrawn.
     * Is actually a getter/setter so when using this value for calculations and not modifying it,
     * use the `._w` property.
     *
     * Changing this value is not recommended as canvas has terrible resize quality and DOM will just clip the image.
     * @see ._attr
     */
    _w: 0,
    /**@
     * #.h
     * @comp 2D
     * The height of the entity. When modified, will automatically be redrawn.
     * Is actually a getter/setter so when using this value for calculations and not modifying it,
     * use the `._h` property.
     *
     * Changing this value is not recommended as canvas has terrible resize quality and DOM will just clip the image.
     * @see ._attr
     */
    _h: 0,
    /**@
     * #.z
     * @comp 2D
     * The `z` index on the stage. When modified, will automatically be redrawn.
     * Is actually a getter/setter so when using this value for calculations and not modifying it,
     * use the `._z` property.
     *
     * A higher `z` value will be closer to the front of the stage. A smaller `z` value will be closer to the back.
     * A global Z index is produced based on its `z` value as well as the GID (which entity was created first).
     * Therefore entities will naturally maintain order depending on when it was created if same z value.
     *
     * `z` is required to be an integer, e.g. `z=11.2` is not allowed.
     * @see ._attr
     */
    _z: 0,
    /**@
     * #.rotation
     * @comp 2D
     * The rotation state of the entity, in clockwise degrees.
     * `this.rotation = 0` sets it to its original orientation; `this.rotation = 10`
     * sets it to 10 degrees clockwise from its original orientation;
     * `this.rotation = -10` sets it to 10 degrees counterclockwise from its
     * original orientation, etc.
     *
     * When modified, will automatically be redrawn. Is actually a getter/setter
     * so when using this value for calculations and not modifying it,
     * use the `._rotation` property.
     *
     * `this.rotation = 0` does the same thing as `this.rotation = 360` or `720` or
     * `-360` or `36000` etc. So you can keep increasing or decreasing the angle for continuous
     * rotation. (Numerical errors do not occur until you get to millions of degrees.)
     *
     * The default is to rotate the entity around its (initial) top-left corner; use
     * `.origin()` to change that.
     *
     * @see ._attr, .origin
     */
    _rotation: 0,
    /**@
     * #.alpha
     * @comp 2D
     * Transparency of an entity. Must be a decimal value between 0.0 being fully transparent to 1.0 being fully opaque.
     */
    _alpha: 1.0,
    /**@
     * #.visible
     * @comp 2D
     * If the entity is visible or not. Accepts a true or false value.
     * Can be used for optimization by setting an entities visibility to false when not needed to be drawn.
     *
     * The entity will still exist and can be collided with but just won't be drawn.
     * @see Crafty.DrawManager.draw, Crafty.DrawManager.drawAll
     */
    _visible: true,

    /**@
     * #._globalZ
     * @comp 2D
     * When two entities overlap, the one with the larger `_globalZ` will be on top of the other.
     * @see Crafty.DrawManager.draw, Crafty.DrawManager.drawAll
     */
    _globalZ: null,

    _origin: null,
    _mbr: null,
    _entry: null,
    _children: null,
    _parent: null,
    _changed: false,

    _defineGetterSetter_setter: function () {
        //create getters and setters using __defineSetter__ and __defineGetter__
        this.__defineSetter__('x', function (v) {
            this._attr('_x', v);
        });
        this.__defineSetter__('y', function (v) {
            this._attr('_y', v);
        });
        this.__defineSetter__('w', function (v) {
            this._attr('_w', v);
        });
        this.__defineSetter__('h', function (v) {
            this._attr('_h', v);
        });
        this.__defineSetter__('z', function (v) {
            this._attr('_z', v);
        });
        this.__defineSetter__('rotation', function (v) {
            this._attr('_rotation', v);
        });
        this.__defineSetter__('alpha', function (v) {
            this._attr('_alpha', v);
        });
        this.__defineSetter__('visible', function (v) {
            this._attr('_visible', v);
        });

        this.__defineGetter__('x', function () {
            return this._x;
        });
        this.__defineGetter__('y', function () {
            return this._y;
        });
        this.__defineGetter__('w', function () {
            return this._w;
        });
        this.__defineGetter__('h', function () {
            return this._h;
        });
        this.__defineGetter__('z', function () {
            return this._z;
        });
        this.__defineGetter__('rotation', function () {
            return this._rotation;
        });
        this.__defineGetter__('alpha', function () {
            return this._alpha;
        });
        this.__defineGetter__('visible', function () {
            return this._visible;
        });
        this.__defineGetter__('parent', function () {
            return this._parent;
        });
        this.__defineGetter__('numChildren', function () {
            return this._children.length;
        });
    },

    _defineGetterSetter_defineProperty: function () {
        Object.defineProperty(this, 'x', {
            set: function (v) {
                this._attr('_x', v);
            },
            get: function () {
                return this._x;
            },
            configurable: true
        });

        Object.defineProperty(this, 'y', {
            set: function (v) {
                this._attr('_y', v);
            },
            get: function () {
                return this._y;
            },
            configurable: true
        });

        Object.defineProperty(this, 'w', {
            set: function (v) {
                this._attr('_w', v);
            },
            get: function () {
                return this._w;
            },
            configurable: true
        });

        Object.defineProperty(this, 'h', {
            set: function (v) {
                this._attr('_h', v);
            },
            get: function () {
                return this._h;
            },
            configurable: true
        });

        Object.defineProperty(this, 'z', {
            set: function (v) {
                this._attr('_z', v);
            },
            get: function () {
                return this._z;
            },
            configurable: true
        });

        Object.defineProperty(this, 'rotation', {
            set: function (v) {
                this._attr('_rotation', v);
            },
            get: function () {
                return this._rotation;
            },
            configurable: true
        });

        Object.defineProperty(this, 'alpha', {
            set: function (v) {
                this._attr('_alpha', v);
            },
            get: function () {
                return this._alpha;
            },
            configurable: true
        });

        Object.defineProperty(this, 'visible', {
            set: function (v) {
                this._attr('_visible', v);
            },
            get: function () {
                return this._visible;
            },
            configurable: true
        });
    },

    init: function () {
        this._globalZ = this[0];
        this._origin = {
            x: 0,
            y: 0
        };

        // offsets for the basic bounding box
        this._bx1 = 0;
        this._bx2 = 0;
        this._by1 = 0;
        this._by2 = 0;

        this._children = [];

        if (Crafty.support.setter) {
            this._defineGetterSetter_setter();
        } else if (Crafty.support.defineProperty) {
            //IE9 supports Object.defineProperty
            this._defineGetterSetter_defineProperty();
        }

        //insert self into the HashMap
        this._entry = Crafty.map.insert(this);

        //when object changes, update HashMap
        this.bind("Move", function (e) {
            // Choose the largest bounding region that exists
            var area = this._cbr || this._mbr || this;
            this._entry.update(area);
            // Move children (if any) by the same amount
            if (this._children.length > 0) {
                this._cascade(e);
            }
        });

        this.bind("Rotate", function (e) {
            // Choose the largest bounding region that exists
            var old = this._cbr || this._mbr || this;
            this._entry.update(old);
            // Rotate children (if any) by the same amount
            if (this._children.length > 0) {
                this._cascade(e);
            }
        });

        //when object is removed, remove from HashMap and destroy attached children
        this.bind("Remove", function () {
            if (this._children) {
                for (var i = 0; i < this._children.length; i++) {
                    // delete the child's _parent link, or else the child will splice itself out of
                    // this._children while destroying itself (which messes up this for-loop iteration).
                    delete this._children[i]._parent;

                    // Destroy child if possible (It's not always possible, e.g. the polygon attached
                    // by areaMap has no .destroy(), it will just get garbage-collected.)
                    if (this._children[i].destroy) {
                        this._children[i].destroy();
                    }
                }
                this._children = [];
            }

            if (this._parent) {
                this._parent.detach(this);
            }

            Crafty.map.remove(this);

            this.detach();
        });
    },


    /**@
     * #.offsetBoundary
     * @comp 2D
     * Extends the MBR of the entity by a specified amount.
     * 
     * @trigger BoundaryOffset - when the MBR offset changes
     * @sign public this .offsetBoundary(Number dx1, Number dy1, Number dx2, Number dy2)
     * @param dx1 - Extends the MBR to the left by this amount
     * @param dy1 - Extends the MBR upward by this amount
     * @param dx2 - Extends the MBR to the right by this amount
     * @param dy2 - Extends the MBR downward by this amount
     *
     * @sign public this .offsetBoundary(Number offset)
     * @param offset - Extend the MBR in all directions by this amount
     *
     * You would most likely use this function to ensure that custom canvas rendering beyond the extent of the entity's normal bounds is not clipped.
     */
    offsetBoundary: function(x1, y1, x2, y2){
        if (arguments.length === 1)
            y1 = x2 = y2 = x1;
        this._bx1 = x1;
        this._bx2 = x2;
        this._by1 = y1;
        this._by2 = y2;
        this.trigger("BoundaryOffset");
        this._calculateMBR();
        return this;
    },

    /**
     * Calculates the MBR when rotated some number of radians about an origin point o.
     * Necessary on a rotation, or a resize
     */

    _calculateMBR: function () {
        var ox = this._origin.x + this._x,
            oy = this._origin.y + this._y,
            rad = -this._rotation * DEG_TO_RAD;
        // axis-aligned (unrotated) coordinates, relative to the origin point
        var dx1 = this._x - this._bx1 - ox,
            dx2 = this._x + this._w + this._bx2 - ox,
            dy1 = this._y - this._by1 - oy,
            dy2 = this._y + this._h + this._by2 - oy;

        var ct = Math.cos(rad),
            st = Math.sin(rad);
        // Special case 90 degree rotations to prevent rounding problems
        ct = (ct < 1e-10 && ct > -1e-10) ? 0 : ct;
        st = (st < 1e-10 && st > -1e-10) ? 0 : st;

        // Calculate the new points relative to the origin, then find the new (absolute) bounding coordinates!
        var x0 =   dx1 * ct + dy1 * st,
            y0 = - dx1 * st + dy1 * ct,
            x1 =   dx2 * ct + dy1 * st,
            y1 = - dx2 * st + dy1 * ct,
            x2 =   dx2 * ct + dy2 * st,
            y2 = - dx2 * st + dy2 * ct,
            x3 =   dx1 * ct + dy2 * st,
            y3 = - dx1 * st + dy2 * ct,
            minx = Math.floor(Math.min(x0, x1, x2, x3) + ox),
            miny = Math.floor(Math.min(y0, y1, y2, y3) + oy),
            maxx = Math.ceil(Math.max(x0, x1, x2, x3) + ox),
            maxy = Math.ceil(Math.max(y0, y1, y2, y3) + oy);
        if (!this._mbr) {
            this._mbr = {
                _x: minx,
                _y: miny,
                _w: maxx - minx,
                _h: maxy - miny
            };
        } else {
            this._mbr._x = minx;
            this._mbr._y = miny;
            this._mbr._w = maxx - minx;
            this._mbr._h = maxy - miny;
        }

        // If a collision hitbox exists AND sits outside the entity, find a bounding box for both.
        // `_cbr` contains information about a bounding circle of the hitbox. 
        // The bounds of `_cbr` will be the union of the `_mbr` and the bounding box of that circle.
        // This will not be a minimal region, but since it's only used for the broad phase pass it's good enough. 
        //
        // cbr is calculated by the `_checkBounds` method of the "Collision" component
        if (this._cbr) {
            var cbr = this._cbr;
            var cx = cbr.cx, cy = cbr.cy, r = cbr.r;
            var cx2 = ox + (cx + this._x - ox) * ct + (cy + this._y - oy) * st;
            var cy2 = oy - (cx + this._x - ox) * st + (cy + this._y - oy) * ct;
            cbr._x = Math.min(cx2 - r, minx);
            cbr._y = Math.min(cy2 - r, miny);
            cbr._w = Math.max(cx2 + r, maxx) - cbr._x;
            cbr._h = Math.max(cy2 + r, maxy) - cbr._y;
        }

    },

    /**
     * Handle changes that need to happen on a rotation
     */
    _rotate: function (v) {
        var theta = -1 * (v % 360); //angle always between 0 and 359
        var difference = this._rotation - v;
        // skip if there's no rotation!
        if (difference === 0)
            return;
        else
            this._rotation = v;

        //Calculate the new MBR
        var rad = theta * DEG_TO_RAD,
            o = {
                x: this._origin.x + this._x,
                y: this._origin.y + this._y
            };

        this._calculateMBR();


        //trigger "Rotate" event
        var drad = difference * DEG_TO_RAD,
            ct = Math.cos(rad),
            st = Math.sin(rad);

        this.trigger("Rotate", {
            cos: Math.cos(drad),
            sin: Math.sin(drad),
            deg: difference,
            rad: drad,
            o: o
        });
    },

    /**@
     * #.area
     * @comp 2D
     * @sign public Number .area(void)
     * Calculates the area of the entity
     */
    area: function () {
        return this._w * this._h;
    },

    /**@
     * #.intersect
     * @comp 2D
     * @sign public Boolean .intersect(Number x, Number y, Number w, Number h)
     * @param x - X position of the rect
     * @param y - Y position of the rect
     * @param w - Width of the rect
     * @param h - Height of the rect
     * @sign public Boolean .intersect(Object rect)
     * @param rect - An object that must have the `x, y, w, h` values as properties
     * Determines if this entity intersects a rectangle.  If the entity is rotated, its MBR is used for the test.
     */
    intersect: function (x, y, w, h) {
        var rect, mbr = this._mbr || this;
        if (typeof x === "object") {
            rect = x;
        } else {
            rect = {
                x: x,
                y: y,
                w: w,
                h: h
            };
        }

        return mbr._x < rect.x + rect.w && mbr._x + mbr._w > rect.x &&
            mbr._y < rect.y + rect.h && mbr._h + mbr._y > rect.y;
    },

    /**@
     * #.within
     * @comp 2D
     * @sign public Boolean .within(Number x, Number y, Number w, Number h)
     * @param x - X position of the rect
     * @param y - Y position of the rect
     * @param w - Width of the rect
     * @param h - Height of the rect
     * @sign public Boolean .within(Object rect)
     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties
     * Determines if this current entity is within another rectangle.
     */
    within: function (x, y, w, h) {
        var rect, mbr = this._mbr || this;
        if (typeof x === "object") {
            rect = x;
        } else {
            rect = {
                _x: x,
                _y: y,
                _w: w,
                _h: h
            };
        }

        return rect._x <= mbr._x && rect._x + rect._w >= mbr._x + mbr._w &&
            rect._y <= mbr._y && rect._y + rect._h >= mbr._y + mbr._h;
    },

    /**@
     * #.contains
     * @comp 2D
     * @sign public Boolean .contains(Number x, Number y, Number w, Number h)
     * @param x - X position of the rect
     * @param y - Y position of the rect
     * @param w - Width of the rect
     * @param h - Height of the rect
     * @sign public Boolean .contains(Object rect)
     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties.
     * Determines if the rectangle is within the current entity.  If the entity is rotated, its MBR is used for the test.
     */
    contains: function (x, y, w, h) {
        var rect, mbr = this._mbr || this;
        if (typeof x === "object") {
            rect = x;
        } else {
            rect = {
                _x: x,
                _y: y,
                _w: w,
                _h: h
            };
        }

        return rect._x >= mbr._x && rect._x + rect._w <= mbr._x + mbr._w &&
            rect._y >= mbr._y && rect._y + rect._h <= mbr._y + mbr._h;
    },

    /**@
     * #.pos
     * @comp 2D
     * @sign public Object .pos(void)
     * Returns the x, y, w, h properties as a rect object
     * (a rect object is just an object with the keys _x, _y, _w, _h).
     *
     * The keys have an underscore prefix. This is due to the x, y, w, h
     * properties being merely setters and getters that wrap the properties with an underscore (_x, _y, _w, _h).
     */
    pos: function () {
        return {
            _x: (this._x),
            _y: (this._y),
            _w: (this._w),
            _h: (this._h)
        };
    },

    /**@
     * #.mbr
     * @comp 2D
     * @sign public Object .mbr()
     * Returns the minimum bounding rectangle. If there is no rotation
     * on the entity it will return the rect.
     */
    mbr: function () {
        if (!this._mbr) return this.pos();
        return {
            _x: (this._mbr._x),
            _y: (this._mbr._y),
            _w: (this._mbr._w),
            _h: (this._mbr._h)
        };
    },

    /**@
     * #.isAt
     * @comp 2D
     * @sign public Boolean .isAt(Number x, Number y)
     * @param x - X position of the point
     * @param y - Y position of the point
     * Determines whether a point is contained by the entity. Unlike other methods,
     * an object can't be passed. The arguments require the x and y value.
     *
     * The given point is tested against the first of the following that exists: a mapArea associated with "Mouse", the hitarea associated with "Collision", or the object's MBR.
     */
    isAt: function (x, y) {
        if (this.mapArea) {
            return this.mapArea.containsPoint(x, y);
        } else if (this.map) {
            return this.map.containsPoint(x, y);
        }
        var mbr = this._mbr || this;
        return mbr._x <= x && mbr._x + mbr._w >= x &&
            mbr._y <= y && mbr._y + mbr._h >= y;
    },

    /**@
     * #.move
     * @comp 2D
     * @sign public this .move(String dir, Number by)
     * @param dir - Direction to move (n,s,e,w,ne,nw,se,sw)
     * @param by - Amount to move in the specified direction
     * Quick method to move the entity in a direction (n, s, e, w, ne, nw, se, sw) by an amount of pixels.
     */
    move: function (dir, by) {
        if (dir.charAt(0) === 'n') this.y -= by;
        if (dir.charAt(0) === 's') this.y += by;
        if (dir === 'e' || dir.charAt(1) === 'e') this.x += by;
        if (dir === 'w' || dir.charAt(1) === 'w') this.x -= by;

        return this;
    },

    /**@
     * #.shift
     * @comp 2D
     * @sign public this .shift(Number x, Number y, Number w, Number h)
     * @param x - Amount to move X
     * @param y - Amount to move Y
     * @param w - Amount to widen
     * @param h - Amount to increase height
     * Shift or move the entity by an amount. Use negative values
     * for an opposite direction.
     */
    shift: function (x, y, w, h) {
        if (x) this.x += x;
        if (y) this.y += y;
        if (w) this.w += w;
        if (h) this.h += h;

        return this;
    },

    /**@
     * #._cascade
     * @comp 2D
     * @sign public void ._cascade(e)
     * @param e - An object describing the motion
     * Move or rotate the entity's children according to a certain motion.
     * This method is part of a function bound to "Move": It is used
     * internally for ensuring that when a parent moves, the child also
     * moves in the same way.
     */
    _cascade: function (e) {
        if (!e) return; //no change in position
        var i = 0,
            children = this._children,
            l = children.length,
            obj;
        //rotation
        if (e.cos) {
            for (; i < l; ++i) {
                obj = children[i];
                if ('rotate' in obj) obj.rotate(e);
            }
        } else {
            //use current position
            var dx = this._x - e._x,
                dy = this._y - e._y,
                dw = this._w - e._w,
                dh = this._h - e._h;

            for (; i < l; ++i) {
                obj = children[i];
                obj.shift(dx, dy, dw, dh);
            }
        }
    },

    /**@
     * #.attach
     * @comp 2D
     * @sign public this .attach(Entity obj[, .., Entity objN])
     * @param obj - Child entity(s) to attach
     * Sets one or more entities to be children, with the current entity (`this`)
     * as the parent. When the parent moves or rotates, its children move or
     * rotate by the same amount. (But not vice-versa: If you move a child, it
     * will not move the parent.) When the parent is destroyed, its children are
     * destroyed.
     *
     * For any entity, `this._children` is the array of its children entity
     * objects (if any), and `this._parent` is its parent entity object (if any).
     *
     * As many objects as wanted can be attached, and a hierarchy of objects is
     * possible by attaching.
     */
    attach: function () {
        var i = 0,
            arg = arguments,
            l = arguments.length,
            obj;
        for (; i < l; ++i) {
            obj = arg[i];
            if (obj._parent) {
                obj._parent.detach(obj);
            }
            obj._parent = this;
            this._children.push(obj);
        }

        return this;
    },

    /**@
     * #.detach
     * @comp 2D
     * @sign public this .detach([Entity obj])
     * @param obj - The entity to detach. Left blank will remove all attached entities
     * Stop an entity from following the current entity. Passing no arguments will stop
     * every entity attached.
     */
    detach: function (obj) {
        var i;
        //if nothing passed, remove all attached objects
        if (!obj) {
            for (i = 0; i < this._children.length; i++) {
                this._children[i]._parent = null;
            }
            this._children = [];
            return this;
        }

        //if obj passed, find the handler and unbind
        for (i = 0; i < this._children.length; i++) {
            if (this._children[i] == obj) {
                this._children.splice(i, 1);
            }
        }
        obj._parent = null;

        return this;
    },

    /**@
     * #.origin
     * @comp 2D
     * @sign public this .origin(Number x, Number y)
     * @param x - Pixel value of origin offset on the X axis
     * @param y - Pixel value of origin offset on the Y axis
     * @sign public this .origin(String offset)
     * @param offset - Combination of center, top, bottom, middle, left and right
     * Set the origin point of an entity for it to rotate around.
     *
     * @example
     * ~~~
     * this.origin("top left")
     * this.origin("center")
     * this.origin("bottom right")
     * this.origin("middle right")
     * ~~~
     *
     * @see .rotation
     */
    origin: function (x, y) {
        //text based origin
        if (typeof x === "string") {
            if (x === "centre" || x === "center" || x.indexOf(' ') === -1) {
                x = this._w / 2;
                y = this._h / 2;
            } else {
                var cmd = x.split(' ');
                if (cmd[0] === "top") y = 0;
                else if (cmd[0] === "bottom") y = this._h;
                else if (cmd[0] === "middle" || cmd[1] === "center" || cmd[1] === "centre") y = this._h / 2;

                if (cmd[1] === "center" || cmd[1] === "centre" || cmd[1] === "middle") x = this._w / 2;
                else if (cmd[1] === "left") x = 0;
                else if (cmd[1] === "right") x = this._w;
            }
        }

        this._origin.x = x;
        this._origin.y = y;

        return this;
    },

    /**@
     * #.flip
     * @comp 2D
     * @trigger Invalidate - when the entity has flipped
     * @sign public this .flip(String dir)
     * @param dir - Flip direction
     *
     * Flip entity on passed direction
     *
     * @example
     * ~~~
     * this.flip("X")
     * ~~~
     */
    flip: function (dir) {
        dir = dir || "X";
        if (!this["_flip" + dir]) {
            this["_flip" + dir] = true;
            this.trigger("Invalidate");
        }
        return this;
    },

    /**@
     * #.unflip
     * @comp 2D
     * @trigger Invalidate - when the entity has unflipped
     * @sign public this .unflip(String dir)
     * @param dir - Unflip direction
     *
     * Unflip entity on passed direction (if it's flipped)
     *
     * @example
     * ~~~
     * this.unflip("X")
     * ~~~
     */
    unflip: function (dir) {
        dir = dir || "X";
        if (this["_flip" + dir]) {
            this["_flip" + dir] = false;
            this.trigger("Invalidate");
        }
        return this;
    },

    /**
     * Method for rotation rather than through a setter
     */
    rotate: function (e) {
        var x2, y2;
        x2 =  (this._x + this._origin.x - e.o.x) * e.cos + (this._y + this._origin.y - e.o.y) * e.sin + (e.o.x - this._origin.x);
        y2 =  (this._y + this._origin.y - e.o.y) * e.cos - (this._x + this._origin.x - e.o.x) * e.sin + (e.o.y - this._origin.y);
        this._attr('_rotation', this._rotation - e.deg);
        this._attr('_x', x2 );
        this._attr('_y', y2 );
    },

    /**@
     * #._attr
     * @comp 2D
     * Setter method for all 2D properties including
     * x, y, w, h, alpha, rotation and visible.
     */
    _attr: function (name, value) {
        // Return if there is no change
        if (this[name] === value) {
            return;
        }
        //keep a reference of the old positions
        var old = Crafty._rectPool.copy(this);

        var mbr;
        //if rotation, use the rotate method
        if (name === '_rotation') {
            this._rotate(value); // _rotate triggers "Rotate"
            //set the global Z and trigger reorder just in case
        } else if (name === '_z') {
            this._globalZ = parseInt(value + Crafty.zeroFill(this[0], 5), 10); //magic number 10^5 is the max num of entities
            this.trigger("reorder");
            //if the rect bounds change, update the MBR and trigger move
        } else if (name === '_x' || name === '_y') {
            // mbr is the minimal bounding rectangle of the entity
            mbr = this._mbr;
            if (mbr) {
                mbr[name] -= this[name] - value;
                // cbr is a non-minmal bounding rectangle that contains both hitbox and mbr
                // It will exist only when the collision hitbox sits outside the entity
                if (this._cbr){
                    this._cbr[name] -= this[name] - value;
                }
            }
            this[name] = value;

            this.trigger("Move", old);

        } else if (name === '_h' || name === '_w') {
            mbr = this._mbr;

            var oldValue = this[name];
            this[name] = value;
            if (mbr) {
                this._calculateMBR();
            }
            if (name === '_w') {
                this.trigger("Resize", {
                    axis: 'w',
                    amount: value - oldValue
                });
            } else if (name === '_h') {
                this.trigger("Resize", {
                    axis: 'h',
                    amount: value - oldValue
                });
            }
            this.trigger("Move", old);

        }

        //everything will assume the value
        this[name] = value;

        // flag for redraw
        this.trigger("Invalidate");

        Crafty._rectPool.recycle(old);
    }
});

/**@
 * #Gravity
 * @category 2D
 * @trigger Moved - When entity has moved on y-axis a Moved event is triggered with an object specifying the old position {x: old_x, y: old_y}
 * 
 * Adds gravitational pull to the entity.
 */
Crafty.c("Gravity", {
    _gravityConst: 0.2,
    _gy: 0,
    _falling: true,
    _anti: null,

    init: function () {
        this.requires("2D");
    },

    /**@
     * #.gravity
     * @comp Gravity
     * @sign public this .gravity([comp])
     * @param comp - The name of a component that will stop this entity from falling
     *
     * Enable gravity for this entity no matter whether comp parameter is not specified,
     * If comp parameter is specified all entities with that component will stop this entity from falling.
     * For a player entity in a platform game this would be a component that is added to all entities
     * that the player should be able to walk on.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Color, Gravity")
     *   .color("red")
     *   .attr({ w: 100, h: 100 })
     *   .gravity("platform");
     * ~~~
     */
    gravity: function (comp) {
        if (comp) this._anti = comp;
        if(isNaN(this._jumpSpeed)) this._jumpSpeed = 0; //set to 0 if Twoway component is not present

        this.bind("EnterFrame", this._enterFrame);

        return this;
    },

    /**@
     * #.gravityConst
     * @comp Gravity
     * @sign public this .gravityConst(g)
     * @param g - gravitational constant
     *
     * Set the gravitational constant to g. The default is .2. The greater g, the faster the object falls.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Color, Gravity")
     *   .color("red")
     *   .attr({ w: 100, h: 100 })
     *   .gravity("platform")
     *   .gravityConst(2)
     * ~~~
     */
    gravityConst: function (g) {
        this._gravityConst = g;
        return this;
    },

    _enterFrame: function () {
        if (this._falling) {
            //if falling, move the players Y
            this._gy += this._gravityConst;
            this.y += this._gy;
            this.trigger('Moved', { x: this._x, y: this._y - this._gy });
        } else {
            this._gy = 0; //reset change in y
        }

        var obj, hit = false,
            pos = this.pos(),
            q, i = 0,
            l;

        //Increase by 1 to make sure map.search() finds the floor
        pos._y++;

        //map.search wants _x and intersect wants x...
        pos.x = pos._x;
        pos.y = pos._y;
        pos.w = pos._w;
        pos.h = pos._h;

        q = Crafty.map.search(pos);
        l = q.length;

        for (; i < l; ++i) {
            obj = q[i];
            //check for an intersection directly below the player
            if (obj !== this && obj.has(this._anti) && obj.intersect(pos)) {
                hit = obj;
                break;
            }
        }

        if (hit) { //stop falling if found and player is moving down
            if (this._falling && ((this._gy > this._jumpSpeed) || !this._up)){
              this.stopFalling(hit);
            }
        } else {
            this._falling = true; //keep falling otherwise
        }
    },

    stopFalling: function (e) {
        if (e) this.y = e._y - this._h; //move object

        //this._gy = -1 * this._bounce;
        this._falling = false;
        if (this._up) this._up = false;
        this.trigger("hit");
    },

    /**@
     * #.antigravity
     * @comp Gravity
     * @sign public this .antigravity()
     * Disable gravity for this component. It can be reenabled by calling .gravity()
     */
    antigravity: function () {
        this.unbind("EnterFrame", this._enterFrame);
    }
});

/**@
 * #Crafty.polygon
 * @category 2D
 *
 * Polygon object used for hitboxes and click maps. Must pass an Array for each point as an
 * argument where index 0 is the x position and index 1 is the y position.
 *
 * For example one point of a polygon will look like this: `[0,5]` where the `x` is `0` and the `y` is `5`.
 *
 * Can pass an array of the points or simply put each point as an argument.
 *
 * When creating a polygon for an entity, each point should be offset or relative from the entities `x` and `y`
 * (don't include the absolute values as it will automatically calculate this).
 *
 *
 * @example
 * ~~~
 * new Crafty.polygon([50,0],[100,100],[0,100]);
 * new Crafty.polygon([[50,0],[100,100],[0,100]]);
 * ~~~
 */
Crafty.polygon = function (poly) {
    if (arguments.length > 1) {
        poly = Array.prototype.slice.call(arguments, 0);
    }
    this.points = poly;
};

Crafty.polygon.prototype = {
    /**@
     * #.containsPoint
     * @comp Crafty.polygon
     * @sign public Boolean .containsPoint(Number x, Number y)
     * @param x - X position of the point
     * @param y - Y position of the point
     *
     * Method is used to determine if a given point is contained by the polygon.
     *
     * @example
     * ~~~
     * var poly = new Crafty.polygon([50,0],[100,100],[0,100]);
     * poly.containsPoint(50, 50); //TRUE
     * poly.containsPoint(0, 0); //FALSE
     * ~~~
     */
    containsPoint: function (x, y) {
        var p = this.points,
            i, j, c = false;

        for (i = 0, j = p.length - 1; i < p.length; j = i++) {
            if (((p[i][1] > y) != (p[j][1] > y)) && (x < (p[j][0] - p[i][0]) * (y - p[i][1]) / (p[j][1] - p[i][1]) + p[i][0])) {
                c = !c;
            }
        }

        return c;
    },

    /**@
     * #.shift
     * @comp Crafty.polygon
     * @sign public void .shift(Number x, Number y)
     * @param x - Amount to shift the `x` axis
     * @param y - Amount to shift the `y` axis
     *
     * Shifts every single point in the polygon by the specified amount.
     *
     * @example
     * ~~~
     * var poly = new Crafty.polygon([50,0],[100,100],[0,100]);
     * poly.shift(5,5);
     * //[[55,5], [105,5], [5,105]];
     * ~~~
     */
    shift: function (x, y) {
        var i = 0,
            l = this.points.length,
            current;
        for (; i < l; i++) {
            current = this.points[i];
            current[0] += x;
            current[1] += y;
        }
    },

    rotate: function (e) {
        var i = 0,
            l = this.points.length,
            current, x, y;

        for (; i < l; i++) {
            current = this.points[i];

            x = e.o.x + (current[0] - e.o.x) * e.cos + (current[1] - e.o.y) * e.sin;
            y = e.o.y - (current[0] - e.o.x) * e.sin + (current[1] - e.o.y) * e.cos;

            current[0] = x;
            current[1] = y;
        }
    }
};

/**@
 * #Crafty.circle
 * @category 2D
 * Circle object used for hitboxes and click maps. Must pass a `x`, a `y` and a `radius` value.
 *
 *@example
 * ~~~
 * var centerX = 5,
 *     centerY = 10,
 *     radius = 25;
 *
 * new Crafty.circle(centerX, centerY, radius);
 * ~~~
 *
 * When creating a circle for an entity, each point should be offset or relative from the entities `x` and `y`
 * (don't include the absolute values as it will automatically calculate this).
 */
Crafty.circle = function (x, y, radius) {
    this.x = x;
    this.y = y;
    this.radius = radius;

    // Creates an octagon that approximate the circle for backward compatibility.
    this.points = [];
    var theta;

    for (var i = 0; i < 8; i++) {
        theta = i * Math.PI / 4;
        this.points[i] = [this.x + (Math.sin(theta) * radius), this.y + (Math.cos(theta) * radius)];
    }
};

Crafty.circle.prototype = {
    /**@
     * #.containsPoint
     * @comp Crafty.circle
     * @sign public Boolean .containsPoint(Number x, Number y)
     * @param x - X position of the point
     * @param y - Y position of the point
     *
     * Method is used to determine if a given point is contained by the circle.
     *
     * @example
     * ~~~
     * var circle = new Crafty.circle(0, 0, 10);
     * circle.containsPoint(0, 0); //TRUE
     * circle.containsPoint(50, 50); //FALSE
     * ~~~
     */
    containsPoint: function (x, y) {
        var radius = this.radius,
            sqrt = Math.sqrt,
            deltaX = this.x - x,
            deltaY = this.y - y;

        return (deltaX * deltaX + deltaY * deltaY) < (radius * radius);
    },

    /**@
     * #.shift
     * @comp Crafty.circle
     * @sign public void .shift(Number x, Number y)
     * @param x - Amount to shift the `x` axis
     * @param y - Amount to shift the `y` axis
     *
     * Shifts the circle by the specified amount.
     *
     * @example
     * ~~~
     * var circle = new Crafty.circle(0, 0, 10);
     * circle.shift(5,5);
     * //{x: 5, y: 5, radius: 10};
     * ~~~
     */
    shift: function (x, y) {
        this.x += x;
        this.y += y;

        var i = 0,
            l = this.points.length,
            current;
        for (; i < l; i++) {
            current = this.points[i];
            current[0] += x;
            current[1] += y;
        }
    },

    rotate: function () {
        // We are a circle, we don't have to rotate :)
    }
};


Crafty.matrix = function (m) {
    this.mtx = m;
    this.width = m[0].length;
    this.height = m.length;
};

Crafty.matrix.prototype = {
    x: function (other) {
        if (this.width != other.height) {
            return;
        }

        var result = [];
        for (var i = 0; i < this.height; i++) {
            result[i] = [];
            for (var j = 0; j < other.width; j++) {
                var sum = 0;
                for (var k = 0; k < this.width; k++) {
                    sum += this.mtx[i][k] * other.mtx[k][j];
                }
                result[i][j] = sum;
            }
        }
        return new Crafty.matrix(result);
    },


    e: function (row, col) {
        //test if out of bounds
        if (row < 1 || row > this.mtx.length || col < 1 || col > this.mtx[0].length) return null;
        return this.mtx[row - 1][col - 1];
    }
};


    

/**@
 * #DOM
 * @category Graphics
 * Draws entities as DOM nodes, specifically `<DIV>`s.
 */
Crafty.c("DOM", {
    /**@
     * #._element
     * @comp DOM
     * The DOM element used to represent the entity.
     */
    _element: null,
    //holds current styles, so we can check if there are changes to be written to the DOM
    _cssStyles: null,

    /**@
     * #.avoidCss3dTransforms
     * @comp DOM
     * Avoids using of CSS 3D Transform for positioning when true. Default value is false.
     */
    avoidCss3dTransforms: false,

    init: function () {
        this._cssStyles = {
            visibility: '',
            left: '',
            top: '',
            width: '',
            height: '',
            zIndex: '',
            opacity: '',
            transformOrigin: '',
            transform: ''
        };
        this._element = document.createElement("div");
        //Crafty.stage.inner.appendChild(this._element);
        this._element.style.position = "absolute";
        this._element.id = "ent" + this[0];

        this.bind("Invalidate", function () {
            if (!this._changed) {
                this._changed = true;
                Crafty.DrawManager.addDom(this);
            }
        });

        function updateClass() {
            var i = 0,
                c = this.__c,
                str = "";
            for (i in c) {
                str += ' ' + i;
            }
            str = str.substr(1);
            this._element.className = str;
        }

        function removeClass(removedComponent) {
            var i = 0,
                c = this.__c,
                str = "";
            for (i in c) {
              if(i != removedComponent) {
                str += ' ' + i;
              }
            }
            str = str.substr(1);
            this._element.className = str;
        }

        this.bind("NewComponent", updateClass).bind("RemoveComponent", removeClass);

        this.bind("Remove", this.undraw);
        this.bind("RemoveComponent", function (compName) {
            if (compName === "DOM")
                this.undraw();
        });
    },

    /**@
     * #.getDomId
     * @comp DOM
     * @sign public this .getId()
     *
     * Get the Id of the DOM element used to represent the entity.
     */
    getDomId: function () {
        return this._element.id;
    },

    /**@
     * #.DOM
     * @comp DOM
     * @trigger Draw - when the entity is ready to be drawn to the stage - { style:String, type:"DOM", co}
     * @sign public this .DOM(HTMLElement elem)
     * @param elem - HTML element that will replace the dynamically created one
     *
     * Pass a DOM element to use rather than one created. Will set `._element` to this value. Removes the old element.
     */
    DOM: function (elem) {
        if (elem && elem.nodeType) {
            this.undraw();
            this._element = elem;
            this._element.style.position = 'absolute';
        }
        return this;
    },

    /**@
     * #.draw
     * @comp DOM
     * @sign public this .draw(void)
     *
     * Updates the CSS properties of the node to draw on the stage.
     */
    draw: function () {
        var style = this._element.style,
            coord = this.__coord || [0, 0, 0, 0],
            co = {
                x: coord[0],
                y: coord[1],
                w: coord[2],
                h: coord[3]
            },
            prefix = Crafty.support.prefix,
            trans = [];

        if (this._cssStyles.visibility !== this._visible) {
            this._cssStyles.visibility = this._visible;
            if (!this._visible) {
                style.visibility = "hidden";
            } else {
                style.visibility = "visible";
            }
        }

        //utilize CSS3 if supported
        if (Crafty.support.css3dtransform && !this.avoidCss3dTransforms) {
            trans.push("translate3d(" + (~~this._x) + "px," + (~~this._y) + "px,0)");
        } else {
            if (this._cssStyles.left !== this._x) {
                this._cssStyles.left = this._x;
                style.left = ~~ (this._x) + "px";
            }
            if (this._cssStyles.top !== this._y) {
                this._cssStyles.top = this._y;
                style.top = ~~ (this._y) + "px";
            }
        }

        if (this._cssStyles.width !== this._w) {
            this._cssStyles.width = this._w;
            style.width = ~~ (this._w) + "px";
        }
        if (this._cssStyles.height !== this._h) {
            this._cssStyles.height = this._h;
            style.height = ~~ (this._h) + "px";
        }
        if (this._cssStyles.zIndex !== this._z) {
            this._cssStyles.zIndex = this._z;
            style.zIndex = this._z;
        }

        if (this._cssStyles.opacity !== this._alpha) {
            this._cssStyles.opacity = this._alpha;
            style.opacity = this._alpha;
            style[prefix + "Opacity"] = this._alpha;
        }

        if (this._mbr) {
            var origin = this._origin.x + "px " + this._origin.y + "px";
            style.transformOrigin = origin;
            style[prefix + "TransformOrigin"] = origin;
            if (Crafty.support.css3dtransform) trans.push("rotateZ(" + this._rotation + "deg)");
            else trans.push("rotate(" + this._rotation + "deg)");
        }

        if (this._flipX) {
            trans.push("scaleX(-1)");
        }

        if (this._flipY) {
            trans.push("scaleY(-1)");
        }

        if (this._cssStyles.transform != trans.join(" ")) {
            this._cssStyles.transform = trans.join(" ");
            style.transform = this._cssStyles.transform;
            style[prefix + "Transform"] = this._cssStyles.transform;
        }

        this.trigger("Draw", {
            style: style,
            type: "DOM",
            co: co
        });

        return this;
    },

    /**@
     * #.undraw
     * @comp DOM
     * @sign public this .undraw(void)
     *
     * Removes the element from the stage.
     */
    undraw: function () {
        if (this._element) {
            Crafty.stage.inner.removeChild(this._element);
        }
        return this;
    },

    /**@
     * #.css
     * @comp DOM
     * @sign public css(String property, String value)
     * @param property - CSS property to modify
     * @param value - Value to give the CSS property
     *
     * @sign public  css(Object map)
     * @param map - Object where the key is the CSS property and the value is CSS value
     *
     * Apply CSS styles to the element.
     *
     * Can pass an object where the key is the style property and the value is style value.
     *
     * For setting one style, simply pass the style as the first argument and the value as the second.
     *
     * The notation can be CSS or JS (e.g. `text-align` or `textAlign`).
     *
     * To return a value, pass the property.
     *
     * Note: For entities with "Text" component, some css properties are controlled by separate functions
     * `.textFont()` and `.textColor()`, and ignore `.css()` settings. See Text component for details.
     *
     * @example
     * ~~~
     * this.css({'text-align', 'center', 'text-decoration': 'line-through'});
     * this.css("textAlign", "center");
     * this.css("text-align"); //returns center
     * ~~~
     */
    css: function (obj, value) {
        var key,
            elem = this._element,
            val,
            style = elem.style;

        //if an object passed
        if (typeof obj === "object") {
            for (key in obj) {
                if (!obj.hasOwnProperty(key)) continue;
                val = obj[key];
                if (typeof val === "number") val += 'px';

                style[Crafty.DOM.camelize(key)] = val;
            }
        } else {
            //if a value is passed, set the property
            if (value) {
                if (typeof value === "number") value += 'px';
                style[Crafty.DOM.camelize(obj)] = value;
            } else { //otherwise return the computed property
                return Crafty.DOM.getStyle(elem, obj);
            }
        }

        this.trigger("Invalidate");

        return this;
    }
});


Crafty.extend({
    /**@
     * #Crafty.DOM
     * @category Graphics
     *
     * Collection of utilities for using the DOM.
     */
    DOM: {
        /**@
         * #Crafty.DOM.window
         * @comp Crafty.DOM
         *
         * Object with `width` and `height` values representing the width
         * and height of the `window`.
         */
        window: {
            init: function () {/*
                this.width = window.innerWidth || (window.document.documentElement.clientWidth || window.document.body.clientWidth);
                this.height = window.innerHeight || (window.document.documentElement.clientHeight || window.document.body.clientHeight);

                // Bind scene rendering (see drawing.js)
                Crafty.uniqueBind("RenderScene", Crafty.DrawManager.renderDOM);
                // Resize the viewport
                Crafty.uniqueBind("ViewportResize", this._resize);
*/
            },

            _resize: function(){/*
                Crafty.stage.elem.style.width = Crafty.viewport.width + "px";
                Crafty.stage.elem.style.height = Crafty.viewport.height + "px";*/
            },

            width: 0,
            height: 0
        },

        /**@
         * #Crafty.DOM.inner
         * @comp Crafty.DOM
         * @sign public Object Crafty.DOM.inner(HTMLElement obj)
         * @param obj - HTML element to calculate the position
         * @returns Object with `x` key being the `x` position, `y` being the `y` position
         *
         * Find a DOM elements position including
         * padding and border.
         */
        inner: function (obj) {
            var rect = obj.getBoundingClientRect(),
                x = rect.left + (window.pageXOffset ? window.pageXOffset : document.body.scrollLeft),
                y = rect.top + (window.pageYOffset ? window.pageYOffset : document.body.scrollTop),

                //border left
                borderX = parseInt(this.getStyle(obj, 'border-left-width') || 0, 10) || parseInt(this.getStyle(obj, 'borderLeftWidth') || 0, 10) || 0,
                borderY = parseInt(this.getStyle(obj, 'border-top-width') || 0, 10) || parseInt(this.getStyle(obj, 'borderTopWidth') || 0, 10) || 0;

            x += borderX;
            y += borderY;

            return {
                x: x,
                y: y
            };
        },

        /**@
         * #Crafty.DOM.getStyle
         * @comp Crafty.DOM
         * @sign public Object Crafty.DOM.getStyle(HTMLElement obj, String property)
         * @param obj - HTML element to find the style
         * @param property - Style to return
         *
         * Determine the value of a style on an HTML element. Notation can be
         * in either CSS or JS.
         */
        getStyle: function (obj, prop) {
            var result;
            if (obj.currentStyle)
                result = obj.currentStyle[this.camelize(prop)];
            else if (window.getComputedStyle)
                result = document.defaultView.getComputedStyle(obj, null).getPropertyValue(this.csselize(prop));
            return result;
        },

        /**
         * Used in the Zepto framework
         *
         * Converts CSS notation to JS notation
         */
        camelize: function (str) {
            return str.replace(/-+(.)?/g, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },

        /**
         * Converts JS notation to CSS notation
         */
        csselize: function (str) {
            return str.replace(/[A-Z]/g, function (chr) {
                return chr ? '-' + chr.toLowerCase() : '';
            });
        },

        /**@
         * #Crafty.DOM.translate
         * @comp Crafty.DOM
         * @sign public Object Crafty.DOM.translate(Number clientX, Number clientY)
         * @param clientX - clientX position in the browser screen
         * @param clientY - clientY position in the browser screen
         * @return Object `{x: ..., y: ...}` with Crafty coordinates.
         * 
         * The parameters clientX and clientY are pixel coordinates within the visible
         * browser window. This function translates those to Crafty coordinates (i.e.,
         * the coordinates that you might apply to an entity), by taking into account
         * where the stage is within the screen, what the current viewport is, etc.
         */
        translate: function (clientX, clientY) {
            var doc = document.documentElement;
            var body = document.body;

            return {
                x: (clientX - Crafty.stage.x + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 )) / Crafty.viewport._scale - Crafty.viewport._x,
                y: (clientY - Crafty.stage.y + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 )) / Crafty.viewport._scale - Crafty.viewport._y
            };
        }
    }
});



    

/**@
 * #DebugCanvas
 * @category Debug
 * @trigger Draw - when the entity is ready to be drawn to the stage
 * @trigger NoCanvas - if the browser does not support canvas
 *
 * When this component is added to an entity it will be drawn by the DebugCanvas layer.
 *
 * Crafty.debugCanvas.init() will be automatically called if it is not called already to initialize the canvas element.
 *
 * To visualise an object's MBR, use "VisibleMBR".  To visualise a "Collision" object's hitbox, use "WiredHitBox" or "SolidHitBox".
 * @see DebugPolygon,  DebugRectangle
 */
Crafty.c("DebugCanvas", {
    init: function () {
        this.requires("2D");
        if (!Crafty.DebugCanvas.context)
            Crafty.DebugCanvas.init();
        Crafty.DebugCanvas.add(this);
        this._debug = {
            alpha: 1.0,
            lineWidth: 1
        };
        this.bind("RemoveComponent", this.onDebugRemove);
        this.bind("Remove", this.onDebugDestroy);
    },

    // When component is removed
    onDebugRemove: function (id) {
        if (id === "DebugCanvas") {
            Crafty.DebugCanvas.remove(this);
        }
    },

    //When entity is destroyed
    onDebugDestroy: function (id) {
        Crafty.DebugCanvas.remove(this);
    },

    /**@
     * #.debugAlpha
     * @comp DebugCanvas
     * @sign public  .debugAlpha(Number alpha)
     * @param alpha - The alpha level the component will be drawn with
     */
    debugAlpha: function (alpha) {
        this._debug.alpha = alpha;
        return this;
    },

    /**@
     * #.debugFill
     * @comp DebugCanvas
     * @sign public  .debugFill([String fillStyle])
     * @param fillStyle - The color the component will be filled with.  Defaults to "red". Pass the boolean false to turn off filling.
     * @example
     * ~~~
     * var myEntity = Crafty.e("2D, Collision, SolidHitBox ").debugFill("purple")
     * ~~~
     */
    debugFill: function (fillStyle) {
        if (typeof fillStyle === 'undefined')
            fillStyle = "red";
        this._debug.fillStyle = fillStyle;
        return this;
    },

    /**@
     * #.debugStroke
     * @comp DebugCanvas
     * @sign public  .debugStroke([String strokeStyle])
     * @param strokeStyle - The color the component will be outlined with.  Defaults to "red".  Pass the boolean false to turn this off.
     * @example
     * ~~~
     * var myEntity = Crafty.e("2D, Collision, WiredHitBox ").debugStroke("white")
     * ~~~
     */
    debugStroke: function (strokeStyle) {
        if (typeof strokeStyle === 'undefined')
            strokeStyle = "red";
        this._debug.strokeStyle = strokeStyle;
        return this;
    },

    debugDraw: function (ctx) {
        var ga = ctx.globalAlpha;
        var props = this._debug;

        if (props.alpha)
            ctx.globalAlpha = this._debug.alpha;

        if (props.strokeStyle)
            ctx.strokeStyle = props.strokeStyle;

        if (props.lineWidth)
            ctx.lineWidth = props.lineWidth;

        if (props.fillStyle)
            ctx.fillStyle = props.fillStyle;

        this.trigger("DebugDraw");

        ctx.globalAlpha = ga;

    }


});



/**@
 * #DebugRectangle
 * @category Debug
 *
 * A component for rendering an object with a position and dimensions to the debug canvas.
 *
 *
 * ~~~
 * var myEntity = Crafty.e("2D, DebugRectangle")
 *                      .attr({x: 13, y: 37, w: 42, h: 42})
 *                      .debugStroke("green");
 * myEntity.debugRectangle(myEntity)
 *~~~
 * @see DebugCanvas
 */
Crafty.c("DebugRectangle", {
    init: function () {
        this.requires("2D, DebugCanvas");
    },

    /**@
     * #.debugRectangle
     * @comp DebugRectangle
     * @sign public  .debugRectangle(Object rect)
     * @param rect - an object with _x, _y, _w, and _h to draw
     * Sets the rectangle that this component draws to the debug canvas.
     *
     */
    debugRectangle: function (rect) {
        this.debugRect = rect;
        this.unbind("DebugDraw", this.drawDebugRect);
        this.bind("DebugDraw", this.drawDebugRect);
        return this;

    },

    drawDebugRect: function () {

        ctx = Crafty.DebugCanvas.context;
        var rect = this.debugRect;
        if (rect === null || rect === undefined)
            return;
        if (rect._h && rect._w) {
            if (this._debug.fillStyle)
                ctx.fillRect(rect._x, rect._y, rect._w, rect._h);
            if (this._debug.strokeStyle)
                ctx.strokeRect(rect._x, rect._y, rect._w, rect._h);
        }

    }



});



/**@
 * #VisibleMBR
 * @category Debug
 *
 * Adding this component to an entity will cause it's MBR to be drawn to the debug canvas.
 *
 * The methods of DebugCanvas can be used to control this component's appearance.
 * @see 2D, DebugRectangle, DebugCanvas
 */
Crafty.c("VisibleMBR", {
    init: function () {
        this.requires("DebugRectangle")
            .debugFill("purple")
            .bind("EnterFrame", this._assignRect);
    },

    // Internal method for updating the MBR drawn.
    _assignRect: function () {
        if (this._mbr)
            this.debugRectangle(this._mbr);
        else
            this.debugRectangle(this);

    }


});


/**@
 * #DebugPolygon
 * @category Debug
 *
 * For drawing a polygon to the debug canvas
 *
 * The methods of DebugCanvas can be used to control this component's appearance -- by default it is neither filled nor outlined
 *
 * For debugging hitboxes, use WiredHitBox or SolidHitBox.  For debugging MBR, use VisibleMBR
 *
 * @see DebugCanvas
 */
Crafty.c("DebugPolygon", {
    init: function () {
        this.requires("2D, DebugCanvas");
    },


    /**@
     * #.debugPolygon
     * @comp DebugPolygon
     * @sign public  .debugPolygon(Polygon poly)
     * @param poly - a polygon to render
     * Sets the polygon that this component renders to the debug canvas.
     *
     */
    debugPolygon: function (poly) {
        this.polygon = poly;
        this.unbind("DebugDraw", this.drawDebugPolygon);
        this.bind("DebugDraw", this.drawDebugPolygon);
        return this;
    },

    drawDebugPolygon: function () {
        if (typeof this.polygon === "undefined")
            return;

        ctx = Crafty.DebugCanvas.context;
        ctx.beginPath();
        for (var p in this.polygon.points) {
            ctx.lineTo(this.polygon.points[p][0], this.polygon.points[p][1]);
        }
        ctx.closePath();

        if (this._debug.fillStyle)
            ctx.fill();
        if (this._debug.strokeStyle)
            ctx.stroke();
    }
});


/**@
 * #WiredHitBox
 * @category Debug
 *
 * Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas as an outline
 *
 * The methods of DebugCanvas can be used to control this component's appearance.
 * @see DebugPolygon, DebugCanvas
 */
Crafty.c("WiredHitBox", {
    init: function () {
        this.requires("DebugPolygon")
            .debugStroke("red")
            .matchHitBox();
        this.bind("NewHitbox", this.matchHitBox);
    },
    matchHitBox: function () {
        this.debugPolygon(this.map);
    }
});

/**@
 * #SolidHitBox
 * @category Debug
 *
 * Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas, with a default alpha level of 0.7.
 *
 * The methods of DebugCanvas can be used to control this component's appearance.
 * @see DebugPolygon, DebugCanvas
 */
Crafty.c("SolidHitBox", {
    init: function () {
        this.requires("Collision, DebugPolygon")
            .debugFill("orange").debugAlpha(0.7)
            .matchHitBox();
        this.bind("NewHitbox", this.matchHitBox);
    },
    matchHitBox: function () {
        this.debugPolygon(this.map);
    }
});

Crafty.DebugCanvas = {
    context: null,
    entities: [],
    onetimeEntities: [],
    add: function (ent) {
        this.entities.push(ent);
    },

    remove: function (ent) {
        var list = this.entities;
        for (var i = list.length - 1; i >= 0; i--)
            if (list[i] == ent)
                list.splice(i, 1);

    },

    // Mostly copied from canvas.init()
    // Called the first time a "DebugCanvas" component is added to an entity
    // We should consider how to abstract the idea of multiple canvases
    init: function () {
        if (!Crafty.DebugCanvas.context) {
            //check if canvas is supported
            if (!Crafty.support.canvas) {
                Crafty.trigger("NoCanvas");
                Crafty.stop();
                return;
            }

            //create an empty canvas element
            var c;
            c = document.createElement("canvas");
            c.width = Crafty.viewport.width;
            c.height = Crafty.viewport.height;
            c.style.position = 'absolute';
            c.style.left = "0px";
            c.style.top = "0px";
            c.id = "debug-canvas";
            // The debug canvas should be on the very top; the highest a regular zindex can get is ~10000
            c.style.zIndex = 100000;

            Crafty.stage.elem.appendChild(c);
            Crafty.DebugCanvas.context = c.getContext('2d');
            Crafty.DebugCanvas._canvas = c;



        }
        //Bind rendering of canvas context (see drawing.js)
        Crafty.unbind("RenderScene", Crafty.DebugCanvas.renderScene);
        Crafty.bind("RenderScene", Crafty.DebugCanvas.renderScene);

    },


    // copied from drawAll()
    renderScene: function (rect) {
        rect = rect || Crafty.viewport.rect();
        var q = Crafty.DebugCanvas.entities,
            i = 0,
            l = q.length,
            ctx = Crafty.DebugCanvas.context,
            current;

        var view = Crafty.viewport;
        ctx.setTransform(view._scale, 0, 0, view._scale, view._x, view._y);

        ctx.clearRect(rect._x, rect._y, rect._w, rect._h);


        //sort the objects by the global Z
        //q.sort(zsort);
        for (; i < l; i++) {
            current = q[i];
            current.debugDraw(ctx);
        }

    }

};



    


    



	

Crafty.easing = function(duration) {
	this.timePerFrame = 1000 / Crafty.timer.FPS();
	this.duration = duration;   //default duration given in ms
	this.reset();
};


Crafty.easing.prototype = {
	duration: 0,
	clock:0,
	steps: null,
	complete: false,
	paused: false,

	// init values
	reset: function(){
		this.loops = 1;
		this.clock = 0;
		this.complete = false;
		this.paused = false;
	},

	repeat: function(loopCount){
		this.loops = loopCount;
	},

	setProgress: function(progress, loopCount){
		this.clock = this.duration * progress;
		if (typeof loopCount !== "undefined")
			this.loops = loopCount;

	},

	pause: function(){
		this.paused = true;
	},

	resume: function(){
		this.paused = false;
		this.complete = false;
	},

	// Increment the clock by some amount dt
	// Handles looping and sets a flag on completion
	tick: function(dt){
		if (this.paused || this.complete) return;
		this.clock += dt;
		this.frames = Math.floor(this.clock/this.timePerFrame);
		while (this.clock >= this.duration && this.complete === false){
			this.loops--;
			if (this.loops > 0)
				this.clock -= this.duration;
			else
				this.complete = true;
		}
	},

	// same as value for now; with other time value functions would be more useful
	time: function(){
		return ( Math.min(this.clock/this.duration, 1) );

	},

	// Value is where along the tweening curve we are
	// For now it's simply linear; but we can easily add new types
	value: function(){
		return this.time();
	}

};







/**@
 * #Tween
 * @category Animation
 * @trigger TweenEnd - when a tween finishes - String - property
 *
 * Component to animate the change in 2D properties over time.
 */
Crafty.c("Tween", {

	init: function(){
		this.tweenGroup = {};
		this.tweenStart = {};
		this.tweens = [];
		this.bind("EnterFrame", this._tweenTick);

	},

	_tweenTick: function(frameData){
		var tween, v, i;
		for ( i = this.tweens.length-1; i>=0; i--){
			tween = this.tweens[i];
			tween.easing.tick(frameData.dt);
			v  = tween.easing.value();
			this._doTween(tween.props, v);
			if (tween.easing.complete) {
				this.tweens.splice(i, 1);
				this._endTween(tween.props);
			}
		}
	},

	_doTween: function(props, v){
		for (var name in props)
			this[name] = (1-v) * this.tweenStart[name] + v * props[name];

	},



	/**@
	* #.tween
	* @comp Tween
	* @sign public this .tween(Object properties, Number|String duration)
	* @param properties - Object of numeric properties and what they should animate to
	* @param duration - Duration to animate the properties over, in milliseconds.
	*
	* This method will animate numeric properties over the specified duration.
	* These include `x`, `y`, `w`, `h`, `alpha` and `rotation`.
	*
	* The object passed should have the properties as keys and the value should be the resulting
	* values of the properties.  The passed object might be modified if later calls to tween animate the same properties.
	*
	* @example
	* Move an object to 100,100 and fade out over 200 ms.
	* ~~~
	* Crafty.e("2D, Tween")
	*    .attr({alpha: 1.0, x: 0, y: 0})
	*    .tween({alpha: 0.0, x: 100, y: 100}, 200)
	* ~~~
	* @example
	* Rotate an object over 2 seconds
	* ~~~
	* Crafty.e("2D, Tween")
	*    .attr({rotate:0})
	*    .tween({rotate:180}, 2000)
	* ~~~
	*
	*/
	tween: function (props, duration) {

		var tween = {
			props: props,
			easing: new Crafty.easing(duration)
		};

		// Tweens are grouped together by the original function call.
		// Individual properties must belong to only a single group
		// When a new tween starts, if it already belongs to a group, move it to the new one
		// Record the group it currently belongs to, as well as its starting coordinate.
		for (var propname in props){
			if (typeof this.tweenGroup[propname] !== "undefined")
				this.cancelTween(propname);
			this.tweenStart[propname] = this[propname];
			this.tweenGroup[propname] = props;
		}
		this.tweens.push(tween);

		return this;

	},

	/**@
	* #.cancelTween
	* @comp Tween
	* @sign public this .cancelTween(String target)
	* @param target - The property to cancel
	*
	* @sign public this .cancelTween(Object target)
	* @param target - An object containing the properties to cancel.
	*
	* Stops tweening the specified property or properties.
	* Passing the object used to start the tween might be a typical use of the second signature.
	*/
	cancelTween: function(target){
		if (typeof target === "string"){
			if (typeof this.tweenGroup[target] == "object" )
				delete this.tweenGroup[target][target];
		} else if (typeof target === "object") {
			for (var propname in target)
				this.cancelTween(propname);
		}

		return this;

	},

	/*
	* Stops tweening the specified group of properties, and fires the "TweenEnd" event.
	*/
	_endTween: function(properties){
		for (var propname in properties){
			delete this.tweenGroup[propname];
		}
		this.trigger("TweenEnd", properties);
	}
});



    

/**@
 * #Canvas
 * @category Graphics
 * @trigger Draw - when the entity is ready to be drawn to the stage - {type: "canvas", pos, co, ctx}
 * @trigger NoCanvas - if the browser does not support canvas
 *
 * When this component is added to an entity it will be drawn to the global canvas element. The canvas element (and hence all Canvas entities) is always rendered below any DOM entities.
 *
 * Crafty.canvas.init() will be automatically called if it is not called already to initialize the canvas element.
 *
 * Create a canvas entity like this
 * ~~~
 * var myEntity = Crafty.e("2D, Canvas, Color")
 *      .color("green")
 *      .attr({x: 13, y: 37, w: 42, h: 42});
 *~~~
 */
Crafty.c("Canvas", {

    init: function () {
        if (!Crafty.canvas.context) {
            Crafty.canvas.init();
        }

        //increment the amount of canvas objs
        Crafty.DrawManager.total2D++;
        //Allocate an object to hold this components current region
        this.currentRect = {};
        this._changed = true;
        Crafty.DrawManager.addCanvas(this);

        this.bind("Invalidate", function (e) {
            //flag if changed
            if (this._changed === false) {
                this._changed = true;
                Crafty.DrawManager.addCanvas(this);
            }

        });


        this.bind("Remove", function () {
            Crafty.DrawManager.total2D--;
            this._changed = true;
            Crafty.DrawManager.addCanvas(this);
        });
    },

    /**@
     * #.draw
     * @comp Canvas
     * @sign public this .draw([[Context ctx, ]Number x, Number y, Number w, Number h])
     * @param ctx - Canvas 2D context if drawing on another canvas is required
     * @param x - X offset for drawing a segment
     * @param y - Y offset for drawing a segment
     * @param w - Width of the segment to draw
     * @param h - Height of the segment to draw
     *
     * Method to draw the entity on the canvas element. Can pass rect values for redrawing a segment of the entity.
     */

    // Cache the various objects and arrays used in draw:
    drawVars: {
        type: "canvas",
        pos: {},
        ctx: null,
        coord: [0, 0, 0, 0],
        co: {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        }


    },

    draw: function (ctx, x, y, w, h) {
        if (!this.ready) return;
        if (arguments.length === 4) {
            h = w;
            w = y;
            y = x;
            x = ctx;
            ctx = Crafty.canvas.context;
        }

        var pos = this.drawVars.pos;
        pos._x = (this._x + (x || 0));
        pos._y = (this._y + (y || 0));
        pos._w = (w || this._w);
        pos._h = (h || this._h);


        context = ctx || Crafty.canvas.context;
        coord = this.__coord || [0, 0, 0, 0];
        var co = this.drawVars.co;
        co.x = coord[0] + (x || 0);
        co.y = coord[1] + (y || 0);
        co.w = w || coord[2];
        co.h = h || coord[3];

        if (this._rotation !== 0) {
            context.save();

            context.translate(this._origin.x + this._x, this._origin.y + this._y);
            pos._x = -this._origin.x;
            pos._y = -this._origin.y;

            context.rotate((this._rotation % 360) * (Math.PI / 180));
        }

        if (this._flipX || this._flipY) {
            context.save();
            context.scale((this._flipX ? -1 : 1), (this._flipY ? -1 : 1));
            if (this._flipX) {
                pos._x = -(pos._x + pos._w);
            }
            if (this._flipY) {
                pos._y = -(pos._y + pos._h);
            }
        }

        var globalpha;

        //draw with alpha
        if (this._alpha < 1.0) {
		    globalpha = context.globalAlpha;
            context.globalAlpha = this._alpha;
        }

        this.drawVars.ctx = context;
        this.trigger("Draw", this.drawVars);

        if (this._rotation !== 0 || (this._flipX || this._flipY)) {
            context.restore();
        }
        if (globalpha) {
            context.globalAlpha = globalpha;
        }
        return this;
    }
});

/**@
 * #Crafty.canvas
 * @category Graphics
 *
 * Collection of methods to draw on canvas.
 */
Crafty.extend({
    canvas: {
        /**@
         * #Crafty.canvas.context
         * @comp Crafty.canvas
         *
         * This will return the 2D context of the main canvas element.
         * The value returned from `Crafty.canvas._canvas.getContext('2d')`.
         */
        context: null,
        /**@
         * #Crafty.canvas._canvas
         * @comp Crafty.canvas
         *
         * Main Canvas element
         */

        /**@
         * #Crafty.canvas.init
         * @comp Crafty.canvas
         * @sign public void Crafty.canvas.init(void)
         * @trigger NoCanvas - triggered if `Crafty.support.canvas` is false
         *
         * Creates a `canvas` element inside `Crafty.stage.elem`. Must be called
         * before any entities with the Canvas component can be drawn.
         *
         * This method will automatically be called if no `Crafty.canvas.context` is
         * found.
         */
        init: function () {
            //check if canvas is supported
            if (!Crafty.support.canvas) {
                Crafty.trigger("NoCanvas");
                Crafty.stop();
                return;
            }

            //create an empty canvas element
            var c;
            c = document.createElement(navigator.isCocoonJS ? 'screencanvas' : 'canvas');
            c.width = Crafty.viewport.width;
            c.height = Crafty.viewport.height;
			if (navigator.isCocoonJS) c.screencanvas = true;
            /*c.style.position = 'absolute';
            c.style.left = "0px";
            c.style.top = "0px";*/

            /*Crafty.stage.elem.appendChild(c);*/document.body.appendChild(c);
            Crafty.canvas.context = c.getContext('2d');
			Crafty.canvas._canvas = c;

            //Set any existing transformations
            var zoom = Crafty.viewport._scale;
            if (zoom !== 1)
                Crafty.canvas.context.scale(zoom, zoom);

            //Bind rendering of canvas context (see drawing.js)
            Crafty.uniqueBind("RenderScene", Crafty.DrawManager.renderCanvas);

            Crafty.uniqueBind("ViewportResize", this._resize);
        },

        // Resize the canvas element to the current viewport
        _resize: function() {
            var c = Crafty.canvas._canvas;
            c.width = Crafty.viewport.width;
            c.height = Crafty.viewport.height;

        }

    }
});

    document = window.document,
    DEG_TO_RAD = Math.PI / 180;

/**@
 * #Collision
 * @category 2D
 * Component to detect collision between any two convex polygons.
 */
Crafty.c("Collision", {
    /**@
     * #.init
     * @comp Collision
     * Create a rectangle polygon based on the x, y, w, h dimensions.
     *
     * By default, the collision hitbox will match the dimensions (x, y, w, h) and rotation of the object.
     */
    init: function () {
        this.requires("2D");
        this.collision();
    },


    // Run by Crafty when the component is removed
    remove: function() {
        this._cbr = null;
        this.unbind("Resize", this._resizeMap);
        this.unbind("Resize", this._checkBounds);
    },

    /**@
     * #.collision
     * @comp Collision
     *
     * @trigger NewHitbox - when a new hitbox is assigned - Crafty.polygon
     *
     * @sign public this .collision([Crafty.polygon polygon])
     * @param polygon - Crafty.polygon object that will act as the hit area
     *
     * @sign public this .collision(Array point1, .., Array pointN)
     * @param point# - Array with an `x` and `y` position to generate a polygon
     *
     * Constructor takes a polygon or array of points to use as the hit area.
     *
     * The hit area (polygon) must be a convex shape and not concave
     * for the collision detection to work.
     *
     * Points are relative to the object's position and its unrotated state.
     *
     * If no parameter is passed, the x, y, w, h properties of the entity will be used, and the hitbox will be resized when the entity is.
     *
     * If a hitbox is set that is outside of the bounds of the entity itself, there will be a small performance penalty as it is tracked separately.
     *
     * @example
     * ~~~
     * Crafty.e("2D, Collision").collision(
     *     new Crafty.polygon([50,0], [100,100], [0,100])
     * );
     *
     * Crafty.e("2D, Collision").collision([50,0], [100,100], [0,100]);
     * ~~~
     *
     * @see Crafty.polygon
     */
    collision: function (poly) {
        // Unbind anything bound to "Resize"
        this.unbind("Resize", this._resizeMap);
        this.unbind("Resize", this._checkBounds);

        

        if (!poly) {
            // If no polygon is specified, then a polygon is created that matches the bounds of the entity
            // It will be adjusted on a "Resize" event
            poly = new Crafty.polygon([0, 0], [this._w, 0], [this._w, this._h], [0, this._h]);
            this.bind("Resize", this._resizeMap);
            this._cbr = null;
        } else {
            // Otherwise, we set the specified hitbox, converting from a list of arguments to a polygon if necessary
            if (arguments.length > 1) {
                //convert args to array to create polygon
                var args = Array.prototype.slice.call(arguments, 0);
                poly = new Crafty.polygon(args);
            }
            // Check to see if the polygon sits outside the entity, and set _cbr appropriately
            // On resize, the new bounds will be checked if necessary
            this._findBounds(poly.points);
        }


        // If the entity is currently rotated, the points in the hitbox must also be rotated
        if (this.rotation) {
            poly.rotate({
                cos: Math.cos(-this.rotation * DEG_TO_RAD),
                sin: Math.sin(-this.rotation * DEG_TO_RAD),
                o: {
                    x: this._origin.x,
                    y: this._origin.y
                }
            });
        }

        // Finally, assign the hitbox, and attach it to the "Collision" entity
        this.map = poly;
        this.attach(this.map);
        this.map.shift(this._x, this._y);
        this.trigger("NewHitbox", poly);
        return this;
    },


    // If the hitbox is set by hand, it might extend beyond the entity.
    // In such a case, we need to track this separately.
    // This function finds a (non-minimal) bounding circle around the hitbox.
    //
    // It uses a pretty naive algorithm to do so, for more complicated options see [wikipedia](http://en.wikipedia.org/wiki/Bounding_sphere).
    _findBounds: function(points) {
        var minX = Infinity, maxX = -Infinity, minY=Infinity, maxY=-Infinity;
        var p;

        // Calculate the MBR of the points by finding the min/max x and y
        for (var i=0; i<points.length; ++i){
            p = points[i];
            if (p[0] < minX)
                minX = p[0];
            if (p[0] > maxX)
                maxX = p[0];
            if (p[1] < minY)
                minY = p[1];
            if (p[1] > maxY)
                maxY = p[1];
        }

        // This describes a circle centered on the MBR of the points, with a diameter equal to its diagonal
        // It will be used to find a rough bounding box round the points, even if they've been rotated
        var cbr = {
                cx: (minX + maxX) / 2,
                cy: (minY + maxY) / 2,
                r: Math.sqrt( (maxX - minX)*(maxX - minX) + (maxY - minY)*(maxY - minY))/2,
        };

        // We need to worry about resizing, but only if resizing could possibly change whether the hitbox is in or out of bounds
        // Thus if the upper-left corner is out of bounds, then there's no need to recheck on resize
        if (minX >= 0 && minY >= 0) {
            this._checkBounds = function() {
                if (this._cbr === null && this._w < maxX || this._h < maxY ){
                   this._cbr = cbr;
                   this._calculateMBR();
                } else if (this._cbr) {
                    this._cbr = null;
                    this._calculateMBR();
                }
            };
            this.bind("Resize", this._checkBounds);
        }
        
        // If the hitbox is within the entity, _cbr is null
        // Otherwise, set it, and immediately calculate the bounding box.
        if (minX >= 0 && minY >= 0 && maxX <= this._w && maxY <= this._h){
            this._cbr = null;
            return false;
        } else {
            this._cbr = cbr;
            this._calculateMBR();
            return true;
        }
        
    },

    // The default behavior is to match the hitbox to the entity.  
    // This function will change the hitbox when a "Resize" event triggers. 
    _resizeMap: function (e) {

        var dx, dy, rot = this.rotation * DEG_TO_RAD,
            points = this.map.points;

        // Depending on the change of axis, move the corners of the rectangle appropriately
        if (e.axis === 'w') {

            if (rot) {
                dx = e.amount * Math.cos(rot);
                dy = e.amount * Math.sin(rot);
            } else {
                dx = e.amount;
                dy = 0;
            }

            // "top right" point shifts on change of w
            points[1][0] += dx;
            points[1][1] += dy;
        } else {

            if (rot) {
                dy = e.amount * Math.cos(rot);
                dx = -e.amount * Math.sin(rot);
            } else {
                dx = 0;
                dy = e.amount;
            }

            // "bottom left" point shifts on change of h
            points[3][0] += dx;
            points[3][1] += dy;
        }

        // "bottom right" point shifts on either change
        points[2][0] += dx;
        points[2][1] += dy;

    },

    /**@
     * #.hit
     * @comp Collision
     * @sign public Boolean/Array hit(String component)
     * @param component - Check collision with entities that has this component
     * @return `false` if no collision. If a collision is detected, returns an Array of objects that are colliding.
     *
     * Takes an argument for a component to test collision for. If a collision is found, an array of
     * every object in collision along with the amount of overlap is passed.
     *
     * If no collision, will return false. The return collision data will be an Array of Objects with the
     * type of collision used, the object collided and if the type used was SAT (a polygon was used as the hitbox) then an amount of overlap.\
     * ~~~
     * [{
     *    obj: [entity],
     *    type: "MBR" or "SAT",
     *    overlap: [number]
     * }]
     * ~~~
     * `MBR` is your standard axis aligned rectangle intersection (`.intersect` in the 2D component).
     * `SAT` is collision between any convex polygon.
     *
     * @see .onHit, 2D
     */
    hit: function (comp) {
        var area = this._cbr || this._mbr || this,
            results = Crafty.map.search(area, false),
            i = 0,
            l = results.length,
            dupes = {},
            id, obj, oarea, key,
            hasMap = ('map' in this && 'containsPoint' in this.map),
            finalresult = [];

        if (!l) {
            return false;
        }

        for (; i < l; ++i) {
            obj = results[i];
            oarea = obj._cbr || obj._mbr || obj; //use the mbr

            if (!obj) continue;
            id = obj[0];

            //check if not added to hash and that actually intersects
            if (!dupes[id] && this[0] !== id && obj.__c[comp] &&
                oarea._x < area._x + area._w && oarea._x + oarea._w > area._x &&
                oarea._y < area._y + area._h && oarea._h + oarea._y > area._y)
                dupes[id] = obj;
        }

        for (key in dupes) {
            obj = dupes[key];

            if (hasMap && 'map' in obj) {
                var SAT = this._SAT(this.map, obj.map);
                SAT.obj = obj;
                SAT.type = "SAT";
                if (SAT) finalresult.push(SAT);
            } else {
                finalresult.push({
                    obj: obj,
                    type: "MBR"
                });
            }
        }

        if (!finalresult.length) {
            return false;
        }

        return finalresult;
    },

    /**@
     * #.onHit
     * @comp Collision
     * @sign public this .onHit(String component, Function hit[, Function noHit])
     * @param component - Component to check collisions for
     * @param hit - Callback method to execute upon collision with component.  Will be passed the results of the collision check in the same format documented for hit().
     * @param noHit - Callback method executed once as soon as collision stops
     *
     * Creates an EnterFrame event calling .hit() each frame.  When a collision is detected the callback will be invoked.
     *
     * @see .hit
     */
    onHit: function (comp, callback, callbackOff) {
        var justHit = false;
        this.bind("EnterFrame", function () {
            var hitdata = this.hit(comp);
            if (hitdata) {
                justHit = true;
                callback.call(this, hitdata);
            } else if (justHit) {
                if (typeof callbackOff == 'function') {
                    callbackOff.call(this);
                }
                justHit = false;
            }
        });
        return this;
    },

    _SAT: function (poly1, poly2) {
        var points1 = poly1.points,
            points2 = poly2.points,
            i = 0,
            l = points1.length,
            j, k = points2.length,
            normal = {
                x: 0,
                y: 0
            },
            length,
            min1, min2,
            max1, max2,
            interval,
            MTV = null,
            MTV2 = null,
            MN = null,
            dot,
            nextPoint,
            currentPoint;

        //loop through the edges of Polygon 1
        for (; i < l; i++) {
            nextPoint = points1[(i == l - 1 ? 0 : i + 1)];
            currentPoint = points1[i];

            //generate the normal for the current edge
            normal.x = -(nextPoint[1] - currentPoint[1]);
            normal.y = (nextPoint[0] - currentPoint[0]);

            //normalize the vector
            length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);
            normal.x /= length;
            normal.y /= length;

            //default min max
            min1 = min2 = -1;
            max1 = max2 = -1;

            //project all vertices from poly1 onto axis
            for (j = 0; j < l; ++j) {
                dot = points1[j][0] * normal.x + points1[j][1] * normal.y;
                if (dot > max1 || max1 === -1) max1 = dot;
                if (dot < min1 || min1 === -1) min1 = dot;
            }

            //project all vertices from poly2 onto axis
            for (j = 0; j < k; ++j) {
                dot = points2[j][0] * normal.x + points2[j][1] * normal.y;
                if (dot > max2 || max2 === -1) max2 = dot;
                if (dot < min2 || min2 === -1) min2 = dot;
            }

            //calculate the minimum translation vector should be negative
            if (min1 < min2) {
                interval = min2 - max1;

                normal.x = -normal.x;
                normal.y = -normal.y;
            } else {
                interval = min1 - max2;
            }

            //exit early if positive
            if (interval >= 0) {
                return false;
            }

            if (MTV === null || interval > MTV) {
                MTV = interval;
                MN = {
                    x: normal.x,
                    y: normal.y
                };
            }
        }

        //loop through the edges of Polygon 2
        for (i = 0; i < k; i++) {
            nextPoint = points2[(i == k - 1 ? 0 : i + 1)];
            currentPoint = points2[i];

            //generate the normal for the current edge
            normal.x = -(nextPoint[1] - currentPoint[1]);
            normal.y = (nextPoint[0] - currentPoint[0]);

            //normalize the vector
            length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);
            normal.x /= length;
            normal.y /= length;

            //default min max
            min1 = min2 = -1;
            max1 = max2 = -1;

            //project all vertices from poly1 onto axis
            for (j = 0; j < l; ++j) {
                dot = points1[j][0] * normal.x + points1[j][1] * normal.y;
                if (dot > max1 || max1 === -1) max1 = dot;
                if (dot < min1 || min1 === -1) min1 = dot;
            }

            //project all vertices from poly2 onto axis
            for (j = 0; j < k; ++j) {
                dot = points2[j][0] * normal.x + points2[j][1] * normal.y;
                if (dot > max2 || max2 === -1) max2 = dot;
                if (dot < min2 || min2 === -1) min2 = dot;
            }

            //calculate the minimum translation vector should be negative
            if (min1 < min2) {
                interval = min2 - max1;

                normal.x = -normal.x;
                normal.y = -normal.y;
            } else {
                interval = min1 - max2;


            }

            //exit early if positive
            if (interval >= 0) {
                return false;
            }

            if (MTV === null || interval > MTV) MTV = interval;
            if (interval > MTV2 || MTV2 === null) {
                MTV2 = interval;
                MN = {
                    x: normal.x,
                    y: normal.y
                };
            }
        }

        return {
            overlap: MTV2,
            normal: MN
        };
    }
});



    

Crafty.extend({
    over: null, //object mouseover, waiting for out
    mouseObjs: 0,
    mousePos: {},
    lastEvent: null,
    keydown: {},
    selected: false,

    /**@
     * #Crafty.keydown
     * @category Input
     * Remembering what keys (referred by Unicode) are down.
     *
     * @example
     * ~~~
     * Crafty.c("Keyboard", {
     *   isDown: function (key) {
     *     if (typeof key === "string") {
     *       key = Crafty.keys[key];
     *     }
     *     return !!Crafty.keydown[key];
     *   }
     * });
     * ~~~
     * @see Keyboard, Crafty.keys
     */

    detectBlur: function (e) {
        var selected = ((e.clientX > Crafty.stage.x && e.clientX < Crafty.stage.x + Crafty.viewport.width) &&
            (e.clientY > Crafty.stage.y && e.clientY < Crafty.stage.y + Crafty.viewport.height));

        if (!Crafty.selected && selected)
            Crafty.trigger("CraftyFocus");
        if (Crafty.selected && !selected)
            Crafty.trigger("CraftyBlur");

        Crafty.selected = selected;
    },
    /**@
     * #Crafty.mouseDispatch
     * @category Input
     *
     * Internal method which dispatches mouse events received by Crafty (crafty.stage.elem).
     * The mouse events get dispatched to the closest entity to the source of the event (if available).
     *
     * This method also sets a global property Crafty.lastEvent, which holds the most recent event that
     * occured (useful for determining mouse position in every frame).
     * ~~~
     * var newestX = Crafty.lastEvent.realX,
     *     newestY = Crafty.lastEvent.realY;
     * ~~~
     *
     * Notable properties of a MouseEvent e:
     * ~~~
     * //(x,y) coordinates of mouse event in web browser screen space
     * e.clientX, e.clientY	
     * //(x,y) coordinates of mouse event in world/viewport space
     * e.realX, e.realY		
     * // Normalized mouse button according to Crafty.mouseButtons
     * e.mouseButton			
     * ~~~
     * @see Crafty.touchDispatch
     */
    mouseDispatch: function (e) {

        if (!Crafty.mouseObjs) return;
        Crafty.lastEvent = e;

        var maxz = -1,
            closest,
            q,
            i = 0,
            l,
            pos = Crafty.DOM.translate(e.clientX, e.clientY),
            x, y,
            dupes = {},
            tar = e.target ? e.target : e.srcElement,
            type = e.type;

        //Normalize button according to http://unixpapa.com/js/mouse.html
        if (typeof e.which === 'undefined') {
            e.mouseButton = (e.button < 2) ? Crafty.mouseButtons.LEFT : ((e.button == 4) ? Crafty.mouseButtons.MIDDLE : Crafty.mouseButtons.RIGHT);
        } else {
            e.mouseButton = (e.which < 2) ? Crafty.mouseButtons.LEFT : ((e.which == 2) ? Crafty.mouseButtons.MIDDLE : Crafty.mouseButtons.RIGHT);
        }

        e.realX = x = Crafty.mousePos.x = pos.x;
        e.realY = y = Crafty.mousePos.y = pos.y;

        //if it's a DOM element with Mouse component we are done
        /*if (tar.nodeName != "CANVAS") {
            while (typeof (tar.id) != 'string' && tar.id.indexOf('ent') == -1) {
                tar = tar.parentNode;
            }
            ent = Crafty(parseInt(tar.id.replace('ent', ''), 10));
            if (ent.has('Mouse') && ent.isAt(x, y))
                closest = ent;
        }*/
        //else we search for an entity with Mouse component
        if (!closest) {
            q = Crafty.map.search({
                _x: x,
                _y: y,
                _w: 1,
                _h: 1
            }, false);

            for (l = q.length; i < l; ++i) {
                if (!q[i].__c.Mouse || !q[i]._visible) continue;

                var current = q[i],
                    flag = false;

                //weed out duplicates
                if (dupes[current[0]]) continue;
                else dupes[current[0]] = true;

                if (current.mapArea) {
                    if (current.mapArea.containsPoint(x, y)) {
                        flag = true;
                    }
                } else if (current.isAt(x, y)) flag = true;

                if (flag && (current._z >= maxz || maxz === -1)) {
                    //if the Z is the same, select the closest GUID
                    if (current._z === maxz && current[0] < closest[0]) {
                        continue;
                    }
                    maxz = current._z;
                    closest = current;
                }
            }
        }

        //found closest object to mouse
        if (closest) {
            //click must mousedown and out on tile
            if (type === "mousedown") {
                closest.trigger("MouseDown", e);
            } else if (type === "mouseup") {
                closest.trigger("MouseUp", e);
            } else if (type == "dblclick") {
                closest.trigger("DoubleClick", e);
            } else if (type == "click") {
                closest.trigger("Click", e);
            } else if (type === "mousemove") {
                closest.trigger("MouseMove", e);
                if (this.over !== closest) { //if new mousemove, it is over
                    if (this.over) {
                        this.over.trigger("MouseOut", e); //if over wasn't null, send mouseout
                        this.over = null;
                    }
                    this.over = closest;
                    closest.trigger("MouseOver", e);
                }
            } else closest.trigger(type, e); //trigger whatever it is
        } else {
            if (type === "mousemove" && this.over) {
                this.over.trigger("MouseOut", e);
                this.over = null;
            }
            if (type === "mousedown") {
                Crafty.viewport.mouselook('start', e);
            } else if (type === "mousemove") {
                Crafty.viewport.mouselook('drag', e);
            } else if (type == "mouseup") {
                Crafty.viewport.mouselook('stop');
            }
        }

        if (type === "mousemove") {
            this.lastEvent = e;
        }

    },


    /**@
     * #Crafty.touchDispatch
     * @category Input
     *
     * TouchEvents have a different structure then MouseEvents.
     * The relevant data lives in e.changedTouches[0].
     * To normalize TouchEvents we catch them and dispatch a mock MouseEvent instead.
     *
     * @see Crafty.mouseDispatch
     */

    touchDispatch: function (e) {
        
		var maxz = -1,
            closest,
            q,
            i = 0,
            l,
            pos = Crafty.DOM.translate(e.clientX, e.clientY),
            x, y,
            dupes = {},
            tar = e.target ? e.target : e.srcElement,
            type = e.type;
	
		
		switch (type) {
			case 'touchstart':
				x = e.targetTouches[0].clientX;
				y = e.targetTouches[0].clientY;
			break;
			case 'touchmove':
				x = e.targetTouches[0].clientX;
				y = e.targetTouches[0].clientY;
			break;
			case 'touchend':
				x = e.changedTouches[0].clientX;
				y = e.changedTouches[0].clientY;
			break;
			case 'touchcancel':
				x = e.changedTouches[0].clientX;
				y = e.changedTouches[0].clientY;
			break;
		}
		
		//Crafty("TextoMouse").text("touchDispatch " + type + "(" + x + "," + y + ")");
		// hasta aquí todo bien
		
		closest = null;
		
		q = Crafty.map.search({
			_x: x,
			_y: y,
			_w: 1,
			_h: 1
		}, false);

		for (l = q.length; i < l; ++i) {
			if (!q[i].__c.Mouse || !q[i]._visible) continue;

			var current = q[i],
				flag = false;

			//weed out duplicates
			if (dupes[current[0]]) continue;
			else dupes[current[0]] = true;

			if (current.mapArea) {
				if (current.mapArea.containsPoint(x, y)) {
					flag = true;
				}
			} else if (current.isAt(x, y)) flag = true;

			if (flag && (current._z >= maxz || maxz === -1)) {
				//if the Z is the same, select the closest GUID
				if (current._z === maxz && current[0] < closest[0]) {
					continue;
				}
				maxz = current._z;
				closest = current;
			}
		}
        

        //found closest object to mouse
        if (closest) {
            //click must mousedown and out on tile
            if (type === "touchstart") {
				closest.trigger("MouseDown", e);
            }
			else if (type === "touchend") {
                closest.trigger("MouseUp", e);
            }
			else if (type === "touchmove") {
                closest.trigger("MouseMove", e);
                if (this.over !== closest) { //if new mousemove, it is over
                    if (this.over) {
                        this.over.trigger("MouseOut", e); //if over wasn't null, send mouseout
                        this.over = null;
                    }
                    this.over = closest;
                    closest.trigger("MouseOver", e);
                }
            } else closest.trigger(type, e); //trigger whatever it is
        } else {
            if (type === "touchmove" && this.over) {
                this.over.trigger("MouseOut", e);
                this.over = null;
            }
            if (type === "touchstart") {
                Crafty.viewport.mouselook('start', e);
            } else if (type === "touchmove") {
                Crafty.viewport.mouselook('drag', e);
            } else if (type == "touchend" || type == "touchcancel") {
                Crafty.viewport.mouselook('stop');
            }
        }

        if (type === "touchmove") {
            this.lastEvent = e;
        }
    },


    /**@
     * #KeyboardEvent
     * @category Input
     * Keyboard Event triggered by Crafty Core
     * @trigger KeyDown - is triggered for each entity when the DOM 'keydown' event is triggered.
     * @trigger KeyUp - is triggered for each entity when the DOM 'keyup' event is triggered.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Color")
     *   .attr({x: 100, y: 100, w: 50, h: 50})
     *   .color("red")
     *   .bind('KeyDown', function(e) {
     *     if(e.key == Crafty.keys.LEFT_ARROW) {
     *       this.x = this.x-1;
     *     } else if (e.key == Crafty.keys.RIGHT_ARROW) {
     *       this.x = this.x+1;
     *     } else if (e.key == Crafty.keys.UP_ARROW) {
     *       this.y = this.y-1;
     *     } else if (e.key == Crafty.keys.DOWN_ARROW) {
     *       this.y = this.y+1;
     *     }
     *   });
     * ~~~
     *
     * @see Crafty.keys
     */

    /**@
     * #Crafty.eventObject
     * @category Input
     *
     * Event Object used in Crafty for cross browser compatibility
     */

    /**@
     * #.key
     * @comp Crafty.eventObject
     *
     * Unicode of the key pressed
     */
    keyboardDispatch: function (e) {
        // Use a Crafty-standard event object to avoid cross-browser issues
        var original = e,
            evnt = {},
            props = "char charCode keyCode type shiftKey ctrlKey metaKey timestamp".split(" ");
        for (var i = props.length; i;) {
            var prop = props[--i];
            evnt[prop] = original[prop];
        }
        evnt.which = original.charCode !== null ? original.charCode : original.keyCode;
        evnt.key = original.keyCode || original.which;
        evnt.originalEvent = original;
        e = evnt;

        if (e.type === "keydown") {
            if (Crafty.keydown[e.key] !== true) {
                Crafty.keydown[e.key] = true;
                Crafty.trigger("KeyDown", e);
            }
        } else if (e.type === "keyup") {
            delete Crafty.keydown[e.key];
            Crafty.trigger("KeyUp", e);
        }

        //prevent default actions for all keys except backspace and F1-F12 and except actions in INPUT and TEXTAREA.
        //prevent bubbling up for all keys except backspace and F1-F12.
        //Among others this prevent the arrow keys from scrolling the parent page
        //of an iframe hosting the game
        if (Crafty.selected && !(e.key == 8 || e.key >= 112 && e.key <= 135)) {
            if (e.stopPropagation) e.stopPropagation();
            else e.cancelBubble = true;

            //Don't prevent default actions if target node is input or textarea.
            if (e.target && e.target.nodeName !== 'INPUT' && e.target.nodeName !== 'TEXTAREA') {
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                }
            }
            return false;
        }
    }
});

//initialize the input events onload
Crafty.bind("Load", function () {
    //Crafty.addEvent(this, "keydown", Crafty.keyboardDispatch);
    //Crafty.addEvent(this, "keyup", Crafty.keyboardDispatch);

    Crafty.addEvent(this, Crafty.canvas._canvas, "mousedown", Crafty.mouseDispatch);
    Crafty.addEvent(this, Crafty.canvas._canvas, "mouseup", Crafty.mouseDispatch);
    Crafty.addEvent(this, Crafty.canvas._canvas, "mouseup", Crafty.detectBlur);
    Crafty.addEvent(this, Crafty.canvas._canvas, "mousemove", Crafty.mouseDispatch);
    Crafty.addEvent(this, Crafty.canvas._canvas, "click", Crafty.mouseDispatch);
    Crafty.addEvent(this, Crafty.canvas._canvas, "dblclick", Crafty.mouseDispatch);

    Crafty.addEvent(this, Crafty.canvas._canvas, "touchstart", Crafty.touchDispatch);
    Crafty.addEvent(this, Crafty.canvas._canvas, "touchmove", Crafty.touchDispatch);
    Crafty.addEvent(this, Crafty.canvas._canvas, "touchend", Crafty.touchDispatch);
    Crafty.addEvent(this, Crafty.canvas._canvas, "touchcancel", Crafty.touchDispatch);
    //Crafty.addEvent(this, Crafty.stage.elem, "touchleave", Crafty.touchDispatch);
});

Crafty.bind("CraftyStop", function () {
    //Crafty.removeEvent(this, "keydown", Crafty.keyboardDispatch);
    //Crafty.removeEvent(this, "keyup", Crafty.keyboardDispatch);

    if (Crafty.stage) {
        Crafty.removeEvent(this, Crafty.canvas._canvas, "mousedown", Crafty.mouseDispatch);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "mouseup", Crafty.mouseDispatch);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "mousemove", Crafty.mouseDispatch);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "click", Crafty.mouseDispatch);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "dblclick", Crafty.mouseDispatch);

        Crafty.removeEvent(this, Crafty.canvas._canvas, "touchstart", Crafty.touchDispatch);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "touchmove", Crafty.touchDispatch);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "touchend", Crafty.touchDispatch);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "touchcancel", Crafty.touchDispatch);
        //Crafty.removeEvent(this, Crafty.stage.elem, "touchleave", Crafty.touchDispatch);
    }

    Crafty.removeEvent(this, document.body, "mouseup", Crafty.detectBlur);
});

/**@
 * #Mouse
 * @category Input
 * Provides the entity with mouse related events
 * @trigger MouseOver - when the mouse enters the entity - MouseEvent
 * @trigger MouseOut - when the mouse leaves the entity - MouseEvent
 * @trigger MouseDown - when the mouse button is pressed on the entity - MouseEvent
 * @trigger MouseUp - when the mouse button is released on the entity - MouseEvent
 * @trigger Click - when the user clicks the entity. [See documentation](http://www.quirksmode.org/dom/events/click.html) - MouseEvent
 * @trigger DoubleClick - when the user double clicks the entity - MouseEvent
 * @trigger MouseMove - when the mouse is over the entity and moves - MouseEvent
 * Crafty adds the mouseButton property to MouseEvents that match one of
 *
 * - Crafty.mouseButtons.LEFT
 * - Crafty.mouseButtons.RIGHT
 * - Crafty.mouseButtons.MIDDLE
 *
 * @example
 * ~~~
 * myEntity.bind('Click', function() {
 *      console.log("Clicked!!");
 * })
 *
 * myEntity.bind('MouseUp', function(e) {
 *    if( e.mouseButton == Crafty.mouseButtons.RIGHT )
 *        console.log("Clicked right button");
 * })
 * ~~~
 * @see Crafty.mouseDispatch
 */
Crafty.c("Mouse", {
    init: function () {
        Crafty.mouseObjs++;
        this.bind("Remove", function () {
            Crafty.mouseObjs--;
        });
    },

    /**@
     * #.areaMap
     * @comp Mouse
     * @sign public this .areaMap(Crafty.polygon polygon)
     * @param polygon - Instance of Crafty.polygon used to check if the mouse coordinates are inside this region
     * @sign public this .areaMap(Array point1, .., Array pointN)
     * @param point# - Array with an `x` and `y` position to generate a polygon
     *
     * Assign a polygon to the entity so that mouse events will only be triggered if
     * the coordinates are inside the given polygon.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Color, Mouse")
     *     .color("red")
     *     .attr({ w: 100, h: 100 })
     *     .bind('MouseOver', function() {console.log("over")})
     *     .areaMap([0,0], [50,0], [50,50], [0,50])
     * ~~~
     *
     * @see Crafty.polygon
     */
    areaMap: function (poly) {
        //create polygon
        if (arguments.length > 1) {
            //convert args to array to create polygon
            var args = Array.prototype.slice.call(arguments, 0);
            poly = new Crafty.polygon(args);
        }

        poly.shift(this._x, this._y);
        //this.map = poly;
        this.mapArea = poly;

        this.attach(this.mapArea);
        return this;
    }
});

/**@
 * #Draggable
 * @category Input
 * Enable drag and drop of the entity.
 * @trigger Dragging - is triggered each frame the entity is being dragged - MouseEvent
 * @trigger StartDrag - is triggered when dragging begins - MouseEvent
 * @trigger StopDrag - is triggered when dragging ends - MouseEvent
 */
Crafty.c("Draggable", {
    _dragPos: null, // drag pos {x, y} relative to entity
    _oldX: null,
    _oldY: null,
    _dragging: false,
    _dir: null,

    //Note: the code is not tested with zoom, etc., that may distort the direction between the viewport and the coordinate on the canvas.
    init: function () {
        this.requires("Mouse");
        this.enableDrag();
    },

    _ondrag: function (e) {
        var moveX = e.targetTouches[0].clientX;
		var moveY = e.targetTouches[0].clientY;
		
		// While a drag is occurring, this method is bound to the mousemove DOM event
        //Crafty("TextoOtro").text("Draggable::_ondrag(" + moveX + "," + moveY + ")");
		var pos = { x: moveX, y: moveY };

        // ignore invalid 0 0 position - strange problem on ipad
        if (pos.x === 0 || pos.y === 0) {
            return false;
        }

        this.x = moveX - this._dragPos.x;
        this.y = moveY - this._dragPos.y;
		/*
		if (this._dir) {
            var len = (pos.x - this._origMouseDOMPos.x) * this._dir.x + (pos.y - this._origMouseDOMPos.y) * this._dir.y;
            this.x = this._oldX + len * this._dir.x;
            this.y = this._oldY + len * this._dir.y;
        } else {
            this.x = this._oldX + (pos.x - this._origMouseDOMPos.x);
            this.y = this._oldY + (pos.y - this._origMouseDOMPos.y);
        }*/

        this.trigger("Dragging", e);
    },

    _ondown: function (e) {
        // When dragging is enabled, this method is bound to the MouseDown crafty event
        //if (e.mouseButton !== Crafty.mouseButtons.LEFT) return;
        //Crafty("TextoOtro").text("Draggable::_ondown");
		this._startDrag(e);
    },

    _onup: function (e) {
        // While a drag is occurring, this method is bound to mouseup DOM event
        //Crafty("TextoOtro").text("Draggable::_onup");
		if (this._dragging === true) {
            Crafty.removeEvent(this, Crafty.canvas._canvas, "touchmove", this._ondrag);
            Crafty.removeEvent(this, Crafty.canvas._canvas, "touchend", this._onup);
            this._dragging = false;
            this.trigger("StopDrag", e);
        }
    },

    /**@
     * #.dragDirection
     * @comp Draggable
     * @sign public this .dragDirection()
     * Remove any previously specified direction.
     *
     * @sign public this .dragDirection(vector)
     * @param vector - Of the form of {x: valx, y: valy}, the vector (valx, valy) denotes the move direction.
     *
     * @sign public this .dragDirection(degree)
     * @param degree - A number, the degree (clockwise) of the move direction with respect to the x axis.
     * Specify the dragging direction.
     *
     * @example
     * ~~~
     * this.dragDirection()
     * this.dragDirection({x:1, y:0}) //Horizontal
     * this.dragDirection({x:0, y:1}) //Vertical
     * // Note: because of the orientation of x and y axis,
     * // this is 45 degree clockwise with respect to the x axis.
     * this.dragDirection({x:1, y:1}) //45 degree.
     * this.dragDirection(60) //60 degree.
     * ~~~
     */
    dragDirection: function (dir) {
        if (typeof dir === 'undefined') {
            this._dir = null;
        } else if (("" + parseInt(dir, 10)) == dir) { //dir is a number
            this._dir = {
                x: Math.cos(dir / 180 * Math.PI),
                y: Math.sin(dir / 180 * Math.PI)
            };
        } else {
            var r = Math.sqrt(dir.x * dir.x + dir.y * dir.y);
            this._dir = {
                x: dir.x / r,
                y: dir.y / r
            };
        }
    },


    /**@
     * #._startDrag
     * @comp Draggable
     * Internal method for starting a drag of an entity either programatically or via Mouse click
     *
     * @param e - a mouse event
     */
    _startDrag: function (e) {
        //console.log("STARTDRAG: this.x: " + this._x + ", this.y: " + this._y + ", clientX: " + e.targetTouches[0].clientX + ", clientY: " + e.targetTouches[0].clientY);
		this._dragPos = { x: e.targetTouches[0].clientX - this._x, y: e.targetTouches[0].clientY - this._y };
        this._oldX = this._x;
        this._oldY = this._y;
        this._dragging = true;
		
		//Crafty("TextoOtro").text("Draggable::_startDrag (" + this._dragPos.x + ", " + this._dragPos.y + ")");

        Crafty.addEvent(this, Crafty.stage.elem, "touchmove", this._ondrag);
        Crafty.addEvent(this, Crafty.stage.elem, "touchend", this._onup);
        this.trigger("StartDrag", e);
    },

    /**@
     * #.stopDrag
     * @comp Draggable
     * @sign public this .stopDrag(void)
     * @trigger StopDrag - Called right after the mouse listeners are removed
     *
     * Stop the entity from dragging. Essentially reproducing the drop.
     *
     * @see .startDrag
     */
    stopDrag: function () {
		//Crafty("TextoOtro").text("Draggable::stopDrag");
        Crafty.removeEvent(this, Crafty.canvas._canvas, "touchmove", this._ondrag);
        Crafty.removeEvent(this, Crafty.canvas._canvas, "touchend", this._onup);

        this._dragging = false;
        this.trigger("StopDrag");
        return this;
    },

    /**@
     * #.startDrag
     * @comp Draggable
     * @sign public this .startDrag(void)
     *
     * Make the entity follow the mouse positions.
     *
     * @see .stopDrag
     */
    startDrag: function () {
        //Crafty("TextoOtro").text("Draggable::startDrag");
		if (!this._dragging) {
            //Use the last known position of the mouse
            this._startDrag(Crafty.lastEvent);
        }
        return this;
    },

    /**@
     * #.enableDrag
     * @comp Draggable
     * @sign public this .enableDrag(void)
     *
     * Rebind the mouse events. Use if `.disableDrag` has been called.
     *
     * @see .disableDrag
     */
    enableDrag: function () {
        this.bind("MouseDown", this._ondown);

        Crafty.addEvent(this, Crafty.stage.elem, "mouseup", this._onup);
        return this;
    },

    /**@
     * #.disableDrag
     * @comp Draggable
     * @sign public this .disableDrag(void)
     *
     * Stops entity from being draggable. Reenable with `.enableDrag()`.
     *
     * @see .enableDrag
     */
    disableDrag: function () {
        this.unbind("MouseDown", this._ondown);
        if (this._dragging) {
            this.stopDrag();
        }
        return this;
    }
});






    

Crafty.extend({
    /**@
     * #Crafty.device
     * @category Misc
     */
    device: {
        _deviceOrientationCallback: false,
        _deviceMotionCallback: false,

        /**
         * The HTML5 DeviceOrientation event returns three pieces of data:
         *  * alpha the direction the device is facing according to the compass
         *  * beta the angle in degrees the device is tilted front-to-back
         *  * gamma the angle in degrees the device is tilted left-to-right.
         *  * The angles values increase as you tilt the device to the right or towards you.
         *
         * Since Firefox uses the MozOrientationEvent which returns similar data but
         * using different parameters and a different measurement system, we want to
         * normalize that before we pass it to our _deviceOrientationCallback function.
         *
         * @param eventData HTML5 DeviceOrientation event
         */
        _normalizeDeviceOrientation: function (eventData) {
            var data;
            if (window.DeviceOrientationEvent) {
                data = {
                    // gamma is the left-to-right tilt in degrees, where right is positive
                    'tiltLR': eventData.gamma,
                    // beta is the front-to-back tilt in degrees, where front is positive
                    'tiltFB': eventData.beta,
                    // alpha is the compass direction the device is facing in degrees
                    'dir': eventData.alpha,
                    // deviceorientation does not provide this data
                    'motUD': null
                };
            } else if (window.OrientationEvent) {
                data = {
                    // x is the left-to-right tilt from -1 to +1, so we need to convert to degrees
                    'tiltLR': eventData.x * 90,
                    // y is the front-to-back tilt from -1 to +1, so we need to convert to degrees
                    // We also need to invert the value so tilting the device towards us (forward)
                    // results in a positive value.
                    'tiltFB': eventData.y * -90,
                    // MozOrientation does not provide this data
                    'dir': null,
                    // z is the vertical acceleration of the device
                    'motUD': eventData.z
                };
            }

            Crafty.device._deviceOrientationCallback(data);
        },

        /**
         * @param eventData HTML5 DeviceMotion event
         */
        _normalizeDeviceMotion: function (eventData) {
            var acceleration = eventData.accelerationIncludingGravity,
                facingUp = (acceleration.z > 0) ? +1 : -1;

            var data = {
                // Grab the acceleration including gravity from the results
                'acceleration': acceleration,
                'rawAcceleration': "[" + Math.round(acceleration.x) + ", " + Math.round(acceleration.y) + ", " + Math.round(acceleration.z) + "]",
                // Z is the acceleration in the Z axis, and if the device is facing up or down
                'facingUp': facingUp,
                // Convert the value from acceleration to degrees acceleration.x|y is the
                // acceleration according to gravity, we'll assume we're on Earth and divide
                // by 9.81 (earth gravity) to get a percentage value, and then multiply that
                // by 90 to convert to degrees.
                'tiltLR': Math.round(((acceleration.x) / 9.81) * -90),
                'tiltFB': Math.round(((acceleration.y + 9.81) / 9.81) * 90 * facingUp)
            };

            Crafty.device._deviceMotionCallback(data);
        },

        /**@
         * #Crafty.device.deviceOrientation
         * @comp Crafty.device
         * @sign public Crafty.device.deviceOrientation(Function callback)
         * @param callback - Callback method executed once as soon as device orientation is change
         *
         * Do something with normalized device orientation data:
         * ~~~
         * {
         *   'tiltLR'    :   'gamma the angle in degrees the device is tilted left-to-right.',
         *   'tiltFB'    :   'beta the angle in degrees the device is tilted front-to-back',
         *   'dir'       :   'alpha the direction the device is facing according to the compass',
         *   'motUD'     :   'The angles values increase as you tilt the device to the right or towards you.'
         * }
         * ~~~
         *
         * @example
         * ~~~
         * // Get DeviceOrientation event normalized data.
         * Crafty.device.deviceOrientation(function(data){
         *     console.log('data.tiltLR : '+Math.round(data.tiltLR)+', data.tiltFB : '+Math.round(data.tiltFB)+', data.dir : '+Math.round(data.dir)+', data.motUD : '+data.motUD+'');
         * });
         * ~~~
         *
         * See browser support at http://caniuse.com/#search=device orientation.
         */
        deviceOrientation: function (func) {
            this._deviceOrientationCallback = func;
            if (Crafty.support.deviceorientation) {
                if (window.DeviceOrientationEvent) {
                    // Listen for the deviceorientation event and handle DeviceOrientationEvent object
                    Crafty.addEvent(this, window, 'deviceorientation', this._normalizeDeviceOrientation);
                } else if (window.OrientationEvent) {
                    // Listen for the MozOrientation event and handle OrientationData object
                    Crafty.addEvent(this, window, 'MozOrientation', this._normalizeDeviceOrientation);
                }
            }
        },

        /**@
         * #Crafty.device.deviceMotion
         * @comp Crafty.device
         * @sign public Crafty.device.deviceMotion(Function callback)
         * @param callback - Callback method executed once as soon as device motion is change
         *
         * Do something with normalized device motion data:
         * ~~~
         * {
         *     'acceleration' : ' Grab the acceleration including gravity from the results',
         *     'rawAcceleration' : 'Display the raw acceleration data',
         *     'facingUp' : 'Z is the acceleration in the Z axis, and if the device is facing up or down',
         *     'tiltLR' : 'Convert the value from acceleration to degrees. acceleration.x is the acceleration according to gravity, we'll assume we're on Earth and divide by 9.81 (earth gravity) to get a percentage value, and then multiply that by 90 to convert to degrees.',
         *     'tiltFB' : 'Convert the value from acceleration to degrees.'
         * }
         * ~~~
         *
         * @example
         * ~~~
         * // Get DeviceMotion event normalized data.
         * Crafty.device.deviceMotion(function(data){
         *     console.log('data.moAccel : '+data.rawAcceleration+', data.moCalcTiltLR : '+Math.round(data.tiltLR)+', data.moCalcTiltFB : '+Math.round(data.tiltFB)+'');
         * });
         * ~~~
         *
         * See browser support at http://caniuse.com/#search=motion.
         */
        deviceMotion: function (func) {
            this._deviceMotionCallback = func;
            if (Crafty.support.devicemotion) {
                if (window.DeviceMotionEvent) {
                    // Listen for the devicemotion event and handle DeviceMotionEvent object
                    Crafty.addEvent(this, window, 'devicemotion', this._normalizeDeviceMotion);
                }
            }
        }
    }
});



    

Crafty.extend({
    /**@
     * #Crafty.diamondIso
     * @category 2D
     * Place entities in a 45deg diamond isometric fashion. It is similar to isometric but has another grid locations
     */
    diamondIso: {
        _tile: {
            width: 0,
            height: 0,
            r: 0
        },
        _map: {
            width: 0,
            height: 0,
            x: 0,
            y: 0
        },

        _origin: {
            x: 0,
            y: 0
        },
        /**@
         * #Crafty.diamondIso.init
         * @comp Crafty.diamondIso
         * @sign public this Crafty.diamondIso.init(Number tileWidth,Number tileHeight,Number mapWidth,Number mapHeight)
         * @param tileWidth - The size of base tile width in Pixel
         * @param tileHeight - The size of base tile height in Pixel
         * @param mapWidth - The width of whole map in Tiles
         * @param mapHeight - The height of whole map in Tiles
         *
         * Method used to initialize the size of the isometric placement.
         * Recommended to use a size alues in the power of `2` (128, 64 or 32).
         * This makes it easy to calculate positions and implement zooming.
         *
         * @example
         * ~~~
         * var iso = Crafty.diamondIso.init(64,128,20,20);
         * ~~~
         *
         * @see Crafty.diamondIso.place
         */
        init: function (tw, th, mw, mh) {
            this._tile.width = parseInt(tw, 10);
            this._tile.height = parseInt(th, 10) || parseInt(tw, 10) / 2;
            this._tile.r = this._tile.width / this._tile.height;

            this._map.width = parseInt(mw, 10);
            this._map.height = parseInt(mh, 10) || parseInt(mw, 10);

            this._origin.x = this._map.height * this._tile.width / 2;
            return this;
        },
        /**@
         * #Crafty.diamondIso.place
         * @comp Crafty.diamondIso
         * @sign public this Crafty.diamondIso.place(Entity tile,Number x, Number y, Number layer)
         * @param x - The `x` position to place the tile
         * @param y - The `y` position to place the tile
         * @param layer - The `z` position to place the tile (calculated by y position * layer)
         * @param tile - The entity that should be position in the isometric fashion
         *
         * Use this method to place an entity in an isometric grid.
         *
         * @example
         * ~~~
         * var iso = Crafty.diamondIso.init(64,128,20,20);
         * isos.place(Crafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}),1,1,2);
         * ~~~
         *
         * @see Crafty.diamondIso.size
         */
        place: function (obj, x, y, layer) {
            var pos = this.pos2px(x, y);
            if (!layer) layer = 1;
            var marginX = 0,
                marginY = 0;
            if (obj.__margin !== undefined) {
                marginX = obj.__margin[0];
                marginY = obj.__margin[1];
            }

            obj.x = pos.left + (marginX);
            obj.y = (pos.top + marginY) - obj.h;
            obj.z = (pos.top) * layer;


        },
        centerAt: function (x, y) {
            var pos = this.pos2px(x, y);
            Crafty.viewport.x = -pos.left + Crafty.viewport.width / 2 - this._tile.width;
            Crafty.viewport.y = -pos.top + Crafty.viewport.height / 2;

        },
        area: function (offset) {
            if (!offset) offset = 0;
            //calculate the corners
            var vp = Crafty.viewport.rect(),
                x = vp._x,
                y = vp._y,
                w = vp._w,
                h = vp._h;
            var ow = offset * this._tile.width;
            var oh = offset * this._tile.height;
            x -= (this._tile.width / 2 + ow);
            y -= (this._tile.height / 2 + oh);
            w += (this._tile.width / 2 + ow);
            h += (this._tile.height / 2 + oh);
            /*  Crafty.viewport.x = -x;
            Crafty.viewport.y = -y;
            Crafty.viewport.width = w;
            Crafty.viewport.height = h;   */

            var grid = [];
            for (yl = (y + h); y < yl; y += this._tile.height / 2) {
                for (xl = (x + w); x < xl; x += this._tile.width / 2) {
                    var row = this.px2pos(x, y);
                    grid.push([~~row.x, ~~row.y]);
                }
            }
            return grid;
        },
        pos2px: function (x, y) {
            return {
                left: ((x - y) * this._tile.width / 2 + this._origin.x),
                top: ((x + y) * this._tile.height / 2)
            };
        },
        px2pos: function (left, top) {
            var x = (left - this._origin.x) / this._tile.r;
            return {
                x: ((top + x) / this._tile.height),
                y: ((top - x) / this._tile.height)
            };
        },

        polygon: function (obj) {

            obj.requires("Collision");
            var marginX = 0,
                marginY = 0;
            if (obj.__margin !== undefined) {
                marginX = obj.__margin[0];
                marginY = obj.__margin[1];
            }
            var points = [
                [marginX - 0, obj.h - marginY - this._tile.height / 2],
                [marginX - this._tile.width / 2, obj.h - marginY - 0],
                [marginX - this._tile.width, obj.h - marginY - this._tile.height / 2],
                [marginX - this._tile.width / 2, obj.h - marginY - this._tile.height]
            ];
            var poly = new Crafty.polygon(points);
            return poly;

        }

    }
});


    

/**@
 * #Color
 * @category Graphics
 * Draw a solid color for the entity
 */
Crafty.c("Color", {
    _color: "",
    ready: true,

    init: function () {
        this.bind("Draw", function (e) {
            /*if (e.type === "DOM") {
                e.style.backgroundColor = this._color;
                e.style.lineHeight = 0;
            } else if (e.type === "canvas") {*/
                if (this._color) {
					e.ctx.fillStyle = this._color;
					e.ctx.fillRect(e.pos._x, e.pos._y, e.pos._w, e.pos._h);
				}
            //}
        });
    },

    /**@
     * #.color
     * @comp Color
     * @trigger Invalidate - when the color changes
     * @sign public this .color(String color)
     * @sign public String .color()
     * @param color - Color of the rectangle
     * Will create a rectangle of solid color for the entity, or return the color if no argument is given.
     *
     * The argument must be a color readable depending on which browser you
     * choose to support.
     *
     * @example
     * ```
     * Crafty.e("2D, DOM, Color")
     *    .color("#969696");
     * ```
     */
    color: function (color) {
        if (!color) return this._color;
        this._color = color;
        this.trigger("Invalidate");
        return this;
    }
});

/**@
 * #Tint
 * @category Graphics
 * Similar to Color by adding an overlay of semi-transparent color.
 *
 * *Note: Currently only works for Canvas*
 */
Crafty.c("Tint", {
    _color: null,
    _strength: 1.0,

    init: function () {
        var draw = function d(e) {
            var context = e.ctx || Crafty.canvas.context;

            context.fillStyle = this._color || "rgba(0,0,0, 0)";
            context.fillRect(e.pos._x, e.pos._y, e.pos._w, e.pos._h);
        };

        this.bind("Draw", draw).bind("RemoveComponent", function (id) {
            if (id === "Tint") this.unbind("Draw", draw);
        });
    },

    /**@
     * #.tint
     * @comp Tint
     * @trigger Invalidate - when the tint is applied
     * @sign public this .tint(String color, Number strength)
     * @param color - The color in hexadecimal
     * @param strength - Level of opacity
     *
     * Modify the color and level opacity to give a tint on the entity.
     *
     * @example
     * ~~~
     * Crafty.e("2D, Canvas, Tint")
     *    .tint("#969696", 0.3);
     * ~~~
     */
    tint: function (color, strength) {
        this._strength = strength;
        this._color = Crafty.toRGB(color, this._strength);

        this.trigger("Invalidate");
        return this;
    }
});

/**@
 * #Image
 * @category Graphics
 * Draw an image with or without repeating (tiling).
 */
Crafty.c("Image", {
    _repeat: "repeat",
    ready: false,

    init: function () {
        var draw = function (e) {
            if (e.type === "canvas") {
                //skip if no image
				
                if (!this.ready || !this._pattern) return;

                var context = e.ctx;

                //context.fillStyle = this._pattern;
				context.drawImage(this.img, e.pos._x, e.pos._y);
                
				/*context.save();
                context.translate(e.pos._x, e.pos._y);
                context.fillRect(0, 0, this._w, this._h);
                context.restore();*/
            }/* else if (e.type === "DOM") {
                if (this.__image) {
                  e.style.backgroundImage = "url(" + this.__image + ")";
                  e.style.backgroundRepeat = this._repeat;
                }
            }*/
        };

		
        this.bind("Draw", draw).bind("RemoveComponent", function (id) {
            if (id === "Image") this.unbind("Draw", draw);
        });
		
		// Posible solución al dispose?
		//this.bind("Remove", function() { this.img.dispose(); this.img = null; });
    },

    /**@
     * #.image
     * @comp Image
     * @trigger Invalidate - when the image is loaded
     * @sign public this .image(String url[, String repeat])
     * @param url - URL of the image
     * @param repeat - If the image should be repeated to fill the entity.
     *
     * Draw specified image. Repeat follows CSS syntax (`"no-repeat", "repeat", "repeat-x", "repeat-y"`);
     *
     * *Note: Default repeat is `no-repeat` which is different to standard DOM (which is `repeat`)*
     *
     * If the width and height are `0` and repeat is set to `no-repeat` the width and
     * height will automatically assume that of the image. This is an
     * easy way to create an image without needing sprites.
     *
     * @example
     * Will default to no-repeat. Entity width and height will be set to the images width and height
     * ~~~
     * var ent = Crafty.e("2D, DOM, Image").image("myimage.png");
     * ~~~
     * Create a repeating background.
     * ~~~
     * var bg = Crafty.e("2D, DOM, Image")
     *              .attr({w: Crafty.viewport.width, h: Crafty.viewport.height})
     *              .image("bg.png", "repeat");
     * ~~~
     *
     * @see Crafty.sprite
     */
    image: function (url, repeat) {
        this.__image = url;
        this._repeat = repeat || "no-repeat";

        this.img = Crafty.asset(url);
		
		if (!this.img) {
            this.img = new Image();
            Crafty.asset(url, this.img);
            this.img.src = url;
            var self = this;

            this.img.onload = function () {
                //if (self.has("Canvas")) self._pattern = Crafty.canvas.context.createPattern(self.img, self._repeat);
                self.ready = true;

                if (self._repeat === "no-repeat") {
                    self.w = self.img.width;
                    self.h = self.img.height;
                }

                self.trigger("Invalidate");
            };

            return this;
        } else {
            this.ready = true;
            if (this.has("Canvas")) this._pattern = Crafty.canvas.context.createPattern(this.img, this._repeat);
            if (this._repeat === "no-repeat") {
                this.w = this.img.width;
                this.h = this.img.height;
            }
        }


        this.trigger("Invalidate");

        return this;
    }
});

Crafty.extend({
    /**@
     * #Crafty.toRGB
     * @category Graphics
     * @sign public String Crafty.scene(String hex[, Number alpha])
     * @param hex - a 6 character hex number string representing RGB color
     * @param alpha - The alpha value.
     *
     * Get a rgb string or rgba string (if `alpha` presents).
     *
     * @example
     * ~~~
     * Crafty.toRGB("ffffff"); // rgb(255,255,255)
     * Crafty.toRGB("#ffffff"); // rgb(255,255,255)
     * Crafty.toRGB("ffffff", .5); // rgba(255,255,255,0.5)
     * ~~~
     *
     * @see Text.textColor
     */
    toRGB: function (hex, alpha) {
        hex = (hex.charAt(0) === '#') ? hex.substr(1) : hex;
        var c = [],
            result;

        c[0] = parseInt(hex.substr(0, 2), 16);
        c[1] = parseInt(hex.substr(2, 2), 16);
        c[2] = parseInt(hex.substr(4, 2), 16);

        result = alpha === undefined ? 'rgb(' + c.join(',') + ')' : 'rgba(' + c.join(',') + ',' + alpha + ')';

        return result;
    }
});


Crafty.extend({
    /**@
     * #Crafty.pixelart
     * @category Graphics
     * @sign public void Crafty.pixelart(Boolean enabled)
     *
     * Sets the image smoothing for drawing images (for both DOM and Canvas).
     * Setting this to true disables smoothing for images, which is the preferred
     * way for drawing pixel art. Defaults to false.
     *
     * This feature is experimental and you should be careful with cross-browser compatibility. 
     * The best way to disable image smoothing is to use the Canvas render method and the Sprite component for drawing your entities.
     *
     * This method will have no effect for Canvas image smoothing if the canvas is not initialized yet.
     *
     * Note that Firefox_26 currently has a [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=696630) 
     * which prevents disabling image smoothing for Canvas entities that use the Image component. Use the Sprite
     * component instead.
     * Note that Webkit (Chrome & Safari) currently has a bug [link1](http://code.google.com/p/chromium/issues/detail?id=134040) 
     * [link2](http://code.google.com/p/chromium/issues/detail?id=106662) that prevents disabling image smoothing
     * for DOM entities.
     *
     * @example
     * This is the preferred way to draw pixel art with the best cross-browser compatibility.
     * ~~~
     * Crafty.canvas.init();
     * Crafty.pixelart(true);
     * 
     * Crafty.sprite(imgWidth, imgHeight, "spriteMap.png", {sprite1:[0,0]});
     * Crafty.e("2D, Canvas, sprite1");
     * ~~~
     */
    pixelart: function(enabled) {
        var context = Crafty.canvas.context;
        if (context) {
            context.imageSmoothingEnabled = !enabled;
            context.mozImageSmoothingEnabled = !enabled;
            context.webkitImageSmoothingEnabled = !enabled;
            context.oImageSmoothingEnabled = !enabled;
            context.msImageSmoothingEnabled = !enabled;
        }

        var style = Crafty.stage.inner.style;
        if (enabled) {
            style[Crafty.DOM.camelize("image-rendering")] = "optimizeSpeed";   /* legacy */
            style[Crafty.DOM.camelize("image-rendering")] = "-moz-crisp-edges";    /* Firefox */
            style[Crafty.DOM.camelize("image-rendering")] = "-o-crisp-edges";  /* Opera */
            style[Crafty.DOM.camelize("image-rendering")] = "-webkit-optimize-contrast";   /* Webkit (Chrome & Safari) */
            style[Crafty.DOM.camelize("-ms-interpolation-mode")] = "nearest-neighbor";  /* IE */
            style[Crafty.DOM.camelize("image-rendering")] = "optimize-contrast";   /* CSS3 proposed */
            style[Crafty.DOM.camelize("image-rendering")] = "pixelated";   /* CSS4 proposed */
            style[Crafty.DOM.camelize("image-rendering")] = "crisp-edges"; /* CSS4 proposed */
        } else {
            style[Crafty.DOM.camelize("image-rendering")] = "optimizeQuality";   /* legacy */
            style[Crafty.DOM.camelize("-ms-interpolation-mode")] = "bicubic";   /* IE */
            style[Crafty.DOM.camelize("image-rendering")] = "auto";   /* CSS3 */
        }
    }
});





    

/**@
 * #HTML
 * @category Graphics
 * Component allow for insertion of arbitrary HTML into an entity
 */
Crafty.c("HTML", {
    inner: '',

    init: function () {
        this.requires('2D, DOM');
    },

    /**@
     * #.replace
     * @comp HTML
     * @sign public this .replace(String html)
     * @param html - arbitrary html
     *
     * This method will replace the content of this entity with the supplied html
     *
     * @example
     * Create a link
     * ~~~
     * Crafty.e("HTML")
     *    .attr({x:20, y:20, w:100, h:100})
     *    .replace("<a href='index.html'>Index</a>");
     * ~~~
     */
    replace: function (new_html) {
        this.inner = new_html;
        this._element.innerHTML = new_html;
        return this;
    },

    /**@
     * #.append
     * @comp HTML
     * @sign public this .append(String html)
     * @param html - arbitrary html
     *
     * This method will add the supplied html in the end of the entity
     *
     * @example
     * Create a link
     * ~~~
     * Crafty.e("HTML")
     *    .attr({x:20, y:20, w:100, h:100})
     *    .append("<a href='index.html'>Index</a>");
     * ~~~
     */
    append: function (new_html) {
        this.inner += new_html;
        this._element.innerHTML += new_html;
        return this;
    },

    /**@
     * #.prepend
     * @comp HTML
     * @sign public this .prepend(String html)
     * @param html - arbitrary html
     *
     * This method will add the supplied html in the beginning of the entity
     *
     * @example
     * Create a link
     * ~~~
     * Crafty.e("HTML")
     *    .attr({x:20, y:20, w:100, h:100})
     *    .prepend("<a href='index.html'>Index</a>");
     * ~~~
     */
    prepend: function (new_html) {
        this.inner = new_html + this.inner;
        this._element.innerHTML = new_html + this.inner;
        return this;
    }
});


    

/**@
 * #Crafty.import
 * @sign public void Crafty.import(String url[, String scene])
 * @param url - Path to the saved file
 * @param scene - Name of the scene to load if saved multiple scenes
 * @sign public void Crafty.import(Object sceneData)
 * @param sceneData - Scene data generated from builder
 * This method will load in scene data generated by the Crafty Builder.
 *
 * @example
 * ~~~
 * Crafty.import({
 *	'0': {props: value},
 *	'n': [
 *		{c: "comp, list", image: ''}
 *	]
 * });
 * ~~~
 */
Crafty['import'] = function (obj, scene) {
    //if its a string, load the script file
    if (typeof obj === "string") {
        if (levelData) {
            if (scene) Crafty.import(levelData[scene]);
            else Crafty.import(levelData);
        } else {
            var elem;
            elem = document.createElement("script");
            elem.onload = function () {
                if (scene) Crafty.import(levelData[scene]);
                else Crafty.import(levelData);
            };
            elem.src = obj;
        }
        return;
    }

    var key, i = 0,
        l, current, ent;

    //loop over new entities to create
    if (obj.n && typeof obj.n === "object") {
        for (l = obj.n.length; i < l; ++i) {
            current = obj.n[i];

            //create entity with components
            ent = Crafty.e(current.c);
            delete current.c; //remove the components

            //apply the other properties
            ent.attr(current);
        }
    }

    //loop over modified entities
    for (key in obj) {
        ent = Crafty(key);
        ent.attr(obj[key]);
    }
};


    

Crafty.extend({
    /**@
     * #Crafty.isometric
     * @category 2D
     * Place entities in a 45deg isometric fashion.
     */
    isometric: {
        _tile: {
            width: 0,
            height: 0
        },
        _elements: {},
        _pos: {
            x: 0,
            y: 0
        },
        _z: 0,
        /**@
         * #Crafty.isometric.size
         * @comp Crafty.isometric
         * @sign public this Crafty.isometric.size(Number tileSize)
         * @param tileSize - The size of the tiles to place.
         *
         * Method used to initialize the size of the isometric placement.
         * Recommended to use a size values in the power of `2` (128, 64 or 32).
         * This makes it easy to calculate positions and implement zooming.
         *
         * @example
         * ~~~
         * var iso = Crafty.isometric.size(128);
         * ~~~
         *
         * @see Crafty.isometric.place
         */
        size: function (width, height) {
            this._tile.width = width;
            this._tile.height = height > 0 ? height : width / 2; //Setup width/2 if height isn't set
            return this;
        },
        /**@
         * #Crafty.isometric.place
         * @comp Crafty.isometric
         * @sign public this Crafty.isometric.place(Number x, Number y, Number z, Entity tile)
         * @param x - The `x` position to place the tile
         * @param y - The `y` position to place the tile
         * @param z - The `z` position or height to place the tile
         * @param tile - The entity that should be position in the isometric fashion
         *
         * Use this method to place an entity in an isometric grid.
         *
         * @example
         * ~~~
         * var iso = Crafty.isometric.size(128);
         * iso.place(2, 1, 0, Crafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}));
         * ~~~
         *
         * @see Crafty.isometric.size
         */
        place: function (x, y, z, obj) {
            var pos = this.pos2px(x, y);
            pos.top -= z * (this._tile.height / 2);
            obj.attr({
                x: pos.left + Crafty.viewport._x,
                y: pos.top + Crafty.viewport._y
            }).z += z;
            return this;
        },
        /**@
         * #Crafty.isometric.pos2px
         * @comp Crafty.isometric
         * @sign public this Crafty.isometric.pos2px(Number x,Number y)
         * @param x
         * @param y
         * @return Object {left Number,top Number}
         *
         * This method calculate the X and Y Coordinates to Pixel Positions
         *
         * @example
         * ~~~
         * var iso = Crafty.isometric.size(128,96);
         * var position = iso.pos2px(100,100); //Object { left=12800, top=4800}
         * ~~~
         */
        pos2px: function (x, y) {
            return {
                left: x * this._tile.width + (y & 1) * (this._tile.width / 2),
                top: y * this._tile.height / 2
            };
        },
        /**@
         * #Crafty.isometric.px2pos
         * @comp Crafty.isometric
         * @sign public this Crafty.isometric.px2pos(Number left,Number top)
         * @param top
         * @param left
         * @return Object {x Number,y Number}
         *
         * This method calculate pixel top,left positions to x,y coordinates
         *
         * @example
         * ~~~
         * var iso = Crafty.isometric.size(128,96);
         * var px = iso.pos2px(12800,4800);
         * console.log(px); //Object { x=100, y=100}
         * ~~~
         */
        px2pos: function (left, top) {
            return {
                x: -Math.ceil(-left / this._tile.width - (top & 1) * 0.5),
                y: top / this._tile.height * 2
            };
        },
        /**@
         * #Crafty.isometric.centerAt
         * @comp Crafty.isometric
         * @sign public this Crafty.isometric.centerAt(Number x,Number y)
         * @param top
         * @param left
         *
         * This method center the Viewport at x/y location or gives the current centerpoint of the viewport
         *
         * @example
         * ~~~
         * var iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved
         * //After moving the viewport by another event you can get the new center point
         * console.log(iso.centerAt());
         * ~~~
         */
        centerAt: function (x, y) {
            if (typeof x == "number" && typeof y == "number") {
                var center = this.pos2px(x, y);
                Crafty.viewport._x = -center.left + Crafty.viewport.width / 2 - this._tile.width / 2;
                Crafty.viewport._y = -center.top + Crafty.viewport.height / 2 - this._tile.height / 2;
                return this;
            } else {
                return {
                    top: -Crafty.viewport._y + Crafty.viewport.height / 2 - this._tile.height / 2,
                    left: -Crafty.viewport._x + Crafty.viewport.width / 2 - this._tile.width / 2
                };
            }
        },
        /**@
         * #Crafty.isometric.area
         * @comp Crafty.isometric
         * @sign public this Crafty.isometric.area()
         * @return Object {x:{start Number,end Number},y:{start Number,end Number}}
         *
         * This method get the Area surrounding by the centerpoint depends on viewport height and width
         *
         * @example
         * ~~~
         * var iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved
         * var area = iso.area(); //get the area
         * for(var y = area.y.start;y <= area.y.end;y++){
         *   for(var x = area.x.start ;x <= area.x.end;x++){
         *       iso.place(x,y,0,Crafty.e("2D,DOM,gras")); //Display tiles in the Screen
         *   }
         * }
         * ~~~
         */
        area: function () {
            //Get the center Point in the viewport
            var center = this.centerAt();
            var start = this.px2pos(-center.left + Crafty.viewport.width / 2, -center.top + Crafty.viewport.height / 2);
            var end = this.px2pos(-center.left - Crafty.viewport.width / 2, -center.top - Crafty.viewport.height / 2);
            return {
                x: {
                    start: start.x,
                    end: end.x
                },
                y: {
                    start: start.y,
                    end: end.y
                }
            };
        }
    }
});



    

Crafty.extend({
    /**@
     * #Crafty.keys
     * @category Input
     * Object of key names and the corresponding key code.
     *
     * ~~~
     * BACKSPACE: 8,
     * TAB: 9,
     * ENTER: 13,
     * PAUSE: 19,
     * CAPS: 20,
     * ESC: 27,
     * SPACE: 32,
     * PAGE_UP: 33,
     * PAGE_DOWN: 34,
     * END: 35,
     * HOME: 36,
     * LEFT_ARROW: 37,
     * UP_ARROW: 38,
     * RIGHT_ARROW: 39,
     * DOWN_ARROW: 40,
     * INSERT: 45,
     * DELETE: 46,
     * 0: 48,
     * 1: 49,
     * 2: 50,
     * 3: 51,
     * 4: 52,
     * 5: 53,
     * 6: 54,
     * 7: 55,
     * 8: 56,
     * 9: 57,
     * A: 65,
     * B: 66,
     * C: 67,
     * D: 68,
     * E: 69,
     * F: 70,
     * G: 71,
     * H: 72,
     * I: 73,
     * J: 74,
     * K: 75,
     * L: 76,
     * M: 77,
     * N: 78,
     * O: 79,
     * P: 80,
     * Q: 81,
     * R: 82,
     * S: 83,
     * T: 84,
     * U: 85,
     * V: 86,
     * W: 87,
     * X: 88,
     * Y: 89,
     * Z: 90,
     * NUMPAD_0: 96,
     * NUMPAD_1: 97,
     * NUMPAD_2: 98,
     * NUMPAD_3: 99,
     * NUMPAD_4: 100,
     * NUMPAD_5: 101,
     * NUMPAD_6: 102,
     * NUMPAD_7: 103,
     * NUMPAD_8: 104,
     * NUMPAD_9: 105,
     * MULTIPLY: 106,
     * ADD: 107,
     * SUBSTRACT: 109,
     * DECIMAL: 110,
     * DIVIDE: 111,
     * F1: 112,
     * F2: 113,
     * F3: 114,
     * F4: 115,
     * F5: 116,
     * F6: 117,
     * F7: 118,
     * F8: 119,
     * F9: 120,
     * F10: 121,
     * F11: 122,
     * F12: 123,
     * SHIFT: 16,
     * CTRL: 17,
     * ALT: 18,
     * PLUS: 187,
     * COMMA: 188,
     * MINUS: 189,
     * PERIOD: 190,
     * PULT_UP: 29460,
     * PULT_DOWN: 29461,
     * PULT_LEFT: 4,
     * PULT_RIGHT': 5
     * ~~~
     */
    keys: {
        'BACKSPACE': 8,
        'TAB': 9,
        'ENTER': 13,
        'PAUSE': 19,
        'CAPS': 20,
        'ESC': 27,
        'SPACE': 32,
        'PAGE_UP': 33,
        'PAGE_DOWN': 34,
        'END': 35,
        'HOME': 36,
        'LEFT_ARROW': 37,
        'UP_ARROW': 38,
        'RIGHT_ARROW': 39,
        'DOWN_ARROW': 40,
        'INSERT': 45,
        'DELETE': 46,
        '0': 48,
        '1': 49,
        '2': 50,
        '3': 51,
        '4': 52,
        '5': 53,
        '6': 54,
        '7': 55,
        '8': 56,
        '9': 57,
        'A': 65,
        'B': 66,
        'C': 67,
        'D': 68,
        'E': 69,
        'F': 70,
        'G': 71,
        'H': 72,
        'I': 73,
        'J': 74,
        'K': 75,
        'L': 76,
        'M': 77,
        'N': 78,
        'O': 79,
        'P': 80,
        'Q': 81,
        'R': 82,
        'S': 83,
        'T': 84,
        'U': 85,
        'V': 86,
        'W': 87,
        'X': 88,
        'Y': 89,
        'Z': 90,
        'NUMPAD_0': 96,
        'NUMPAD_1': 97,
        'NUMPAD_2': 98,
        'NUMPAD_3': 99,
        'NUMPAD_4': 100,
        'NUMPAD_5': 101,
        'NUMPAD_6': 102,
        'NUMPAD_7': 103,
        'NUMPAD_8': 104,
        'NUMPAD_9': 105,
        'MULTIPLY': 106,
        'ADD': 107,
        'SUBSTRACT': 109,
        'DECIMAL': 110,
        'DIVIDE': 111,
        'F1': 112,
        'F2': 113,
        'F3': 114,
        'F4': 115,
        'F5': 116,
        'F6': 117,
        'F7': 118,
        'F8': 119,
        'F9': 120,
        'F10': 121,
        'F11': 122,
        'F12': 123,
        'SHIFT': 16,
        'CTRL': 17,
        'ALT': 18,
        'PLUS': 187,
        'COMMA': 188,
        'MINUS': 189,
        'PERIOD': 190,
        'PULT_UP': 29460,
        'PULT_DOWN': 29461,
        'PULT_LEFT': 4,
        'PULT_RIGHT': 5

    },

    /**@
     * #Crafty.mouseButtons
     * @category Input
     * An object mapping mouseButton names to the corresponding button ID.
     * In all mouseEvents, we add the `e.mouseButton` property with a value normalized to match e.button of modern webkit browsers:
     *
     * ~~~
     * LEFT: 0,
     * MIDDLE: 1,
     * RIGHT: 2
     * ~~~
     */
    mouseButtons: {
        LEFT: 0,
        MIDDLE: 1,
        RIGHT: 2
    }
});


    

Crafty.extend({
    /**@
     * #Crafty.assets
     * @category Assets
     * An object containing every asset used in the current Crafty game.
     * The key is the URL and the value is the `Audio` or `Image` object.
     *
     * If loading an asset, check that it is in this object first to avoid loading twice.
     *
     * @example
     * ~~~
     * var isLoaded = !!Crafty.assets["images/sprite.png"];
     * ~~~
     * @see Crafty.loader
     */
    assets: {},

    /**@
     * #Crafty.asset
     * @category Assets
     *
     * @trigger NewAsset - After setting new asset - Object - key and value of new added asset.
     * @sign public void Crafty.asset(String key, Object asset)
     * @param key - asset url.
     * @param asset - Audio` or `Image` object.
     * Add new asset to assets object.
     *
     * @sign public void Crafty.asset(String key)
     * @param key - asset url.
     * Get asset from assets object.
     *
     * @example
     * ~~~
     * Crafty.asset(key, value);
     * var asset = Crafty.asset(key); //object with key and value fields
     * ~~~
     *
     * @see Crafty.assets
     */
    asset: function (key, value) {
        if (arguments.length === 1) {
            return Crafty.assets[key];
        }

        if (!Crafty.assets[key]) {
            Crafty.assets[key] = value;
            this.trigger("NewAsset", {
                key: key,
                value: value
            });
            return value;
        }
    },
    /**@
     * #Crafty.image_whitelist
     * @category Assets
     *
     *
     * A list of file extensions that can be loaded as images by Crafty.load
     *
     * @example
     * ~~~
     * Crafty.image_whitelist.push("tif")
     * Crafty.load(["images/sprite.tif", "sounds/jump.mp3"],
     *     function() {
     *         //when loaded
     *         Crafty.scene("main"); //go to main scene
     *         Crafty.audio.play("jump.mp3"); //Play the audio file
     *     },
     *
     *     function(e) {
     *       //progress
     *     },
     *
     *     function(e) {
     *       //uh oh, error loading
     *     }
     * );
     * ~~~
     *
     * @see Crafty.asset
     * @see Crafty.load
     */
    image_whitelist: ["jpg", "jpeg", "gif", "png", "svg"],
    /**@
     * #Crafty.loader
     * @category Assets
     * @sign public void Crafty.load(Array assets, Function onLoad[, Function onProgress, Function onError])
     * @param assets - Array of assets to load (accepts sounds and images)
     * @param onLoad - Callback when the assets are loaded
     * @param onProgress - Callback when an asset is loaded. Contains information about assets loaded
     * @param onError - Callback when an asset fails to load
     *
     * Preloader for all assets. Takes an array of URLs and
     * adds them to the `Crafty.assets` object.
     *
     * Files with suffixes in `image_whitelist` (case insensitive) will be loaded.
     *
     * If `Crafty.support.audio` is `true`, files with the following suffixes `mp3`, `wav`, `ogg` and `mp4` (case insensitive) can be loaded.
     *
     * The `onProgress` function will be passed on object with information about
     * the progress including how many assets loaded, total of all the assets to
     * load and a percentage of the progress.
     * ~~~
     * { loaded: j, total: total, percent: (j / total * 100) ,src:src})
     * ~~~
     *
     * `onError` will be passed with the asset that couldn't load.
     *
     * When `onError` is not provided, the onLoad is loaded even some assets are not successfully loaded. Otherwise, onLoad will be called no matter whether there are errors or not.
     *
     * @example
     * ~~~
     * Crafty.load(["images/sprite.png", "sounds/jump.mp3"],
     *     function() {
     *         //when loaded
     *         Crafty.scene("main"); //go to main scene
     *         Crafty.audio.play("jump.mp3"); //Play the audio file
     *     },
     *
     *     function(e) {
     *       //progress
     *     },
     *
     *     function(e) {
     *       //uh oh, error loading
     *     }
     * );
     * ~~~
     *
     * @see Crafty.assets
     * @see Crafty.image_whitelist
     */
    load: function (data, oncomplete, onprogress, onerror) {
        var i = 0,
            l = data.length,
            current, obj, total = l,
            j = 0,
            ext = "";

        //Progress function

        function pro() {
            var src = this.src;
			//Remove events cause audio trigger this event more than once(depends on browser)
            /* // Not implemented in CocoonJS
			if (this.removeEventListener) {
                this.removeEventListener('canplaythrough', pro, false);
            }*/

            ++j;
            //if progress callback, give information of assets loaded, total and percent
            if (onprogress)
                onprogress({
                    loaded: j,
                    total: total,
                    percent: (j / total * 100),
                    src: src
                });

            if (j === total && oncomplete) oncomplete();
        }
        //Error function

        function err() {
            var src = this.src;
            if (onerror)
                onerror({
                    loaded: j,
                    total: total,
                    percent: (j / total * 100),
                    src: src
                });

            j++;
            if (j === total && oncomplete) oncomplete();
        }

        for (i=0; i < l; ++i) {
            current = data[i];
			ext = current.substr(current.lastIndexOf('.') + 1, 3).toLowerCase();

            obj = Crafty.asset(current) || null;

            if (Crafty.audio.supports(ext)) {
                //Create a new asset if necessary, using the file name as an id
                if (!obj) {
                    var name = current.substr(current.lastIndexOf('/') + 1).toLowerCase();
                    obj = Crafty.audio.create(name, current).obj;
					++j;
				}

                //addEventListener is supported on IE9 , Audio as well
				// Not implemented in CocoonJS
				/*
                if (obj.addEventListener) {
                    obj.addEventListener('canplaythrough', pro, false);
                }*/


            } else if (Crafty.image_whitelist.indexOf(ext) >= 0) {
                if (!obj) {
                    obj = new Image();
                    Crafty.asset(current, obj);
                }
                obj.onload = pro;/*
                if (Crafty.support.prefix === 'webkit') {
                    obj.src = ""; // workaround for webkit bug
                }*/
                obj.src = current; //setup src after onload function Opera/IE Bug

            } else {
                total--;
                continue; //skip if not applicable
            }
            obj.onerror = err;
        }

        // If we aren't trying to handle *any* of the files, that's as complete as it gets!
        if (total === 0)
            oncomplete();

    },
    /**@
     * #Crafty.modules
     * @category Assets
     * @sign public void Crafty.modules([String repoLocation,] Object moduleMap[, Function onLoad])
     * @param modules - Map of name:version pairs for modules to load
     * @param onLoad - Callback when the modules are loaded
     *
     * Browse the selection of community modules on http://craftycomponents.com
     *
     * It is possible to create your own repository.
     *
     *
     * @example
     * ~~~
     * // Loading from default repository
     * Crafty.modules({ moveto: 'DEV' }, function () {
     *     //module is ready
     *     Crafty.e("MoveTo, 2D, DOM");
     * });
     *
     * // Loading from your own server
     * Crafty.modules({ 'http://mydomain.com/js/mystuff.js': 'DEV' }, function () {
     *     //module is ready
     *     Crafty.e("MoveTo, 2D, DOM");
     * });
     *
     * // Loading from alternative repository
     * Crafty.modules('http://cdn.crafty-modules.com', { moveto: 'DEV' }, function () {
     *     //module is ready
     *     Crafty.e("MoveTo, 2D, DOM");
     * });
     *
     * // Loading from the latest component website
     * Crafty.modules(
     *     'http://cdn.craftycomponents.com'
     *     , { MoveTo: 'release' }
     *     , function () {
     *     Crafty.e("2D, DOM, Color, MoveTo")
     *       .attr({x: 0, y: 0, w: 50, h: 50})
     *       .color("green");
     *     });
     * });
     * ~~~
     *
     */
    modules: function (modulesRepository, moduleMap, oncomplete) {

        if (arguments.length === 2 && typeof modulesRepository === "object") {
            oncomplete = moduleMap;
            moduleMap = modulesRepository;
            modulesRepository = 'http://cdn.craftycomponents.com';
        }

        /*!
         * $script.js Async loader & dependency manager
         * https://github.com/ded/script.js
         * (c) Dustin Diaz, Jacob Thornton 2011
         * License: MIT
         */
        var $script = (function () {
            var win = this,
                doc = document,
                head = doc.getElementsByTagName('head')[0],
                validBase = /^https?:\/\//,
                old = win.$script,
                list = {}, ids = {}, delay = {}, scriptpath, scripts = {}, s = 'string',
                f = false,
                push = 'push',
                domContentLoaded = 'DOMContentLoaded',
                readyState = 'readyState',
                addEventListener = 'addEventListener',
                onreadystatechange = 'onreadystatechange';

                function every(ar, fn, i) {
                    for (i = 0, j = ar.length; i < j; ++i)
                        if (!fn(ar[i])) return f;
                    return 1;
                }

                function each(ar, fn) {
                    every(ar, function (el) {
                        return !fn(el);
                    });
                }

            if (!doc[readyState] && doc[addEventListener]) {
                doc[addEventListener](domContentLoaded, function fn() {
                    doc.removeEventListener(domContentLoaded, fn, f);
                    doc[readyState] = 'complete';
                }, f);
                doc[readyState] = 'loading';
            }

            function $script(paths, idOrDone, optDone) {
                paths = paths[push] ? paths : [paths];
                var idOrDoneIsDone = idOrDone && idOrDone.call,
                    done = idOrDoneIsDone ? idOrDone : optDone,
                    id = idOrDoneIsDone ? paths.join('') : idOrDone,
                    queue = paths.length;

                    function loopFn(item) {
                        return item.call ? item() : list[item];
                    }

                    function callback() {
                        if (!--queue) {
                            list[id] = 1;
                            if (done)
                                done();
                            for (var dset in delay) {
                                if (every(dset.split('|'), loopFn) && !each(delay[dset], loopFn))
                                    delay[dset] = [];
                            }
                        }
                    }
                setTimeout(function () {
                    each(paths, function (path) {
                        if (scripts[path]) {
                            if (id)
                                ids[id] = 1;
                            return scripts[path] == 2 && callback();
                        }
                        scripts[path] = 1;
                        if (id)
                            ids[id] = 1;
                        create(!validBase.test(path) && scriptpath ? scriptpath + path + '.js' : path, callback);
                    });
                }, 0);
                return $script;
            }

            function create(path, fn) {
                var el = doc.createElement('script'),
                    loaded = f;
                    el.onload = el.onerror = el[onreadystatechange] = function () {
                        if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;
                        el.onload = el[onreadystatechange] = null;
                        loaded = 1;
                        scripts[path] = 2;
                        fn();
                    };
                el.async = 1;
                el.src = path;
                head.insertBefore(el, head.firstChild);
            }

            $script.get = create;

            $script.order = function (scripts, id, done) {
                (function callback(s) {
                    s = scripts.shift();
                    if (!scripts.length) $script(s, id, done);
                    else $script(s, callback);
                }());
            };

            $script.path = function (p) {
                scriptpath = p;
            };
            // This function is a tangled mess of conciseness, so suppress warnings here
            /* jshint -W030 */
            $script.ready = function (deps, ready, req) {
                deps = deps[push] ? deps : [deps];
                var missing = [];
                !each(deps, function (dep) {
                    list[dep] || missing[push](dep);
                }) && every(deps, function (dep) {
                    return list[dep];
                }) ?
                    ready() : ! function (key) {
                        delay[key] = delay[key] || [];
                        delay[key][push](ready);
                        req && req(missing);
                }(deps.join('|'));
                return $script;
            };
            /* jshint +W030 */
            $script.noConflict = function () {
                win.$script = old;
                return this;
            };

            return $script;
        })();

        var modules = [];
        var validBase = /^(https?|file):\/\//;
        for (var i in moduleMap) {
            if (validBase.test(i))
                modules.push(i);
            else
                modules.push(modulesRepository + '/' + i.toLowerCase() + '-' + moduleMap[i].toLowerCase() + '.js');
        }

        $script(modules, function () {
            if (oncomplete) oncomplete();
        });
    }
});



    

/**@
 * #Crafty.math
 * @category 2D
 * Static functions.
 */
Crafty.math = {
    /**@
     * #Crafty.math.abs
     * @comp Crafty.math
     * @sign public this Crafty.math.abs(Number n)
     * @param n - Some value.
     * @return Absolute value.
     *
     * Returns the absolute value.
     */
    abs: function (x) {
        return x < 0 ? -x : x;
    },

    /**@
     * #Crafty.math.amountOf
     * @comp Crafty.math
     * @sign public Number Crafty.math.amountOf(Number checkValue, Number minValue, Number maxValue)
     * @param checkValue - Value that should checked with minimum and maximum.
     * @param minValue - Minimum value to check.
     * @param maxValue - Maximum value to check.
     * @return Amount of checkValue compared to minValue and maxValue.
     *
     * Returns the amount of how much a checkValue is more like minValue (=0)
     * or more like maxValue (=1)
     */
    amountOf: function (checkValue, minValue, maxValue) {
        if (minValue < maxValue)
            return (checkValue - minValue) / (maxValue - minValue);
        else
            return (checkValue - maxValue) / (minValue - maxValue);
    },


    /**@
     * #Crafty.math.clamp
     * @comp Crafty.math
     * @sign public Number Crafty.math.clamp(Number value, Number min, Number max)
     * @param value - A value.
     * @param max - Maximum that value can be.
     * @param min - Minimum that value can be.
     * @return The value between minimum and maximum.
     *
     * Restricts a value to be within a specified range.
     */
    clamp: function (value, min, max) {
        if (value > max)
            return max;
        else if (value < min)
            return min;
        else
            return value;
    },

    /**@
     * #Crafty.math.degToRad
     * Converts angle from degree to radian.
     * @comp Crafty.math
     * @param angleInDeg - The angle in degree.
     * @return The angle in radian.
     */
    degToRad: function (angleInDeg) {
        return angleInDeg * Math.PI / 180;
    },

    /**@
     * #Crafty.math.distance
     * @comp Crafty.math
     * @sign public Number Crafty.math.distance(Number x1, Number y1, Number x2, Number y2)
     * @param x1 - First x coordinate.
     * @param y1 - First y coordinate.
     * @param x2 - Second x coordinate.
     * @param y2 - Second y coordinate.
     * @return The distance between the two points.
     *
     * Distance between two points.
     */
    distance: function (x1, y1, x2, y2) {
        var squaredDistance = Crafty.math.squaredDistance(x1, y1, x2, y2);
        return Math.sqrt(parseFloat(squaredDistance));
    },

    /**@
     * #Crafty.math.lerp
     * @comp Crafty.math
     * @sign public Number Crafty.math.lerp(Number value1, Number value2, Number amount)
     * @param value1 - One value.
     * @param value2 - Another value.
     * @param amount - Amount of value2 to value1.
     * @return Linear interpolated value.
     *
     * Linear interpolation. Passing amount with a value of 0 will cause value1 to be returned,
     * a value of 1 will cause value2 to be returned.
     */
    lerp: function (value1, value2, amount) {
        return value1 + (value2 - value1) * amount;
    },

    /**@
     * #Crafty.math.negate
     * @comp Crafty.math
     * @sign public Number Crafty.math.negate(Number percent)
     * @param percent - If you pass 1 a -1 will be returned. If you pass 0 a 1 will be returned.
     * @return 1 or -1.
     *
     * Returnes "randomly" -1.
     */
    negate: function (percent) {
        if (Math.random() < percent)
            return -1;
        else
            return 1;
    },

    /**@
     * #Crafty.math.radToDeg
     * @comp Crafty.math
     * @sign public Number Crafty.math.radToDeg(Number angle)
     * @param angleInRad - The angle in radian.
     * @return The angle in degree.
     *
     * Converts angle from radian to degree.
     */
    radToDeg: function (angleInRad) {
        return angleInRad * 180 / Math.PI;
    },

    /**@
     * #Crafty.math.randomElementOfArray
     * @comp Crafty.math
     * @sign public Object Crafty.math.randomElementOfArray(Array array)
     * @param array - A specific array.
     * @return A random element of a specific array.
     *
     * Returns a random element of a specific array.
     */
    randomElementOfArray: function (array) {
        return array[Math.floor(array.length * Math.random())];
    },

    /**@
     * #Crafty.math.randomInt
     * @comp Crafty.math
     * @sign public Number Crafty.math.randomInt(Number start, Number end)
     * @param start - Smallest int value that can be returned.
     * @param end - Biggest int value that can be returned.
     * @return A random int.
     *
     * Returns a random int in within a specific range.
     */
    randomInt: function (start, end) {
        return start + Math.floor((1 + end - start) * Math.random());
    },

    /**@
     * #Crafty.math.randomNumber
     * @comp Crafty.math
     * @sign public Number Crafty.math.randomInt(Number start, Number end)
     * @param start - Smallest number value that can be returned.
     * @param end - Biggest number value that can be returned.
     * @return A random number.
     *
     * Returns a random number in within a specific range.
     */
    randomNumber: function (start, end) {
        return start + (end - start) * Math.random();
    },

    /**@
     * #Crafty.math.squaredDistance
     * @comp Crafty.math
     * @sign public Number Crafty.math.squaredDistance(Number x1, Number y1, Number x2, Number y2)
     * @param x1 - First x coordinate.
     * @param y1 - First y coordinate.
     * @param x2 - Second x coordinate.
     * @param y2 - Second y coordinate.
     * @return The squared distance between the two points.
     *
     * Squared distance between two points.
     */
    squaredDistance: function (x1, y1, x2, y2) {
        return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
    },

    /**@
     * #Crafty.math.withinRange
     * @comp Crafty.math
     * @sign public Boolean Crafty.math.withinRange(Number value, Number min, Number max)
     * @param value - The specific value.
     * @param min - Minimum value.
     * @param max - Maximum value.
     * @return Returns true if value is within a specific range.
     *
     * Check if a value is within a specific range.
     */
    withinRange: function (value, min, max) {
        return (value >= min && value <= max);
    }
};

Crafty.math.Vector2D = (function () {
    /**@
     * #Crafty.math.Vector2D
     * @category 2D
     * @class This is a general purpose 2D vector class
     *
     * Vector2D uses the following form:
     * <x, y>
     *
     * @public
     * @sign public {Vector2D} Vector2D();
     * @sign public {Vector2D} Vector2D(Vector2D);
     * @sign public {Vector2D} Vector2D(Number, Number);
     * @param {Vector2D|Number=0} x
     * @param {Number=0} y
     */

    function Vector2D(x, y) {
        if (x instanceof Vector2D) {
            this.x = x.x;
            this.y = x.y;
        } else if (arguments.length === 2) {
            this.x = x;
            this.y = y;
        } else if (arguments.length > 0)
            throw "Unexpected number of arguments for Vector2D()";
    } // class Vector2D

    Vector2D.prototype.x = 0;
    Vector2D.prototype.y = 0;

    /**@
     * #.add
     * @comp Crafty.math.Vector2D
     *
     * Adds the passed vector to this vector
     *
     * @public
     * @sign public {Vector2D} add(Vector2D);
     * @param {vector2D} vecRH
     * @returns {Vector2D} this after adding
     */
    Vector2D.prototype.add = function (vecRH) {
        this.x += vecRH.x;
        this.y += vecRH.y;
        return this;
    }; // add

    /**@
     * #.angleBetween
     * @comp Crafty.math.Vector2D
     *
     * Calculates the angle between the passed vector and this vector, using <0,0> as the point of reference.
     * Angles returned have the range (-p, p].
     *
     * @public
     * @sign public {Number} angleBetween(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Number} the angle between the two vectors in radians
     */
    Vector2D.prototype.angleBetween = function (vecRH) {
        return Math.atan2(this.x * vecRH.y - this.y * vecRH.x, this.x * vecRH.x + this.y * vecRH.y);
    }; // angleBetween

    /**@
     * #.angleTo
     * @comp Crafty.math.Vector2D
     *
     * Calculates the angle to the passed vector from this vector, using this vector as the point of reference.
     *
     * @public
     * @sign public {Number} angleTo(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Number} the angle to the passed vector in radians
     */
    Vector2D.prototype.angleTo = function (vecRH) {
        return Math.atan2(vecRH.y - this.y, vecRH.x - this.x);
    };

    /**@
     * #.clone
     * @comp Crafty.math.Vector2D
     *
     * Creates and exact, numeric copy of this vector
     *
     * @public
     * @sign public {Vector2D} clone();
     * @returns {Vector2D} the new vector
     */
    Vector2D.prototype.clone = function () {
        return new Vector2D(this);
    }; // clone

    /**@
     * #.distance
     * @comp Crafty.math.Vector2D
     *
     * Calculates the distance from this vector to the passed vector.
     *
     * @public
     * @sign public {Number} distance(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Number} the distance between the two vectors
     */
    Vector2D.prototype.distance = function (vecRH) {
        return Math.sqrt((vecRH.x - this.x) * (vecRH.x - this.x) + (vecRH.y - this.y) * (vecRH.y - this.y));
    }; // distance

    /**@
     * #.distanceSq
     * @comp Crafty.math.Vector2D
     *
     * Calculates the squared distance from this vector to the passed vector.
     * This function avoids calculating the square root, thus being slightly faster than .distance( ).
     *
     * @public
     * @sign public {Number} distanceSq(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Number} the squared distance between the two vectors
     * @see .distance
     */
    Vector2D.prototype.distanceSq = function (vecRH) {
        return (vecRH.x - this.x) * (vecRH.x - this.x) + (vecRH.y - this.y) * (vecRH.y - this.y);
    }; // distanceSq

    /**@
     * #.divide
     * @comp Crafty.math.Vector2D
     *
     * Divides this vector by the passed vector.
     *
     * @public
     * @sign public {Vector2D} divide(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Vector2D} this vector after dividing
     */
    Vector2D.prototype.divide = function (vecRH) {
        this.x /= vecRH.x;
        this.y /= vecRH.y;
        return this;
    }; // divide

    /**@
     * #.dotProduct
     * @comp Crafty.math.Vector2D
     *
     * Calculates the dot product of this and the passed vectors
     *
     * @public
     * @sign public {Number} dotProduct(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Number} the resultant dot product
     */
    Vector2D.prototype.dotProduct = function (vecRH) {
        return this.x * vecRH.x + this.y * vecRH.y;
    }; // dotProduct

    /**@
     * #.equals
     * @comp Crafty.math.Vector2D
     *
     * Determines if this vector is numerically equivalent to the passed vector.
     *
     * @public
     * @sign public {Boolean} equals(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Boolean} true if the vectors are equivalent
     */
    Vector2D.prototype.equals = function (vecRH) {
        return vecRH instanceof Vector2D &&
            this.x == vecRH.x && this.y == vecRH.y;
    }; // equals

    /**@
     * #.getNormal
     * @comp Crafty.math.Vector2D
     *
     * Calculates a new right-handed normal vector for the line created by this and the passed vectors.
     *
     * @public
     * @sign public {Vector2D} getNormal([Vector2D]);
     * @param {Vector2D=<0,0>} [vecRH]
     * @returns {Vector2D} the new normal vector
     */
    Vector2D.prototype.getNormal = function (vecRH) {
        if (vecRH === undefined)
            return new Vector2D(-this.y, this.x); // assume vecRH is <0, 0>
        return new Vector2D(vecRH.y - this.y, this.x - vecRH.x).normalize();
    }; // getNormal

    /**@
     * #.isZero
     * @comp Crafty.math.Vector2D
     *
     * Determines if this vector is equal to <0,0>
     *
     * @public
     * @sign public {Boolean} isZero();
     * @returns {Boolean} true if this vector is equal to <0,0>
     */
    Vector2D.prototype.isZero = function () {
        return this.x === 0 && this.y === 0;
    }; // isZero

    /**@
     * #.magnitude
     * @comp Crafty.math.Vector2D
     *
     * Calculates the magnitude of this vector.
     * Note: Function objects in JavaScript already have a 'length' member, hence the use of magnitude instead.
     *
     * @public
     * @sign public {Number} magnitude();
     * @returns {Number} the magnitude of this vector
     */
    Vector2D.prototype.magnitude = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }; // magnitude

    /**@
     * #.magnitudeSq
     * @comp Crafty.math.Vector2D
     *
     * Calculates the square of the magnitude of this vector.
     * This function avoids calculating the square root, thus being slightly faster than .magnitude( ).
     *
     * @public
     * @sign public {Number} magnitudeSq();
     * @returns {Number} the square of the magnitude of this vector
     * @see .magnitude
     */
    Vector2D.prototype.magnitudeSq = function () {
        return this.x * this.x + this.y * this.y;
    }; // magnitudeSq

    /**@
     * #.multiply
     * @comp Crafty.math.Vector2D
     *
     * Multiplies this vector by the passed vector
     *
     * @public
     * @sign public {Vector2D} multiply(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {Vector2D} this vector after multiplying
     */
    Vector2D.prototype.multiply = function (vecRH) {
        this.x *= vecRH.x;
        this.y *= vecRH.y;
        return this;
    }; // multiply

    /**@
     * #.negate
     * @comp Crafty.math.Vector2D
     *
     * Negates this vector (ie. <-x,-y>)
     *
     * @public
     * @sign public {Vector2D} negate();
     * @returns {Vector2D} this vector after negation
     */
    Vector2D.prototype.negate = function () {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    }; // negate

    /**@
     * #.normalize
     * @comp Crafty.math.Vector2D
     *
     * Normalizes this vector (scales the vector so that its new magnitude is 1)
     * For vectors where magnitude is 0, <1,0> is returned.
     *
     * @public
     * @sign public {Vector2D} normalize();
     * @returns {Vector2D} this vector after normalization
     */
    Vector2D.prototype.normalize = function () {
        var lng = Math.sqrt(this.x * this.x + this.y * this.y);

        if (lng === 0) {
            // default due East
            this.x = 1;
            this.y = 0;
        } else {
            this.x /= lng;
            this.y /= lng;
        } // else

        return this;
    }; // normalize

    /**@
     * #.scale
     * @comp Crafty.math.Vector2D
     *
     * Scales this vector by the passed amount(s)
     * If scalarY is omitted, scalarX is used for both axes
     *
     * @public
     * @sign public {Vector2D} scale(Number[, Number]);
     * @param {Number} scalarX
     * @param {Number} [scalarY]
     * @returns {Vector2D} this after scaling
     */
    Vector2D.prototype.scale = function (scalarX, scalarY) {
        if (scalarY === undefined)
            scalarY = scalarX;

        this.x *= scalarX;
        this.y *= scalarY;

        return this;
    }; // scale

    /**@
     * #.scaleToMagnitude
     * @comp Crafty.math.Vector2D
     *
     * Scales this vector such that its new magnitude is equal to the passed value.
     *
     * @public
     * @sign public {Vector2D} scaleToMagnitude(Number);
     * @param {Number} mag
     * @returns {Vector2D} this vector after scaling
     */
    Vector2D.prototype.scaleToMagnitude = function (mag) {
        var k = mag / this.magnitude();
        this.x *= k;
        this.y *= k;
        return this;
    }; // scaleToMagnitude

    /**@
     * #.setValues
     * @comp Crafty.math.Vector2D
     *
     * Sets the values of this vector using a passed vector or pair of numbers.
     *
     * @public
     * @sign public {Vector2D} setValues(Vector2D);
     * @sign public {Vector2D} setValues(Number, Number);
     * @param {Number|Vector2D} x
     * @param {Number} y
     * @returns {Vector2D} this vector after setting of values
     */
    Vector2D.prototype.setValues = function (x, y) {
        if (x instanceof Vector2D) {
            this.x = x.x;
            this.y = x.y;
        } else {
            this.x = x;
            this.y = y;
        } // else

        return this;
    }; // setValues

    /**@
     * #.subtract
     * @comp Crafty.math.Vector2D
     *
     * Subtracts the passed vector from this vector.
     *
     * @public
     * @sign public {Vector2D} subtract(Vector2D);
     * @param {Vector2D} vecRH
     * @returns {vector2D} this vector after subtracting
     */
    Vector2D.prototype.subtract = function (vecRH) {
        this.x -= vecRH.x;
        this.y -= vecRH.y;
        return this;
    }; // subtract

    /**@
     * #.toString
     * @comp Crafty.math.Vector2D
     *
     * Returns a string representation of this vector.
     *
     * @public
     * @sign public {String} toString();
     * @returns {String}
     */
    Vector2D.prototype.toString = function () {
        return "Vector2D(" + this.x + ", " + this.y + ")";
    }; // toString

    /**@
     * #.translate
     * @comp Crafty.math.Vector2D
     *
     * Translates (moves) this vector by the passed amounts.
     * If dy is omitted, dx is used for both axes.
     *
     * @public
     * @sign public {Vector2D} translate(Number[, Number]);
     * @param {Number} dx
     * @param {Number} [dy]
     * @returns {Vector2D} this vector after translating
     */
    Vector2D.prototype.translate = function (dx, dy) {
        if (dy === undefined)
            dy = dx;

        this.x += dx;
        this.y += dy;

        return this;
    }; // translate

    /**@
     * #.tripleProduct
     * @comp Crafty.math.Vector2D
     *
     * Calculates the triple product of three vectors.
     * triple vector product = b(a•c) - a(b•c)
     *
     * @public
     * @static
     * @sign public {Vector2D} tripleProduct(Vector2D, Vector2D, Vector2D);
     * @param {Vector2D} a
     * @param {Vector2D} b
     * @param {Vector2D} c
     * @return {Vector2D} the triple product as a new vector
     */
    Vector2D.tripleProduct = function (a, b, c) {
        var ac = a.dotProduct(c);
        var bc = b.dotProduct(c);
        return new Crafty.math.Vector2D(b.x * ac - a.x * bc, b.y * ac - a.y * bc);
    };

    return Vector2D;
})();

Crafty.math.Matrix2D = (function () {
    /**@
     * #Crafty.math.Matrix2D
     * @category 2D
     *
     * @class This is a 2D Matrix2D class. It is 3x3 to allow for affine transformations in 2D space.
     * The third row is always assumed to be [0, 0, 1].
     *
     * Matrix2D uses the following form, as per the whatwg.org specifications for canvas.transform():
     * [a, c, e]
     * [b, d, f]
     * [0, 0, 1]
     *
     * @public
     * @sign public {Matrix2D} new Matrix2D();
     * @sign public {Matrix2D} new Matrix2D(Matrix2D);
     * @sign public {Matrix2D} new Matrix2D(Number, Number, Number, Number, Number, Number);
     * @param {Matrix2D|Number=1} a
     * @param {Number=0} b
     * @param {Number=0} c
     * @param {Number=1} d
     * @param {Number=0} e
     * @param {Number=0} f
     */
    Matrix2D = function (a, b, c, d, e, f) {
        if (a instanceof Matrix2D) {
            this.a = a.a;
            this.b = a.b;
            this.c = a.c;
            this.d = a.d;
            this.e = a.e;
            this.f = a.f;
        } else if (arguments.length === 6) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.e = e;
            this.f = f;
        } else if (arguments.length > 0)
            throw "Unexpected number of arguments for Matrix2D()";
    }; // class Matrix2D

    Matrix2D.prototype.a = 1;
    Matrix2D.prototype.b = 0;
    Matrix2D.prototype.c = 0;
    Matrix2D.prototype.d = 1;
    Matrix2D.prototype.e = 0;
    Matrix2D.prototype.f = 0;

    /**@
     * #.apply
     * @comp Crafty.math.Matrix2D
     *
     * Applies the matrix transformations to the passed object
     *
     * @public
     * @sign public {Vector2D} apply(Vector2D);
     * @param {Vector2D} vecRH - vector to be transformed
     * @returns {Vector2D} the passed vector object after transforming
     */
    Matrix2D.prototype.apply = function (vecRH) {
        // I'm not sure of the best way for this function to be implemented. Ideally
        // support for other objects (rectangles, polygons, etc) should be easily
        // addable in the future. Maybe a function (apply) is not the best way to do
        // this...?

        var tmpX = vecRH.x;
        vecRH.x = tmpX * this.a + vecRH.y * this.c + this.e;
        vecRH.y = tmpX * this.b + vecRH.y * this.d + this.f;
        // no need to homogenize since the third row is always [0, 0, 1]

        return vecRH;
    }; // apply

    /**@
     * #.clone
     * @comp Crafty.math.Matrix2D
     *
     * Creates an exact, numeric copy of the current matrix
     *
     * @public
     * @sign public {Matrix2D} clone();
     * @returns {Matrix2D}
     */
    Matrix2D.prototype.clone = function () {
        return new Matrix2D(this);
    }; // clone

    /**@
     * #.combine
     * @comp Crafty.math.Matrix2D
     *
     * Multiplies this matrix with another, overriding the values of this matrix.
     * The passed matrix is assumed to be on the right-hand side.
     *
     * @public
     * @sign public {Matrix2D} combine(Matrix2D);
     * @param {Matrix2D} mtrxRH
     * @returns {Matrix2D} this matrix after combination
     */
    Matrix2D.prototype.combine = function (mtrxRH) {
        var tmp = this.a;
        this.a = tmp * mtrxRH.a + this.b * mtrxRH.c;
        this.b = tmp * mtrxRH.b + this.b * mtrxRH.d;
        tmp = this.c;
        this.c = tmp * mtrxRH.a + this.d * mtrxRH.c;
        this.d = tmp * mtrxRH.b + this.d * mtrxRH.d;
        tmp = this.e;
        this.e = tmp * mtrxRH.a + this.f * mtrxRH.c + mtrxRH.e;
        this.f = tmp * mtrxRH.b + this.f * mtrxRH.d + mtrxRH.f;
        return this;
    }; // combine

    /**@
     * #.equals
     * @comp Crafty.math.Matrix2D
     *
     * Checks for the numeric equality of this matrix versus another.
     *
     * @public
     * @sign public {Boolean} equals(Matrix2D);
     * @param {Matrix2D} mtrxRH
     * @returns {Boolean} true if the two matrices are numerically equal
     */
    Matrix2D.prototype.equals = function (mtrxRH) {
        return mtrxRH instanceof Matrix2D &&
            this.a == mtrxRH.a && this.b == mtrxRH.b && this.c == mtrxRH.c &&
            this.d == mtrxRH.d && this.e == mtrxRH.e && this.f == mtrxRH.f;
    }; // equals

    /**@
     * #.determinant
     * @comp Crafty.math.Matrix2D
     *
     * Calculates the determinant of this matrix
     *
     * @public
     * @sign public {Number} determinant();
     * @returns {Number} det(this matrix)
     */
    Matrix2D.prototype.determinant = function () {
        return this.a * this.d - this.b * this.c;
    }; // determinant

    /**@
     * #.invert
     * @comp Crafty.math.Matrix2D
     *
     * Inverts this matrix if possible
     *
     * @public
     * @sign public {Matrix2D} invert();
     * @returns {Matrix2D} this inverted matrix or the original matrix on failure
     * @see .isInvertible
     */
    Matrix2D.prototype.invert = function () {
        var det = this.determinant();

        // matrix is invertible if its determinant is non-zero
        if (det !== 0) {
            var old = {
                a: this.a,
                b: this.b,
                c: this.c,
                d: this.d,
                e: this.e,
                f: this.f
            };
            this.a = old.d / det;
            this.b = -old.b / det;
            this.c = -old.c / det;
            this.d = old.a / det;
            this.e = (old.c * old.f - old.e * old.d) / det;
            this.f = (old.e * old.b - old.a * old.f) / det;
        } // if

        return this;
    }; // invert

    /**@
     * #.isIdentity
     * @comp Crafty.math.Matrix2D
     *
     * Returns true if this matrix is the identity matrix
     *
     * @public
     * @sign public {Boolean} isIdentity();
     * @returns {Boolean}
     */
    Matrix2D.prototype.isIdentity = function () {
        return this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.e === 0 && this.f === 0;
    }; // isIdentity

    /**@
     * #.isInvertible
     * @comp Crafty.math.Matrix2D
     *
     * Determines is this matrix is invertible.
     *
     * @public
     * @sign public {Boolean} isInvertible();
     * @returns {Boolean} true if this matrix is invertible
     * @see .invert
     */
    Matrix2D.prototype.isInvertible = function () {
        return this.determinant() !== 0;
    }; // isInvertible

    /**@
     * #.preRotate
     * @comp Crafty.math.Matrix2D
     *
     * Applies a counter-clockwise pre-rotation to this matrix
     *
     * @public
     * @sign public {Matrix2D} preRotate(Number);
     * @param {number} rads - angle to rotate in radians
     * @returns {Matrix2D} this matrix after pre-rotation
     */
    Matrix2D.prototype.preRotate = function (rads) {
        var nCos = Math.cos(rads);
        var nSin = Math.sin(rads);

        var tmp = this.a;
        this.a = nCos * tmp - nSin * this.b;
        this.b = nSin * tmp + nCos * this.b;
        tmp = this.c;
        this.c = nCos * tmp - nSin * this.d;
        this.d = nSin * tmp + nCos * this.d;

        return this;
    }; // preRotate

    /**@
     * #.preScale
     * @comp Crafty.math.Matrix2D
     *
     * Applies a pre-scaling to this matrix
     *
     * @public
     * @sign public {Matrix2D} preScale(Number[, Number]);
     * @param {Number} scalarX
     * @param {Number} [scalarY] scalarX is used if scalarY is undefined
     * @returns {Matrix2D} this after pre-scaling
     */
    Matrix2D.prototype.preScale = function (scalarX, scalarY) {
        if (scalarY === undefined)
            scalarY = scalarX;

        this.a *= scalarX;
        this.b *= scalarY;
        this.c *= scalarX;
        this.d *= scalarY;

        return this;
    }; // preScale

    /**@
     * #.preTranslate
     * @comp Crafty.math.Matrix2D
     *
     * Applies a pre-translation to this matrix
     *
     * @public
     * @sign public {Matrix2D} preTranslate(Vector2D);
     * @sign public {Matrix2D} preTranslate(Number, Number);
     * @param {Number|Vector2D} dx
     * @param {Number} dy
     * @returns {Matrix2D} this matrix after pre-translation
     */
    Matrix2D.prototype.preTranslate = function (dx, dy) {
        if (typeof dx === "number") {
            this.e += dx;
            this.f += dy;
        } else {
            this.e += dx.x;
            this.f += dx.y;
        } // else

        return this;
    }; // preTranslate

    /**@
     * #.rotate
     * @comp Crafty.math.Matrix2D
     *
     * Applies a counter-clockwise post-rotation to this matrix
     *
     * @public
     * @sign public {Matrix2D} rotate(Number);
     * @param {Number} rads - angle to rotate in radians
     * @returns {Matrix2D} this matrix after rotation
     */
    Matrix2D.prototype.rotate = function (rads) {
        var nCos = Math.cos(rads);
        var nSin = Math.sin(rads);

        var tmp = this.a;
        this.a = nCos * tmp - nSin * this.b;
        this.b = nSin * tmp + nCos * this.b;
        tmp = this.c;
        this.c = nCos * tmp - nSin * this.d;
        this.d = nSin * tmp + nCos * this.d;
        tmp = this.e;
        this.e = nCos * tmp - nSin * this.f;
        this.f = nSin * tmp + nCos * this.f;

        return this;
    }; // rotate

    /**@
     * #.scale
     * @comp Crafty.math.Matrix2D
     *
     * Applies a post-scaling to this matrix
     *
     * @public
     * @sign public {Matrix2D} scale(Number[, Number]);
     * @param {Number} scalarX
     * @param {Number} [scalarY] scalarX is used if scalarY is undefined
     * @returns {Matrix2D} this after post-scaling
     */
    Matrix2D.prototype.scale = function (scalarX, scalarY) {
        if (scalarY === undefined)
            scalarY = scalarX;

        this.a *= scalarX;
        this.b *= scalarY;
        this.c *= scalarX;
        this.d *= scalarY;
        this.e *= scalarX;
        this.f *= scalarY;

        return this;
    }; // scale

    /**@
     * #.setValues
     * @comp Crafty.math.Matrix2D
     *
     * Sets the values of this matrix
     *
     * @public
     * @sign public {Matrix2D} setValues(Matrix2D);
     * @sign public {Matrix2D} setValues(Number, Number, Number, Number, Number, Number);
     * @param {Matrix2D|Number} a
     * @param {Number} b
     * @param {Number} c
     * @param {Number} d
     * @param {Number} e
     * @param {Number} f
     * @returns {Matrix2D} this matrix containing the new values
     */
    Matrix2D.prototype.setValues = function (a, b, c, d, e, f) {
        if (a instanceof Matrix2D) {
            this.a = a.a;
            this.b = a.b;
            this.c = a.c;
            this.d = a.d;
            this.e = a.e;
            this.f = a.f;
        } else {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.e = e;
            this.f = f;
        } // else

        return this;
    }; // setValues

    /**@
     * #.toString
     * @comp Crafty.math.Matrix2D
     *
     * Returns the string representation of this matrix.
     *
     * @public
     * @sign public {String} toString();
     * @returns {String}
     */
    Matrix2D.prototype.toString = function () {
        return "Matrix2D([" + this.a + ", " + this.c + ", " + this.e +
            "] [" + this.b + ", " + this.d + ", " + this.f + "] [0, 0, 1])";
    }; // toString

    /**@
     * #.translate
     * @comp Crafty.math.Matrix2D
     *
     * Applies a post-translation to this matrix
     *
     * @public
     * @sign public {Matrix2D} translate(Vector2D);
     * @sign public {Matrix2D} translate(Number, Number);
     * @param {Number|Vector2D} dx
     * @param {Number} dy
     * @returns {Matrix2D} this matrix after post-translation
     */
    Matrix2D.prototype.translate = function (dx, dy) {
        if (typeof dx === "number") {
            this.e += this.a * dx + this.c * dy;
            this.f += this.b * dx + this.d * dy;
        } else {
            this.e += this.a * dx.x + this.c * dx.y;
            this.f += this.b * dx.x + this.d * dx.y;
        } // else

        return this;
    }; // translate

    return Matrix2D;
})();




    

Crafty.extend({
    _scenes: {},
    _current: null,

    /**@
     * #Crafty.scene
     * @category Scenes, Stage
     * @trigger SceneChange - just before a new scene is initialized - { oldScene:String, newScene:String }
     * @trigger SceneDestroy - just before the current scene is destroyed - { newScene:String  }
     *
     * @sign public void Crafty.scene(String sceneName, Function init[, Function uninit])
     * @param sceneName - Name of the scene to add
     * @param init - Function to execute when scene is played
     * @param uninit - Function to execute before next scene is played, after entities with `2D` are destroyed
     * This is equivalent to calling `Crafty.defineScene`.
     *
     * @sign public void Crafty.scene(String sceneName[, Data])
     * @param sceneName - Name of scene to play
     * @param Data - The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function.
     * This is equivalent to calling `Crafty.enterScene`.
     *
     * Method to create scenes on the stage. Pass an ID and function to register a scene.
     *
     * To play a scene, just pass the ID. When a scene is played, all
     * previously-created entities with the `2D` component are destroyed. The
     * viewport is also reset.
     *
     * You can optionally specify an arugment that will be passed to the scene's init function.
     *
     * If you want some entities to persist over scenes (as in, not be destroyed)
     * simply add the component `Persist`.
     *
     * @example
     * ~~~
     * Crafty.defineScene("loading", function() {
     *     Crafty.background("#000");
     *     Crafty.e("2D, DOM, Text")
     *           .attr({ w: 100, h: 20, x: 150, y: 120 })
     *           .text("Loading")
     *           .css({ "text-align": "center"})
     *           .textColor("#FFFFFF");
     * });
     *
     * Crafty.defineScene("UFO_dance",
     *              function() {Crafty.background("#444"); Crafty.e("UFO");},
     *              function() {...send message to server...});
     *
     * // An example of an init function which accepts arguments, in this case an object.
     * Crafty.defineScene("square", function(attributes) {
     *     Crafty.background("#000");
     *     Crafty.e("2D, DOM, Color")
     *           .attr(attributes)
     *           .color("red");
     * 
     * });
     *
     * ~~~
     * This defines (but does not play) two scenes as discussed below.
     * ~~~
     * Crafty.enterScene("loading");
     * ~~~
     * This command will clear the stage by destroying all `2D` entities (except
     * those with the `Persist` component). Then it will set the background to
     * black and display the text "Loading".
     * ~~~
     * Crafty.enterScene("UFO_dance");
     * ~~~
     * This command will clear the stage by destroying all `2D` entities (except
     * those with the `Persist` component). Then it will set the background to
     * gray and create a UFO entity. Finally, the next time the game encounters
     * another command of the form `Crafty.scene(scene_name)` (if ever), then the
     * game will send a message to the server.
     * ~~~
     * Crafty.enterScene("square", {x:10, y:10, w:20, h:20});
     * ~~~
     * This will clear the stage, set the background black, and create a red square with the specified position and dimensions.
     * ~~~
     */
    scene: function (name, intro, outro) {
        // If there's one argument, or the second argument isn't a function, play the scene
        if (arguments.length === 1 || typeof(arguments[1]) !== "function") {
            Crafty.enterScene(name, arguments[1]);
            return;
        }
        // Otherwise, this is a call to create a scene
        Crafty.defineScene(name, intro, outro);
    },

    /* 
     * #Crafty.defineScene
     * @category Scenes, Stage
     *
     * @sign public void Crafty.enterScene(String name[, Data])
     * @param name - Name of the scene to run.
     * @param Data - The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function.
     *
     * @see Crafty.enterScene
     * @see Crafty.scene
     */
    defineScene: function(name, init, uninit){
        if (typeof init !== "function")
            throw("Init function is the wrong type.");
        this._scenes[name] = {};
        this._scenes[name].initialize = init;
        if (typeof uninit !== 'undefined') {
            this._scenes[name].uninitialize = uninit;
        }
        return;

    },

    /* 
     * #Crafty.enterScene
     * @category Scenes, Stage
     * @trigger SceneChange - just before a new scene is initialized - { oldScene:String, newScene:String }
     * @trigger SceneDestroy - just before the current scene is destroyed - { newScene:String  }
     *
     * @sign public void Crafty.enterScene(String name[, Data])
     * @param name - Name of the scene to run.
     * @param Data - The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function.
     * 
     * @see Crafty.defineScene
     * @see Crafty.scene
     */
    enterScene: function(name, data){
        if (typeof data === "function")
            throw("Scene data cannot be a function");

        // ---FYI---
        // this._current is the name (ID) of the scene in progress.
        // this._scenes is an object like the following:
        // {'Opening scene': {'initialize': fnA, 'uninitialize': fnB},
        //  'Another scene': {'initialize': fnC, 'uninitialize': fnD}}

        Crafty.trigger("SceneDestroy", {
            newScene: name
        });
        Crafty.viewport.reset();

        Crafty("2D").each(function () {
            if (!this.has("Persist")) this.destroy();
        });
        // uninitialize previous scene
        if (this._current !== null && 'uninitialize' in this._scenes[this._current]) {
            this._scenes[this._current].uninitialize.call(this);
        }
        // initialize next scene
        var oldScene = this._current;
        this._current = name;
        Crafty.trigger("SceneChange", {
            oldScene: oldScene,
            newScene: name
        });
        this._scenes[name].initialize.call(this, data);

        return;

    }
});


    

Crafty.extend({
    /**@
     * #Crafty.audio
     * @category Audio
     *
     * Add sound files and play them. Chooses best format for browser support.
     * Due to the nature of HTML5 audio, three types of audio files will be
     * required for cross-browser capabilities. These formats are MP3, Ogg and WAV.
     * When sound was not muted on before pause, sound will be unmuted after unpause.
     * When sound is muted Crafty.pause() does not have any effect on sound
     *
     * The maximum number of sounds that can be played simultaneously is defined by Crafty.audio.maxChannels.  The default value is 7.
     */
    audio: {

        sounds: {},
        supported: null,
        codecs: { // Chart from jPlayer
            ogg: 'audio/ogg; codecs="vorbis"', //OGG
            wav: 'audio/wav; codecs="1"', // PCM
            webma: 'audio/webm; codecs="vorbis"', // WEBM
            mp3: 'audio/mpeg; codecs="mp3"', //MP3
            m4a: 'audio/mp4; codecs="mp4a.40.2"' // AAC / MP4
        },
        volume: 1, //Global Volume
        muted: false,
        paused: false,
        playCheck: null,
        /**
         * Function to setup supported formats
         **/
        _canPlay: function () {
            this.supported = {};
            // Without support, no formats are supported
            if (!Crafty.support.audio)
                return;
            var audio = this.audioElement(),
                canplay;
            for (var i in this.codecs) {
                canplay = audio.canPlayType(this.codecs[i]);
                if (canplay !== "" && canplay !== "no") {
                    this.supported[i] = true;
                } else {
                    this.supported[i] = false;
                }
            }

        },

        /**@
         * #Crafty.audio.supports
         * @comp Crafty.audio
         * @sign public this Crafty.audio.supports(String extension)
         * @param extension - A file extension to check audio support for
         *
         * Return true if the browser thinks it can play the given file type, otherwise false
         */
        supports: function (extension) {
            // Build cache of supported formats, if necessary
            if (this.supported === null)
                this._canPlay();

            if (this.supported[extension])
                return true;
            else
                return false;
        },

        /**
         * Function to get an Audio Element
         **/
        audioElement: function () {
            //IE does not support Audio Object
            return typeof Audio !== 'undefined' ? new Audio("") : document.createElement('audio');
        },

        /**@
         * #Crafty.audio.create
         * @comp Crafty.audio
         * @sign public this Crafty.audio.create(String id, String url)
         * @param id - A string to refer to sounds
         * @param url - A string pointing to the sound file
         *
         * Creates an audio asset with the given id and resource.  `Crafty.audio.add` is a more flexible interface that allows cross-browser compatibility.
         *
         * If the sound file extension is not supported, returns false; otherwise, returns the audio asset.
         */
        create: function (id, path) {
            //check extension, return if not supported
            var ext = path.substr(path.lastIndexOf('.') + 1).toLowerCase();
            if (!this.supports(ext))
                return false;

            //initiate the audio element
            var audio = this.audioElement();
            audio.id = id;
            audio.preload = "auto";
            audio.volume = Crafty.audio.volume;
            audio.src = path;

            //create an asset and metadata for the audio element
            Crafty.asset(path, audio);
            this.sounds[id] = {
                obj: audio,
                played: 0,
                volume: Crafty.audio.volume
            };
            return this.sounds[id];

        },

        /**@
         * #Crafty.audio.add
         * @comp Crafty.audio
         * @sign public this Crafty.audio.add(String id, String url)
         * @param id - A string to refer to sounds
         * @param url - A string pointing to the sound file
         * @sign public this Crafty.audio.add(String id, Array urls)
         * @param urls - Array of urls pointing to different format of the same sound, selecting the first that is playable
         * @sign public this Crafty.audio.add(Object map)
         * @param map - key-value pairs where the key is the `id` and the value is either a `url` or `urls`
         *
         * Loads a sound to be played. Due to the nature of HTML5 audio,
         * three types of audio files will be required for cross-browser capabilities.
         * These formats are MP3, Ogg and WAV.
         *
         * Passing an array of URLs will determine which format the browser can play and select it over any other.
         *
         * Accepts an object where the key is the audio name and
         * either a URL or an Array of URLs (to determine which type to use).
         *
         * The ID you use will be how you refer to that sound when using `Crafty.audio.play`.
         *
         * @example
         * ~~~
         * //adding audio from an object
         * Crafty.audio.add({
         * shoot: ["sounds/shoot.wav",
         * "sounds/shoot.mp3",
         * "sounds/shoot.ogg"],
         *
         * coin: "sounds/coin.mp3"
         * });
         *
         * //adding a single sound
         * Crafty.audio.add("walk", [
         * "sounds/walk.mp3",
         * "sounds/walk.ogg",
         * "sounds/walk.wav"
         * ]);
         *
         * //only one format
         * Crafty.audio.add("jump", "sounds/jump.mp3");
         * ~~~
         */
        add: function (id, url) {
            if (!Crafty.support.audio)
                return;

            var src;

            if (arguments.length === 1 && typeof id === "object") {
                for (var i in id) {
                    for (src in id[i]) {
                        if (Crafty.audio.create(i, id[i][src]))
                            break;
                    }
                }
            }
            if (typeof id === "string") {
                if (typeof url === "string") {
                    Crafty.audio.create(id, url);
                }

                if (typeof url === "object") {
                    for (src in url) {
                        if (Crafty.audio.create(id, url[src]))
                            break;
                    }
                }

            }
        },
        /**@
         * #Crafty.audio.play
         * @comp Crafty.audio
         * @sign public this Crafty.audio.play(String id)
         * @sign public this Crafty.audio.play(String id, Number repeatCount)
         * @sign public this Crafty.audio.play(String id, Number repeatCount, Number volume)
         * @param id - A string to refer to sounds
         * @param repeatCount - Repeat count for the file, where -1 stands for repeat forever.
         * @param volume - volume can be a number between 0.0 and 1.0
         * @returns The audio element used to play the sound.  Null if the call failed due to a lack of open channels.
         *
         * Will play a sound previously added by using the ID that was used in `Crafty.audio.add`.
         * Has a default maximum of 5 channels so that the same sound can play simultaneously unless all of the channels are playing.

         * *Note that the implementation of HTML5 Audio is buggy at best.*
         *
         * @example
         * ~~~
         * Crafty.audio.play("walk");
         *
         * //play and repeat forever
         * Crafty.audio.play("backgroundMusic", -1);
         * Crafty.audio.play("explosion",1,0.5); //play sound once with volume of 50%
         * ~~~
         */
        play: function (id, repeat, volume) {
            if (repeat === 0 || !Crafty.support.audio || !this.sounds[id])
                return;
            var s = this.sounds[id];
            var c = this.getOpenChannel();
            if (!c)
                return null;
            c.id = id;
            c.repeat = repeat;
            var a = c.obj;
			
			if (repeat == -1) {
				a.loop = true;
			}
			
            c.volume = s.volume = s.obj.volume = volume || Crafty.audio.volume;

            a.volume = s.volume;
            a.src = s.obj.src;

            if (this.muted)
                a.volume = 0;
            a.play();
            s.played++;
            c.onEnd = function () {
				if (s.played < c.repeat || c.repeat == -1) {
                    if (this.currentTime)
                        this.currentTime = 0;
                    this.play();
                    s.played++;
                } else {
                    c.active = false;
                    this.pause();
                    this.removeEventListener("ended", c.onEnd, true);
                    this.currentTime = 0;
                    Crafty.trigger("SoundComplete", {
                        id: c.id
                    });
                }

            };
            a.addEventListener("ended", c.onEnd, false);

            return a;
        },



        /**@
         * #Crafty.audio.setChannels
         * @comp Crafty.audio
         * @sign public this Crafty.audio.setChannels(Number n)
         * @param n - The maximum number of channels
         */
        maxChannels: 7,
        setChannels: function (n) {
            this.maxChannels = n;
            if (n < this.channels.length)
                this.channels.length = n;
        },

        channels: [],
        // Finds an unused audio element, marks it as in use, and return it.
        getOpenChannel: function () {
            for (var i = 0; i < this.channels.length; i++) {
                var chan = this.channels[i];
                  /*
                   * Second test looks for stuff that's out of use,
                   * but fallen foul of Chromium bug 280417
                   */
                if (chan.active === false ||
                      chan.obj.ended && chan.repeat <= this.sounds[chan.id].played) {
                    chan.active = true;
                    return chan;
                }
            }
            // If necessary, create a new element, unless we've already reached the max limit
            if (i < this.maxChannels) {
                var c = {
                    obj: this.audioElement(),
                    active: true,
                    // Checks that the channel is being used to play sound id
                    _is: function (id) {
                        return this.id === id && this.active;
                    }
                };
                this.channels.push(c);
                return c;
            }
            // In that case, return null
            return null;
        },

        /**@
         * #Crafty.audio.remove
         * @comp Crafty.audio
         * @sign public this Crafty.audio.remove([String id])
         * @param id - A string to refer to sounds
         *
         * Will stop the sound and remove all references to the audio object allowing the browser to free the memory.
         * If no id is given, all sounds will be removed.
         *
         * @example
         * ~~~
         * Crafty.audio.remove("walk");
         * ~~~
         */
        remove: function (id) {
            if (!Crafty.support.audio)
                return;

            var s;

            if (!id) {
                for (var i in this.sounds) {
                    s = this.sounds[i];
                    Crafty.audio.stop(id);
                    delete Crafty.assets[s.obj.src];
                    delete Crafty.audio.sounds[id];
                }
                return;
            }
            if (!this.sounds[id])
                return;

            s = this.sounds[id];
            Crafty.audio.stop(id);
            delete Crafty.assets[s.obj.src];
            delete Crafty.audio.sounds[id];
        },
        /**@
         * #Crafty.audio.stop
         * @comp Crafty.audio
         * @sign public this Crafty.audio.stop([Number ID])
         *
         * Stops any playing sound. if id is not set, stop all sounds which are playing
         *
         * @example
         * ~~~
         * //all sounds stopped playing now
         * Crafty.audio.stop();
         *
         * ~~~
         */
        stop: function (id) {
            if (!Crafty.support.audio)
                return;
            for (var i in this.channels) {
                c = this.channels[i];
                if ( (!id && c.active) || c._is(id) ) {
                    c.active = false;
                    c.obj.pause();
                }
            }
            return;
        },
        /**
         * #Crafty.audio._mute
         * @comp Crafty.audio
         * @sign public this Crafty.audio._mute([Boolean mute])
         *
         * Mute or unmute every Audio instance that is playing.
         */
        _mute: function (mute) {
            if (!Crafty.support.audio)
                return;
            var c;
            for (var i in this.channels) {
                c = this.channels[i];
                c.obj.volume = mute ? 0 : c.volume;
            }
            this.muted = mute;
        },
        /**@
         * #Crafty.audio.toggleMute
         * @comp Crafty.audio
         * @sign public this Crafty.audio.toggleMute()
         *
         * Mute or unmute every Audio instance that is playing. Toggles between
         * pausing or playing depending on the state.
         *
         * @example
         * ~~~
         * //toggle mute and unmute depending on current state
         * Crafty.audio.toggleMute();
         * ~~~
         */
        toggleMute: function () {
            if (!this.muted) {
                this._mute(true);
            } else {
                this._mute(false);
            }

        },
        /**@
         * #Crafty.audio.mute
         * @comp Crafty.audio
         * @sign public this Crafty.audio.mute()
         *
         * Mute every Audio instance that is playing.
         *
         * @example
         * ~~~
         * Crafty.audio.mute();
         * ~~~
         */
        mute: function () {
            this._mute(true);
        },
        /**@
         * #Crafty.audio.unmute
         * @comp Crafty.audio
         * @sign public this Crafty.audio.unmute()
         *
         * Unmute every Audio instance that is playing.
         *
         * @example
         * ~~~
         * Crafty.audio.unmute();
         * ~~~
         */
        unmute: function () {
            this._mute(false);
        },

        /**@
         * #Crafty.audio.pause
         * @comp Crafty.audio
         * @sign public this Crafty.audio.pause(string ID)
         * @param {string} id - The id of the audio object to pause
         *
         * Pause the Audio instance specified by id param.
         *
         * @example
         * ~~~
         * Crafty.audio.pause('music');
         * ~~~
         *
         */
        pause: function (id) {
            if (!Crafty.support.audio || !id || !this.sounds[id])
                return;
            var c;
            for (var i in this.channels) {
                c = this.channels[i];
                if (c._is(id) && !c.obj.paused)
                    c.obj.pause();
            }

        },

        /**@
         * #Crafty.audio.unpause
         * @comp Crafty.audio
         * @sign public this Crafty.audio.unpause(string ID)
         * @param {string} id - The id of the audio object to unpause
         *
         * Resume playing the Audio instance specified by id param.
         *
         * @example
         * ~~~
         * Crafty.audio.unpause('music');
         * ~~~
         *
         */
        unpause: function (id) {
            if (!Crafty.support.audio || !id || !this.sounds[id])
                return;
            var c;
            for (var i in this.channels) {
                c = this.channels[i];
                if (c._is(id) && c.obj.paused)
                    c.obj.play();
            }
        },

        /**@
         * #Crafty.audio.togglePause
         * @comp Crafty.audio
         * @sign public this Crafty.audio.togglePause(string ID)
         * @param {string} id - The id of the audio object to pause/
         *
         * Toggle the pause status of the Audio instance specified by id param.
         *
         * @example
         * ~~~
         * Crafty.audio.togglePause('music');
         * ~~~
         *
         */
        togglePause: function (id) {
            if (!Crafty.support.audio || !id || !this.sounds[id])
                return;
            var c;
            for (var i in this.channels) {
                c = this.channels[i];
                if (c._is(id)) {
                    if (c.obj.paused) {
                        c.obj.play();
                    } else {
                        c.obj.pause();
                    }
                }
            }
        }
    }
});




	

/**@
* #SpriteAnimation
* @category Animation
* @trigger StartAnimation - When an animation starts playing, or is resumed from the paused state - {Reel}
* @trigger AnimationEnd - When the animation finishes - { Reel }
* @trigger FrameChange - Each time the frame of the current reel changes - { Reel }
* @trigger ReelChange - When the reel changes - { Reel }
*
* Used to animate sprites by treating a sprite map as a set of animation frames.
* Must be applied to an entity that has a sprite-map component.
*
* To define an animation, see the `reel` method.  To play an animation, see the `animate` method.
*
* A reel is an object that contains the animation frames and current state for an animation.  The reel object has the following properties:
* @param id: (String) - the name of the reel
* @param frames: (Array) - A list of frames in the format [xpos, ypos]
* @param currentFrame: (Number) - The index of the current frame
* @param easing: (Crafty.easing object) - The object that handles the internal progress of the animation.
* @param duration: (Number) - The duration in milliseconds.
*
* Many animation related events pass a reel object as data.  As typical with events, this should be treated as read only data that might be later altered by the entity.  If you wish to preserve the data, make a copy of it.
*
* @see crafty.sprite
*/
Crafty.c("SpriteAnimation", {
	/*
	*
	* A map in which the keys are the names assigned to animations defined using
	* the component (also known as reelIDs), and the values are objects describing
	* the animation and its state.
	*/
	_reels: null,

	/*
	* The reelID of the currently active reel (which is one of the elements in `this._reels`).
	* This value is `null` if no reel is active. Some of the component's actions can be invoked
	* without specifying a reel, in which case they will work on the active reel.
	*/
	_currentReelId: null,

	/*
	* The currently active reel.
	* This value is `null` if no reel is active.
	*/
	_currentReel: null,

	/*
	* Whether or not an animation is currently playing.
	*/
	_isPlaying: false,

	/**@
	* #.animationSpeed
	* @comp SpriteAnimation
	*
	* The playback rate of the animation.  This property defaults to 1.
	*/
	animationSpeed: 1,


	init: function () {
		this._reels = {};
	},

	/**@
	* #.reel
	* @comp SpriteAnimation
	* Used to define reels, to change the active reel, and to fetch the id of the active reel.
	*
	* @sign public this .reel(String reelId, Duration duration, Number fromX, Number fromY, Number frameCount)
	* Defines a reel by starting and ending position on the sprite sheet.
	* @param reelId - ID of the animation reel being created
	* @param duration - The length of the animation in milliseconds.
	* @param fromX - Starting `x` position on the sprite map (x's unit is the horizontal size of the sprite in the sprite map).
	* @param fromY - `y` position on the sprite map (y's unit is the horizontal size of the sprite in the sprite map). Remains constant through the animation.
	* @param frameCount - The number of sequential frames in the animation.  If negative, the animation will play backwards.
	*
	* @sign public this .reel(String reelId, Duration duration, Array frames)
	* Defines a reel by an explicit list of frames
	* @param reelId - ID of the animation reel being created
	* @param duration - The length of the animation in milliseconds.
	* @param frames - An array of arrays containing the `x` and `y` values of successive frames: [[x1,y1],[x2,y2],...] (the values are in the unit of the sprite map's width/height respectively).
	*
	* @sign public this .reel(String reelId)
	* Switches to the specified reel.  The sprite will be updated to that reel's current frame
	* @param reelID - the ID to switch to
	*
	* @sign public Reel .reel()
	* @return The id of the current reel
	*
	*
	* A method to handle animation reels.  Only works for sprites built with the Crafty.sprite methods.
	* See the Tween component for animation of 2D properties.
	*
	* To setup an animation reel, pass the name of the reel (used to identify the reel later), and either an
	* array of absolute sprite positions or the start x on the sprite map, the y on the sprite map and then the end x on the sprite map.
	*
	*
	* @example
	* ~~~
	* // Define a sprite-map component
	* Crafty.sprite(16, "images/sprite.png", {
	*     PlayerSprite: [0,0]
	* });
	*
	* // Define an animation on the second row of the sprite map (fromY = 1)
	* // from the left most sprite (fromX = 0) to the fourth sprite
	* // on that row (frameCount = 4), with a duration of 1 second
	* Crafty.e("2D, DOM, SpriteAnimation, PlayerSprite").reel('PlayerRunning', 1000, 0, 1, 4);
	*
	* // This is the same animation definition, but using the alternative method
	* Crafty.e("2D, DOM, SpriteAnimation, PlayerSprite").reel('PlayerRunning', 1000, [[0, 1], [1, 1], [2, 1], [3, 1]]);
	* ~~~
	*/
	reel: function (reelId, duration, fromX, fromY, frameCount) {
		// @sign public this .reel()
		if (arguments.length === 0)
			return this._currentReelId;

		// @sign public this .reel(String reelID)
		if (arguments.length === 1 && typeof reelId === "string"){
			if (typeof this._reels[reelId] === "undefined")
				throw("The specified reel " + reelId + " is undefined.");
			this.pauseAnimation();
			if (this._currentReelId !== reelId) {
				this._currentReelId = reelId;
				this._currentReel = this._reels[reelId];
				// Change the visible sprite
				this._updateSprite();
				// Trigger event
				this.trigger("ReelChange", this._currentReel);
			}
			return this;
		}


		var reel, i;

		reel = {
			id: reelId,
			frames: [],
			currentFrame: 0,
			easing: new Crafty.easing(duration),
			defaultLoops: 1
		};

		reel.duration = reel.easing.duration;

		// @sign public this .reel(String reelId, Number duration, Number fromX, Number fromY, Number frameDuration)
		if (typeof fromX === "number") {
			i = fromX;
			y = fromY;
			if (frameCount >= 0) {
				for (; i < fromX + frameCount ; i++) {
					reel.frames.push([i, y]);
				}
			}
			else {
				for (; i > fromX + frameCount; i--) {
					reel.frames.push([i, y]);
				}
			}
		}
		// @sign public this .reel(String reelId, Number duration, Array frames)
		else if (arguments.length === 3 && typeof fromX === "object") {
			reel.frames = fromX;
		}
		else {
			throw "Urecognized arguments. Please see the documentation for 'reel(...)'.";
		}

		this._reels[reelId] = reel;

		return this;
	},

	/**@
	* #.animate
	* @comp SpriteAnimation
	* @sign public this .animate([String reelId] [, Number loopCount])
	* @param reelId - ID of the animation reel to play.  Defaults to the current reel if none is specified.
	* @param loopCount - Number of times to repeat the animation. Use -1 to repeat indefinitely.  Defaults to 1.
	*
	* Play one of the reels previously defined through `.reel(...)`. Simply pass the name of the reel. If you wish the
	* animation to play multiple times in succession, pass in the amount of times as an additional parameter.
	* To have the animation repeat indefinitely, pass in `-1`.
	*
	* If another animation is currently playing, it will be paused.
	*
	* This will always play an animation from the beginning.  If you wish to resume from the current state of a reel, use `resumeAnimation()`.
	*
	* Once an animation ends, it will remain at its last frame.
	*
	*
	* @example
	* ~~~
	* // Define a sprite-map component
	* Crafty.sprite(16, "images/sprite.png", {
	*     PlayerSprite: [0,0]
	* });
	*
	* // Play the animation across 20 frames (so each sprite in the 4 sprite animation should be seen for 5 frames) and repeat indefinitely
	* Crafty.e("2D, DOM, SpriteAnimation, PlayerSprite")
	*     .reel('PlayerRunning', 20, 0, 0, 3) // setup animation
	*     .animate('PlayerRunning', -1); // start animation
	* ~~~
	*/
	animate: function(reelId, loopCount) {

		var pos;


		// switch to the specified reel if necessary
		if (typeof reelId === "string")
			this.reel(reelId);

		var currentReel = this._currentReel;

		if (typeof currentReel === "undefined" || currentReel === null)
			throw("No reel is specified, and there is no currently active reel.");

		this.pauseAnimation(); // This will pause the current animation, if one is playing

		// Handle repeats; if loopCount is undefined and reelID is a number, calling with that signature
		if (typeof loopCount === "undefined")
			if (typeof reelId === "number")
				loopCount = reelId;
			else
				loopCount = 1;

		// set the animation to the beginning
		currentReel.easing.reset();


		// user provided loop count.
		this.loops(loopCount);

		// trigger the necessary events and switch to the first frame
		this._setFrame(0);

		// Start the anim
		this.bind("EnterFrame", this._animationTick);
		this._isPlaying = true;

		this.trigger("StartAnimation", currentReel);
		return this;
	},

	/**@
	* #.resumeAnimation
	* @comp SpriteAnimation
	* @sign public this .resumeAnimation()
	*
	* This will resume animation of the current reel from its current state.
	* If a reel is already playing, or there is no current reel, there will be no effect.
	*/
	resumeAnimation: function() {
		if (this._isPlaying === false &&  this._currentReel !== null) {
			this.bind("EnterFrame", this._animationTick);
			this._isPlaying = true;
			this._currentReel.easing.resume();
			this.trigger("StartAnimation", this._currentReel);
		}
		return this;
	},

	/**@
	* #.pauseAnimation
	* @comp SpriteAnimation
	* @sign public this .pauseAnimation(void)
	*
	* Pauses the currently playing animation, or does nothing if no animation is playing.
	*/
	pauseAnimation: function () {
		if (this._isPlaying === true) {
			this.unbind("EnterFrame", this._animationTick);
			this._isPlaying = false;
			this._reels[this._currentReelId].easing.pause();
		}
		return this;
	},

	/**@
	* #.resetAnimation
	* @comp SpriteAnimation
	* @sign public this .resetAnimation()
	*
	* Resets the current animation to its initial state.  Resets the number of loops to the last specified value, which defaults to 1.
	*
	* Neither pauses nor resumes the current animation.
	*/
	resetAnimation: function(){
		var currentReel = this._currentReel;
		if  (currentReel === null)
			throw("No active reel to reset.");
		this.reelPosition(0);
		currentReel.easing.repeat(currentReel.defaultLoops);
		return this;
   },


	/**@
	* #.loops
	* @comp SpriteAnimation
	* @sign public this .loops(Number loopCount)
	* @param loopCount - The number of times to play the animation
	*
	* Sets the number of times the animation will loop for.
	* If called while an animation is in progress, the current state will be considered the first loop.
	*
	* @sign public Number .loops()
	* @returns The number of loops left.  Returns 0 if no reel is active.
	*/
	loops: function(loopCount) {
		if (arguments.length === 0){
			if (this._currentReel !== null)
				return this._currentReel.easing.loops;
			else
				return 0;
		}

		if (this._currentReel !== null){
			if (loopCount < 0)
				loopCount = Infinity;
			this._currentReel.easing.repeat(loopCount);
			this._currentReel.defaultLoops = loopCount;
		}
		return this;

	},

	/**@
	* #.reelPosition
	* @comp SpriteAnimation
	*
	* @sign public this .reelPosition(Integer position)
	* Sets the position of the current reel by frame number.
	* @param position - the frame to jump to.  This is zero-indexed.  A negative values counts back from the last frame.
	*
	* @sign public this .reelPosition(Number position)
	* Sets the position of the current reel by percent progress.
	* @param position - a non-integer number between 0 and 1
	*
	* @sign public this .reelPosition(String position)
	* Jumps to the specified position.  The only currently accepted value is "end", which will jump to the end of the reel.
	*
	* @sign public Number .reelPosition()
	* @returns The current frame number
	*
	*/
	reelPosition: function(position) {
		if (this._currentReel === null)
			throw("No active reel.");

		if (arguments.length === 0)
			return this._currentReel.currentFrame;

		var progress,
			l = this._currentReel.frames.length;
		if (position === "end")
			position = l - 1;

		if (position < 1 && position > 0) {
			progress = position;
			position = Math.floor(l * progress);
		} else {
			if (position !== Math.floor(position))
				throw("Position " + position + " is invalid.");
			if (position < 0)
				position = l - 1 + position;
			progress = position / l;
		}
		// cap to last frame
		position = Math.min(position, l-1);
		position = Math.max(position, 0);
		this._setProgress(progress);
		this._setFrame(position);

		return this;

	},


	// Bound to "EnterFrame".  Progresses the animation by dt, changing the frame if necessary.
	// dt is multiplied by the animationSpeed property
	_animationTick: function(frameData) {
		var currentReel = this._reels[this._currentReelId];
		currentReel.easing.tick(frameData.dt * this.animationSpeed);
		var progress = currentReel.easing.value();
		var frameNumber = Math.min( Math.floor(currentReel.frames.length * progress), currentReel.frames.length - 1);

		this._setFrame(frameNumber);

		if(currentReel.easing.complete === true){
			this.trigger("AnimationEnd", this._currentReel);
			this.pauseAnimation();
		}
	},





	// Set the current frame and update the displayed sprite
	// The actual progress for the animation must be set seperately.
	_setFrame: function(frameNumber) {
		var currentReel = this._currentReel;
		if (frameNumber === currentReel.currentFrame)
			return;
		currentReel.currentFrame = frameNumber;
		this._updateSprite();
		this.trigger("FrameChange", currentReel);
	},

	// Update the displayed sprite.
	_updateSprite: function() {
		var currentReel = this._currentReel;
		var pos = currentReel.frames[currentReel.currentFrame];
		this.sprite(pos[0], pos[1]); // .sprite will trigger redraw

	},


	// Sets the internal state of the current reel's easing object
	_setProgress: function(progress, repeats) {
		this._currentReel.easing.setProgress(progress, repeats);

	},


	/**@
	* #.isPlaying
	* @comp SpriteAnimation
	* @sign public Boolean .isPlaying([String reelId])
	* @param reelId - The reelId of the reel we wish to examine
	* @returns The current animation state
	*
	* Determines if the specified animation is currently playing. If no reelId is specified,
	* checks if any animation is playing.
	*
	* @example
	* ~~~
	* myEntity.isPlaying() // is any animation playing
	* myEntity.isPlaying('PlayerRunning') // is the PlayerRunning animation playing
	* ~~~
	*/
	isPlaying: function (reelId) {
		if (!this._isPlaying) return false;

		if (!reelId) return !!this._currentReelId;
		return this._currentReelId === reelId;
	},

	/**@
	* #.getReel
	* @comp SpriteAnimation
	* @sign public Reel .getReel()
	* @returns The current reel, or null if there is no active reel
	*
	* @sign public Reel .getReel(reelId)
	* @param reelId - The id of the reel to fetch.
	* @returns The specified reel, or `undefined` if no such reel exists.
	*
	*/
	getReel: function (reelId) {
		if (arguments.length === 0){
			if (!this._currentReelId) return null;
			reelId = this._currentReelId;
		}

		return this._reels[reelId];
	}
});

    

Crafty.extend({

    /**@
     * #Crafty.sprite
     * @category Graphics
     * @sign public this Crafty.sprite([Number tile, [Number tileh]], String url, Object map[, Number paddingX[, Number paddingY[, Boolean paddingAroundBorder]]])
     * @param tile - Tile size of the sprite map, defaults to 1
     * @param tileh - Height of the tile; if provided, tile is interpreted as the width
     * @param url - URL of the sprite image
     * @param map - Object where the key is what becomes a new component and the value points to a position on the sprite map
     * @param paddingX - Horizontal space in between tiles. Defaults to 0.
     * @param paddingY - Vertical space in between tiles. Defaults to paddingX.
     * @param paddingAroundBorder - If padding should be applied around the border of the sprite sheet. If enabled the first tile starts at (paddingX,paddingY) instead of (0,0). Defaults to false.
     * Generates components based on positions in a sprite image to be applied to entities.
     *
     * Accepts a tile size, URL and map for the name of the sprite and its position.
     *
     * The position must be an array containing the position of the sprite where index `0`
     * is the `x` position, `1` is the `y` position and optionally `2` is the width and `3`
     * is the height. If the sprite map has padding, pass the values for the `x` padding
     * or `y` padding. If they are the same, just add one value.
     *
     * If the sprite image has no consistent tile size, `1` or no argument need be
     * passed for tile size.
     *
     * Entities that add the generated components are also given the `2D` component, and
     * a component called `Sprite`.
     *
     * @example
     * ~~~
     * Crafty.sprite("imgs/spritemap6.png", {flower:[0,0,20,30]});
     * var flower_entity = Crafty.e("2D, DOM, flower");
     * ~~~
     * The first line creates a component called `flower` associated with the sub-image of
     * spritemap6.png with top-left corner (0,0), width 20 pixels, and height 30 pixels.
     * The second line creates an entity with that image. (Note: The `2D` is not really
     * necessary here, because adding the `flower` component automatically also adds the
     * `2D` component.)
     * ~~~
     * Crafty.sprite(50, "imgs/spritemap6.png", {flower:[0,0], grass:[0,1,3,1]});
     * ~~~
     * In this case, the `flower` component is pixels 0 <= x < 50, 0 <= y < 50, and the
     * `grass` component is pixels 0 <= x < 150, 50 <= y < 100. (The `3` means grass has a
     * width of 3 tiles, i.e. 150 pixels.)
     * ~~~
     * Crafty.sprite(50, 100, "imgs/spritemap6.png", {flower:[0,0], grass:[0,1]}, 10);
     * ~~~
     * In this case, each tile is 50x100, and there is a spacing of 10 pixels between
     * consecutive tiles. So `flower` is pixels 0 <= x < 50, 0 <= y < 100, and `grass` is
     * pixels 0 <= x < 50, 110 <= y < 210.
     *
     * @see Sprite
     */
    sprite: function (tile, tileh, url, map, paddingX, paddingY, paddingAroundBorder) {
        var spriteName, temp, x, y, w, h, img;

        //if no tile value, default to 1.
        //(if the first passed argument is a string, it must be the url.)
        if (typeof tile === "string") {
            paddingY = paddingX;
            paddingX = map;
            map = tileh;
            url = tile;
            tile = 1;
            tileh = 1;
        }

        if (typeof tileh == "string") {
            paddingY = paddingX;
            paddingX = map;
            map = url;
            url = tileh;
            tileh = tile;
        }

        //if no paddingY, use paddingX
        if (!paddingY && paddingX) paddingY = paddingX;
        paddingX = parseInt(paddingX || 0, 10); //just incase
        paddingY = parseInt(paddingY || 0, 10);

        var markSpritesReady = function() {
            this.ready = true;
            this.trigger("Invalidate");
        };

        img = Crafty.asset(url);
        if (!img) {
            img = new Image();
            img.src = url;
            Crafty.asset(url, img);
            img.onload = function () {
                //all components with this img are now ready
                for (var spriteName in map) {
                    Crafty(spriteName).each(markSpritesReady);
                }
            };
        }

        var sharedSpriteInit = function() {
            this.requires("2D, Sprite");
            this.__trim = [0, 0, 0, 0];
            this.__image = url;
            this.__coord = [this.__coord[0], this.__coord[1], this.__coord[2], this.__coord[3]];
            this.__tile = tile;
            this.__tileh = tileh;
            this.__padding = [paddingX, paddingY];
            this.__padBorder = paddingAroundBorder;
            this.sprite(this.__coord[0], this.__coord[1], this.__coord[2], this.__coord[3]);
            
            this.img = img;
            //draw now
            if (this.img.complete && this.img.width > 0) {
                this.ready = true;
                this.trigger("Invalidate");
            }

            //set the width and height to the sprite size
            this.w = this.__coord[2];
            this.h = this.__coord[3];
        };

        for (spriteName in map) {
            if (!map.hasOwnProperty(spriteName)) continue;

            temp = map[spriteName];

            //generates sprite components for each tile in the map
            Crafty.c(spriteName, {
                ready: false,
                __coord: [temp[0], temp[1], temp[2] || 1, temp[3] || 1],

                init: sharedSpriteInit
            });
        }

        return this;
    }
});

/**@
 * #Sprite
 * @category Graphics
 * @trigger Invalidate - when the sprites change
 * Component for using tiles in a sprite map.
 */
Crafty.c("Sprite", {
    __image: '',
    /*
     * #.__tile
     * @comp Sprite
     *
     * Horizontal sprite tile size.
     */
    __tile: 0,
    /*
     * #.__tileh
     * @comp Sprite
     *
     * Vertical sprite tile size.
     */
    __tileh: 0,
    __padding: null,
    __trim: null,
    img: null,
    //ready is changed to true in Crafty.sprite
    ready: false,

    init: function () {
        this.__trim = [0, 0, 0, 0];

        var draw = function (e) {
            var co = e.co,
                pos = e.pos,
                context = e.ctx;

            if (e.type === "canvas") {
                //draw the image on the canvas element
                context.drawImage(this.img, //image element
                    co.x, //x position on sprite
                    co.y, //y position on sprite
                    co.w, //width on sprite
                    co.h, //height on sprite
                    pos._x, //x position on canvas
                    pos._y, //y position on canvas
                    pos._w, //width on canvas
                    pos._h //height on canvas
                );
            } else if (e.type === "DOM") {
                // Get scale (ratio of entity dimensions to sprite's dimensions)
                // If needed, we will scale up the entire sprite sheet, and then modify the position accordingly
                var vscale = this._h / co.h,
                    hscale = this._w / co.w,
                    style = this._element.style;

                style.background = style.backgroundColor + " url('" + this.__image + "') no-repeat";
                style.backgroundPosition = "-" + co.x * hscale + "px -" + co.y * vscale + "px";
                // style.backgroundSize must be set AFTER style.background!
                if (vscale != 1 || hscale != 1) {
                    style.backgroundSize = (this.img.width * hscale) + "px" + " " + (this.img.height * vscale) + "px";
                }
            }
        };

        this.bind("Draw", draw).bind("RemoveComponent", function (id) {
            if (id === "Sprite") this.unbind("Draw", draw);
        });
    },

    /**@
     * #.sprite
     * @comp Sprite
     * @sign public this .sprite(Number x, Number y[, Number w, Number h])
     * @param x - X cell position
     * @param y - Y cell position
     * @param w - Width in cells. Optional.
     * @param h - Height in cells. Optional.
     *
     * Uses a new location on the sprite map as its sprite. If w or h are ommitted, the width and height are not changed.
     *
     * Values should be in tiles or cells (not pixels).
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Sprite")
     *   .sprite(0, 0, 2, 2);
     * ~~~
     */

    /**@
     * #.__coord
     * @comp Sprite
     *
     * The coordinate of the slide within the sprite in the format of [x, y, w, h].
     */
    sprite: function (x, y, w, h) {
        this.__coord = this.__coord || [0, 0, 0, 0];

        this.__coord[0] = x * (this.__tile + this.__padding[0]) + (this.__padBorder ? this.__padding[0] : 0) + this.__trim[0];
        this.__coord[1] = y * (this.__tileh + this.__padding[1]) + (this.__padBorder ? this.__padding[1] : 0) + this.__trim[1];
        if (typeof(w)!=='undefined' && typeof(h)!=='undefined') {
            this.__coord[2] = this.__trim[2] || w * this.__tile || this.__tile;
            this.__coord[3] = this.__trim[3] || h * this.__tileh || this.__tileh;
        }

        this.trigger("Invalidate");
        return this;
    },

    /**@
     * #.crop
     * @comp Sprite
     * @sign public this .crop(Number x, Number y, Number w, Number h)
     * @param x - Offset x position
     * @param y - Offset y position
     * @param w - New width
     * @param h - New height
     *
     * If the entity needs to be smaller than the tile size, use this method to crop it.
     *
     * The values should be in pixels rather than tiles.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Sprite")
     *   .crop(40, 40, 22, 23);
     * ~~~
     */
    crop: function (x, y, w, h) {
        var old = this._mbr || this.pos();
        this.__trim = [];
        this.__trim[0] = x;
        this.__trim[1] = y;
        this.__trim[2] = w;
        this.__trim[3] = h;

        this.__coord[0] += x;
        this.__coord[1] += y;
        this.__coord[2] = w;
        this.__coord[3] = h;
        this._w = w;
        this._h = h;

        this.trigger("Invalidate", old);
        return this;
    }
});


    

/**@
 * #Storage
 * @category Utilities
 * Very simple way to get and set values, which will persist when the browser is closed also.
 */
/**@
 * #.storage
 * @comp Storage
 * @sign .storage(String key)
 * @param key - a key you would like to get from the storage. It will return null if the key does not exists.
 * @sign .storage(String key, String value)
 * @param key - the key you would like to save the data under.
 * @param value - the value you would like to save.
 * @sign .storage(String key, [Object value, Array value, Boolean value])
 * @param key - the key you would like to save the data under.
 * @param value - the value you would like to save, can be an Object or an Array.
 *
 * Storage function is very simple and can be used to either get or set values. 
 * You can store both booleans, strings, objects and arrays.
 *
 * Please note: You should not store data, while the game is playing, as it can cause the game to slow down. You should load data when you start the game, or when the user for an example click a "Save gameprocess" button.
 *
 * @example
 * Get an already stored value
 * ~~~
 * var playername = Crafty.storage('playername');
 * ~~~
 *
 * @example
 * Save a value
 * ~~~
 * Crafty.storage('playername', 'Hero');
 * ~~~
 *
 * @example
 * Test to see if a value is already there.
 * ~~~
 * var heroname = Crafty.storage('name');
 * if(!heroname){
 *   // Maybe ask the player what their name is here
 *   heroname = 'Guest';
 * }
 * // Do something with heroname
 * ~~~
 */

Crafty.storage = function(key, value){
  var storage = window.localStorage,
      _value = value;

  if(!storage){
    return false;
  }

  if(arguments.length === 1) {
    try {
      return JSON.parse(storage.getItem(key));
    }
    catch (e) {
      return storage.getItem(key);
    }
  } else {
    if(typeof value === "object") {
      _value = JSON.stringify(value);
    }

    storage.setItem(key, _value);
    
  }

};
/**@
 * #.storage.remove
 * @comp Storage
 * @sign .storage.remove(String key)
 * @param key - a key where you will like to delete the value of.
 *
 * Generally you do not need to remove values from localStorage, but if you do
 * store large amount of text, or want to unset something you can do that with
 * this function.
 *
 * @example
 * Get an already stored value
 * ~~~
 * Crafty.storage.remove('playername');
 * ~~~
 *
 */
Crafty.storage.remove = function(key){
  window.localStorage.removeItem(key);
};


    

/**@
 * #Text
 * @category Graphics
 * @trigger Invalidate - when the text is changed
 * @requires Canvas or DOM
 * Component to make a text entity.
 *
 * By default, text will have the style "10px sans-serif".
 *
 * Note 1: An entity with the text component is just text! If you want to write text
 * inside an image, you need one entity for the text and another entity for the image.
 * More tips for writing text inside an image: (1) Use the z-index (from 2D component)
 * to ensure that the text is on top of the image, not the other way around; (2)
 * use .attach() (from 2D component) to glue the text to the image so they move and
 * rotate together.
 *
 * Note 2: For DOM (but not canvas) text entities, various font settings (like
 * text-decoration and text-align) can be set using `.css()` (see DOM component). But
 * you cannot use `.css()` to set the properties which are controlled by `.textFont()`
 * or `.textColor()` -- the settings will be ignored.
 *
 * Note 3: If you use canvas text with glyphs that are taller than standard letters, portions of the glyphs might be cut off.
 */
Crafty.c("Text", {
    _text: "",
    defaultSize: "10px",
    defaultFamily: "sans-serif",
    defaultVariant: "normal",
    defaultLineHeight: "normal",
    ready: true,

    init: function () {
        this.requires("2D");
        this._textFont = {
            "type": "",
            "weight": "",
            "size": this.defaultSize,
            "lineHeight":this.defaultLineHeight,
            "family": this.defaultFamily,
            "variant": this.defaultVariant
        };

        this.bind("Draw", function (e) {
            var font = this._fontString();

            /*if (e.type === "DOM") {
                var el = this._element,
                    style = el.style;

                style.color = this._textColor;
                style.font = font;
                el.innerHTML = this._text;
            } else if (e.type === "canvas") {*/
                var context = e.ctx;

                context.save();

                context.textBaseline = "top";
                context.fillStyle = this._textColor || "rgb(0,0,0)";
                context.font = font;

                context.fillText(this._text, this._x, this._y);

                context.restore();
            //}
        });
    },

    // takes a CSS font-size string and gets the height of the resulting font in px
    _getFontHeight: (function(){
        // regex for grabbing the first string of letters
        var re = /([a-zA-Z]+)\b/;
        // From the CSS spec.  "em" and "ex" are undefined on a canvas.
        var multipliers = {
            "px": 1,
            "pt": 4/3,
            "pc": 16,
            "cm": 96/2.54,
            "mm": 96/25.4,
            "in": 96,
            "em": undefined,
            "ex": undefined
        };
        return function (font){
            var number = parseFloat(font);
            var match = re.exec(font);
            var unit =  match ? match[1] : "px";
            if (multipliers[unit] !== undefined)
                return Math.ceil(number * multipliers[unit]);
            else
                return Math.ceil(number);
        };
    })(),

    /**@
     * #.text
     * @comp Text
     * @sign public this .text(String text)
     * @sign public this .text(Function textgenerator)
     * @param text - String of text that will be inserted into the DOM or Canvas element.
     *
     * This method will update the text inside the entity.
     *
     * If you need to reference attributes on the entity itself you can pass a function instead of a string.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Text").attr({ x: 100, y: 100 }).text("Look at me!!");
     *
     * Crafty.e("2D, DOM, Text").attr({ x: 100, y: 100 })
     *     .text(function () { return "My position is " + this._x });
     *
     * Crafty.e("2D, Canvas, Text").attr({ x: 100, y: 100 }).text("Look at me!!");
     *
     * Crafty.e("2D, Canvas, Text").attr({ x: 100, y: 100 })
     *     .text(function () { return "My position is " + this._x });
     * ~~~
     */
    text: function (text) {
        if (!(typeof text !== "undefined" && text !== null)) return this._text;
        if (typeof (text) == "function")
            this._text = text.call(this);
        else
            this._text = text;

        if (this.has("Canvas") )
            this._resizeForCanvas();

        this.trigger("Invalidate");
        return this;
    },

    // Calculates the height and width of text on the canvas
    // Width is found by using the canvas measureText function
    // Height is only estimated -- it calculates the font size in pixels, and sets the height to 110% of that.
    _resizeForCanvas: function(){
        var ctx = Crafty.canvas.context;
        ctx.font = this._fontString();
        this.w = ctx.measureText(this._text).width;

        var size = (this._textFont.size || this.defaultSize);
        this.h = 1.1 * this._getFontHeight(size);
    },

    // Returns the font string to use
    _fontString: function(){
        return this._textFont.type + ' ' + this._textFont.variant  + ' ' + this._textFont.weight + ' ' + this._textFont.size  + ' / ' + this._textFont.lineHeight + ' ' + this._textFont.family;
    },
    /**@
     * #.textColor
     * @comp Text
     * @sign public this .textColor(String color, Number strength)
     * @param color - The color in hexadecimal
     * @param strength - Level of opacity
     *
     * Modify the text color and level of opacity.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Text").attr({ x: 100, y: 100 }).text("Look at me!!")
     *   .textColor('#FF0000');
     *
     * Crafty.e("2D, Canvas, Text").attr({ x: 100, y: 100 }).text('Look at me!!')
     *   .textColor('#FF0000', 0.6);
     * ~~~
     * @see Crafty.toRGB
     */
    textColor: function (color, strength) {
        this._strength = strength;
        this._textColor = Crafty.toRGB(color, this._strength);
        this.trigger("Invalidate");
        return this;
    },

    /**@
     * #.textFont
     * @comp Text
     * @triggers Invalidate
     * @sign public this .textFont(String key, * value)
     * @param key - Property of the entity to modify
     * @param value - Value to set the property to
     *
     * @sign public this .textFont(Object map)
     * @param map - Object where the key is the property to modify and the value as the property value
     *
     * Use this method to set font property of the text entity.  Possible values are: type, weight, size, family, lineHeight, and variant.
     *
     * When rendered by the canvas, lineHeight and variant will be ignored.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Text").textFont({ type: 'italic', family: 'Arial' });
     * Crafty.e("2D, Canvas, Text").textFont({ size: '20px', weight: 'bold' });
     *
     * Crafty.e("2D, Canvas, Text").textFont("type", "italic");
     * Crafty.e("2D, Canvas, Text").textFont("type"); // italic
     * ~~~
     */
    textFont: function (key, value) {
        if (arguments.length === 1) {
            //if just the key, return the value
            if (typeof key === "string") {
                return this._textFont[key];
            }

            if (typeof key === "object") {
                for (var propertyKey in key) {
                    if(propertyKey == 'family'){
                        this._textFont[propertyKey] = "'" + key[propertyKey] + "'";
                    } else {
                        this._textFont[propertyKey] = key[propertyKey];
                    }
                }
            }
        } else {
            this._textFont[key] = value;
        }

        //if (this.has("Canvas") )
            this._resizeForCanvas();

        this.trigger("Invalidate");
        return this;
    },
    /**@
     * #.unselectable
     * @comp Text
     * @triggers Invalidate
     * @sign public this .unselectable()
     *
     * This method sets the text so that it cannot be selected (highlighted) by dragging.
     * (Canvas text can never be highlighted, so this only matters for DOM text.)
     * Works by changing the css property "user-select" and its variants.
     *
     * @example
     * ~~~
     * Crafty.e("2D, DOM, Text").text('This text cannot be highlighted!').unselectable();
     * ~~~
     */
    /*unselectable: function () {
        // http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting
        if (this.has("DOM")) {
            this.css({
                '-webkit-touch-callout': 'none',
                '-webkit-user-select': 'none',
                '-khtml-user-select': 'none',
                '-moz-user-select': 'none',
                '-ms-user-select': 'none',
                'user-select': 'none'
            });
            this.trigger("Invalidate");
        }
        return this;
    }*/

});


    

/**@
 * #Delay
 * @category Utilities
 */
Crafty.c("Delay", {
    init: function () {
        this._delays = [];
        this.bind("EnterFrame", function () {
            var now = new Date().getTime();
            var index = this._delays.length;
            while (--index >= 0) {
                var item = this._delays[index];
                if (item.start + item.delay + item.pause < now) {
                    item.func.call(this);
                    if (item.repeat > 0) {
                        // reschedule item
                        item.start = now;
                        item.pause = 0;
                        item.pauseBuffer = 0;
                        item.repeat--;
                    } else if (item.repeat <= 0) {
                        // remove item from array
                        this._delays.splice(index, 1);
                    }
                }
            }
        });
        this.bind("Pause", function () {
            var now = new Date().getTime();
            for (var index in this._delays) {
                this._delays[index].pauseBuffer = now;
            }
        });
        this.bind("Unpause", function () {
            var now = new Date().getTime();
            for (var index in this._delays) {
                var item = this._delays[index];
                item.pause += now - item.pauseBuffer;
            }
        });
    },
    /**@
     * #.delay
     * @comp Delay
     * @sign public this.delay(Function callback, Number delay)
     * @param callback - Method to execute after given amount of milliseconds
     * @param delay - Amount of milliseconds to execute the method
     * @param repeat - How often to repeat the delayed function. A value of 0 triggers the delayed
     * function exactly once. A value n > 0 triggers the delayed function exactly n+1 times. A
     * value of -1 triggers the delayed function indefinitely.
     *
     * The delay method will execute a function after a given amount of time in milliseconds.
     *
     * It is not a wrapper for `setTimeout`.
     *
     * If Crafty is paused, the delay is interrupted with the pause and then resume when unpaused
     *
     * If the entity is destroyed, the delay is also destroyed and will not have effect.
     *
     * @example
     * ~~~
     * console.log("start");
     * Crafty.e("Delay").delay(function() {
     *   console.log("100ms later");
     * }, 100, 0);
     * ~~~
     */
    delay: function (func, delay, repeat) {
        this._delays.push({
            start: new Date().getTime(),
            func: func,
            delay: delay,
            repeat: (repeat < 0 ? Infinity : repeat) || 0,
            pauseBuffer: 0,
            pause: 0
        });
        return this;
    }
});


    




    

// test fragment shader -- everything is white!
var FRAGMENT_SHADER_SRC = 
  "precision mediump float;"

  +"void main(void) {"
  +"gl_FragColor = vec4(0.0, 1.0, 1.0, 0.5);"
  +"}";

var FRAGMENT_SHADER_SRC_2 = 
  "precision mediump float;"

  +"void main(void) {"
  +"gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);"
  +"}";

// test vertex shader
var VERTEX_SHADER_SRC_OLD = 
  "attribute vec2 aVertexPosition;"
  + "uniform mat2 uGlobalScaleMatrix;"
  + "void main(void) {"
  + " gl_Position = vec4(aVertexPosition, 0, 1);"
  + "}";


glHelpers = {
// Either x,y signature or x1, y1, x2, y2, etc
  writeVec2: function (data, offset, stride, x, y){
    //console.log(arguments);
    if (arguments.length == 5){
      for (var i = 0; i<4; i++){
        data[offset + stride*i] = x;
        data[offset + stride*i + 1] = y;
      }
    } else {
      for (var i = 0; i<4; i++){
        data[offset + stride*i] = arguments[3 + i*2];
        data[offset + stride*i + 1] = arguments[4 + i*2];
      }
    }

  },

  // Either x,y, z, w signature or x1, y1, x2, y2, etc
  writeVec4: function (data, offset, stride, x, y, z, w){
    if (arguments.length == 7){
      for (var i = 0; i<4; i++){
        data[offset + stride*i] = x;
        data[offset + stride*i + 1] = y;
        data[offset + stride*i + 2] = z;
        data[offset + stride*i + 3] = w;
      }
    } else {
      for (var i =0; i<4; i++){
        data[offset + stride*i] = arguments[3 + i*4];
        data[offset + stride*i + 1] = arguments[4 + i*4];
        data[offset + stride*i + 2] = arguments[5 + i*4];
        data[offset + stride*i + 3] = arguments[6 + i*4];
      }
    }
  },

  makeProgram: function (gl, fragment_src, vertex_src){
            var gl = this.context;
            var fragment_shader = this.compileShader(gl, fragment_src, gl.FRAGMENT_SHADER);
            var vertex_shader = this.compileShader(gl, vertex_src, gl.VERTEX_SHADER);

            var shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, vertex_shader);
            gl.attachShader(shaderProgram, fragment_shader);
            gl.linkProgram(shaderProgram);

            if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
              throw("Could not initialise shaders");
            }
            
            shaderProgram.viewport = gl.getUniformLocation(shaderProgram, "uViewport");
            return shaderProgram;
        },
  compileShader: function (gl, src, type){
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader);
            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
              throw(gl.getShaderInfoLog(shader));
            };
            return shader;
        },
};



// fragment shader source for an image/etc
/*
varying highp vec2 vTextureCoord;
      
uniform sampler2D uSampler;
uniform highp vec2 uTextureDimensions;
uniform highp vec4 uSpriteCoords;

void main(void) {
  highp vec2 coord =  ( uSpriteCoords.zw * vTextureCoord + uSpriteCoords.xy) / uTextureDimensions;
  gl_FragColor = texture2D(uSampler, coord);
}
*/
var TEXTURE_FRAGMENT_SHADER_SRC = 
  "varying highp vec2 vTextureCoord;\r\n      \r\nuniform sampler2D uSampler;\r\nuniform highp vec2 uTextureDimensions;\r\nuniform highp vec4 uSpriteCoords;\r\n\r\nvoid main(void) {\r\n  highp vec2 coord =  ( uSpriteCoords.zw * vTextureCoord + uSpriteCoords.xy) \/ uTextureDimensions;\r\n  gl_FragColor = texture2D(uSampler, coord);\r\n}";


// Vertex shader source, unformatted
/*
attribute vec2 a_position;
uniform  vec4 uViewport;
uniform  vec4 uEntityPos;
uniform  vec4 uEntityExtra;


varying highp vec2 vTextureCoord;

mat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);
vec4 viewportTranslation = vec4(uViewport.xy, 0, 0);

vec2 entityScale = uEntityPos.zw;
vec2 entityTranslation = uEntityPos.xy;
vec2 entityOrigin = uEntityExtra.xy;
mat2 entityRotationMatrix = mat2(cos(uEntityExtra.w), sin(uEntityExtra.w), -sin(uEntityExtra.w), cos(uEntityExtra.w));

void main() {
  vec2 pos = entityScale * a_position;
  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin + entityTranslation;
  gl_Position = viewportScale * (viewportTranslation + vec4(pos, uEntityExtra.z, 1) );
  vTextureCoord = a_position;
}
*/

// Escape using a tool like [this one](http://www.freeformatter.com/javascript-escape.html).
var VERTEX_SHADER_SRC = 
"attribute vec2 a_position;\r\nuniform  vec4 uViewport;\r\nuniform  vec4 uEntityPos;\r\nuniform  vec4 uEntityExtra;\r\n\r\n\r\nvarying highp vec2 vTextureCoord;\r\n\r\nmat4 viewportScale = mat4(2.0 \/ uViewport.z, 0, 0, 0,    0, -2.0 \/ uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\r\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\r\n\r\nvec2 entityScale = uEntityPos.zw;\r\nvec2 entityTranslation = uEntityPos.xy;\r\nvec2 entityOrigin = uEntityExtra.xy;\r\nmat2 entityRotationMatrix = mat2(cos(uEntityExtra.w), sin(uEntityExtra.w), -sin(uEntityExtra.w), cos(uEntityExtra.w));\r\n\r\nvoid main() {\r\n  vec2 pos = entityScale * a_position;\r\n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin + entityTranslation;\r\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, uEntityExtra.z, 1) );\r\n  vTextureCoord = a_position;\r\n}";


// New fragmetn/vertex for color


/*
attribute vec2 aPosition;
attribute vec4 aExtras;
attribute vec4 aColor;

varying lowp vec4 vColor;

uniform  vec4 uViewport;

mat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);
vec4 viewportTranslation = vec4(uViewport.xy, 0, 0);

vec2 entityOrigin = aExtras.xy;
mat2 entityRotationMatrix = mat2(cos(aExtras.w), sin(aExtras.w), -sin(aExtras.w), cos(aExtras.w));

void main() {
  vec2 pos = aPosition;
  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;
  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aExtras.z) ), 1) );
  vColor = aColor;
}

*/


var COLOR_VERTEX_SHADER = 
  "attribute vec2 aPosition;\r\nattribute vec4 aExtras;\r\nattribute vec4 aColor;\r\n\r\nvarying lowp vec4 vColor;\r\n\r\nuniform  vec4 uViewport;\r\n\r\nmat4 viewportScale = mat4(2.0 \/ uViewport.z, 0, 0, 0,    0, -2.0 \/ uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\r\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\r\n\r\nvec2 entityOrigin = aExtras.xy;\r\nmat2 entityRotationMatrix = mat2(cos(aExtras.w), sin(aExtras.w), -sin(aExtras.w), cos(aExtras.w));\r\n\r\nvoid main() {\r\n  vec2 pos = aPosition;\r\n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\r\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0\/(1.0+exp(aExtras.z) ), 1) );\r\n  vColor = aColor;\r\n}";


var COLOR_FRAGMENT_SHADER = "";


/*
attribute vec2 aPosition;
attribute vec4 aExtras;
attribute vec2 aTextureCoord;

varying mediump vec2 vTextureCoord;

uniform vec4 uViewport;
uniform mediump vec2 uTextureDimensions;

mat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);
vec4 viewportTranslation = vec4(uViewport.xy, 0, 0);

vec2 entityOrigin = aExtras.xy;
mat2 entityRotationMatrix = mat2(cos(aExtras.w), sin(aExtras.w), -sin(aExtras.w), cos(aExtras.w));

void main() {
  vec2 pos = aPosition;
  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;
  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aExtras.z) ), 1) );
  vTextureCoord = aTextureCoord;
}

*/

var SPRITE_VERTEX_SHADER = 
  "attribute vec2 aPosition;\r\nattribute vec4 aExtras;\r\nattribute vec2 aTextureCoord;\r\n\r\nvarying mediump vec2 vTextureCoord;\r\n\r\nuniform vec4 uViewport;\r\nuniform mediump vec2 uTextureDimensions;\r\n\r\nmat4 viewportScale = mat4(2.0 \/ uViewport.z, 0, 0, 0,    0, -2.0 \/ uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\r\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\r\n\r\nvec2 entityOrigin = aExtras.xy;\r\nmat2 entityRotationMatrix = mat2(cos(aExtras.w), sin(aExtras.w), -sin(aExtras.w), cos(aExtras.w));\r\n\r\nvoid main() {\r\n  vec2 pos = aPosition;\r\n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\r\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0\/(1.0+exp(aExtras.z) ), 1) );\r\n  vTextureCoord = aTextureCoord;\r\n}\r\n";

/*
    varying mediump vec2 vTextureCoord;
      
    uniform sampler2D uSampler;
    uniform mediump vec2 uTextureDimensions;

    void main(void) {
      highp vec2 coord =   vTextureCoord / uTextureDimensions;
      gl_FragColor = texture2D(uSampler, coord);
    }
*/


var SPRITE_FRAGMENT_SHADER = 
  "    varying mediump vec2 vTextureCoord;\r\n      \r\n    uniform sampler2D uSampler;\r\n    uniform mediump vec2 uTextureDimensions;\r\n\r\n    void main(void) {\r\n      highp vec2 coord =   vTextureCoord \/ uTextureDimensions;\r\n      gl_FragColor = texture2D(uSampler, coord);\r\n    }";

Crafty.c("TestSquare", {
  init: function(){
      if (this.has("WebGL")){
        this._establishShader("TestSquare", this._fragmentShader)
      }

  },

  _fragmentShader: FRAGMENT_SHADER_SRC

});

Crafty.c("TestSquareWhite", {
  init: function(){
      if (this.has("WebGL")){
        this._establishShader("TestSquareWhite", this._fragmentShader)
      }

  },

  _fragmentShader: FRAGMENT_SHADER_SRC_2

});

Crafty.c("TestColor", {
  init: function(){
      if (this.has("WebGL")){
        var gl = this.webgl.context;
        this._establishShader("TestColor", this._fragmentShader, this._vertexShader);

        if (typeof this._shaderProgram.posLocation === "undefined"){
          this._specializeProgram();
        }
        this._glNum = this._shaderProgram._elementCount++;

      }


      this._red = this._blue = this._green = 1.0;
      this.bind("Draw", this._drawColor);

  },

  _specializeProgram: function(){
    var gl = this.webgl.context;
    console.log('setting positions');
    var prog = this._shaderProgram;
    

    prog._bufferArray = new Float32Array(4000);
    prog._kingBuffer = gl.createBuffer();
    prog.index = new Uint16Array(600);
    prog._indexBuffer = gl.createBuffer();

    prog.posLocation = gl.getAttribLocation(prog, "aPosition");
    gl.enableVertexAttribArray(prog.posLocation);
    prog.extrasLocation = gl.getAttribLocation(prog, "aExtras");
    gl.enableVertexAttribArray(prog.extrasLocation);
    prog.colLocation = gl.getAttribLocation(prog, "aColor");
    gl.enableVertexAttribArray(prog.colLocation);
    prog._elementCount = 0;




    var size = Float32Array.BYTES_PER_ELEMENT;
    var stride =  (2+4+4) * size;
    prog.stride = stride;
    prog.switchTo = function(){
      gl.useProgram(prog);
      gl.bindBuffer(gl.ARRAY_BUFFER, prog._kingBuffer);
      gl.vertexAttribPointer(prog.posLocation, 2, gl.FLOAT, false, stride, 0);
      gl.vertexAttribPointer(prog.extrasLocation, 4, gl.FLOAT, false, stride, 2*size);
      gl.vertexAttribPointer(prog.colLocation, 4, gl.FLOAT, false, stride, (2+4)*size);
    };

    prog.renderBatch = function(){
      gl.bindBuffer(gl.ARRAY_BUFFER, prog._kingBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, prog._bufferArray, gl.STATIC_DRAW); 
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, prog._indexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, prog.index, gl.STATIC_DRAW);
      gl.drawElements(gl.TRIANGLES, prog.pointer, gl.UNSIGNED_SHORT, 0);
    };

  },

  _fragmentShader: 
    "precision mediump float;"
    + "varying lowp vec4 vColor;"
    + "void main(void) {"
    + "  gl_FragColor = vColor;"
    + "}",

  _vertexShader: COLOR_VERTEX_SHADER,

  _drawColor: function(drawVars){
    //console.log("Drawing color");
    var gl = drawVars.gl, prog = drawVars.program;

    // Write the vertex data into the array
    this._writeToArray(prog._bufferArray);
    //console.log(prog._bufferArray);
    

    // Register the vertex groups to be drawn
    // Two triangles; (0, 1, 2) and (1, 2, 3)
    var offset = this._glNum * 4;
    var index = prog.index;
    var l = prog.pointer;
    index[0+l] = 0 + offset;
    index[1+l] = 1 + offset;
    index[2+l] = 2 + offset;
    index[3+l] = 1 + offset;
    index[4+l] = 2 + offset;
    index[5+l] = 3 + offset;
    prog.pointer += 6;
  },

  _writeToArray: function(data){
      //intermediate: just CREATE the matrix right here
      
      var width = 2 + 4 + 4;
      var offset = (width * 4) * this._glNum;

      // Write position; x, y, w, h
      glHelpers.writeVec2(data, offset, width,
        this._x, this._y, 
        this._x , this._y + this._h,
        this._x + this._w, this._y,
        this._x + this._w, this._y + this._h
      );
      // Write orientation and z level
      glHelpers.writeVec4(data, offset + 2, width,
        this._origin.x + this._x,
        this._origin.y + this._y,
        this._z,
        this._rotation
      );
      glHelpers.writeVec4(data, offset + 6, width,
        this._red,
        this._green,
        this._blue,
        1
      );

  },

  color: function (r, g, b){
    this._red = r;
    this._green = g;
    this._blue = b;

    return this;
  }

});

/*
console.log("Initing webgl sprite");
                var webgl = this.webgl;
                this._establishShader(url, TEXTURE_FRAGMENT_SHADER_SRC)
                this.__texture = webgl.makeTexture(this.__image, this.img);
                console.log("Made texture")
                console.log(this.__texture);
                console.log("Image complete? " + img.complete)
                webgl.bindTexture(this._shaderProgram, this.__texture)
              */



Crafty.c("GLSprite", {
  init: function(){
      if (this.has("WebGL")){
        var gl = this.webgl.context;
        this._establishShader(this.__image, this._fragmentShader, this._vertexShader);

        if (typeof this._shaderProgram.posLocation === "undefined"){
          this._specializeProgram();
        }
        this._glNum = this._shaderProgram._elementCount++;

      }


      
      this.bind("Draw", this._drawSprite);

  },


  // For sprite
  _specializeProgram: function(){
    var gl = this.webgl.context;
    var webgl =this.webgl;
    console.log('setting sprite positions');
    var prog = this._shaderProgram;


    prog.__texture = webgl.makeTexture(this.__image, this.img);
    //console.log("Made texture")
    //console.log(this.__texture);
    //console.log("Image complete? " + img.complete)
    webgl.bindTexture(this._shaderProgram, prog.__texture);
    

    prog._bufferArray = new Float32Array(4000);
    prog._kingBuffer = gl.createBuffer();
    prog.index = new Uint16Array(600);
    prog._indexBuffer = gl.createBuffer();

    prog.posLocation = gl.getAttribLocation(prog, "aPosition");
    gl.enableVertexAttribArray(prog.posLocation);
    prog.extrasLocation = gl.getAttribLocation(prog, "aExtras");
    gl.enableVertexAttribArray(prog.extrasLocation);
    prog.textureLocation = gl.getAttribLocation(prog, "aTextureCoord");
    gl.enableVertexAttribArray(prog.textureLocation);
    prog._elementCount = 0;




    var size = Float32Array.BYTES_PER_ELEMENT;
    var stride =  (2+4+2) * size;
    prog.stride = stride;
    prog.switchTo = function(){
      gl.useProgram(prog);
      gl.bindBuffer(gl.ARRAY_BUFFER, prog._kingBuffer);
      gl.vertexAttribPointer(prog.posLocation, 2, gl.FLOAT, false, stride, 0);
      gl.vertexAttribPointer(prog.extrasLocation, 4, gl.FLOAT, false, stride, 2*size);
      gl.vertexAttribPointer(prog.colLocation, 4, gl.FLOAT, false, stride, (2+4)*size);
    };

    prog.renderBatch = function(){
      gl.bindBuffer(gl.ARRAY_BUFFER, prog._kingBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, prog._bufferArray, gl.STATIC_DRAW); 
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, prog._indexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, prog.index, gl.STATIC_DRAW);
      gl.drawElements(gl.TRIANGLES, prog.pointer, gl.UNSIGNED_SHORT, 0);
    };

  },



  _fragmentShader: SPRITE_FRAGMENT_SHADER,

  _vertexShader: SPRITE_VERTEX_SHADER,

  _drawSprite: function(drawVars){
    //console.log("Drawing color");
    var gl = drawVars.gl, prog = drawVars.program;

    // Write the vertex data into the array
    this._writeToArray(prog._bufferArray, drawVars.co);

    // Register the vertex groups to be drawn
    // Two triangles; (0, 1, 2) and (1, 2, 3)
    var offset = this._glNum * 4;
    var index = prog.index;
    var l = prog.pointer;
    index[0+l] = 0 + offset;
    index[1+l] = 1 + offset;
    index[2+l] = 2 + offset;
    index[3+l] = 1 + offset;
    index[4+l] = 2 + offset;
    index[5+l] = 3 + offset;
    prog.pointer += 6;
  },

  _writeToArray: function(data, co){
      //intermediate: just CREATE the matrix right here
      
      var width = 2 + 4 + 2;
      var offset = (width * 4) * this._glNum;

      // Write position; x, y, w, h

      glHelpers.writeVec2(data, offset, width,
        this._x, this._y, 
        this._x , this._y + this._h,
        this._x + this._w, this._y,
        this._x + this._w, this._y + this._h
      );

      // Write orientation and z level
      glHelpers.writeVec4(data, offset + 2, width,
        this._origin.x + this._x,
        this._origin.y + this._y,
        this._z,
        this._rotation
      );
      
      // Write array coordinates
      glHelpers.writeVec2(data, offset + 6, width,
        co.x, co.y,
        co.x, co.y + co.h,
        co.x + co.w, co.y,
        co.x + co.w, co.y + co.h
      );

  }



});



// This will totally assume, for now, that gl-matrix is available
Crafty.c("WebGL", {
    init: function () {
        if (!Crafty.webgl.context) {
            Crafty.webgl.init();
        }

        var webgl = this.webgl = Crafty.webgl;
        var gl = webgl.context;

        //increment the amount of canvas objs
        webgl.entities++;
        
        this._changed = true;
        webgl.add(this);

        this.bind("Change", function (e) {
            //flag if changed
            if (this._changed === false) {
                this._changed = true;
                webgl.add(this);
            }

        });

        this.bind("Remove", function () {
            webgl.entities--;
            this._changed = true;
            webgl.add(this);
        });

    },

    /**@
     * #.draw
     * @comp WebGL
     * @sign public this .draw([[Context ctx, ]Number x, Number y, Number w, Number h])
     * @param ctx - Canvas 2D context if drawing on another canvas is required
     * @param x - X offset for drawing a segment
     * @param y - Y offset for drawing a segment
     * @param w - Width of the segment to draw
     * @param h - Height of the segment to draw
     *
     * Method to draw the entity on the canvas element. Can pass rect values for redrawing a segment of the entity.
     */

    // Cache the various objects and arrays used in draw
    drawVars: {
        type: "webgl",
        pos: {},
        ctx: null,
        coord: [0, 0, 0, 0],
        co: {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        }


    },

    draw: function (ctx, x, y, w, h) {

        if (!this.ready) return;

        if (arguments.length === 4) {
            h = w;
            w = y;
            y = x;
            x = ctx;
            ctx = this.webgl.context;
        }


        var pos = this.drawVars.pos;
        pos._x = (this._x + (x || 0));
        pos._y = (this._y + (y || 0));
        pos._w = (w || this._w);
        pos._h = (h || this._h);

        var coord = this.__coord || [0, 0, 0, 0];
        var co = this.drawVars.co;
        co.x = coord[0] + (x || 0);
        co.y = coord[1] + (y || 0);
        co.w = w || coord[2];
        co.h = h || coord[3];

        // Handle flipX, flipY
        if (this._flipX || this._flipY) {
           
        }


        //set alpha
        if (this._alpha < 1.0) {
           
        }

        //Draw entity
        var gl = this.webgl.context;
        this.drawVars.gl = gl;
        this.drawVars.program = this._shaderProgram;


        this.trigger("Draw", this.drawVars);

        //gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        
        return this;
    },

    // v_src is optional, there's a default vertex shader that works for regular rectangular entities
    _establishShader: function(compName, f_src, v_src){
        console.log("Establishing shader");
        var wgl = this.webgl;
        if (typeof wgl.programs[compName] === "undefined"){
          wgl.programs[compName] = glHelpers.makeProgram(gl, f_src, v_src);
        }
          
        this._shaderProgram = wgl.programs[compName];

        // Shader program means ready
        this.ready = true;
    },
});

/**@
 * #Crafty.webgl
 * @category Graphics
 *
 * Collection of methods to draw on canvas.
 */
Crafty.extend({

    webgl: {
        /**@
         * #Crafty.webgl.context
         * @comp Crafty.webgl
         *
         * This will return the context of the webgl canvas element.
         * FIXME The value returned from `Crafty.canvas._canvas.getContext('2d')`.
         */
        context: null,
        entities: 0,
        changed_objects: [],
        add: function(e){
        	this.changed_objects.push(e);
        },
        /**@
         * #Crafty.canvas._glCanvas
         * @comp Crafty.webgl
         *
         * WebGL Canvas element
         */

        programs: {},

        compileShader: function (src, type){
            var gl = this.context;
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader);
            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
              throw(gl.getShaderInfoLog(shader));
            };
            return shader;
        },

        makeProgram: function (fragment_src, vertex_src){
            
            console.log("Making program");
            console.log(fragment_src);
            var gl = this.context;
            var fragment_shader = this.compileShader(fragment_src, gl.FRAGMENT_SHADER);
            var vertex_shader = (vertex_src) ? this.compileShader(vertex_src, gl.VERTEX_SHADER) : this.defaultVertexShader;

            var shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, vertex_shader);
            gl.attachShader(shaderProgram, fragment_shader);
            gl.linkProgram(shaderProgram);

            if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
              throw("Could not initialise shaders");
            }
            
            shaderProgram.viewport = gl.getUniformLocation(shaderProgram, "uViewport");
            return shaderProgram;
        },
        
        textures: {},
        textureCount: 0,
        makeTexture: function(url, image){

            var webgl = this;

            if (typeof webgl.textures[url] !== 'undefined')
              return webgl.textures[url];
            var gl = webgl.context;
            
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); //gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); //Prevents s-coordinate wrapping (repeating).
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); //Prevents t-coordinate wrapping (repeating).


            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            //gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
            //gl.generateMipmap(gl.TEXTURE_2D);
            gl.bindTexture(gl.TEXTURE_2D, null);

            gl.activeTexture(gl["TEXTURE" + webgl.textureCount]);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            webgl.textures[url] = {
              t: texture,
              sampler: webgl.textureCount,
              key: "TEXTURE" + webgl.textureCount,
              width: image.width,
              height: image.height,
              url: url
            };
            webgl.textureCount++;
            gl.activeTexture(gl["TEXTURE" + (webgl.textureCount)]);
            return webgl.textures[url];
        },

        bindTexture: function(program, texture_obj) {
            if (typeof program.texture_obj !== "undefined")
              return;
            this.context;
            var webgl = this;
            gl.useProgram(program);
            // Set the texture buffer to use
            gl.uniform1i(gl.getUniformLocation(program, "uSampler"), texture_obj.sampler);
            // Set the image dimensions
            gl.uniform2f(gl.getUniformLocation(program, "uTextureDimensions"), texture_obj.width, texture_obj.height);
            
            program.texture_obj = texture_obj;
        },


        /**@
         * #Crafty.webgl.init
         * @comp Crafty.webgl
         * @sign public void Crafty.webgl.init(void)
         * @trigger NoWebGL - triggered if `Crafty.support.webgl` is false FIXME actually implement!
         *
         * Creates a `canvas` element inside `Crafty.stage.elem`. Must be called
         * before any entities with the WebGL component can be drawn.
         *
         * This method will automatically be called if no `Crafty.webgl.context` is
         * found.
         */
        init: function () {

            //check if canvas is supported
            if (!Crafty.support.webgl) {
                Crafty.trigger("NoWebGL");
                Crafty.stop();
                return;
            }

            //create an empty canvas element
            var c;
            c = document.createElement("canvas");
            c.width = Crafty.viewport.width;
            c.height = Crafty.viewport.height;
            c.style.position = 'absolute';
            c.style.left = "0px";
            c.style.top = "0px";

            Crafty.stage.elem.appendChild(c);

            // Equivalent of initGL in sample prog
            var gl;
    		    try {
    		      gl = c.getContext("webgl") || c.getContext("experimental-webgl");
    		      gl.viewportWidth = c.width;
    		      gl.viewportHeight = c.height;
    		    } catch(e) {
                    //Do nothing!
    		    }

    		    if (!gl) {
    		      Crafty.trigger("NoWebGL");
              return;
    		    }
            this.context = gl;
            this._canvas = c;

            gl.clearColor(0.0, 0.0, 0.0, 0.0);
            gl.enable(gl.DEPTH_TEST);
            
            //gl.disable(gl.DEPTH_TEST);
            //gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
            //gl.enable(gl.BLEND);
            

            //Bind rendering of canvas context (see drawing.js)
            var webgl = this;
            Crafty.uniqueBind("RenderScene", webgl.render);

            Crafty.uniqueBind("ViewportResize", webgl._resize)
            
            Crafty.uniqueBind("InvalidateViewport", function(){webgl.dirtyViewport = true;})
            this.dirtyViewport = true;

            console.log("webgl inited");

        },

        _resize: function(){
            var c = Crafty.webgl._canvas;
            c.width = Crafty.viewport.width;
            c.height = Crafty.viewport.height;
            gl.viewportWidth = c.widtxh;
            gl.viewportHeight = c.height;
        },

        setViewportUniforms: function(shaderProgram){
            gl = this.webgl.context;
            gl.useProgram(shaderProgram);
            var viewport = Crafty.viewport;
            gl.uniform4f(shaderProgram.viewport, viewport._x, viewport._y, viewport._width, viewport._height);
        },

        render: function(rect){
            //console.log("Rendering webgl context")
            rect = rect || Crafty.viewport.rect();
            var q = Crafty.map.search(rect),
                i = 0,
                l = q.length,
                webgl = Crafty.webgl,
                gl = webgl.context,
                current;



            // Set viewport and clear it
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            //We don't set the perspective because the default is what we WANT -- no depth 

            //Set the viewport uniform variables
            var shaderProgram;            
            var programs = webgl.programs;
            if (webgl.dirtyViewport){
              for (var comp in programs){
                  webgl.setViewportUniforms(programs[comp]);
              }
              webgl.dirtyViewport = false;
            }


            var batchCount = 0;
            shaderProgram = null;
            for (; i < l; i++) {
                current = q[i];
                if (current._visible && current.__c.WebGL) {
                    if (shaderProgram !== current._shaderProgram){
                      if (shaderProgram !== null){
                        shaderProgram.renderBatch();
                        batchCount++;
                      }
                      shaderProgram = current._shaderProgram;
                      shaderProgram.pointer = 0;
                      shaderProgram.switchTo();
                    } 
                    current.draw();
                    current._changed = false;
                }
            }

            if (shaderProgram !== null){
              shaderProgram.renderBatch();
              batchCount++;
            }
            console.log("Batches: " + batchCount);
            
        }

    }
});


/*C:\uniserver\www\hdp\public_html\lib/Tweener.js*/
/*============================================================
TERMS OF USE - EASING EQUATIONS
a
Open source under the BSD License. 

Copyright © 2001 Robert Penner
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
- Neither the name of the author nor the names of contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 =============================================================*/
/**@
* #Tweener
* @author 	Talita Pagani
* @category Animation
* 
* Component to animate 2D properties with easing effects, inspired by Tweener Class for ActionScript/Flash platform (http://code.google.com/p/tweener/).
* Does not conflict with Tween component.
*/
Crafty.c("Tweener", {
	_tw_numProps: 0,
	_tw_step: null,
	_tw_duration: 50,
	_tw_effect: 'easeOutExpo',
	_tw_onComplete: undefined,
	_tw_onCompleteParams: undefined,
	_tw_transitions: {
		/*
		 * Linear tween - no easing
		 * t: current time, b: beginning value, c: change in value, d: duration
		 */
		linear: function (t, b, c, d) {
			return c * t / d + b;
		},
		/*
		 * Quadratic easing: t^2
		 * t: current time, b: beginning value, c: change in value, d: duration
		 */
		easeInQuad: function (t, b, c, d) {
			return c * (t /= d) * t + b;
		},
		easeOutQuad: function (t, b, c, d) {
			return -c * (t /= d) * (t - 2) + b;
		},
		easeInOutQuad: function (t, b, c, d) {
			if ((t /= d / 2) < 1) {
				return c / 2 * t * t + b;
			}

			return -c / 2 * ((--t) * (t - 2) - 1) + b;
		},
		/*
		 * Cubic easing: t^3
		 * t: current time, b: beginning value, c: change in value, d: duration
		 */
		easeInCubic: function (t, b, c, d) {
			return c * (t /= d) * t * t + b;
		},
		easeOutCubic: function (t, b, c, d) {
			return c * ((t = t / d - 1) * t * t + 1) + b;
		},
		easeInOutCubic: function (t, b, c, d) {
			if ((t /= d / 2) < 1) {
				return c / 2 * t * t * t + b;
			}

			return c / 2 * ((t -= 2) * t * t + 2) + b;
		},
		/*
		 * Similar to cubic easing
		 * t: current time, b: beginning value, c: change in value, d: duration
		 */
		easeIn: function (t, b, c, d) {
			return c * (t /= d) * t * t + b;
		},
		easeOut: function (t, b, c, d) {
			return c * ((t = t / d - 1) * t * t + 1) + b;
		},
		easeInOut: function (t, b, c, d) {
			if ((t /= d / 2) < 1) {
				return c / 2 * t * t * t + b;
			}

			return c / 2 * ((t -= 2) * t * t + 2) + b;
		},
		/*
		 * Quartic easing: t^4
		 * t: current time, b: beginning value, c: change in value, d: duration
		 */
		easeInQuart: function (t, b, c, d) {
			return c * (t /= d) * t * t * t + b;
		},
		easeOutQuart: function (t, b, c, d) {
			return -c * ((t = t / d - 1) * t * t * t - 1) + b;
		},
		easeInOutQuart: function (t, b, c, d) {
			if ((t /= d / 2) < 1) {
				return c / 2 * t * t * t * t + b;
			}

			return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
		},
		/*
		 * Quintic easing: t^5
		 * t: current time, b: beginning value, c: change in value, d: duration
		 */
		easeInQuint: function (t, b, c, d) {
			return c * (t /= d) * t * t * t * t + b;
		},
		easeOutQuint: function (t, b, c, d) {
			return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
		},
		easeInOutQuint: function (t, b, c, d) {
			if ((t /= d / 2) < 1) {
				return c / 2 * t * t * t * t * t + b;
			}

			return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
		},
		/*
		 * Sinusoidal easing: sin(t)
		 * t: current time, b: beginning value, c: change in position, d: duration
		 */
		easeInSine: function (t, b, c, d) {
			return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
		},
		easeOutSine: function (t, b, c, d) {
			return c * Math.sin(t / d * (Math.PI / 2)) + b;
		},
		easeInOutSine: function (t, b, c, d) {
			return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
		},
		/*
		 * Exponential easing: 2^t
		 * t: current time, b: beginning value, c: change in position, d: duration
		 */
		easeInExpo: function (t, b, c, d) {
			return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
		},
		easeOutExpo: function (t, b, c, d) {
			return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
		},
		easeInOutExpo: function (t, b, c, d) {
			if (t === 0) { return b; }
			if (t === d) { return b + c; }

			if ((t /= d / 2) < 1) {
				return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
			}

			return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
		},
		/*
		 * Circular easing: sqrt(1-t^2)
		 * t: current time, b: beginning value, c: change in position, d: duration
		 */
		easeInCirc: function (t, b, c, d) {
			return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
		},
		easeOutCirc: function (t, b, c, d) {
			return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
		},
		easeInOutCirc: function (t, b, c, d) {
			if ((t /= d / 2) < 1) {
				return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
			}

			return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
		},
		/*
		 * Bounce easing: exponentially decaying parabolic bounce
		 * t: current time, b: beginning value, c: change in position, d: duration
		 */
		easeInBounce: function (t, b, c, d) {
			return c - this.easeOutBounce(d - t, 0, c, d) + b;
		},
		easeOutBounce: function (t, b, c, d) {
			if ((t /= d) < (1 / 2.75)) {
				return c * (7.5625 * t * t) + b;
			} 
			else if (t < (2 / 2.75)) {
				return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;
			} 
			else if (t < (2.5 / 2.75)) {
				return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;
			} else {
				return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;
			}
		},
		easeInOutBounce: function (t, b, c, d) {
			if (t < d / 2) {
				return this.easeInBounce(t * 2, 0, c, d) * 0.5 + b;
			}

			return this.easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
		},
		/*
		 * Elastic easing: exponentially decaying sine wave
		 * t: current time, b: beginning value, c: change in value, d: duration, a: amplitude (optional), p:period (optional)
		 */
		easeInElastic: function (t, b, c, d, a, p) {
			if (t === 0) { return b; }
			if ((t /= d) === 1) { return b + c; }
			if (!p) { p = d * 0.3; }
			if (!a) { a = 1; }
			var s = 0;

			if (a < Math.abs(c)) {
				a = c;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(c / a);
			}

			return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
		},
		easeOutElastic: function (t, b, c, d, a, p) {
			if (t === 0) { return b; }
			if ((t /= d) === 1) { return b + c; }
			if (!p) { p = d * 0.3; }
			if (!a) { a = 1; }
			var s = 0;

			if (a < Math.abs(c)) {
				a = c;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(c / a);
			}

			return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
		},
		easeInOutElastic: function (t, b, c, d, a, p) {
			if (t === 0) { return b; }
			if ((t /= d / 2) === 2) { return b + c; }
			if (!p) { p = d * (0.3 * 1.5); }
			if (!a) { a = 1; }
			var s = 0;

			if (a < Math.abs(c)) {
				a = c;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(c / a);
			}

			if (t < 1) {
				return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
			}

			return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
		},
		/*
		 * Back easing: overshooting cubic easing: (s+1)*t^3 - s*t^2
		 * t: current time, b: beginning value, c: change in value, d: duration, s: overshoot amount (optional)
		 * s controls the amount of overshoot: higher 's' means greater overshoot
		 * s has a default value of 1.70158, which produces an overshoot of 10 percent
		 * s==0 produces cubic easing with no overshoot
		 */
		easeInBack: function (t, b, c, d, s) {
			if (s == undefined) { s = 1.70158; }
			
			return c * (t/=d) * t * ((s+1) * t - s) + b;
		},
		easeOutBack: function (t, b, c, d, s) {
			if (s == undefined) { s = 1.70158; }
			
			return c* ((t = t/d-1) * t * ((s+1) * t + s) + 1) + b;
		},
		easeInOutBack: function (t, b, c, d, s) {
			if (s == undefined) { s = 1.70158; }

			if ((t/=d/2) < 1) {
				return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
			}
			
			return c / 2 * ((t -= 2) * t * (((s *= (1.525))+1) * t + s) + 2) + b;
		}
	},
	init: function () {},
	/**@
	* #.addTween
	* @comp Tweener
	* @sign public this .addTween(Object properties[, String transition[, Number duration[, Function onComplete[, Array onCompleteParams]]]])
	* @param properties - Object of 2D properties and what they should animate to
	* @param transition - Easing effect to be applied to the animation based on Robert Penner's easing equations
	* @param duration - Duration to animate the properties over (in frames)
	* @param onComplete - Callback function to be executed after tween is finished
	* @param onCompleteParams - Comma-delimited array of params to be executed by the callback function
	* 
	* This method will animate a 2D entities properties over the specified duration.
	* These include `x`, `y`, `w`, `h`, `alpha` and `rotation`. It's also possible to set multiple tweens.
	*
	* The object passed should have the properties as keys and the value should be the resulting
	* values of the properties.
	* 
	* The available easing transitions are:
	* - Linear (`linear`)
	* - Quadratic (`easeInQuad`, `easeOutQuad`, `easeInOutQuad`)
	* - Cubic (`easeInCubic`, `easeOutCubic`, `easeInOutCubic`)
	* - Quartic (`easeInQuart`, `easeOutQuart`, `easeInOutQuart`)
	* - Quintic (`easeInQuint`, `easeOutQuint`, `easeInOutQuint`)
	* - Sinusoidal (`easeInSine`, `easeOutSine`, `easeInOutSine`)
	* - Exponential (`easeInExpo`, `easeOutExpo`, `easeInOutExpo`)
	* - Circular (`easeInCirc`, `easeOutCirc`, `easeInOutCirc`)
	* - Elastic (`easeInElastic`, `easeOutElastic`, `easeInOutElastic`)
	* - Back (`easeInBack`, `easeOutBack`, `easeInOutBack`)
	* - Bounce (`easeInBounce`, `easeOutBounce`, `easeInOutBounce`)
	* 
	* @example
	* Move an object to 100,100 with bounce transition in 200 frames.
	* ~~~
	* Crafty.e("2D, Tweener")
	*    .attr({x: 0, y: 0})
	*    .addTween({x: 100, y: 100}, 'easeOutBounce', 200)
	* ~~~
	* Move an object to 650 on x-axis and 1080 degrees on rotation with quadratic transition in 100 frames and 
	* 500 on y-axis with bounce transition in 200 frames.
	* ~~~
	* Crafty.e("2D, Tweener")
	*    .attr({x: 10, y: 75})
	*    .addTween({x:650, rotation: 1080}, 'easeInQuad',100);
	*    .addTween({y:500}, 'easeOutBounce',200);
	* ~~~
	* Passing a callback function to be executed on tween end
	* ~~~
	* Crafty.e("2D, Tweener")
	*    .attr({x: 0, y: 0})
	*    .addTween({x: 100, y: 100}, 'easeOutBounce', 200, func)
	* 
	* Crafty.e("2D, Tweener")
	*    .attr({x: 50, y: 50})
	*    .addTween({x: 150, y: 150}, 'easeOutBounce', 300, func, ["Passing parameters to callback!"])
	* 
	* function func(message) {
	* 	if (message != undefined) {
	*	 	alert(message);
	*   } else {
	*	 	alert("Callback function without parameters");
	*   }
	* }
	* ~~~
	*/
	addTween: function(props, transition, duration, onComplete, onCompleteParams) {
		
		this.each(function () {
			if (this._tw_step == null) {
				this._tw_step = {};
				this.bind('EnterFrame', tweenerEnterFrame);
				this.bind('RemoveComponent', function (c) {
					if (c == 'Tweener') {
						this.unbind('EnterFrame', tweenerEnterFrame);
					}
				});
			}
			
			for (var prop in props) {
				/*
				 * Properties:
				 * b	Begin	 Initial position
				 * c	Change	 Final position-Initial position
				 * d	Duration Animation duration in frames (default FPS is usually 50 on Crafty)
				 * f 	Final	 Final position
				 * t	Time	 Time counter
				 * e	Effect	 Transition of the property (in case of multiple tweens)
				 */
				this._tw_step[prop] = { b: this[prop], c: (props[prop] - this[prop]), d: duration || this._tw_duration, f: props[prop], t: 0, e: transition || this._tw_effect };
				this._tw_numProps++;
			}
			
			this._tw_onComplete = onComplete;
			
			this._tw_onCompleteParams = onCompleteParams;
		});
		return this;
	},
	
	/**@
	* #.cancelTweener
	* @comp Tweener
	* @sign public this .cancelTweener()
	* 
	* This metod will stop and remove all the tweens (and callbacks) that have been added to the entity.
	*/
	cancelTweener: function() {
		if (this._tw_step) {
			while (this._tw_step.length > 0) { this._tw_step.pop(); }
		}
		this._tw_numProps = 0;
		this._tw_onComplete = undefined;
		this._tw_onCompleteParams = undefined;
		return this;
	}
});

function tweenerEnterFrame(e) {
	if (this._tw_numProps <= 0) return;
	
	var prop, k;
	/* For each property of the entity, calculate its new value based on the transition equation specified */
	for (k in this._tw_step) {
		prop = this._tw_step[k];
		
		this[k] = this._tw_transitions[prop.e](prop.t++, prop.b, prop.c, prop.d);
		// stop tween on property
		if(prop.t == prop.d) {
			// decimal numbers rounding fix
			this[k] = prop.f;
			if (prop.t >= prop.d) {
				delete this._tw_step[k];
			}
			this._tw_numProps--;
			
			if (this._tw_numProps <= 0) {
				if(typeof this._tw_onComplete === 'function') {
					if(this._tw_onCompleteParams) {
						this._tw_onComplete.apply(this, this._tw_onCompleteParams);
					} else {
						this._tw_onComplete();
					}
				}
				return;
			}
		}
	}
}

/*C:\uniserver\www\hdp\public_html\lib/Box2dWeb-2.1.a.3.min.js*/
var Box2D={};
(function(F,G){function K(){}if(!(Object.prototype.defineProperty instanceof Function)&&Object.prototype.__defineGetter__ instanceof Function&&Object.prototype.__defineSetter__ instanceof Function)Object.defineProperty=function(y,w,A){A.get instanceof Function&&y.__defineGetter__(w,A.get);A.set instanceof Function&&y.__defineSetter__(w,A.set)};F.inherit=function(y,w){K.prototype=w.prototype;y.prototype=new K;y.prototype.constructor=y};F.generateCallback=function(y,w){return function(){w.apply(y,arguments)}};
F.NVector=function(y){if(y===G)y=0;for(var w=Array(y||0),A=0;A<y;++A)w[A]=0;return w};F.is=function(y,w){if(y===null)return false;if(w instanceof Function&&y instanceof w)return true;if(y.constructor.__implements!=G&&y.constructor.__implements[w])return true;return false};F.parseUInt=function(y){return Math.abs(parseInt(y))}})(Box2D);var Vector=Array,Vector_a2j_Number=Box2D.NVector;if(typeof Box2D==="undefined")Box2D={};if(typeof Box2D.Collision==="undefined")Box2D.Collision={};
if(typeof Box2D.Collision.Shapes==="undefined")Box2D.Collision.Shapes={};if(typeof Box2D.Common==="undefined")Box2D.Common={};if(typeof Box2D.Common.Math==="undefined")Box2D.Common.Math={};if(typeof Box2D.Dynamics==="undefined")Box2D.Dynamics={};if(typeof Box2D.Dynamics.Contacts==="undefined")Box2D.Dynamics.Contacts={};if(typeof Box2D.Dynamics.Controllers==="undefined")Box2D.Dynamics.Controllers={};if(typeof Box2D.Dynamics.Joints==="undefined")Box2D.Dynamics.Joints={};
(function(){function F(){F.b2AABB.apply(this,arguments)}function G(){G.b2Bound.apply(this,arguments)}function K(){K.b2BoundValues.apply(this,arguments);this.constructor===K&&this.b2BoundValues.apply(this,arguments)}function y(){y.b2Collision.apply(this,arguments)}function w(){w.b2ContactID.apply(this,arguments);this.constructor===w&&this.b2ContactID.apply(this,arguments)}function A(){A.b2ContactPoint.apply(this,arguments)}function U(){U.b2Distance.apply(this,arguments)}function p(){p.b2DistanceInput.apply(this,
arguments)}function B(){B.b2DistanceOutput.apply(this,arguments)}function Q(){Q.b2DistanceProxy.apply(this,arguments)}function V(){V.b2DynamicTree.apply(this,arguments);this.constructor===V&&this.b2DynamicTree.apply(this,arguments)}function M(){M.b2DynamicTreeBroadPhase.apply(this,arguments)}function L(){L.b2DynamicTreeNode.apply(this,arguments)}function I(){I.b2DynamicTreePair.apply(this,arguments)}function W(){W.b2Manifold.apply(this,arguments);this.constructor===W&&this.b2Manifold.apply(this,arguments)}
function Y(){Y.b2ManifoldPoint.apply(this,arguments);this.constructor===Y&&this.b2ManifoldPoint.apply(this,arguments)}function k(){k.b2Point.apply(this,arguments)}function z(){z.b2RayCastInput.apply(this,arguments);this.constructor===z&&this.b2RayCastInput.apply(this,arguments)}function u(){u.b2RayCastOutput.apply(this,arguments)}function D(){D.b2Segment.apply(this,arguments)}function H(){H.b2SeparationFunction.apply(this,arguments)}function O(){O.b2Simplex.apply(this,arguments);this.constructor===
O&&this.b2Simplex.apply(this,arguments)}function E(){E.b2SimplexCache.apply(this,arguments)}function R(){R.b2SimplexVertex.apply(this,arguments)}function N(){N.b2TimeOfImpact.apply(this,arguments)}function S(){S.b2TOIInput.apply(this,arguments)}function aa(){aa.b2WorldManifold.apply(this,arguments);this.constructor===aa&&this.b2WorldManifold.apply(this,arguments)}function Z(){Z.ClipVertex.apply(this,arguments)}function d(){d.Features.apply(this,arguments)}function h(){h.b2CircleShape.apply(this,arguments);
this.constructor===h&&this.b2CircleShape.apply(this,arguments)}function l(){l.b2EdgeChainDef.apply(this,arguments);this.constructor===l&&this.b2EdgeChainDef.apply(this,arguments)}function j(){j.b2EdgeShape.apply(this,arguments);this.constructor===j&&this.b2EdgeShape.apply(this,arguments)}function o(){o.b2MassData.apply(this,arguments)}function q(){q.b2PolygonShape.apply(this,arguments);this.constructor===q&&this.b2PolygonShape.apply(this,arguments)}function n(){n.b2Shape.apply(this,arguments);this.constructor===
n&&this.b2Shape.apply(this,arguments)}function a(){a.b2Color.apply(this,arguments);this.constructor===a&&this.b2Color.apply(this,arguments)}function c(){c.b2Settings.apply(this,arguments)}function g(){g.b2Mat22.apply(this,arguments);this.constructor===g&&this.b2Mat22.apply(this,arguments)}function b(){b.b2Mat33.apply(this,arguments);this.constructor===b&&this.b2Mat33.apply(this,arguments)}function e(){e.b2Math.apply(this,arguments)}function f(){f.b2Sweep.apply(this,arguments)}function m(){m.b2Transform.apply(this,
arguments);this.constructor===m&&this.b2Transform.apply(this,arguments)}function r(){r.b2Vec2.apply(this,arguments);this.constructor===r&&this.b2Vec2.apply(this,arguments)}function s(){s.b2Vec3.apply(this,arguments);this.constructor===s&&this.b2Vec3.apply(this,arguments)}function v(){v.b2Body.apply(this,arguments);this.constructor===v&&this.b2Body.apply(this,arguments)}function t(){t.b2BodyDef.apply(this,arguments);this.constructor===t&&this.b2BodyDef.apply(this,arguments)}function x(){x.b2ContactFilter.apply(this,
arguments)}function C(){C.b2ContactImpulse.apply(this,arguments)}function J(){J.b2ContactListener.apply(this,arguments)}function T(){T.b2ContactManager.apply(this,arguments);this.constructor===T&&this.b2ContactManager.apply(this,arguments)}function P(){P.b2DebugDraw.apply(this,arguments);this.constructor===P&&this.b2DebugDraw.apply(this,arguments)}function X(){X.b2DestructionListener.apply(this,arguments)}function $(){$.b2FilterData.apply(this,arguments)}function ba(){ba.b2Fixture.apply(this,arguments);
this.constructor===ba&&this.b2Fixture.apply(this,arguments)}function ca(){ca.b2FixtureDef.apply(this,arguments);this.constructor===ca&&this.b2FixtureDef.apply(this,arguments)}function da(){da.b2Island.apply(this,arguments);this.constructor===da&&this.b2Island.apply(this,arguments)}function Fa(){Fa.b2TimeStep.apply(this,arguments)}function ea(){ea.b2World.apply(this,arguments);this.constructor===ea&&this.b2World.apply(this,arguments)}function Ga(){Ga.b2CircleContact.apply(this,arguments)}function fa(){fa.b2Contact.apply(this,
arguments);this.constructor===fa&&this.b2Contact.apply(this,arguments)}function ga(){ga.b2ContactConstraint.apply(this,arguments);this.constructor===ga&&this.b2ContactConstraint.apply(this,arguments)}function Ha(){Ha.b2ContactConstraintPoint.apply(this,arguments)}function Ia(){Ia.b2ContactEdge.apply(this,arguments)}function ha(){ha.b2ContactFactory.apply(this,arguments);this.constructor===ha&&this.b2ContactFactory.apply(this,arguments)}function Ja(){Ja.b2ContactRegister.apply(this,arguments)}function Ka(){Ka.b2ContactResult.apply(this,
arguments)}function ia(){ia.b2ContactSolver.apply(this,arguments);this.constructor===ia&&this.b2ContactSolver.apply(this,arguments)}function La(){La.b2EdgeAndCircleContact.apply(this,arguments)}function ja(){ja.b2NullContact.apply(this,arguments);this.constructor===ja&&this.b2NullContact.apply(this,arguments)}function Ma(){Ma.b2PolyAndCircleContact.apply(this,arguments)}function Na(){Na.b2PolyAndEdgeContact.apply(this,arguments)}function Oa(){Oa.b2PolygonContact.apply(this,arguments)}function ka(){ka.b2PositionSolverManifold.apply(this,
arguments);this.constructor===ka&&this.b2PositionSolverManifold.apply(this,arguments)}function Pa(){Pa.b2BuoyancyController.apply(this,arguments)}function Qa(){Qa.b2ConstantAccelController.apply(this,arguments)}function Ra(){Ra.b2ConstantForceController.apply(this,arguments)}function Sa(){Sa.b2Controller.apply(this,arguments)}function Ta(){Ta.b2ControllerEdge.apply(this,arguments)}function Ua(){Ua.b2GravityController.apply(this,arguments)}function Va(){Va.b2TensorDampingController.apply(this,arguments)}
function la(){la.b2DistanceJoint.apply(this,arguments);this.constructor===la&&this.b2DistanceJoint.apply(this,arguments)}function ma(){ma.b2DistanceJointDef.apply(this,arguments);this.constructor===ma&&this.b2DistanceJointDef.apply(this,arguments)}function na(){na.b2FrictionJoint.apply(this,arguments);this.constructor===na&&this.b2FrictionJoint.apply(this,arguments)}function oa(){oa.b2FrictionJointDef.apply(this,arguments);this.constructor===oa&&this.b2FrictionJointDef.apply(this,arguments)}function pa(){pa.b2GearJoint.apply(this,
arguments);this.constructor===pa&&this.b2GearJoint.apply(this,arguments)}function qa(){qa.b2GearJointDef.apply(this,arguments);this.constructor===qa&&this.b2GearJointDef.apply(this,arguments)}function Wa(){Wa.b2Jacobian.apply(this,arguments)}function ra(){ra.b2Joint.apply(this,arguments);this.constructor===ra&&this.b2Joint.apply(this,arguments)}function sa(){sa.b2JointDef.apply(this,arguments);this.constructor===sa&&this.b2JointDef.apply(this,arguments)}function Xa(){Xa.b2JointEdge.apply(this,arguments)}
function ta(){ta.b2LineJoint.apply(this,arguments);this.constructor===ta&&this.b2LineJoint.apply(this,arguments)}function ua(){ua.b2LineJointDef.apply(this,arguments);this.constructor===ua&&this.b2LineJointDef.apply(this,arguments)}function va(){va.b2MouseJoint.apply(this,arguments);this.constructor===va&&this.b2MouseJoint.apply(this,arguments)}function wa(){wa.b2MouseJointDef.apply(this,arguments);this.constructor===wa&&this.b2MouseJointDef.apply(this,arguments)}function xa(){xa.b2PrismaticJoint.apply(this,
arguments);this.constructor===xa&&this.b2PrismaticJoint.apply(this,arguments)}function ya(){ya.b2PrismaticJointDef.apply(this,arguments);this.constructor===ya&&this.b2PrismaticJointDef.apply(this,arguments)}function za(){za.b2PulleyJoint.apply(this,arguments);this.constructor===za&&this.b2PulleyJoint.apply(this,arguments)}function Aa(){Aa.b2PulleyJointDef.apply(this,arguments);this.constructor===Aa&&this.b2PulleyJointDef.apply(this,arguments)}function Ba(){Ba.b2RevoluteJoint.apply(this,arguments);
this.constructor===Ba&&this.b2RevoluteJoint.apply(this,arguments)}function Ca(){Ca.b2RevoluteJointDef.apply(this,arguments);this.constructor===Ca&&this.b2RevoluteJointDef.apply(this,arguments)}function Da(){Da.b2WeldJoint.apply(this,arguments);this.constructor===Da&&this.b2WeldJoint.apply(this,arguments)}function Ea(){Ea.b2WeldJointDef.apply(this,arguments);this.constructor===Ea&&this.b2WeldJointDef.apply(this,arguments)}Box2D.Collision.IBroadPhase="Box2D.Collision.IBroadPhase";Box2D.Collision.b2AABB=
F;Box2D.Collision.b2Bound=G;Box2D.Collision.b2BoundValues=K;Box2D.Collision.b2Collision=y;Box2D.Collision.b2ContactID=w;Box2D.Collision.b2ContactPoint=A;Box2D.Collision.b2Distance=U;Box2D.Collision.b2DistanceInput=p;Box2D.Collision.b2DistanceOutput=B;Box2D.Collision.b2DistanceProxy=Q;Box2D.Collision.b2DynamicTree=V;Box2D.Collision.b2DynamicTreeBroadPhase=M;Box2D.Collision.b2DynamicTreeNode=L;Box2D.Collision.b2DynamicTreePair=I;Box2D.Collision.b2Manifold=W;Box2D.Collision.b2ManifoldPoint=Y;Box2D.Collision.b2Point=
k;Box2D.Collision.b2RayCastInput=z;Box2D.Collision.b2RayCastOutput=u;Box2D.Collision.b2Segment=D;Box2D.Collision.b2SeparationFunction=H;Box2D.Collision.b2Simplex=O;Box2D.Collision.b2SimplexCache=E;Box2D.Collision.b2SimplexVertex=R;Box2D.Collision.b2TimeOfImpact=N;Box2D.Collision.b2TOIInput=S;Box2D.Collision.b2WorldManifold=aa;Box2D.Collision.ClipVertex=Z;Box2D.Collision.Features=d;Box2D.Collision.Shapes.b2CircleShape=h;Box2D.Collision.Shapes.b2EdgeChainDef=l;Box2D.Collision.Shapes.b2EdgeShape=j;Box2D.Collision.Shapes.b2MassData=
o;Box2D.Collision.Shapes.b2PolygonShape=q;Box2D.Collision.Shapes.b2Shape=n;Box2D.Common.b2internal="Box2D.Common.b2internal";Box2D.Common.b2Color=a;Box2D.Common.b2Settings=c;Box2D.Common.Math.b2Mat22=g;Box2D.Common.Math.b2Mat33=b;Box2D.Common.Math.b2Math=e;Box2D.Common.Math.b2Sweep=f;Box2D.Common.Math.b2Transform=m;Box2D.Common.Math.b2Vec2=r;Box2D.Common.Math.b2Vec3=s;Box2D.Dynamics.b2Body=v;Box2D.Dynamics.b2BodyDef=t;Box2D.Dynamics.b2ContactFilter=x;Box2D.Dynamics.b2ContactImpulse=C;Box2D.Dynamics.b2ContactListener=
J;Box2D.Dynamics.b2ContactManager=T;Box2D.Dynamics.b2DebugDraw=P;Box2D.Dynamics.b2DestructionListener=X;Box2D.Dynamics.b2FilterData=$;Box2D.Dynamics.b2Fixture=ba;Box2D.Dynamics.b2FixtureDef=ca;Box2D.Dynamics.b2Island=da;Box2D.Dynamics.b2TimeStep=Fa;Box2D.Dynamics.b2World=ea;Box2D.Dynamics.Contacts.b2CircleContact=Ga;Box2D.Dynamics.Contacts.b2Contact=fa;Box2D.Dynamics.Contacts.b2ContactConstraint=ga;Box2D.Dynamics.Contacts.b2ContactConstraintPoint=Ha;Box2D.Dynamics.Contacts.b2ContactEdge=Ia;Box2D.Dynamics.Contacts.b2ContactFactory=
ha;Box2D.Dynamics.Contacts.b2ContactRegister=Ja;Box2D.Dynamics.Contacts.b2ContactResult=Ka;Box2D.Dynamics.Contacts.b2ContactSolver=ia;Box2D.Dynamics.Contacts.b2EdgeAndCircleContact=La;Box2D.Dynamics.Contacts.b2NullContact=ja;Box2D.Dynamics.Contacts.b2PolyAndCircleContact=Ma;Box2D.Dynamics.Contacts.b2PolyAndEdgeContact=Na;Box2D.Dynamics.Contacts.b2PolygonContact=Oa;Box2D.Dynamics.Contacts.b2PositionSolverManifold=ka;Box2D.Dynamics.Controllers.b2BuoyancyController=Pa;Box2D.Dynamics.Controllers.b2ConstantAccelController=
Qa;Box2D.Dynamics.Controllers.b2ConstantForceController=Ra;Box2D.Dynamics.Controllers.b2Controller=Sa;Box2D.Dynamics.Controllers.b2ControllerEdge=Ta;Box2D.Dynamics.Controllers.b2GravityController=Ua;Box2D.Dynamics.Controllers.b2TensorDampingController=Va;Box2D.Dynamics.Joints.b2DistanceJoint=la;Box2D.Dynamics.Joints.b2DistanceJointDef=ma;Box2D.Dynamics.Joints.b2FrictionJoint=na;Box2D.Dynamics.Joints.b2FrictionJointDef=oa;Box2D.Dynamics.Joints.b2GearJoint=pa;Box2D.Dynamics.Joints.b2GearJointDef=qa;
Box2D.Dynamics.Joints.b2Jacobian=Wa;Box2D.Dynamics.Joints.b2Joint=ra;Box2D.Dynamics.Joints.b2JointDef=sa;Box2D.Dynamics.Joints.b2JointEdge=Xa;Box2D.Dynamics.Joints.b2LineJoint=ta;Box2D.Dynamics.Joints.b2LineJointDef=ua;Box2D.Dynamics.Joints.b2MouseJoint=va;Box2D.Dynamics.Joints.b2MouseJointDef=wa;Box2D.Dynamics.Joints.b2PrismaticJoint=xa;Box2D.Dynamics.Joints.b2PrismaticJointDef=ya;Box2D.Dynamics.Joints.b2PulleyJoint=za;Box2D.Dynamics.Joints.b2PulleyJointDef=Aa;Box2D.Dynamics.Joints.b2RevoluteJoint=
Ba;Box2D.Dynamics.Joints.b2RevoluteJointDef=Ca;Box2D.Dynamics.Joints.b2WeldJoint=Da;Box2D.Dynamics.Joints.b2WeldJointDef=Ea})();Box2D.postDefs=[];
(function(){var F=Box2D.Collision.Shapes.b2CircleShape,G=Box2D.Collision.Shapes.b2PolygonShape,K=Box2D.Collision.Shapes.b2Shape,y=Box2D.Common.b2Settings,w=Box2D.Common.Math.b2Math,A=Box2D.Common.Math.b2Sweep,U=Box2D.Common.Math.b2Transform,p=Box2D.Common.Math.b2Vec2,B=Box2D.Collision.b2AABB,Q=Box2D.Collision.b2Bound,V=Box2D.Collision.b2BoundValues,M=Box2D.Collision.b2Collision,L=Box2D.Collision.b2ContactID,I=Box2D.Collision.b2ContactPoint,W=Box2D.Collision.b2Distance,Y=Box2D.Collision.b2DistanceInput,
k=Box2D.Collision.b2DistanceOutput,z=Box2D.Collision.b2DistanceProxy,u=Box2D.Collision.b2DynamicTree,D=Box2D.Collision.b2DynamicTreeBroadPhase,H=Box2D.Collision.b2DynamicTreeNode,O=Box2D.Collision.b2DynamicTreePair,E=Box2D.Collision.b2Manifold,R=Box2D.Collision.b2ManifoldPoint,N=Box2D.Collision.b2Point,S=Box2D.Collision.b2RayCastInput,aa=Box2D.Collision.b2RayCastOutput,Z=Box2D.Collision.b2Segment,d=Box2D.Collision.b2SeparationFunction,h=Box2D.Collision.b2Simplex,l=Box2D.Collision.b2SimplexCache,j=
Box2D.Collision.b2SimplexVertex,o=Box2D.Collision.b2TimeOfImpact,q=Box2D.Collision.b2TOIInput,n=Box2D.Collision.b2WorldManifold,a=Box2D.Collision.ClipVertex,c=Box2D.Collision.Features,g=Box2D.Collision.IBroadPhase;B.b2AABB=function(){this.lowerBound=new p;this.upperBound=new p};B.prototype.IsValid=function(){var b=this.upperBound.y-this.lowerBound.y;return b=(b=this.upperBound.x-this.lowerBound.x>=0&&b>=0)&&this.lowerBound.IsValid()&&this.upperBound.IsValid()};B.prototype.GetCenter=function(){return new p((this.lowerBound.x+
this.upperBound.x)/2,(this.lowerBound.y+this.upperBound.y)/2)};B.prototype.GetExtents=function(){return new p((this.upperBound.x-this.lowerBound.x)/2,(this.upperBound.y-this.lowerBound.y)/2)};B.prototype.Contains=function(b){var e=true;return e=(e=(e=(e=e&&this.lowerBound.x<=b.lowerBound.x)&&this.lowerBound.y<=b.lowerBound.y)&&b.upperBound.x<=this.upperBound.x)&&b.upperBound.y<=this.upperBound.y};B.prototype.RayCast=function(b,e){var f=-Number.MAX_VALUE,m=Number.MAX_VALUE,r=e.p1.x,s=e.p1.y,v=e.p2.x-
e.p1.x,t=e.p2.y-e.p1.y,x=Math.abs(t),C=b.normal,J=0,T=0,P=J=0;P=0;if(Math.abs(v)<Number.MIN_VALUE){if(r<this.lowerBound.x||this.upperBound.x<r)return false}else{J=1/v;T=(this.lowerBound.x-r)*J;J=(this.upperBound.x-r)*J;P=-1;if(T>J){P=T;T=J;J=P;P=1}if(T>f){C.x=P;C.y=0;f=T}m=Math.min(m,J);if(f>m)return false}if(x<Number.MIN_VALUE){if(s<this.lowerBound.y||this.upperBound.y<s)return false}else{J=1/t;T=(this.lowerBound.y-s)*J;J=(this.upperBound.y-s)*J;P=-1;if(T>J){P=T;T=J;J=P;P=1}if(T>f){C.y=P;C.x=0;f=
T}m=Math.min(m,J);if(f>m)return false}b.fraction=f;return true};B.prototype.TestOverlap=function(b){var e=b.lowerBound.y-this.upperBound.y,f=this.lowerBound.y-b.upperBound.y;if(b.lowerBound.x-this.upperBound.x>0||e>0)return false;if(this.lowerBound.x-b.upperBound.x>0||f>0)return false;return true};B.Combine=function(b,e){var f=new B;f.Combine(b,e);return f};B.prototype.Combine=function(b,e){this.lowerBound.x=Math.min(b.lowerBound.x,e.lowerBound.x);this.lowerBound.y=Math.min(b.lowerBound.y,e.lowerBound.y);
this.upperBound.x=Math.max(b.upperBound.x,e.upperBound.x);this.upperBound.y=Math.max(b.upperBound.y,e.upperBound.y)};Q.b2Bound=function(){};Q.prototype.IsLower=function(){return(this.value&1)==0};Q.prototype.IsUpper=function(){return(this.value&1)==1};Q.prototype.Swap=function(b){var e=this.value,f=this.proxy,m=this.stabbingCount;this.value=b.value;this.proxy=b.proxy;this.stabbingCount=b.stabbingCount;b.value=e;b.proxy=f;b.stabbingCount=m};V.b2BoundValues=function(){};V.prototype.b2BoundValues=function(){this.lowerValues=
new Vector_a2j_Number;this.lowerValues[0]=0;this.lowerValues[1]=0;this.upperValues=new Vector_a2j_Number;this.upperValues[0]=0;this.upperValues[1]=0};M.b2Collision=function(){};M.ClipSegmentToLine=function(b,e,f,m){if(m===undefined)m=0;var r,s=0;r=e[0];var v=r.v;r=e[1];var t=r.v,x=f.x*v.x+f.y*v.y-m;r=f.x*t.x+f.y*t.y-m;x<=0&&b[s++].Set(e[0]);r<=0&&b[s++].Set(e[1]);if(x*r<0){f=x/(x-r);r=b[s];r=r.v;r.x=v.x+f*(t.x-v.x);r.y=v.y+f*(t.y-v.y);r=b[s];r.id=(x>0?e[0]:e[1]).id;++s}return s};M.EdgeSeparation=
function(b,e,f,m,r){if(f===undefined)f=0;parseInt(b.m_vertexCount);var s=b.m_vertices;b=b.m_normals;var v=parseInt(m.m_vertexCount),t=m.m_vertices,x,C;x=e.R;C=b[f];b=x.col1.x*C.x+x.col2.x*C.y;m=x.col1.y*C.x+x.col2.y*C.y;x=r.R;var J=x.col1.x*b+x.col1.y*m;x=x.col2.x*b+x.col2.y*m;for(var T=0,P=Number.MAX_VALUE,X=0;X<v;++X){C=t[X];C=C.x*J+C.y*x;if(C<P){P=C;T=X}}C=s[f];x=e.R;f=e.position.x+(x.col1.x*C.x+x.col2.x*C.y);e=e.position.y+(x.col1.y*C.x+x.col2.y*C.y);C=t[T];x=r.R;s=r.position.x+(x.col1.x*C.x+
x.col2.x*C.y);r=r.position.y+(x.col1.y*C.x+x.col2.y*C.y);s-=f;r-=e;return s*b+r*m};M.FindMaxSeparation=function(b,e,f,m,r){var s=parseInt(e.m_vertexCount),v=e.m_normals,t,x;x=r.R;t=m.m_centroid;var C=r.position.x+(x.col1.x*t.x+x.col2.x*t.y),J=r.position.y+(x.col1.y*t.x+x.col2.y*t.y);x=f.R;t=e.m_centroid;C-=f.position.x+(x.col1.x*t.x+x.col2.x*t.y);J-=f.position.y+(x.col1.y*t.x+x.col2.y*t.y);x=C*f.R.col1.x+J*f.R.col1.y;J=C*f.R.col2.x+J*f.R.col2.y;C=0;for(var T=-Number.MAX_VALUE,P=0;P<s;++P){t=v[P];
t=t.x*x+t.y*J;if(t>T){T=t;C=P}}v=M.EdgeSeparation(e,f,C,m,r);t=parseInt(C-1>=0?C-1:s-1);x=M.EdgeSeparation(e,f,t,m,r);J=parseInt(C+1<s?C+1:0);T=M.EdgeSeparation(e,f,J,m,r);var X=P=0,$=0;if(x>v&&x>T){$=-1;P=t;X=x}else if(T>v){$=1;P=J;X=T}else{b[0]=C;return v}for(;;){C=$==-1?P-1>=0?P-1:s-1:P+1<s?P+1:0;v=M.EdgeSeparation(e,f,C,m,r);if(v>X){P=C;X=v}else break}b[0]=P;return X};M.FindIncidentEdge=function(b,e,f,m,r,s){if(m===undefined)m=0;parseInt(e.m_vertexCount);var v=e.m_normals,t=parseInt(r.m_vertexCount);
e=r.m_vertices;r=r.m_normals;var x;x=f.R;f=v[m];v=x.col1.x*f.x+x.col2.x*f.y;var C=x.col1.y*f.x+x.col2.y*f.y;x=s.R;f=x.col1.x*v+x.col1.y*C;C=x.col2.x*v+x.col2.y*C;v=f;x=0;for(var J=Number.MAX_VALUE,T=0;T<t;++T){f=r[T];f=v*f.x+C*f.y;if(f<J){J=f;x=T}}r=parseInt(x);v=parseInt(r+1<t?r+1:0);t=b[0];f=e[r];x=s.R;t.v.x=s.position.x+(x.col1.x*f.x+x.col2.x*f.y);t.v.y=s.position.y+(x.col1.y*f.x+x.col2.y*f.y);t.id.features.referenceEdge=m;t.id.features.incidentEdge=r;t.id.features.incidentVertex=0;t=b[1];f=e[v];
x=s.R;t.v.x=s.position.x+(x.col1.x*f.x+x.col2.x*f.y);t.v.y=s.position.y+(x.col1.y*f.x+x.col2.y*f.y);t.id.features.referenceEdge=m;t.id.features.incidentEdge=v;t.id.features.incidentVertex=1};M.MakeClipPointVector=function(){var b=new Vector(2);b[0]=new a;b[1]=new a;return b};M.CollidePolygons=function(b,e,f,m,r){var s;b.m_pointCount=0;var v=e.m_radius+m.m_radius;s=0;M.s_edgeAO[0]=s;var t=M.FindMaxSeparation(M.s_edgeAO,e,f,m,r);s=M.s_edgeAO[0];if(!(t>v)){var x=0;M.s_edgeBO[0]=x;var C=M.FindMaxSeparation(M.s_edgeBO,
m,r,e,f);x=M.s_edgeBO[0];if(!(C>v)){var J=0,T=0;if(C>0.98*t+0.0010){t=m;m=e;e=r;f=f;J=x;b.m_type=E.e_faceB;T=1}else{t=e;m=m;e=f;f=r;J=s;b.m_type=E.e_faceA;T=0}s=M.s_incidentEdge;M.FindIncidentEdge(s,t,e,J,m,f);x=parseInt(t.m_vertexCount);r=t.m_vertices;t=r[J];var P;P=J+1<x?r[parseInt(J+1)]:r[0];J=M.s_localTangent;J.Set(P.x-t.x,P.y-t.y);J.Normalize();r=M.s_localNormal;r.x=J.y;r.y=-J.x;m=M.s_planePoint;m.Set(0.5*(t.x+P.x),0.5*(t.y+P.y));C=M.s_tangent;x=e.R;C.x=x.col1.x*J.x+x.col2.x*J.y;C.y=x.col1.y*
J.x+x.col2.y*J.y;var X=M.s_tangent2;X.x=-C.x;X.y=-C.y;J=M.s_normal;J.x=C.y;J.y=-C.x;var $=M.s_v11,ba=M.s_v12;$.x=e.position.x+(x.col1.x*t.x+x.col2.x*t.y);$.y=e.position.y+(x.col1.y*t.x+x.col2.y*t.y);ba.x=e.position.x+(x.col1.x*P.x+x.col2.x*P.y);ba.y=e.position.y+(x.col1.y*P.x+x.col2.y*P.y);e=J.x*$.x+J.y*$.y;x=C.x*ba.x+C.y*ba.y+v;P=M.s_clipPoints1;t=M.s_clipPoints2;ba=0;ba=M.ClipSegmentToLine(P,s,X,-C.x*$.x-C.y*$.y+v);if(!(ba<2)){ba=M.ClipSegmentToLine(t,P,C,x);if(!(ba<2)){b.m_localPlaneNormal.SetV(r);
b.m_localPoint.SetV(m);for(m=r=0;m<y.b2_maxManifoldPoints;++m){s=t[m];if(J.x*s.v.x+J.y*s.v.y-e<=v){C=b.m_points[r];x=f.R;X=s.v.x-f.position.x;$=s.v.y-f.position.y;C.m_localPoint.x=X*x.col1.x+$*x.col1.y;C.m_localPoint.y=X*x.col2.x+$*x.col2.y;C.m_id.Set(s.id);C.m_id.features.flip=T;++r}}b.m_pointCount=r}}}}};M.CollideCircles=function(b,e,f,m,r){b.m_pointCount=0;var s,v;s=f.R;v=e.m_p;var t=f.position.x+(s.col1.x*v.x+s.col2.x*v.y);f=f.position.y+(s.col1.y*v.x+s.col2.y*v.y);s=r.R;v=m.m_p;t=r.position.x+
(s.col1.x*v.x+s.col2.x*v.y)-t;r=r.position.y+(s.col1.y*v.x+s.col2.y*v.y)-f;s=e.m_radius+m.m_radius;if(!(t*t+r*r>s*s)){b.m_type=E.e_circles;b.m_localPoint.SetV(e.m_p);b.m_localPlaneNormal.SetZero();b.m_pointCount=1;b.m_points[0].m_localPoint.SetV(m.m_p);b.m_points[0].m_id.key=0}};M.CollidePolygonAndCircle=function(b,e,f,m,r){var s=b.m_pointCount=0,v=0,t,x;x=r.R;t=m.m_p;var C=r.position.y+(x.col1.y*t.x+x.col2.y*t.y);s=r.position.x+(x.col1.x*t.x+x.col2.x*t.y)-f.position.x;v=C-f.position.y;x=f.R;f=s*
x.col1.x+v*x.col1.y;x=s*x.col2.x+v*x.col2.y;var J=0;C=-Number.MAX_VALUE;r=e.m_radius+m.m_radius;var T=parseInt(e.m_vertexCount),P=e.m_vertices;e=e.m_normals;for(var X=0;X<T;++X){t=P[X];s=f-t.x;v=x-t.y;t=e[X];s=t.x*s+t.y*v;if(s>r)return;if(s>C){C=s;J=X}}s=parseInt(J);v=parseInt(s+1<T?s+1:0);t=P[s];P=P[v];if(C<Number.MIN_VALUE){b.m_pointCount=1;b.m_type=E.e_faceA;b.m_localPlaneNormal.SetV(e[J]);b.m_localPoint.x=0.5*(t.x+P.x);b.m_localPoint.y=0.5*(t.y+P.y)}else{C=(f-P.x)*(t.x-P.x)+(x-P.y)*(t.y-P.y);
if((f-t.x)*(P.x-t.x)+(x-t.y)*(P.y-t.y)<=0){if((f-t.x)*(f-t.x)+(x-t.y)*(x-t.y)>r*r)return;b.m_pointCount=1;b.m_type=E.e_faceA;b.m_localPlaneNormal.x=f-t.x;b.m_localPlaneNormal.y=x-t.y;b.m_localPlaneNormal.Normalize();b.m_localPoint.SetV(t)}else if(C<=0){if((f-P.x)*(f-P.x)+(x-P.y)*(x-P.y)>r*r)return;b.m_pointCount=1;b.m_type=E.e_faceA;b.m_localPlaneNormal.x=f-P.x;b.m_localPlaneNormal.y=x-P.y;b.m_localPlaneNormal.Normalize();b.m_localPoint.SetV(P)}else{J=0.5*(t.x+P.x);t=0.5*(t.y+P.y);C=(f-J)*e[s].x+
(x-t)*e[s].y;if(C>r)return;b.m_pointCount=1;b.m_type=E.e_faceA;b.m_localPlaneNormal.x=e[s].x;b.m_localPlaneNormal.y=e[s].y;b.m_localPlaneNormal.Normalize();b.m_localPoint.Set(J,t)}}b.m_points[0].m_localPoint.SetV(m.m_p);b.m_points[0].m_id.key=0};M.TestOverlap=function(b,e){var f=e.lowerBound,m=b.upperBound,r=f.x-m.x,s=f.y-m.y;f=b.lowerBound;m=e.upperBound;var v=f.y-m.y;if(r>0||s>0)return false;if(f.x-m.x>0||v>0)return false;return true};Box2D.postDefs.push(function(){Box2D.Collision.b2Collision.s_incidentEdge=
M.MakeClipPointVector();Box2D.Collision.b2Collision.s_clipPoints1=M.MakeClipPointVector();Box2D.Collision.b2Collision.s_clipPoints2=M.MakeClipPointVector();Box2D.Collision.b2Collision.s_edgeAO=new Vector_a2j_Number(1);Box2D.Collision.b2Collision.s_edgeBO=new Vector_a2j_Number(1);Box2D.Collision.b2Collision.s_localTangent=new p;Box2D.Collision.b2Collision.s_localNormal=new p;Box2D.Collision.b2Collision.s_planePoint=new p;Box2D.Collision.b2Collision.s_normal=new p;Box2D.Collision.b2Collision.s_tangent=
new p;Box2D.Collision.b2Collision.s_tangent2=new p;Box2D.Collision.b2Collision.s_v11=new p;Box2D.Collision.b2Collision.s_v12=new p;Box2D.Collision.b2Collision.b2CollidePolyTempVec=new p;Box2D.Collision.b2Collision.b2_nullFeature=255});L.b2ContactID=function(){this.features=new c};L.prototype.b2ContactID=function(){this.features._m_id=this};L.prototype.Set=function(b){this.key=b._key};L.prototype.Copy=function(){var b=new L;b.key=this.key;return b};Object.defineProperty(L.prototype,"key",{enumerable:false,
configurable:true,get:function(){return this._key}});Object.defineProperty(L.prototype,"key",{enumerable:false,configurable:true,set:function(b){if(b===undefined)b=0;this._key=b;this.features._referenceEdge=this._key&255;this.features._incidentEdge=(this._key&65280)>>8&255;this.features._incidentVertex=(this._key&16711680)>>16&255;this.features._flip=(this._key&4278190080)>>24&255}});I.b2ContactPoint=function(){this.position=new p;this.velocity=new p;this.normal=new p;this.id=new L};W.b2Distance=
function(){};W.Distance=function(b,e,f){++W.b2_gjkCalls;var m=f.proxyA,r=f.proxyB,s=f.transformA,v=f.transformB,t=W.s_simplex;t.ReadCache(e,m,s,r,v);var x=t.m_vertices,C=W.s_saveA,J=W.s_saveB,T=0;t.GetClosestPoint().LengthSquared();for(var P=0,X,$=0;$<20;){T=t.m_count;for(P=0;P<T;P++){C[P]=x[P].indexA;J[P]=x[P].indexB}switch(t.m_count){case 1:break;case 2:t.Solve2();break;case 3:t.Solve3();break;default:y.b2Assert(false)}if(t.m_count==3)break;X=t.GetClosestPoint();X.LengthSquared();P=t.GetSearchDirection();
if(P.LengthSquared()<Number.MIN_VALUE*Number.MIN_VALUE)break;X=x[t.m_count];X.indexA=m.GetSupport(w.MulTMV(s.R,P.GetNegative()));X.wA=w.MulX(s,m.GetVertex(X.indexA));X.indexB=r.GetSupport(w.MulTMV(v.R,P));X.wB=w.MulX(v,r.GetVertex(X.indexB));X.w=w.SubtractVV(X.wB,X.wA);++$;++W.b2_gjkIters;var ba=false;for(P=0;P<T;P++)if(X.indexA==C[P]&&X.indexB==J[P]){ba=true;break}if(ba)break;++t.m_count}W.b2_gjkMaxIters=w.Max(W.b2_gjkMaxIters,$);t.GetWitnessPoints(b.pointA,b.pointB);b.distance=w.SubtractVV(b.pointA,
b.pointB).Length();b.iterations=$;t.WriteCache(e);if(f.useRadii){e=m.m_radius;r=r.m_radius;if(b.distance>e+r&&b.distance>Number.MIN_VALUE){b.distance-=e+r;f=w.SubtractVV(b.pointB,b.pointA);f.Normalize();b.pointA.x+=e*f.x;b.pointA.y+=e*f.y;b.pointB.x-=r*f.x;b.pointB.y-=r*f.y}else{X=new p;X.x=0.5*(b.pointA.x+b.pointB.x);X.y=0.5*(b.pointA.y+b.pointB.y);b.pointA.x=b.pointB.x=X.x;b.pointA.y=b.pointB.y=X.y;b.distance=0}}};Box2D.postDefs.push(function(){Box2D.Collision.b2Distance.s_simplex=new h;Box2D.Collision.b2Distance.s_saveA=
new Vector_a2j_Number(3);Box2D.Collision.b2Distance.s_saveB=new Vector_a2j_Number(3)});Y.b2DistanceInput=function(){};k.b2DistanceOutput=function(){this.pointA=new p;this.pointB=new p};z.b2DistanceProxy=function(){};z.prototype.Set=function(b){switch(b.GetType()){case K.e_circleShape:b=b instanceof F?b:null;this.m_vertices=new Vector(1,true);this.m_vertices[0]=b.m_p;this.m_count=1;this.m_radius=b.m_radius;break;case K.e_polygonShape:b=b instanceof G?b:null;this.m_vertices=b.m_vertices;this.m_count=
b.m_vertexCount;this.m_radius=b.m_radius;break;default:y.b2Assert(false)}};z.prototype.GetSupport=function(b){for(var e=0,f=this.m_vertices[0].x*b.x+this.m_vertices[0].y*b.y,m=1;m<this.m_count;++m){var r=this.m_vertices[m].x*b.x+this.m_vertices[m].y*b.y;if(r>f){e=m;f=r}}return e};z.prototype.GetSupportVertex=function(b){for(var e=0,f=this.m_vertices[0].x*b.x+this.m_vertices[0].y*b.y,m=1;m<this.m_count;++m){var r=this.m_vertices[m].x*b.x+this.m_vertices[m].y*b.y;if(r>f){e=m;f=r}}return this.m_vertices[e]};
z.prototype.GetVertexCount=function(){return this.m_count};z.prototype.GetVertex=function(b){if(b===undefined)b=0;y.b2Assert(0<=b&&b<this.m_count);return this.m_vertices[b]};u.b2DynamicTree=function(){};u.prototype.b2DynamicTree=function(){this.m_freeList=this.m_root=null;this.m_insertionCount=this.m_path=0};u.prototype.CreateProxy=function(b,e){var f=this.AllocateNode(),m=y.b2_aabbExtension,r=y.b2_aabbExtension;f.aabb.lowerBound.x=b.lowerBound.x-m;f.aabb.lowerBound.y=b.lowerBound.y-r;f.aabb.upperBound.x=
b.upperBound.x+m;f.aabb.upperBound.y=b.upperBound.y+r;f.userData=e;this.InsertLeaf(f);return f};u.prototype.DestroyProxy=function(b){this.RemoveLeaf(b);this.FreeNode(b)};u.prototype.MoveProxy=function(b,e,f){y.b2Assert(b.IsLeaf());if(b.aabb.Contains(e))return false;this.RemoveLeaf(b);var m=y.b2_aabbExtension+y.b2_aabbMultiplier*(f.x>0?f.x:-f.x);f=y.b2_aabbExtension+y.b2_aabbMultiplier*(f.y>0?f.y:-f.y);b.aabb.lowerBound.x=e.lowerBound.x-m;b.aabb.lowerBound.y=e.lowerBound.y-f;b.aabb.upperBound.x=e.upperBound.x+
m;b.aabb.upperBound.y=e.upperBound.y+f;this.InsertLeaf(b);return true};u.prototype.Rebalance=function(b){if(b===undefined)b=0;if(this.m_root!=null)for(var e=0;e<b;e++){for(var f=this.m_root,m=0;f.IsLeaf()==false;){f=this.m_path>>m&1?f.child2:f.child1;m=m+1&31}++this.m_path;this.RemoveLeaf(f);this.InsertLeaf(f)}};u.prototype.GetFatAABB=function(b){return b.aabb};u.prototype.GetUserData=function(b){return b.userData};u.prototype.Query=function(b,e){if(this.m_root!=null){var f=new Vector,m=0;for(f[m++]=
this.m_root;m>0;){var r=f[--m];if(r.aabb.TestOverlap(e))if(r.IsLeaf()){if(!b(r))break}else{f[m++]=r.child1;f[m++]=r.child2}}}};u.prototype.RayCast=function(b,e){if(this.m_root!=null){var f=e.p1,m=e.p2,r=w.SubtractVV(f,m);r.Normalize();r=w.CrossFV(1,r);var s=w.AbsV(r),v=e.maxFraction,t=new B,x=0,C=0;x=f.x+v*(m.x-f.x);C=f.y+v*(m.y-f.y);t.lowerBound.x=Math.min(f.x,x);t.lowerBound.y=Math.min(f.y,C);t.upperBound.x=Math.max(f.x,x);t.upperBound.y=Math.max(f.y,C);var J=new Vector,T=0;for(J[T++]=this.m_root;T>
0;){v=J[--T];if(v.aabb.TestOverlap(t)!=false){x=v.aabb.GetCenter();C=v.aabb.GetExtents();if(!(Math.abs(r.x*(f.x-x.x)+r.y*(f.y-x.y))-s.x*C.x-s.y*C.y>0))if(v.IsLeaf()){x=new S;x.p1=e.p1;x.p2=e.p2;x.maxFraction=e.maxFraction;v=b(x,v);if(v==0)break;if(v>0){x=f.x+v*(m.x-f.x);C=f.y+v*(m.y-f.y);t.lowerBound.x=Math.min(f.x,x);t.lowerBound.y=Math.min(f.y,C);t.upperBound.x=Math.max(f.x,x);t.upperBound.y=Math.max(f.y,C)}}else{J[T++]=v.child1;J[T++]=v.child2}}}}};u.prototype.AllocateNode=function(){if(this.m_freeList){var b=
this.m_freeList;this.m_freeList=b.parent;b.parent=null;b.child1=null;b.child2=null;return b}return new H};u.prototype.FreeNode=function(b){b.parent=this.m_freeList;this.m_freeList=b};u.prototype.InsertLeaf=function(b){++this.m_insertionCount;if(this.m_root==null){this.m_root=b;this.m_root.parent=null}else{var e=b.aabb.GetCenter(),f=this.m_root;if(f.IsLeaf()==false){do{var m=f.child1;f=f.child2;f=Math.abs((m.aabb.lowerBound.x+m.aabb.upperBound.x)/2-e.x)+Math.abs((m.aabb.lowerBound.y+m.aabb.upperBound.y)/
2-e.y)<Math.abs((f.aabb.lowerBound.x+f.aabb.upperBound.x)/2-e.x)+Math.abs((f.aabb.lowerBound.y+f.aabb.upperBound.y)/2-e.y)?m:f}while(f.IsLeaf()==false)}e=f.parent;m=this.AllocateNode();m.parent=e;m.userData=null;m.aabb.Combine(b.aabb,f.aabb);if(e){if(f.parent.child1==f)e.child1=m;else e.child2=m;m.child1=f;m.child2=b;f.parent=m;b.parent=m;do{if(e.aabb.Contains(m.aabb))break;e.aabb.Combine(e.child1.aabb,e.child2.aabb);m=e;e=e.parent}while(e)}else{m.child1=f;m.child2=b;f.parent=m;this.m_root=b.parent=
m}}};u.prototype.RemoveLeaf=function(b){if(b==this.m_root)this.m_root=null;else{var e=b.parent,f=e.parent;b=e.child1==b?e.child2:e.child1;if(f){if(f.child1==e)f.child1=b;else f.child2=b;b.parent=f;for(this.FreeNode(e);f;){e=f.aabb;f.aabb=B.Combine(f.child1.aabb,f.child2.aabb);if(e.Contains(f.aabb))break;f=f.parent}}else{this.m_root=b;b.parent=null;this.FreeNode(e)}}};D.b2DynamicTreeBroadPhase=function(){this.m_tree=new u;this.m_moveBuffer=new Vector;this.m_pairBuffer=new Vector;this.m_pairCount=0};
D.prototype.CreateProxy=function(b,e){var f=this.m_tree.CreateProxy(b,e);++this.m_proxyCount;this.BufferMove(f);return f};D.prototype.DestroyProxy=function(b){this.UnBufferMove(b);--this.m_proxyCount;this.m_tree.DestroyProxy(b)};D.prototype.MoveProxy=function(b,e,f){this.m_tree.MoveProxy(b,e,f)&&this.BufferMove(b)};D.prototype.TestOverlap=function(b,e){var f=this.m_tree.GetFatAABB(b),m=this.m_tree.GetFatAABB(e);return f.TestOverlap(m)};D.prototype.GetUserData=function(b){return this.m_tree.GetUserData(b)};
D.prototype.GetFatAABB=function(b){return this.m_tree.GetFatAABB(b)};D.prototype.GetProxyCount=function(){return this.m_proxyCount};D.prototype.UpdatePairs=function(b){var e=this;var f=e.m_pairCount=0,m;for(f=0;f<e.m_moveBuffer.length;++f){m=e.m_moveBuffer[f];var r=e.m_tree.GetFatAABB(m);e.m_tree.Query(function(t){if(t==m)return true;if(e.m_pairCount==e.m_pairBuffer.length)e.m_pairBuffer[e.m_pairCount]=new O;var x=e.m_pairBuffer[e.m_pairCount];x.proxyA=t<m?t:m;x.proxyB=t>=m?t:m;++e.m_pairCount;return true},
r)}for(f=e.m_moveBuffer.length=0;f<e.m_pairCount;){r=e.m_pairBuffer[f];var s=e.m_tree.GetUserData(r.proxyA),v=e.m_tree.GetUserData(r.proxyB);b(s,v);for(++f;f<e.m_pairCount;){s=e.m_pairBuffer[f];if(s.proxyA!=r.proxyA||s.proxyB!=r.proxyB)break;++f}}};D.prototype.Query=function(b,e){this.m_tree.Query(b,e)};D.prototype.RayCast=function(b,e){this.m_tree.RayCast(b,e)};D.prototype.Validate=function(){};D.prototype.Rebalance=function(b){if(b===undefined)b=0;this.m_tree.Rebalance(b)};D.prototype.BufferMove=
function(b){this.m_moveBuffer[this.m_moveBuffer.length]=b};D.prototype.UnBufferMove=function(b){this.m_moveBuffer.splice(parseInt(this.m_moveBuffer.indexOf(b)),1)};D.prototype.ComparePairs=function(){return 0};D.__implements={};D.__implements[g]=true;H.b2DynamicTreeNode=function(){this.aabb=new B};H.prototype.IsLeaf=function(){return this.child1==null};O.b2DynamicTreePair=function(){};E.b2Manifold=function(){this.m_pointCount=0};E.prototype.b2Manifold=function(){this.m_points=new Vector(y.b2_maxManifoldPoints);
for(var b=0;b<y.b2_maxManifoldPoints;b++)this.m_points[b]=new R;this.m_localPlaneNormal=new p;this.m_localPoint=new p};E.prototype.Reset=function(){for(var b=0;b<y.b2_maxManifoldPoints;b++)(this.m_points[b]instanceof R?this.m_points[b]:null).Reset();this.m_localPlaneNormal.SetZero();this.m_localPoint.SetZero();this.m_pointCount=this.m_type=0};E.prototype.Set=function(b){this.m_pointCount=b.m_pointCount;for(var e=0;e<y.b2_maxManifoldPoints;e++)(this.m_points[e]instanceof R?this.m_points[e]:null).Set(b.m_points[e]);
this.m_localPlaneNormal.SetV(b.m_localPlaneNormal);this.m_localPoint.SetV(b.m_localPoint);this.m_type=b.m_type};E.prototype.Copy=function(){var b=new E;b.Set(this);return b};Box2D.postDefs.push(function(){Box2D.Collision.b2Manifold.e_circles=1;Box2D.Collision.b2Manifold.e_faceA=2;Box2D.Collision.b2Manifold.e_faceB=4});R.b2ManifoldPoint=function(){this.m_localPoint=new p;this.m_id=new L};R.prototype.b2ManifoldPoint=function(){this.Reset()};R.prototype.Reset=function(){this.m_localPoint.SetZero();this.m_tangentImpulse=
this.m_normalImpulse=0;this.m_id.key=0};R.prototype.Set=function(b){this.m_localPoint.SetV(b.m_localPoint);this.m_normalImpulse=b.m_normalImpulse;this.m_tangentImpulse=b.m_tangentImpulse;this.m_id.Set(b.m_id)};N.b2Point=function(){this.p=new p};N.prototype.Support=function(){return this.p};N.prototype.GetFirstVertex=function(){return this.p};S.b2RayCastInput=function(){this.p1=new p;this.p2=new p};S.prototype.b2RayCastInput=function(b,e,f){if(b===undefined)b=null;if(e===undefined)e=null;if(f===undefined)f=
1;b&&this.p1.SetV(b);e&&this.p2.SetV(e);this.maxFraction=f};aa.b2RayCastOutput=function(){this.normal=new p};Z.b2Segment=function(){this.p1=new p;this.p2=new p};Z.prototype.TestSegment=function(b,e,f,m){if(m===undefined)m=0;var r=f.p1,s=f.p2.x-r.x,v=f.p2.y-r.y;f=this.p2.y-this.p1.y;var t=-(this.p2.x-this.p1.x),x=100*Number.MIN_VALUE,C=-(s*f+v*t);if(C>x){var J=r.x-this.p1.x,T=r.y-this.p1.y;r=J*f+T*t;if(0<=r&&r<=m*C){m=-s*T+v*J;if(-x*C<=m&&m<=C*(1+x)){r/=C;m=Math.sqrt(f*f+t*t);f/=m;t/=m;b[0]=r;e.Set(f,
t);return true}}}return false};Z.prototype.Extend=function(b){this.ExtendForward(b);this.ExtendBackward(b)};Z.prototype.ExtendForward=function(b){var e=this.p2.x-this.p1.x,f=this.p2.y-this.p1.y;b=Math.min(e>0?(b.upperBound.x-this.p1.x)/e:e<0?(b.lowerBound.x-this.p1.x)/e:Number.POSITIVE_INFINITY,f>0?(b.upperBound.y-this.p1.y)/f:f<0?(b.lowerBound.y-this.p1.y)/f:Number.POSITIVE_INFINITY);this.p2.x=this.p1.x+e*b;this.p2.y=this.p1.y+f*b};Z.prototype.ExtendBackward=function(b){var e=-this.p2.x+this.p1.x,
f=-this.p2.y+this.p1.y;b=Math.min(e>0?(b.upperBound.x-this.p2.x)/e:e<0?(b.lowerBound.x-this.p2.x)/e:Number.POSITIVE_INFINITY,f>0?(b.upperBound.y-this.p2.y)/f:f<0?(b.lowerBound.y-this.p2.y)/f:Number.POSITIVE_INFINITY);this.p1.x=this.p2.x+e*b;this.p1.y=this.p2.y+f*b};d.b2SeparationFunction=function(){this.m_localPoint=new p;this.m_axis=new p};d.prototype.Initialize=function(b,e,f,m,r){this.m_proxyA=e;this.m_proxyB=m;var s=parseInt(b.count);y.b2Assert(0<s&&s<3);var v,t,x,C,J=C=x=m=e=0,T=0;J=0;if(s==
1){this.m_type=d.e_points;v=this.m_proxyA.GetVertex(b.indexA[0]);t=this.m_proxyB.GetVertex(b.indexB[0]);s=v;b=f.R;e=f.position.x+(b.col1.x*s.x+b.col2.x*s.y);m=f.position.y+(b.col1.y*s.x+b.col2.y*s.y);s=t;b=r.R;x=r.position.x+(b.col1.x*s.x+b.col2.x*s.y);C=r.position.y+(b.col1.y*s.x+b.col2.y*s.y);this.m_axis.x=x-e;this.m_axis.y=C-m;this.m_axis.Normalize()}else{if(b.indexB[0]==b.indexB[1]){this.m_type=d.e_faceA;e=this.m_proxyA.GetVertex(b.indexA[0]);m=this.m_proxyA.GetVertex(b.indexA[1]);t=this.m_proxyB.GetVertex(b.indexB[0]);
this.m_localPoint.x=0.5*(e.x+m.x);this.m_localPoint.y=0.5*(e.y+m.y);this.m_axis=w.CrossVF(w.SubtractVV(m,e),1);this.m_axis.Normalize();s=this.m_axis;b=f.R;J=b.col1.x*s.x+b.col2.x*s.y;T=b.col1.y*s.x+b.col2.y*s.y;s=this.m_localPoint;b=f.R;e=f.position.x+(b.col1.x*s.x+b.col2.x*s.y);m=f.position.y+(b.col1.y*s.x+b.col2.y*s.y);s=t;b=r.R;x=r.position.x+(b.col1.x*s.x+b.col2.x*s.y);C=r.position.y+(b.col1.y*s.x+b.col2.y*s.y);J=(x-e)*J+(C-m)*T}else if(b.indexA[0]==b.indexA[0]){this.m_type=d.e_faceB;x=this.m_proxyB.GetVertex(b.indexB[0]);
C=this.m_proxyB.GetVertex(b.indexB[1]);v=this.m_proxyA.GetVertex(b.indexA[0]);this.m_localPoint.x=0.5*(x.x+C.x);this.m_localPoint.y=0.5*(x.y+C.y);this.m_axis=w.CrossVF(w.SubtractVV(C,x),1);this.m_axis.Normalize();s=this.m_axis;b=r.R;J=b.col1.x*s.x+b.col2.x*s.y;T=b.col1.y*s.x+b.col2.y*s.y;s=this.m_localPoint;b=r.R;x=r.position.x+(b.col1.x*s.x+b.col2.x*s.y);C=r.position.y+(b.col1.y*s.x+b.col2.y*s.y);s=v;b=f.R;e=f.position.x+(b.col1.x*s.x+b.col2.x*s.y);m=f.position.y+(b.col1.y*s.x+b.col2.y*s.y);J=(e-
x)*J+(m-C)*T}else{e=this.m_proxyA.GetVertex(b.indexA[0]);m=this.m_proxyA.GetVertex(b.indexA[1]);x=this.m_proxyB.GetVertex(b.indexB[0]);C=this.m_proxyB.GetVertex(b.indexB[1]);w.MulX(f,v);v=w.MulMV(f.R,w.SubtractVV(m,e));w.MulX(r,t);J=w.MulMV(r.R,w.SubtractVV(C,x));r=v.x*v.x+v.y*v.y;t=J.x*J.x+J.y*J.y;b=w.SubtractVV(J,v);f=v.x*b.x+v.y*b.y;b=J.x*b.x+J.y*b.y;v=v.x*J.x+v.y*J.y;T=r*t-v*v;J=0;if(T!=0)J=w.Clamp((v*b-f*t)/T,0,1);if((v*J+b)/t<0)J=w.Clamp((v-f)/r,0,1);v=new p;v.x=e.x+J*(m.x-e.x);v.y=e.y+J*(m.y-
e.y);t=new p;t.x=x.x+J*(C.x-x.x);t.y=x.y+J*(C.y-x.y);if(J==0||J==1){this.m_type=d.e_faceB;this.m_axis=w.CrossVF(w.SubtractVV(C,x),1);this.m_axis.Normalize();this.m_localPoint=t}else{this.m_type=d.e_faceA;this.m_axis=w.CrossVF(w.SubtractVV(m,e),1);this.m_localPoint=v}}J<0&&this.m_axis.NegativeSelf()}};d.prototype.Evaluate=function(b,e){var f,m,r=0;switch(this.m_type){case d.e_points:f=w.MulTMV(b.R,this.m_axis);m=w.MulTMV(e.R,this.m_axis.GetNegative());f=this.m_proxyA.GetSupportVertex(f);m=this.m_proxyB.GetSupportVertex(m);
f=w.MulX(b,f);m=w.MulX(e,m);return r=(m.x-f.x)*this.m_axis.x+(m.y-f.y)*this.m_axis.y;case d.e_faceA:r=w.MulMV(b.R,this.m_axis);f=w.MulX(b,this.m_localPoint);m=w.MulTMV(e.R,r.GetNegative());m=this.m_proxyB.GetSupportVertex(m);m=w.MulX(e,m);return r=(m.x-f.x)*r.x+(m.y-f.y)*r.y;case d.e_faceB:r=w.MulMV(e.R,this.m_axis);m=w.MulX(e,this.m_localPoint);f=w.MulTMV(b.R,r.GetNegative());f=this.m_proxyA.GetSupportVertex(f);f=w.MulX(b,f);return r=(f.x-m.x)*r.x+(f.y-m.y)*r.y;default:y.b2Assert(false);return 0}};
Box2D.postDefs.push(function(){Box2D.Collision.b2SeparationFunction.e_points=1;Box2D.Collision.b2SeparationFunction.e_faceA=2;Box2D.Collision.b2SeparationFunction.e_faceB=4});h.b2Simplex=function(){this.m_v1=new j;this.m_v2=new j;this.m_v3=new j;this.m_vertices=new Vector(3)};h.prototype.b2Simplex=function(){this.m_vertices[0]=this.m_v1;this.m_vertices[1]=this.m_v2;this.m_vertices[2]=this.m_v3};h.prototype.ReadCache=function(b,e,f,m,r){y.b2Assert(0<=b.count&&b.count<=3);var s,v;this.m_count=b.count;
for(var t=this.m_vertices,x=0;x<this.m_count;x++){var C=t[x];C.indexA=b.indexA[x];C.indexB=b.indexB[x];s=e.GetVertex(C.indexA);v=m.GetVertex(C.indexB);C.wA=w.MulX(f,s);C.wB=w.MulX(r,v);C.w=w.SubtractVV(C.wB,C.wA);C.a=0}if(this.m_count>1){b=b.metric;s=this.GetMetric();if(s<0.5*b||2*b<s||s<Number.MIN_VALUE)this.m_count=0}if(this.m_count==0){C=t[0];C.indexA=0;C.indexB=0;s=e.GetVertex(0);v=m.GetVertex(0);C.wA=w.MulX(f,s);C.wB=w.MulX(r,v);C.w=w.SubtractVV(C.wB,C.wA);this.m_count=1}};h.prototype.WriteCache=
function(b){b.metric=this.GetMetric();b.count=Box2D.parseUInt(this.m_count);for(var e=this.m_vertices,f=0;f<this.m_count;f++){b.indexA[f]=Box2D.parseUInt(e[f].indexA);b.indexB[f]=Box2D.parseUInt(e[f].indexB)}};h.prototype.GetSearchDirection=function(){switch(this.m_count){case 1:return this.m_v1.w.GetNegative();case 2:var b=w.SubtractVV(this.m_v2.w,this.m_v1.w);return w.CrossVV(b,this.m_v1.w.GetNegative())>0?w.CrossFV(1,b):w.CrossVF(b,1);default:y.b2Assert(false);return new p}};h.prototype.GetClosestPoint=
function(){switch(this.m_count){case 0:y.b2Assert(false);return new p;case 1:return this.m_v1.w;case 2:return new p(this.m_v1.a*this.m_v1.w.x+this.m_v2.a*this.m_v2.w.x,this.m_v1.a*this.m_v1.w.y+this.m_v2.a*this.m_v2.w.y);default:y.b2Assert(false);return new p}};h.prototype.GetWitnessPoints=function(b,e){switch(this.m_count){case 0:y.b2Assert(false);break;case 1:b.SetV(this.m_v1.wA);e.SetV(this.m_v1.wB);break;case 2:b.x=this.m_v1.a*this.m_v1.wA.x+this.m_v2.a*this.m_v2.wA.x;b.y=this.m_v1.a*this.m_v1.wA.y+
this.m_v2.a*this.m_v2.wA.y;e.x=this.m_v1.a*this.m_v1.wB.x+this.m_v2.a*this.m_v2.wB.x;e.y=this.m_v1.a*this.m_v1.wB.y+this.m_v2.a*this.m_v2.wB.y;break;case 3:e.x=b.x=this.m_v1.a*this.m_v1.wA.x+this.m_v2.a*this.m_v2.wA.x+this.m_v3.a*this.m_v3.wA.x;e.y=b.y=this.m_v1.a*this.m_v1.wA.y+this.m_v2.a*this.m_v2.wA.y+this.m_v3.a*this.m_v3.wA.y;break;default:y.b2Assert(false)}};h.prototype.GetMetric=function(){switch(this.m_count){case 0:y.b2Assert(false);return 0;case 1:return 0;case 2:return w.SubtractVV(this.m_v1.w,
this.m_v2.w).Length();case 3:return w.CrossVV(w.SubtractVV(this.m_v2.w,this.m_v1.w),w.SubtractVV(this.m_v3.w,this.m_v1.w));default:y.b2Assert(false);return 0}};h.prototype.Solve2=function(){var b=this.m_v1.w,e=this.m_v2.w,f=w.SubtractVV(e,b);b=-(b.x*f.x+b.y*f.y);if(b<=0)this.m_count=this.m_v1.a=1;else{e=e.x*f.x+e.y*f.y;if(e<=0){this.m_count=this.m_v2.a=1;this.m_v1.Set(this.m_v2)}else{f=1/(e+b);this.m_v1.a=e*f;this.m_v2.a=b*f;this.m_count=2}}};h.prototype.Solve3=function(){var b=this.m_v1.w,e=this.m_v2.w,
f=this.m_v3.w,m=w.SubtractVV(e,b),r=w.Dot(b,m),s=w.Dot(e,m);r=-r;var v=w.SubtractVV(f,b),t=w.Dot(b,v),x=w.Dot(f,v);t=-t;var C=w.SubtractVV(f,e),J=w.Dot(e,C);C=w.Dot(f,C);J=-J;v=w.CrossVV(m,v);m=v*w.CrossVV(e,f);f=v*w.CrossVV(f,b);b=v*w.CrossVV(b,e);if(r<=0&&t<=0)this.m_count=this.m_v1.a=1;else if(s>0&&r>0&&b<=0){x=1/(s+r);this.m_v1.a=s*x;this.m_v2.a=r*x;this.m_count=2}else if(x>0&&t>0&&f<=0){s=1/(x+t);this.m_v1.a=x*s;this.m_v3.a=t*s;this.m_count=2;this.m_v2.Set(this.m_v3)}else if(s<=0&&J<=0){this.m_count=
this.m_v2.a=1;this.m_v1.Set(this.m_v2)}else if(x<=0&&C<=0){this.m_count=this.m_v3.a=1;this.m_v1.Set(this.m_v3)}else if(C>0&&J>0&&m<=0){s=1/(C+J);this.m_v2.a=C*s;this.m_v3.a=J*s;this.m_count=2;this.m_v1.Set(this.m_v3)}else{s=1/(m+f+b);this.m_v1.a=m*s;this.m_v2.a=f*s;this.m_v3.a=b*s;this.m_count=3}};l.b2SimplexCache=function(){this.indexA=new Vector_a2j_Number(3);this.indexB=new Vector_a2j_Number(3)};j.b2SimplexVertex=function(){};j.prototype.Set=function(b){this.wA.SetV(b.wA);this.wB.SetV(b.wB);this.w.SetV(b.w);
this.a=b.a;this.indexA=b.indexA;this.indexB=b.indexB};o.b2TimeOfImpact=function(){};o.TimeOfImpact=function(b){++o.b2_toiCalls;var e=b.proxyA,f=b.proxyB,m=b.sweepA,r=b.sweepB;y.b2Assert(m.t0==r.t0);y.b2Assert(1-m.t0>Number.MIN_VALUE);var s=e.m_radius+f.m_radius;b=b.tolerance;var v=0,t=0,x=0;o.s_cache.count=0;for(o.s_distanceInput.useRadii=false;;){m.GetTransform(o.s_xfA,v);r.GetTransform(o.s_xfB,v);o.s_distanceInput.proxyA=e;o.s_distanceInput.proxyB=f;o.s_distanceInput.transformA=o.s_xfA;o.s_distanceInput.transformB=
o.s_xfB;W.Distance(o.s_distanceOutput,o.s_cache,o.s_distanceInput);if(o.s_distanceOutput.distance<=0){v=1;break}o.s_fcn.Initialize(o.s_cache,e,o.s_xfA,f,o.s_xfB);var C=o.s_fcn.Evaluate(o.s_xfA,o.s_xfB);if(C<=0){v=1;break}if(t==0)x=C>s?w.Max(s-b,0.75*s):w.Max(C-b,0.02*s);if(C-x<0.5*b){if(t==0){v=1;break}break}var J=v,T=v,P=1;C=C;m.GetTransform(o.s_xfA,P);r.GetTransform(o.s_xfB,P);var X=o.s_fcn.Evaluate(o.s_xfA,o.s_xfB);if(X>=x){v=1;break}for(var $=0;;){var ba=0;ba=$&1?T+(x-C)*(P-T)/(X-C):0.5*(T+P);
m.GetTransform(o.s_xfA,ba);r.GetTransform(o.s_xfB,ba);var ca=o.s_fcn.Evaluate(o.s_xfA,o.s_xfB);if(w.Abs(ca-x)<0.025*b){J=ba;break}if(ca>x){T=ba;C=ca}else{P=ba;X=ca}++$;++o.b2_toiRootIters;if($==50)break}o.b2_toiMaxRootIters=w.Max(o.b2_toiMaxRootIters,$);if(J<(1+100*Number.MIN_VALUE)*v)break;v=J;t++;++o.b2_toiIters;if(t==1E3)break}o.b2_toiMaxIters=w.Max(o.b2_toiMaxIters,t);return v};Box2D.postDefs.push(function(){Box2D.Collision.b2TimeOfImpact.b2_toiCalls=0;Box2D.Collision.b2TimeOfImpact.b2_toiIters=
0;Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters=0;Box2D.Collision.b2TimeOfImpact.b2_toiRootIters=0;Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters=0;Box2D.Collision.b2TimeOfImpact.s_cache=new l;Box2D.Collision.b2TimeOfImpact.s_distanceInput=new Y;Box2D.Collision.b2TimeOfImpact.s_xfA=new U;Box2D.Collision.b2TimeOfImpact.s_xfB=new U;Box2D.Collision.b2TimeOfImpact.s_fcn=new d;Box2D.Collision.b2TimeOfImpact.s_distanceOutput=new k});q.b2TOIInput=function(){this.proxyA=new z;this.proxyB=new z;this.sweepA=
new A;this.sweepB=new A};n.b2WorldManifold=function(){this.m_normal=new p};n.prototype.b2WorldManifold=function(){this.m_points=new Vector(y.b2_maxManifoldPoints);for(var b=0;b<y.b2_maxManifoldPoints;b++)this.m_points[b]=new p};n.prototype.Initialize=function(b,e,f,m,r){if(f===undefined)f=0;if(r===undefined)r=0;if(b.m_pointCount!=0){var s=0,v,t,x=0,C=0,J=0,T=0,P=0;v=0;switch(b.m_type){case E.e_circles:t=e.R;v=b.m_localPoint;s=e.position.x+t.col1.x*v.x+t.col2.x*v.y;e=e.position.y+t.col1.y*v.x+t.col2.y*
v.y;t=m.R;v=b.m_points[0].m_localPoint;b=m.position.x+t.col1.x*v.x+t.col2.x*v.y;m=m.position.y+t.col1.y*v.x+t.col2.y*v.y;v=b-s;t=m-e;x=v*v+t*t;if(x>Number.MIN_VALUE*Number.MIN_VALUE){x=Math.sqrt(x);this.m_normal.x=v/x;this.m_normal.y=t/x}else{this.m_normal.x=1;this.m_normal.y=0}v=e+f*this.m_normal.y;m=m-r*this.m_normal.y;this.m_points[0].x=0.5*(s+f*this.m_normal.x+(b-r*this.m_normal.x));this.m_points[0].y=0.5*(v+m);break;case E.e_faceA:t=e.R;v=b.m_localPlaneNormal;x=t.col1.x*v.x+t.col2.x*v.y;C=t.col1.y*
v.x+t.col2.y*v.y;t=e.R;v=b.m_localPoint;J=e.position.x+t.col1.x*v.x+t.col2.x*v.y;T=e.position.y+t.col1.y*v.x+t.col2.y*v.y;this.m_normal.x=x;this.m_normal.y=C;for(s=0;s<b.m_pointCount;s++){t=m.R;v=b.m_points[s].m_localPoint;P=m.position.x+t.col1.x*v.x+t.col2.x*v.y;v=m.position.y+t.col1.y*v.x+t.col2.y*v.y;this.m_points[s].x=P+0.5*(f-(P-J)*x-(v-T)*C-r)*x;this.m_points[s].y=v+0.5*(f-(P-J)*x-(v-T)*C-r)*C}break;case E.e_faceB:t=m.R;v=b.m_localPlaneNormal;x=t.col1.x*v.x+t.col2.x*v.y;C=t.col1.y*v.x+t.col2.y*
v.y;t=m.R;v=b.m_localPoint;J=m.position.x+t.col1.x*v.x+t.col2.x*v.y;T=m.position.y+t.col1.y*v.x+t.col2.y*v.y;this.m_normal.x=-x;this.m_normal.y=-C;for(s=0;s<b.m_pointCount;s++){t=e.R;v=b.m_points[s].m_localPoint;P=e.position.x+t.col1.x*v.x+t.col2.x*v.y;v=e.position.y+t.col1.y*v.x+t.col2.y*v.y;this.m_points[s].x=P+0.5*(r-(P-J)*x-(v-T)*C-f)*x;this.m_points[s].y=v+0.5*(r-(P-J)*x-(v-T)*C-f)*C}}}};a.ClipVertex=function(){this.v=new p;this.id=new L};a.prototype.Set=function(b){this.v.SetV(b.v);this.id.Set(b.id)};
c.Features=function(){};Object.defineProperty(c.prototype,"referenceEdge",{enumerable:false,configurable:true,get:function(){return this._referenceEdge}});Object.defineProperty(c.prototype,"referenceEdge",{enumerable:false,configurable:true,set:function(b){if(b===undefined)b=0;this._referenceEdge=b;this._m_id._key=this._m_id._key&4294967040|this._referenceEdge&255}});Object.defineProperty(c.prototype,"incidentEdge",{enumerable:false,configurable:true,get:function(){return this._incidentEdge}});Object.defineProperty(c.prototype,
"incidentEdge",{enumerable:false,configurable:true,set:function(b){if(b===undefined)b=0;this._incidentEdge=b;this._m_id._key=this._m_id._key&4294902015|this._incidentEdge<<8&65280}});Object.defineProperty(c.prototype,"incidentVertex",{enumerable:false,configurable:true,get:function(){return this._incidentVertex}});Object.defineProperty(c.prototype,"incidentVertex",{enumerable:false,configurable:true,set:function(b){if(b===undefined)b=0;this._incidentVertex=b;this._m_id._key=this._m_id._key&4278255615|
this._incidentVertex<<16&16711680}});Object.defineProperty(c.prototype,"flip",{enumerable:false,configurable:true,get:function(){return this._flip}});Object.defineProperty(c.prototype,"flip",{enumerable:false,configurable:true,set:function(b){if(b===undefined)b=0;this._flip=b;this._m_id._key=this._m_id._key&16777215|this._flip<<24&4278190080}})})();
(function(){var F=Box2D.Common.b2Settings,G=Box2D.Collision.Shapes.b2CircleShape,K=Box2D.Collision.Shapes.b2EdgeChainDef,y=Box2D.Collision.Shapes.b2EdgeShape,w=Box2D.Collision.Shapes.b2MassData,A=Box2D.Collision.Shapes.b2PolygonShape,U=Box2D.Collision.Shapes.b2Shape,p=Box2D.Common.Math.b2Mat22,B=Box2D.Common.Math.b2Math,Q=Box2D.Common.Math.b2Transform,V=Box2D.Common.Math.b2Vec2,M=Box2D.Collision.b2Distance,L=Box2D.Collision.b2DistanceInput,I=Box2D.Collision.b2DistanceOutput,W=Box2D.Collision.b2DistanceProxy,
Y=Box2D.Collision.b2SimplexCache;Box2D.inherit(G,Box2D.Collision.Shapes.b2Shape);G.prototype.__super=Box2D.Collision.Shapes.b2Shape.prototype;G.b2CircleShape=function(){Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this,arguments);this.m_p=new V};G.prototype.Copy=function(){var k=new G;k.Set(this);return k};G.prototype.Set=function(k){this.__super.Set.call(this,k);if(Box2D.is(k,G))this.m_p.SetV((k instanceof G?k:null).m_p)};G.prototype.TestPoint=function(k,z){var u=k.R,D=k.position.x+(u.col1.x*this.m_p.x+
u.col2.x*this.m_p.y);u=k.position.y+(u.col1.y*this.m_p.x+u.col2.y*this.m_p.y);D=z.x-D;u=z.y-u;return D*D+u*u<=this.m_radius*this.m_radius};G.prototype.RayCast=function(k,z,u){var D=u.R,H=z.p1.x-(u.position.x+(D.col1.x*this.m_p.x+D.col2.x*this.m_p.y));u=z.p1.y-(u.position.y+(D.col1.y*this.m_p.x+D.col2.y*this.m_p.y));D=z.p2.x-z.p1.x;var O=z.p2.y-z.p1.y,E=H*D+u*O,R=D*D+O*O,N=E*E-R*(H*H+u*u-this.m_radius*this.m_radius);if(N<0||R<Number.MIN_VALUE)return false;E=-(E+Math.sqrt(N));if(0<=E&&E<=z.maxFraction*
R){E/=R;k.fraction=E;k.normal.x=H+E*D;k.normal.y=u+E*O;k.normal.Normalize();return true}return false};G.prototype.ComputeAABB=function(k,z){var u=z.R,D=z.position.x+(u.col1.x*this.m_p.x+u.col2.x*this.m_p.y);u=z.position.y+(u.col1.y*this.m_p.x+u.col2.y*this.m_p.y);k.lowerBound.Set(D-this.m_radius,u-this.m_radius);k.upperBound.Set(D+this.m_radius,u+this.m_radius)};G.prototype.ComputeMass=function(k,z){if(z===undefined)z=0;k.mass=z*F.b2_pi*this.m_radius*this.m_radius;k.center.SetV(this.m_p);k.I=k.mass*
(0.5*this.m_radius*this.m_radius+(this.m_p.x*this.m_p.x+this.m_p.y*this.m_p.y))};G.prototype.ComputeSubmergedArea=function(k,z,u,D){if(z===undefined)z=0;u=B.MulX(u,this.m_p);var H=-(B.Dot(k,u)-z);if(H<-this.m_radius+Number.MIN_VALUE)return 0;if(H>this.m_radius){D.SetV(u);return Math.PI*this.m_radius*this.m_radius}z=this.m_radius*this.m_radius;var O=H*H;H=z*(Math.asin(H/this.m_radius)+Math.PI/2)+H*Math.sqrt(z-O);z=-2/3*Math.pow(z-O,1.5)/H;D.x=u.x+k.x*z;D.y=u.y+k.y*z;return H};G.prototype.GetLocalPosition=
function(){return this.m_p};G.prototype.SetLocalPosition=function(k){this.m_p.SetV(k)};G.prototype.GetRadius=function(){return this.m_radius};G.prototype.SetRadius=function(k){if(k===undefined)k=0;this.m_radius=k};G.prototype.b2CircleShape=function(k){if(k===undefined)k=0;this.__super.b2Shape.call(this);this.m_type=U.e_circleShape;this.m_radius=k};K.b2EdgeChainDef=function(){};K.prototype.b2EdgeChainDef=function(){this.vertexCount=0;this.isALoop=true;this.vertices=[]};Box2D.inherit(y,Box2D.Collision.Shapes.b2Shape);
y.prototype.__super=Box2D.Collision.Shapes.b2Shape.prototype;y.b2EdgeShape=function(){Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this,arguments);this.s_supportVec=new V;this.m_v1=new V;this.m_v2=new V;this.m_coreV1=new V;this.m_coreV2=new V;this.m_normal=new V;this.m_direction=new V;this.m_cornerDir1=new V;this.m_cornerDir2=new V};y.prototype.TestPoint=function(){return false};y.prototype.RayCast=function(k,z,u){var D,H=z.p2.x-z.p1.x,O=z.p2.y-z.p1.y;D=u.R;var E=u.position.x+(D.col1.x*this.m_v1.x+
D.col2.x*this.m_v1.y),R=u.position.y+(D.col1.y*this.m_v1.x+D.col2.y*this.m_v1.y),N=u.position.y+(D.col1.y*this.m_v2.x+D.col2.y*this.m_v2.y)-R;u=-(u.position.x+(D.col1.x*this.m_v2.x+D.col2.x*this.m_v2.y)-E);D=100*Number.MIN_VALUE;var S=-(H*N+O*u);if(S>D){E=z.p1.x-E;var aa=z.p1.y-R;R=E*N+aa*u;if(0<=R&&R<=z.maxFraction*S){z=-H*aa+O*E;if(-D*S<=z&&z<=S*(1+D)){R/=S;k.fraction=R;z=Math.sqrt(N*N+u*u);k.normal.x=N/z;k.normal.y=u/z;return true}}}return false};y.prototype.ComputeAABB=function(k,z){var u=z.R,
D=z.position.x+(u.col1.x*this.m_v1.x+u.col2.x*this.m_v1.y),H=z.position.y+(u.col1.y*this.m_v1.x+u.col2.y*this.m_v1.y),O=z.position.x+(u.col1.x*this.m_v2.x+u.col2.x*this.m_v2.y);u=z.position.y+(u.col1.y*this.m_v2.x+u.col2.y*this.m_v2.y);if(D<O){k.lowerBound.x=D;k.upperBound.x=O}else{k.lowerBound.x=O;k.upperBound.x=D}if(H<u){k.lowerBound.y=H;k.upperBound.y=u}else{k.lowerBound.y=u;k.upperBound.y=H}};y.prototype.ComputeMass=function(k){k.mass=0;k.center.SetV(this.m_v1);k.I=0};y.prototype.ComputeSubmergedArea=
function(k,z,u,D){if(z===undefined)z=0;var H=new V(k.x*z,k.y*z),O=B.MulX(u,this.m_v1);u=B.MulX(u,this.m_v2);var E=B.Dot(k,O)-z;k=B.Dot(k,u)-z;if(E>0)if(k>0)return 0;else{O.x=-k/(E-k)*O.x+E/(E-k)*u.x;O.y=-k/(E-k)*O.y+E/(E-k)*u.y}else if(k>0){u.x=-k/(E-k)*O.x+E/(E-k)*u.x;u.y=-k/(E-k)*O.y+E/(E-k)*u.y}D.x=(H.x+O.x+u.x)/3;D.y=(H.y+O.y+u.y)/3;return 0.5*((O.x-H.x)*(u.y-H.y)-(O.y-H.y)*(u.x-H.x))};y.prototype.GetLength=function(){return this.m_length};y.prototype.GetVertex1=function(){return this.m_v1};y.prototype.GetVertex2=
function(){return this.m_v2};y.prototype.GetCoreVertex1=function(){return this.m_coreV1};y.prototype.GetCoreVertex2=function(){return this.m_coreV2};y.prototype.GetNormalVector=function(){return this.m_normal};y.prototype.GetDirectionVector=function(){return this.m_direction};y.prototype.GetCorner1Vector=function(){return this.m_cornerDir1};y.prototype.GetCorner2Vector=function(){return this.m_cornerDir2};y.prototype.Corner1IsConvex=function(){return this.m_cornerConvex1};y.prototype.Corner2IsConvex=
function(){return this.m_cornerConvex2};y.prototype.GetFirstVertex=function(k){var z=k.R;return new V(k.position.x+(z.col1.x*this.m_coreV1.x+z.col2.x*this.m_coreV1.y),k.position.y+(z.col1.y*this.m_coreV1.x+z.col2.y*this.m_coreV1.y))};y.prototype.GetNextEdge=function(){return this.m_nextEdge};y.prototype.GetPrevEdge=function(){return this.m_prevEdge};y.prototype.Support=function(k,z,u){if(z===undefined)z=0;if(u===undefined)u=0;var D=k.R,H=k.position.x+(D.col1.x*this.m_coreV1.x+D.col2.x*this.m_coreV1.y),
O=k.position.y+(D.col1.y*this.m_coreV1.x+D.col2.y*this.m_coreV1.y),E=k.position.x+(D.col1.x*this.m_coreV2.x+D.col2.x*this.m_coreV2.y);k=k.position.y+(D.col1.y*this.m_coreV2.x+D.col2.y*this.m_coreV2.y);if(H*z+O*u>E*z+k*u){this.s_supportVec.x=H;this.s_supportVec.y=O}else{this.s_supportVec.x=E;this.s_supportVec.y=k}return this.s_supportVec};y.prototype.b2EdgeShape=function(k,z){this.__super.b2Shape.call(this);this.m_type=U.e_edgeShape;this.m_nextEdge=this.m_prevEdge=null;this.m_v1=k;this.m_v2=z;this.m_direction.Set(this.m_v2.x-
this.m_v1.x,this.m_v2.y-this.m_v1.y);this.m_length=this.m_direction.Normalize();this.m_normal.Set(this.m_direction.y,-this.m_direction.x);this.m_coreV1.Set(-F.b2_toiSlop*(this.m_normal.x-this.m_direction.x)+this.m_v1.x,-F.b2_toiSlop*(this.m_normal.y-this.m_direction.y)+this.m_v1.y);this.m_coreV2.Set(-F.b2_toiSlop*(this.m_normal.x+this.m_direction.x)+this.m_v2.x,-F.b2_toiSlop*(this.m_normal.y+this.m_direction.y)+this.m_v2.y);this.m_cornerDir1=this.m_normal;this.m_cornerDir2.Set(-this.m_normal.x,-this.m_normal.y)};
y.prototype.SetPrevEdge=function(k,z,u,D){this.m_prevEdge=k;this.m_coreV1=z;this.m_cornerDir1=u;this.m_cornerConvex1=D};y.prototype.SetNextEdge=function(k,z,u,D){this.m_nextEdge=k;this.m_coreV2=z;this.m_cornerDir2=u;this.m_cornerConvex2=D};w.b2MassData=function(){this.mass=0;this.center=new V(0,0);this.I=0};Box2D.inherit(A,Box2D.Collision.Shapes.b2Shape);A.prototype.__super=Box2D.Collision.Shapes.b2Shape.prototype;A.b2PolygonShape=function(){Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this,arguments)};
A.prototype.Copy=function(){var k=new A;k.Set(this);return k};A.prototype.Set=function(k){this.__super.Set.call(this,k);if(Box2D.is(k,A)){k=k instanceof A?k:null;this.m_centroid.SetV(k.m_centroid);this.m_vertexCount=k.m_vertexCount;this.Reserve(this.m_vertexCount);for(var z=0;z<this.m_vertexCount;z++){this.m_vertices[z].SetV(k.m_vertices[z]);this.m_normals[z].SetV(k.m_normals[z])}}};A.prototype.SetAsArray=function(k,z){if(z===undefined)z=0;var u=new Vector,D=0,H;for(D=0;D<k.length;++D){H=k[D];u.push(H)}this.SetAsVector(u,
z)};A.AsArray=function(k,z){if(z===undefined)z=0;var u=new A;u.SetAsArray(k,z);return u};A.prototype.SetAsVector=function(k,z){if(z===undefined)z=0;if(z==0)z=k.length;F.b2Assert(2<=z);this.m_vertexCount=z;this.Reserve(z);var u=0;for(u=0;u<this.m_vertexCount;u++)this.m_vertices[u].SetV(k[u]);for(u=0;u<this.m_vertexCount;++u){var D=parseInt(u),H=parseInt(u+1<this.m_vertexCount?u+1:0);D=B.SubtractVV(this.m_vertices[H],this.m_vertices[D]);F.b2Assert(D.LengthSquared()>Number.MIN_VALUE);this.m_normals[u].SetV(B.CrossVF(D,
1));this.m_normals[u].Normalize()}this.m_centroid=A.ComputeCentroid(this.m_vertices,this.m_vertexCount)};A.AsVector=function(k,z){if(z===undefined)z=0;var u=new A;u.SetAsVector(k,z);return u};A.prototype.SetAsBox=function(k,z){if(k===undefined)k=0;if(z===undefined)z=0;this.m_vertexCount=4;this.Reserve(4);this.m_vertices[0].Set(-k,-z);this.m_vertices[1].Set(k,-z);this.m_vertices[2].Set(k,z);this.m_vertices[3].Set(-k,z);this.m_normals[0].Set(0,-1);this.m_normals[1].Set(1,0);this.m_normals[2].Set(0,
1);this.m_normals[3].Set(-1,0);this.m_centroid.SetZero()};A.AsBox=function(k,z){if(k===undefined)k=0;if(z===undefined)z=0;var u=new A;u.SetAsBox(k,z);return u};A.prototype.SetAsOrientedBox=function(k,z,u,D){if(k===undefined)k=0;if(z===undefined)z=0;if(u===undefined)u=null;if(D===undefined)D=0;this.m_vertexCount=4;this.Reserve(4);this.m_vertices[0].Set(-k,-z);this.m_vertices[1].Set(k,-z);this.m_vertices[2].Set(k,z);this.m_vertices[3].Set(-k,z);this.m_normals[0].Set(0,-1);this.m_normals[1].Set(1,0);
this.m_normals[2].Set(0,1);this.m_normals[3].Set(-1,0);this.m_centroid=u;k=new Q;k.position=u;k.R.Set(D);for(u=0;u<this.m_vertexCount;++u){this.m_vertices[u]=B.MulX(k,this.m_vertices[u]);this.m_normals[u]=B.MulMV(k.R,this.m_normals[u])}};A.AsOrientedBox=function(k,z,u,D){if(k===undefined)k=0;if(z===undefined)z=0;if(u===undefined)u=null;if(D===undefined)D=0;var H=new A;H.SetAsOrientedBox(k,z,u,D);return H};A.prototype.SetAsEdge=function(k,z){this.m_vertexCount=2;this.Reserve(2);this.m_vertices[0].SetV(k);
this.m_vertices[1].SetV(z);this.m_centroid.x=0.5*(k.x+z.x);this.m_centroid.y=0.5*(k.y+z.y);this.m_normals[0]=B.CrossVF(B.SubtractVV(z,k),1);this.m_normals[0].Normalize();this.m_normals[1].x=-this.m_normals[0].x;this.m_normals[1].y=-this.m_normals[0].y};A.AsEdge=function(k,z){var u=new A;u.SetAsEdge(k,z);return u};A.prototype.TestPoint=function(k,z){var u;u=k.R;for(var D=z.x-k.position.x,H=z.y-k.position.y,O=D*u.col1.x+H*u.col1.y,E=D*u.col2.x+H*u.col2.y,R=0;R<this.m_vertexCount;++R){u=this.m_vertices[R];
D=O-u.x;H=E-u.y;u=this.m_normals[R];if(u.x*D+u.y*H>0)return false}return true};A.prototype.RayCast=function(k,z,u){var D=0,H=z.maxFraction,O=0,E=0,R,N;O=z.p1.x-u.position.x;E=z.p1.y-u.position.y;R=u.R;var S=O*R.col1.x+E*R.col1.y,aa=O*R.col2.x+E*R.col2.y;O=z.p2.x-u.position.x;E=z.p2.y-u.position.y;R=u.R;z=O*R.col1.x+E*R.col1.y-S;R=O*R.col2.x+E*R.col2.y-aa;for(var Z=parseInt(-1),d=0;d<this.m_vertexCount;++d){N=this.m_vertices[d];O=N.x-S;E=N.y-aa;N=this.m_normals[d];O=N.x*O+N.y*E;E=N.x*z+N.y*R;if(E==
0){if(O<0)return false}else if(E<0&&O<D*E){D=O/E;Z=d}else if(E>0&&O<H*E)H=O/E;if(H<D-Number.MIN_VALUE)return false}if(Z>=0){k.fraction=D;R=u.R;N=this.m_normals[Z];k.normal.x=R.col1.x*N.x+R.col2.x*N.y;k.normal.y=R.col1.y*N.x+R.col2.y*N.y;return true}return false};A.prototype.ComputeAABB=function(k,z){for(var u=z.R,D=this.m_vertices[0],H=z.position.x+(u.col1.x*D.x+u.col2.x*D.y),O=z.position.y+(u.col1.y*D.x+u.col2.y*D.y),E=H,R=O,N=1;N<this.m_vertexCount;++N){D=this.m_vertices[N];var S=z.position.x+(u.col1.x*
D.x+u.col2.x*D.y);D=z.position.y+(u.col1.y*D.x+u.col2.y*D.y);H=H<S?H:S;O=O<D?O:D;E=E>S?E:S;R=R>D?R:D}k.lowerBound.x=H-this.m_radius;k.lowerBound.y=O-this.m_radius;k.upperBound.x=E+this.m_radius;k.upperBound.y=R+this.m_radius};A.prototype.ComputeMass=function(k,z){if(z===undefined)z=0;if(this.m_vertexCount==2){k.center.x=0.5*(this.m_vertices[0].x+this.m_vertices[1].x);k.center.y=0.5*(this.m_vertices[0].y+this.m_vertices[1].y);k.mass=0;k.I=0}else{for(var u=0,D=0,H=0,O=0,E=1/3,R=0;R<this.m_vertexCount;++R){var N=
this.m_vertices[R],S=R+1<this.m_vertexCount?this.m_vertices[parseInt(R+1)]:this.m_vertices[0],aa=N.x-0,Z=N.y-0,d=S.x-0,h=S.y-0,l=aa*h-Z*d,j=0.5*l;H+=j;u+=j*E*(0+N.x+S.x);D+=j*E*(0+N.y+S.y);N=aa;Z=Z;d=d;h=h;O+=l*(E*(0.25*(N*N+d*N+d*d)+(0*N+0*d))+0+(E*(0.25*(Z*Z+h*Z+h*h)+(0*Z+0*h))+0))}k.mass=z*H;u*=1/H;D*=1/H;k.center.Set(u,D);k.I=z*O}};A.prototype.ComputeSubmergedArea=function(k,z,u,D){if(z===undefined)z=0;var H=B.MulTMV(u.R,k),O=z-B.Dot(k,u.position),E=new Vector_a2j_Number,R=0,N=parseInt(-1);z=
parseInt(-1);var S=false;for(k=k=0;k<this.m_vertexCount;++k){E[k]=B.Dot(H,this.m_vertices[k])-O;var aa=E[k]<-Number.MIN_VALUE;if(k>0)if(aa){if(!S){N=k-1;R++}}else if(S){z=k-1;R++}S=aa}switch(R){case 0:if(S){k=new w;this.ComputeMass(k,1);D.SetV(B.MulX(u,k.center));return k.mass}else return 0;case 1:if(N==-1)N=this.m_vertexCount-1;else z=this.m_vertexCount-1}k=parseInt((N+1)%this.m_vertexCount);H=parseInt((z+1)%this.m_vertexCount);O=(0-E[N])/(E[k]-E[N]);E=(0-E[z])/(E[H]-E[z]);N=new V(this.m_vertices[N].x*
(1-O)+this.m_vertices[k].x*O,this.m_vertices[N].y*(1-O)+this.m_vertices[k].y*O);z=new V(this.m_vertices[z].x*(1-E)+this.m_vertices[H].x*E,this.m_vertices[z].y*(1-E)+this.m_vertices[H].y*E);E=0;O=new V;R=this.m_vertices[k];for(k=k;k!=H;){k=(k+1)%this.m_vertexCount;S=k==H?z:this.m_vertices[k];aa=0.5*((R.x-N.x)*(S.y-N.y)-(R.y-N.y)*(S.x-N.x));E+=aa;O.x+=aa*(N.x+R.x+S.x)/3;O.y+=aa*(N.y+R.y+S.y)/3;R=S}O.Multiply(1/E);D.SetV(B.MulX(u,O));return E};A.prototype.GetVertexCount=function(){return this.m_vertexCount};
A.prototype.GetVertices=function(){return this.m_vertices};A.prototype.GetNormals=function(){return this.m_normals};A.prototype.GetSupport=function(k){for(var z=0,u=this.m_vertices[0].x*k.x+this.m_vertices[0].y*k.y,D=1;D<this.m_vertexCount;++D){var H=this.m_vertices[D].x*k.x+this.m_vertices[D].y*k.y;if(H>u){z=D;u=H}}return z};A.prototype.GetSupportVertex=function(k){for(var z=0,u=this.m_vertices[0].x*k.x+this.m_vertices[0].y*k.y,D=1;D<this.m_vertexCount;++D){var H=this.m_vertices[D].x*k.x+this.m_vertices[D].y*
k.y;if(H>u){z=D;u=H}}return this.m_vertices[z]};A.prototype.Validate=function(){return false};A.prototype.b2PolygonShape=function(){this.__super.b2Shape.call(this);this.m_type=U.e_polygonShape;this.m_centroid=new V;this.m_vertices=new Vector;this.m_normals=new Vector};A.prototype.Reserve=function(k){if(k===undefined)k=0;for(var z=parseInt(this.m_vertices.length);z<k;z++){this.m_vertices[z]=new V;this.m_normals[z]=new V}};A.ComputeCentroid=function(k,z){if(z===undefined)z=0;for(var u=new V,D=0,H=1/
3,O=0;O<z;++O){var E=k[O],R=O+1<z?k[parseInt(O+1)]:k[0],N=0.5*((E.x-0)*(R.y-0)-(E.y-0)*(R.x-0));D+=N;u.x+=N*H*(0+E.x+R.x);u.y+=N*H*(0+E.y+R.y)}u.x*=1/D;u.y*=1/D;return u};A.ComputeOBB=function(k,z,u){if(u===undefined)u=0;var D=0,H=new Vector(u+1);for(D=0;D<u;++D)H[D]=z[D];H[u]=H[0];z=Number.MAX_VALUE;for(D=1;D<=u;++D){var O=H[parseInt(D-1)],E=H[D].x-O.x,R=H[D].y-O.y,N=Math.sqrt(E*E+R*R);E/=N;R/=N;for(var S=-R,aa=E,Z=N=Number.MAX_VALUE,d=-Number.MAX_VALUE,h=-Number.MAX_VALUE,l=0;l<u;++l){var j=H[l].x-
O.x,o=H[l].y-O.y,q=E*j+R*o;j=S*j+aa*o;if(q<N)N=q;if(j<Z)Z=j;if(q>d)d=q;if(j>h)h=j}l=(d-N)*(h-Z);if(l<0.95*z){z=l;k.R.col1.x=E;k.R.col1.y=R;k.R.col2.x=S;k.R.col2.y=aa;E=0.5*(N+d);R=0.5*(Z+h);S=k.R;k.center.x=O.x+(S.col1.x*E+S.col2.x*R);k.center.y=O.y+(S.col1.y*E+S.col2.y*R);k.extents.x=0.5*(d-N);k.extents.y=0.5*(h-Z)}}};Box2D.postDefs.push(function(){Box2D.Collision.Shapes.b2PolygonShape.s_mat=new p});U.b2Shape=function(){};U.prototype.Copy=function(){return null};U.prototype.Set=function(k){this.m_radius=
k.m_radius};U.prototype.GetType=function(){return this.m_type};U.prototype.TestPoint=function(){return false};U.prototype.RayCast=function(){return false};U.prototype.ComputeAABB=function(){};U.prototype.ComputeMass=function(){};U.prototype.ComputeSubmergedArea=function(){return 0};U.TestOverlap=function(k,z,u,D){var H=new L;H.proxyA=new W;H.proxyA.Set(k);H.proxyB=new W;H.proxyB.Set(u);H.transformA=z;H.transformB=D;H.useRadii=true;k=new Y;k.count=0;z=new I;M.Distance(z,k,H);return z.distance<10*Number.MIN_VALUE};
U.prototype.b2Shape=function(){this.m_type=U.e_unknownShape;this.m_radius=F.b2_linearSlop};Box2D.postDefs.push(function(){Box2D.Collision.Shapes.b2Shape.e_unknownShape=parseInt(-1);Box2D.Collision.Shapes.b2Shape.e_circleShape=0;Box2D.Collision.Shapes.b2Shape.e_polygonShape=1;Box2D.Collision.Shapes.b2Shape.e_edgeShape=2;Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount=3;Box2D.Collision.Shapes.b2Shape.e_hitCollide=1;Box2D.Collision.Shapes.b2Shape.e_missCollide=0;Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide=
parseInt(-1)})})();
(function(){var F=Box2D.Common.b2Color,G=Box2D.Common.b2Settings,K=Box2D.Common.Math.b2Math;F.b2Color=function(){this._b=this._g=this._r=0};F.prototype.b2Color=function(y,w,A){if(y===undefined)y=0;if(w===undefined)w=0;if(A===undefined)A=0;this._r=Box2D.parseUInt(255*K.Clamp(y,0,1));this._g=Box2D.parseUInt(255*K.Clamp(w,0,1));this._b=Box2D.parseUInt(255*K.Clamp(A,0,1))};F.prototype.Set=function(y,w,A){if(y===undefined)y=0;if(w===undefined)w=0;if(A===undefined)A=0;this._r=Box2D.parseUInt(255*K.Clamp(y,
0,1));this._g=Box2D.parseUInt(255*K.Clamp(w,0,1));this._b=Box2D.parseUInt(255*K.Clamp(A,0,1))};Object.defineProperty(F.prototype,"r",{enumerable:false,configurable:true,set:function(y){if(y===undefined)y=0;this._r=Box2D.parseUInt(255*K.Clamp(y,0,1))}});Object.defineProperty(F.prototype,"g",{enumerable:false,configurable:true,set:function(y){if(y===undefined)y=0;this._g=Box2D.parseUInt(255*K.Clamp(y,0,1))}});Object.defineProperty(F.prototype,"b",{enumerable:false,configurable:true,set:function(y){if(y===
undefined)y=0;this._b=Box2D.parseUInt(255*K.Clamp(y,0,1))}});Object.defineProperty(F.prototype,"color",{enumerable:false,configurable:true,get:function(){return this._r<<16|this._g<<8|this._b}});G.b2Settings=function(){};G.b2MixFriction=function(y,w){if(y===undefined)y=0;if(w===undefined)w=0;return Math.sqrt(y*w)};G.b2MixRestitution=function(y,w){if(y===undefined)y=0;if(w===undefined)w=0;return y>w?y:w};G.b2Assert=function(y){if(!y)throw"Assertion Failed";};Box2D.postDefs.push(function(){Box2D.Common.b2Settings.VERSION=
"2.1alpha";Box2D.Common.b2Settings.USHRT_MAX=65535;Box2D.Common.b2Settings.b2_pi=Math.PI;Box2D.Common.b2Settings.b2_maxManifoldPoints=2;Box2D.Common.b2Settings.b2_aabbExtension=0.1;Box2D.Common.b2Settings.b2_aabbMultiplier=2;Box2D.Common.b2Settings.b2_polygonRadius=2*G.b2_linearSlop;Box2D.Common.b2Settings.b2_linearSlop=0.0050;Box2D.Common.b2Settings.b2_angularSlop=2/180*G.b2_pi;Box2D.Common.b2Settings.b2_toiSlop=8*G.b2_linearSlop;Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland=32;Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland=
32;Box2D.Common.b2Settings.b2_velocityThreshold=1;Box2D.Common.b2Settings.b2_maxLinearCorrection=0.2;Box2D.Common.b2Settings.b2_maxAngularCorrection=8/180*G.b2_pi;Box2D.Common.b2Settings.b2_maxTranslation=2;Box2D.Common.b2Settings.b2_maxTranslationSquared=G.b2_maxTranslation*G.b2_maxTranslation;Box2D.Common.b2Settings.b2_maxRotation=0.5*G.b2_pi;Box2D.Common.b2Settings.b2_maxRotationSquared=G.b2_maxRotation*G.b2_maxRotation;Box2D.Common.b2Settings.b2_contactBaumgarte=0.2;Box2D.Common.b2Settings.b2_timeToSleep=
0.5;Box2D.Common.b2Settings.b2_linearSleepTolerance=0.01;Box2D.Common.b2Settings.b2_angularSleepTolerance=2/180*G.b2_pi})})();
(function(){var F=Box2D.Common.Math.b2Mat22,G=Box2D.Common.Math.b2Mat33,K=Box2D.Common.Math.b2Math,y=Box2D.Common.Math.b2Sweep,w=Box2D.Common.Math.b2Transform,A=Box2D.Common.Math.b2Vec2,U=Box2D.Common.Math.b2Vec3;F.b2Mat22=function(){this.col1=new A;this.col2=new A};F.prototype.b2Mat22=function(){this.SetIdentity()};F.FromAngle=function(p){if(p===undefined)p=0;var B=new F;B.Set(p);return B};F.FromVV=function(p,B){var Q=new F;Q.SetVV(p,B);return Q};F.prototype.Set=function(p){if(p===undefined)p=0;
var B=Math.cos(p);p=Math.sin(p);this.col1.x=B;this.col2.x=-p;this.col1.y=p;this.col2.y=B};F.prototype.SetVV=function(p,B){this.col1.SetV(p);this.col2.SetV(B)};F.prototype.Copy=function(){var p=new F;p.SetM(this);return p};F.prototype.SetM=function(p){this.col1.SetV(p.col1);this.col2.SetV(p.col2)};F.prototype.AddM=function(p){this.col1.x+=p.col1.x;this.col1.y+=p.col1.y;this.col2.x+=p.col2.x;this.col2.y+=p.col2.y};F.prototype.SetIdentity=function(){this.col1.x=1;this.col2.x=0;this.col1.y=0;this.col2.y=
1};F.prototype.SetZero=function(){this.col1.x=0;this.col2.x=0;this.col1.y=0;this.col2.y=0};F.prototype.GetAngle=function(){return Math.atan2(this.col1.y,this.col1.x)};F.prototype.GetInverse=function(p){var B=this.col1.x,Q=this.col2.x,V=this.col1.y,M=this.col2.y,L=B*M-Q*V;if(L!=0)L=1/L;p.col1.x=L*M;p.col2.x=-L*Q;p.col1.y=-L*V;p.col2.y=L*B;return p};F.prototype.Solve=function(p,B,Q){if(B===undefined)B=0;if(Q===undefined)Q=0;var V=this.col1.x,M=this.col2.x,L=this.col1.y,I=this.col2.y,W=V*I-M*L;if(W!=
0)W=1/W;p.x=W*(I*B-M*Q);p.y=W*(V*Q-L*B);return p};F.prototype.Abs=function(){this.col1.Abs();this.col2.Abs()};G.b2Mat33=function(){this.col1=new U;this.col2=new U;this.col3=new U};G.prototype.b2Mat33=function(p,B,Q){if(p===undefined)p=null;if(B===undefined)B=null;if(Q===undefined)Q=null;if(!p&&!B&&!Q){this.col1.SetZero();this.col2.SetZero();this.col3.SetZero()}else{this.col1.SetV(p);this.col2.SetV(B);this.col3.SetV(Q)}};G.prototype.SetVVV=function(p,B,Q){this.col1.SetV(p);this.col2.SetV(B);this.col3.SetV(Q)};
G.prototype.Copy=function(){return new G(this.col1,this.col2,this.col3)};G.prototype.SetM=function(p){this.col1.SetV(p.col1);this.col2.SetV(p.col2);this.col3.SetV(p.col3)};G.prototype.AddM=function(p){this.col1.x+=p.col1.x;this.col1.y+=p.col1.y;this.col1.z+=p.col1.z;this.col2.x+=p.col2.x;this.col2.y+=p.col2.y;this.col2.z+=p.col2.z;this.col3.x+=p.col3.x;this.col3.y+=p.col3.y;this.col3.z+=p.col3.z};G.prototype.SetIdentity=function(){this.col1.x=1;this.col2.x=0;this.col3.x=0;this.col1.y=0;this.col2.y=
1;this.col3.y=0;this.col1.z=0;this.col2.z=0;this.col3.z=1};G.prototype.SetZero=function(){this.col1.x=0;this.col2.x=0;this.col3.x=0;this.col1.y=0;this.col2.y=0;this.col3.y=0;this.col1.z=0;this.col2.z=0;this.col3.z=0};G.prototype.Solve22=function(p,B,Q){if(B===undefined)B=0;if(Q===undefined)Q=0;var V=this.col1.x,M=this.col2.x,L=this.col1.y,I=this.col2.y,W=V*I-M*L;if(W!=0)W=1/W;p.x=W*(I*B-M*Q);p.y=W*(V*Q-L*B);return p};G.prototype.Solve33=function(p,B,Q,V){if(B===undefined)B=0;if(Q===undefined)Q=0;
if(V===undefined)V=0;var M=this.col1.x,L=this.col1.y,I=this.col1.z,W=this.col2.x,Y=this.col2.y,k=this.col2.z,z=this.col3.x,u=this.col3.y,D=this.col3.z,H=M*(Y*D-k*u)+L*(k*z-W*D)+I*(W*u-Y*z);if(H!=0)H=1/H;p.x=H*(B*(Y*D-k*u)+Q*(k*z-W*D)+V*(W*u-Y*z));p.y=H*(M*(Q*D-V*u)+L*(V*z-B*D)+I*(B*u-Q*z));p.z=H*(M*(Y*V-k*Q)+L*(k*B-W*V)+I*(W*Q-Y*B));return p};K.b2Math=function(){};K.IsValid=function(p){if(p===undefined)p=0;return isFinite(p)};K.Dot=function(p,B){return p.x*B.x+p.y*B.y};K.CrossVV=function(p,B){return p.x*
B.y-p.y*B.x};K.CrossVF=function(p,B){if(B===undefined)B=0;return new A(B*p.y,-B*p.x)};K.CrossFV=function(p,B){if(p===undefined)p=0;return new A(-p*B.y,p*B.x)};K.MulMV=function(p,B){return new A(p.col1.x*B.x+p.col2.x*B.y,p.col1.y*B.x+p.col2.y*B.y)};K.MulTMV=function(p,B){return new A(K.Dot(B,p.col1),K.Dot(B,p.col2))};K.MulX=function(p,B){var Q=K.MulMV(p.R,B);Q.x+=p.position.x;Q.y+=p.position.y;return Q};K.MulXT=function(p,B){var Q=K.SubtractVV(B,p.position),V=Q.x*p.R.col1.x+Q.y*p.R.col1.y;Q.y=Q.x*
p.R.col2.x+Q.y*p.R.col2.y;Q.x=V;return Q};K.AddVV=function(p,B){return new A(p.x+B.x,p.y+B.y)};K.SubtractVV=function(p,B){return new A(p.x-B.x,p.y-B.y)};K.Distance=function(p,B){var Q=p.x-B.x,V=p.y-B.y;return Math.sqrt(Q*Q+V*V)};K.DistanceSquared=function(p,B){var Q=p.x-B.x,V=p.y-B.y;return Q*Q+V*V};K.MulFV=function(p,B){if(p===undefined)p=0;return new A(p*B.x,p*B.y)};K.AddMM=function(p,B){return F.FromVV(K.AddVV(p.col1,B.col1),K.AddVV(p.col2,B.col2))};K.MulMM=function(p,B){return F.FromVV(K.MulMV(p,
B.col1),K.MulMV(p,B.col2))};K.MulTMM=function(p,B){var Q=new A(K.Dot(p.col1,B.col1),K.Dot(p.col2,B.col1)),V=new A(K.Dot(p.col1,B.col2),K.Dot(p.col2,B.col2));return F.FromVV(Q,V)};K.Abs=function(p){if(p===undefined)p=0;return p>0?p:-p};K.AbsV=function(p){return new A(K.Abs(p.x),K.Abs(p.y))};K.AbsM=function(p){return F.FromVV(K.AbsV(p.col1),K.AbsV(p.col2))};K.Min=function(p,B){if(p===undefined)p=0;if(B===undefined)B=0;return p<B?p:B};K.MinV=function(p,B){return new A(K.Min(p.x,B.x),K.Min(p.y,B.y))};
K.Max=function(p,B){if(p===undefined)p=0;if(B===undefined)B=0;return p>B?p:B};K.MaxV=function(p,B){return new A(K.Max(p.x,B.x),K.Max(p.y,B.y))};K.Clamp=function(p,B,Q){if(p===undefined)p=0;if(B===undefined)B=0;if(Q===undefined)Q=0;return p<B?B:p>Q?Q:p};K.ClampV=function(p,B,Q){return K.MaxV(B,K.MinV(p,Q))};K.Swap=function(p,B){var Q=p[0];p[0]=B[0];B[0]=Q};K.Random=function(){return Math.random()*2-1};K.RandomRange=function(p,B){if(p===undefined)p=0;if(B===undefined)B=0;var Q=Math.random();return Q=
(B-p)*Q+p};K.NextPowerOfTwo=function(p){if(p===undefined)p=0;p|=p>>1&2147483647;p|=p>>2&1073741823;p|=p>>4&268435455;p|=p>>8&16777215;p|=p>>16&65535;return p+1};K.IsPowerOfTwo=function(p){if(p===undefined)p=0;return p>0&&(p&p-1)==0};Box2D.postDefs.push(function(){Box2D.Common.Math.b2Math.b2Vec2_zero=new A(0,0);Box2D.Common.Math.b2Math.b2Mat22_identity=F.FromVV(new A(1,0),new A(0,1));Box2D.Common.Math.b2Math.b2Transform_identity=new w(K.b2Vec2_zero,K.b2Mat22_identity)});y.b2Sweep=function(){this.localCenter=
new A;this.c0=new A;this.c=new A};y.prototype.Set=function(p){this.localCenter.SetV(p.localCenter);this.c0.SetV(p.c0);this.c.SetV(p.c);this.a0=p.a0;this.a=p.a;this.t0=p.t0};y.prototype.Copy=function(){var p=new y;p.localCenter.SetV(this.localCenter);p.c0.SetV(this.c0);p.c.SetV(this.c);p.a0=this.a0;p.a=this.a;p.t0=this.t0;return p};y.prototype.GetTransform=function(p,B){if(B===undefined)B=0;p.position.x=(1-B)*this.c0.x+B*this.c.x;p.position.y=(1-B)*this.c0.y+B*this.c.y;p.R.Set((1-B)*this.a0+B*this.a);
var Q=p.R;p.position.x-=Q.col1.x*this.localCenter.x+Q.col2.x*this.localCenter.y;p.position.y-=Q.col1.y*this.localCenter.x+Q.col2.y*this.localCenter.y};y.prototype.Advance=function(p){if(p===undefined)p=0;if(this.t0<p&&1-this.t0>Number.MIN_VALUE){var B=(p-this.t0)/(1-this.t0);this.c0.x=(1-B)*this.c0.x+B*this.c.x;this.c0.y=(1-B)*this.c0.y+B*this.c.y;this.a0=(1-B)*this.a0+B*this.a;this.t0=p}};w.b2Transform=function(){this.position=new A;this.R=new F};w.prototype.b2Transform=function(p,B){if(p===undefined)p=
null;if(B===undefined)B=null;if(p){this.position.SetV(p);this.R.SetM(B)}};w.prototype.Initialize=function(p,B){this.position.SetV(p);this.R.SetM(B)};w.prototype.SetIdentity=function(){this.position.SetZero();this.R.SetIdentity()};w.prototype.Set=function(p){this.position.SetV(p.position);this.R.SetM(p.R)};w.prototype.GetAngle=function(){return Math.atan2(this.R.col1.y,this.R.col1.x)};A.b2Vec2=function(){};A.prototype.b2Vec2=function(p,B){if(p===undefined)p=0;if(B===undefined)B=0;this.x=p;this.y=B};
A.prototype.SetZero=function(){this.y=this.x=0};A.prototype.Set=function(p,B){if(p===undefined)p=0;if(B===undefined)B=0;this.x=p;this.y=B};A.prototype.SetV=function(p){this.x=p.x;this.y=p.y};A.prototype.GetNegative=function(){return new A(-this.x,-this.y)};A.prototype.NegativeSelf=function(){this.x=-this.x;this.y=-this.y};A.Make=function(p,B){if(p===undefined)p=0;if(B===undefined)B=0;return new A(p,B)};A.prototype.Copy=function(){return new A(this.x,this.y)};A.prototype.Add=function(p){this.x+=p.x;
this.y+=p.y};A.prototype.Subtract=function(p){this.x-=p.x;this.y-=p.y};A.prototype.Multiply=function(p){if(p===undefined)p=0;this.x*=p;this.y*=p};A.prototype.MulM=function(p){var B=this.x;this.x=p.col1.x*B+p.col2.x*this.y;this.y=p.col1.y*B+p.col2.y*this.y};A.prototype.MulTM=function(p){var B=K.Dot(this,p.col1);this.y=K.Dot(this,p.col2);this.x=B};A.prototype.CrossVF=function(p){if(p===undefined)p=0;var B=this.x;this.x=p*this.y;this.y=-p*B};A.prototype.CrossFV=function(p){if(p===undefined)p=0;var B=
this.x;this.x=-p*this.y;this.y=p*B};A.prototype.MinV=function(p){this.x=this.x<p.x?this.x:p.x;this.y=this.y<p.y?this.y:p.y};A.prototype.MaxV=function(p){this.x=this.x>p.x?this.x:p.x;this.y=this.y>p.y?this.y:p.y};A.prototype.Abs=function(){if(this.x<0)this.x=-this.x;if(this.y<0)this.y=-this.y};A.prototype.Length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)};A.prototype.LengthSquared=function(){return this.x*this.x+this.y*this.y};A.prototype.Normalize=function(){var p=Math.sqrt(this.x*this.x+
this.y*this.y);if(p<Number.MIN_VALUE)return 0;var B=1/p;this.x*=B;this.y*=B;return p};A.prototype.IsValid=function(){return K.IsValid(this.x)&&K.IsValid(this.y)};U.b2Vec3=function(){};U.prototype.b2Vec3=function(p,B,Q){if(p===undefined)p=0;if(B===undefined)B=0;if(Q===undefined)Q=0;this.x=p;this.y=B;this.z=Q};U.prototype.SetZero=function(){this.x=this.y=this.z=0};U.prototype.Set=function(p,B,Q){if(p===undefined)p=0;if(B===undefined)B=0;if(Q===undefined)Q=0;this.x=p;this.y=B;this.z=Q};U.prototype.SetV=
function(p){this.x=p.x;this.y=p.y;this.z=p.z};U.prototype.GetNegative=function(){return new U(-this.x,-this.y,-this.z)};U.prototype.NegativeSelf=function(){this.x=-this.x;this.y=-this.y;this.z=-this.z};U.prototype.Copy=function(){return new U(this.x,this.y,this.z)};U.prototype.Add=function(p){this.x+=p.x;this.y+=p.y;this.z+=p.z};U.prototype.Subtract=function(p){this.x-=p.x;this.y-=p.y;this.z-=p.z};U.prototype.Multiply=function(p){if(p===undefined)p=0;this.x*=p;this.y*=p;this.z*=p}})();
(function(){var F=Box2D.Common.Math.b2Math,G=Box2D.Common.Math.b2Sweep,K=Box2D.Common.Math.b2Transform,y=Box2D.Common.Math.b2Vec2,w=Box2D.Common.b2Color,A=Box2D.Common.b2Settings,U=Box2D.Collision.b2AABB,p=Box2D.Collision.b2ContactPoint,B=Box2D.Collision.b2DynamicTreeBroadPhase,Q=Box2D.Collision.b2RayCastInput,V=Box2D.Collision.b2RayCastOutput,M=Box2D.Collision.Shapes.b2CircleShape,L=Box2D.Collision.Shapes.b2EdgeShape,I=Box2D.Collision.Shapes.b2MassData,W=Box2D.Collision.Shapes.b2PolygonShape,Y=Box2D.Collision.Shapes.b2Shape,
k=Box2D.Dynamics.b2Body,z=Box2D.Dynamics.b2BodyDef,u=Box2D.Dynamics.b2ContactFilter,D=Box2D.Dynamics.b2ContactImpulse,H=Box2D.Dynamics.b2ContactListener,O=Box2D.Dynamics.b2ContactManager,E=Box2D.Dynamics.b2DebugDraw,R=Box2D.Dynamics.b2DestructionListener,N=Box2D.Dynamics.b2FilterData,S=Box2D.Dynamics.b2Fixture,aa=Box2D.Dynamics.b2FixtureDef,Z=Box2D.Dynamics.b2Island,d=Box2D.Dynamics.b2TimeStep,h=Box2D.Dynamics.b2World,l=Box2D.Dynamics.Contacts.b2Contact,j=Box2D.Dynamics.Contacts.b2ContactFactory,
o=Box2D.Dynamics.Contacts.b2ContactSolver,q=Box2D.Dynamics.Joints.b2Joint,n=Box2D.Dynamics.Joints.b2PulleyJoint;k.b2Body=function(){this.m_xf=new K;this.m_sweep=new G;this.m_linearVelocity=new y;this.m_force=new y};k.prototype.connectEdges=function(a,c,g){if(g===undefined)g=0;var b=Math.atan2(c.GetDirectionVector().y,c.GetDirectionVector().x);g=F.MulFV(Math.tan((b-g)*0.5),c.GetDirectionVector());g=F.SubtractVV(g,c.GetNormalVector());g=F.MulFV(A.b2_toiSlop,g);g=F.AddVV(g,c.GetVertex1());var e=F.AddVV(a.GetDirectionVector(),
c.GetDirectionVector());e.Normalize();var f=F.Dot(a.GetDirectionVector(),c.GetNormalVector())>0;a.SetNextEdge(c,g,e,f);c.SetPrevEdge(a,g,e,f);return b};k.prototype.CreateFixture=function(a){if(this.m_world.IsLocked()==true)return null;var c=new S;c.Create(this,this.m_xf,a);this.m_flags&k.e_activeFlag&&c.CreateProxy(this.m_world.m_contactManager.m_broadPhase,this.m_xf);c.m_next=this.m_fixtureList;this.m_fixtureList=c;++this.m_fixtureCount;c.m_body=this;c.m_density>0&&this.ResetMassData();this.m_world.m_flags|=
h.e_newFixture;return c};k.prototype.CreateFixture2=function(a,c){if(c===undefined)c=0;var g=new aa;g.shape=a;g.density=c;return this.CreateFixture(g)};k.prototype.DestroyFixture=function(a){if(this.m_world.IsLocked()!=true){for(var c=this.m_fixtureList,g=null;c!=null;){if(c==a){if(g)g.m_next=a.m_next;else this.m_fixtureList=a.m_next;break}g=c;c=c.m_next}for(c=this.m_contactList;c;){g=c.contact;c=c.next;var b=g.GetFixtureA(),e=g.GetFixtureB();if(a==b||a==e)this.m_world.m_contactManager.Destroy(g)}this.m_flags&
k.e_activeFlag&&a.DestroyProxy(this.m_world.m_contactManager.m_broadPhase);a.Destroy();a.m_body=null;a.m_next=null;--this.m_fixtureCount;this.ResetMassData()}};k.prototype.SetPositionAndAngle=function(a,c){if(c===undefined)c=0;var g;if(this.m_world.IsLocked()!=true){this.m_xf.R.Set(c);this.m_xf.position.SetV(a);g=this.m_xf.R;var b=this.m_sweep.localCenter;this.m_sweep.c.x=g.col1.x*b.x+g.col2.x*b.y;this.m_sweep.c.y=g.col1.y*b.x+g.col2.y*b.y;this.m_sweep.c.x+=this.m_xf.position.x;this.m_sweep.c.y+=
this.m_xf.position.y;this.m_sweep.c0.SetV(this.m_sweep.c);this.m_sweep.a0=this.m_sweep.a=c;b=this.m_world.m_contactManager.m_broadPhase;for(g=this.m_fixtureList;g;g=g.m_next)g.Synchronize(b,this.m_xf,this.m_xf);this.m_world.m_contactManager.FindNewContacts()}};k.prototype.SetTransform=function(a){this.SetPositionAndAngle(a.position,a.GetAngle())};k.prototype.GetTransform=function(){return this.m_xf};k.prototype.GetPosition=function(){return this.m_xf.position};k.prototype.SetPosition=function(a){this.SetPositionAndAngle(a,
this.GetAngle())};k.prototype.GetAngle=function(){return this.m_sweep.a};k.prototype.SetAngle=function(a){if(a===undefined)a=0;this.SetPositionAndAngle(this.GetPosition(),a)};k.prototype.GetWorldCenter=function(){return this.m_sweep.c};k.prototype.GetLocalCenter=function(){return this.m_sweep.localCenter};k.prototype.SetLinearVelocity=function(a){this.m_type!=k.b2_staticBody&&this.m_linearVelocity.SetV(a)};k.prototype.GetLinearVelocity=function(){return this.m_linearVelocity};k.prototype.SetAngularVelocity=
function(a){if(a===undefined)a=0;if(this.m_type!=k.b2_staticBody)this.m_angularVelocity=a};k.prototype.GetAngularVelocity=function(){return this.m_angularVelocity};k.prototype.GetDefinition=function(){var a=new z;a.type=this.GetType();a.allowSleep=(this.m_flags&k.e_allowSleepFlag)==k.e_allowSleepFlag;a.angle=this.GetAngle();a.angularDamping=this.m_angularDamping;a.angularVelocity=this.m_angularVelocity;a.fixedRotation=(this.m_flags&k.e_fixedRotationFlag)==k.e_fixedRotationFlag;a.bullet=(this.m_flags&
k.e_bulletFlag)==k.e_bulletFlag;a.awake=(this.m_flags&k.e_awakeFlag)==k.e_awakeFlag;a.linearDamping=this.m_linearDamping;a.linearVelocity.SetV(this.GetLinearVelocity());a.position=this.GetPosition();a.userData=this.GetUserData();return a};k.prototype.ApplyForce=function(a,c){if(this.m_type==k.b2_dynamicBody){this.IsAwake()==false&&this.SetAwake(true);this.m_force.x+=a.x;this.m_force.y+=a.y;this.m_torque+=(c.x-this.m_sweep.c.x)*a.y-(c.y-this.m_sweep.c.y)*a.x}};k.prototype.ApplyTorque=function(a){if(a===
undefined)a=0;if(this.m_type==k.b2_dynamicBody){this.IsAwake()==false&&this.SetAwake(true);this.m_torque+=a}};k.prototype.ApplyImpulse=function(a,c){if(this.m_type==k.b2_dynamicBody){this.IsAwake()==false&&this.SetAwake(true);this.m_linearVelocity.x+=this.m_invMass*a.x;this.m_linearVelocity.y+=this.m_invMass*a.y;this.m_angularVelocity+=this.m_invI*((c.x-this.m_sweep.c.x)*a.y-(c.y-this.m_sweep.c.y)*a.x)}};k.prototype.Split=function(a){for(var c=this.GetLinearVelocity().Copy(),g=this.GetAngularVelocity(),
b=this.GetWorldCenter(),e=this.m_world.CreateBody(this.GetDefinition()),f,m=this.m_fixtureList;m;)if(a(m)){var r=m.m_next;if(f)f.m_next=r;else this.m_fixtureList=r;this.m_fixtureCount--;m.m_next=e.m_fixtureList;e.m_fixtureList=m;e.m_fixtureCount++;m.m_body=e;m=r}else{f=m;m=m.m_next}this.ResetMassData();e.ResetMassData();f=this.GetWorldCenter();a=e.GetWorldCenter();f=F.AddVV(c,F.CrossFV(g,F.SubtractVV(f,b)));c=F.AddVV(c,F.CrossFV(g,F.SubtractVV(a,b)));this.SetLinearVelocity(f);e.SetLinearVelocity(c);
this.SetAngularVelocity(g);e.SetAngularVelocity(g);this.SynchronizeFixtures();e.SynchronizeFixtures();return e};k.prototype.Merge=function(a){var c;for(c=a.m_fixtureList;c;){var g=c.m_next;a.m_fixtureCount--;c.m_next=this.m_fixtureList;this.m_fixtureList=c;this.m_fixtureCount++;c.m_body=e;c=g}b.m_fixtureCount=0;var b=this,e=a;b.GetWorldCenter();e.GetWorldCenter();b.GetLinearVelocity().Copy();e.GetLinearVelocity().Copy();b.GetAngularVelocity();e.GetAngularVelocity();b.ResetMassData();this.SynchronizeFixtures()};
k.prototype.GetMass=function(){return this.m_mass};k.prototype.GetInertia=function(){return this.m_I};k.prototype.GetMassData=function(a){a.mass=this.m_mass;a.I=this.m_I;a.center.SetV(this.m_sweep.localCenter)};k.prototype.SetMassData=function(a){A.b2Assert(this.m_world.IsLocked()==false);if(this.m_world.IsLocked()!=true)if(this.m_type==k.b2_dynamicBody){this.m_invI=this.m_I=this.m_invMass=0;this.m_mass=a.mass;if(this.m_mass<=0)this.m_mass=1;this.m_invMass=1/this.m_mass;if(a.I>0&&(this.m_flags&k.e_fixedRotationFlag)==
0){this.m_I=a.I-this.m_mass*(a.center.x*a.center.x+a.center.y*a.center.y);this.m_invI=1/this.m_I}var c=this.m_sweep.c.Copy();this.m_sweep.localCenter.SetV(a.center);this.m_sweep.c0.SetV(F.MulX(this.m_xf,this.m_sweep.localCenter));this.m_sweep.c.SetV(this.m_sweep.c0);this.m_linearVelocity.x+=this.m_angularVelocity*-(this.m_sweep.c.y-c.y);this.m_linearVelocity.y+=this.m_angularVelocity*+(this.m_sweep.c.x-c.x)}};k.prototype.ResetMassData=function(){this.m_invI=this.m_I=this.m_invMass=this.m_mass=0;this.m_sweep.localCenter.SetZero();
if(!(this.m_type==k.b2_staticBody||this.m_type==k.b2_kinematicBody)){for(var a=y.Make(0,0),c=this.m_fixtureList;c;c=c.m_next)if(c.m_density!=0){var g=c.GetMassData();this.m_mass+=g.mass;a.x+=g.center.x*g.mass;a.y+=g.center.y*g.mass;this.m_I+=g.I}if(this.m_mass>0){this.m_invMass=1/this.m_mass;a.x*=this.m_invMass;a.y*=this.m_invMass}else this.m_invMass=this.m_mass=1;if(this.m_I>0&&(this.m_flags&k.e_fixedRotationFlag)==0){this.m_I-=this.m_mass*(a.x*a.x+a.y*a.y);this.m_I*=this.m_inertiaScale;A.b2Assert(this.m_I>
0);this.m_invI=1/this.m_I}else this.m_invI=this.m_I=0;c=this.m_sweep.c.Copy();this.m_sweep.localCenter.SetV(a);this.m_sweep.c0.SetV(F.MulX(this.m_xf,this.m_sweep.localCenter));this.m_sweep.c.SetV(this.m_sweep.c0);this.m_linearVelocity.x+=this.m_angularVelocity*-(this.m_sweep.c.y-c.y);this.m_linearVelocity.y+=this.m_angularVelocity*+(this.m_sweep.c.x-c.x)}};k.prototype.GetWorldPoint=function(a){var c=this.m_xf.R;a=new y(c.col1.x*a.x+c.col2.x*a.y,c.col1.y*a.x+c.col2.y*a.y);a.x+=this.m_xf.position.x;
a.y+=this.m_xf.position.y;return a};k.prototype.GetWorldVector=function(a){return F.MulMV(this.m_xf.R,a)};k.prototype.GetLocalPoint=function(a){return F.MulXT(this.m_xf,a)};k.prototype.GetLocalVector=function(a){return F.MulTMV(this.m_xf.R,a)};k.prototype.GetLinearVelocityFromWorldPoint=function(a){return new y(this.m_linearVelocity.x-this.m_angularVelocity*(a.y-this.m_sweep.c.y),this.m_linearVelocity.y+this.m_angularVelocity*(a.x-this.m_sweep.c.x))};k.prototype.GetLinearVelocityFromLocalPoint=function(a){var c=
this.m_xf.R;a=new y(c.col1.x*a.x+c.col2.x*a.y,c.col1.y*a.x+c.col2.y*a.y);a.x+=this.m_xf.position.x;a.y+=this.m_xf.position.y;return new y(this.m_linearVelocity.x-this.m_angularVelocity*(a.y-this.m_sweep.c.y),this.m_linearVelocity.y+this.m_angularVelocity*(a.x-this.m_sweep.c.x))};k.prototype.GetLinearDamping=function(){return this.m_linearDamping};k.prototype.SetLinearDamping=function(a){if(a===undefined)a=0;this.m_linearDamping=a};k.prototype.GetAngularDamping=function(){return this.m_angularDamping};
k.prototype.SetAngularDamping=function(a){if(a===undefined)a=0;this.m_angularDamping=a};k.prototype.SetType=function(a){if(a===undefined)a=0;if(this.m_type!=a){this.m_type=a;this.ResetMassData();if(this.m_type==k.b2_staticBody){this.m_linearVelocity.SetZero();this.m_angularVelocity=0}this.SetAwake(true);this.m_force.SetZero();this.m_torque=0;for(a=this.m_contactList;a;a=a.next)a.contact.FlagForFiltering()}};k.prototype.GetType=function(){return this.m_type};k.prototype.SetBullet=function(a){if(a)this.m_flags|=
k.e_bulletFlag;else this.m_flags&=~k.e_bulletFlag};k.prototype.IsBullet=function(){return(this.m_flags&k.e_bulletFlag)==k.e_bulletFlag};k.prototype.SetSleepingAllowed=function(a){if(a)this.m_flags|=k.e_allowSleepFlag;else{this.m_flags&=~k.e_allowSleepFlag;this.SetAwake(true)}};k.prototype.SetAwake=function(a){if(a){this.m_flags|=k.e_awakeFlag;this.m_sleepTime=0}else{this.m_flags&=~k.e_awakeFlag;this.m_sleepTime=0;this.m_linearVelocity.SetZero();this.m_angularVelocity=0;this.m_force.SetZero();this.m_torque=
0}};k.prototype.IsAwake=function(){return(this.m_flags&k.e_awakeFlag)==k.e_awakeFlag};k.prototype.SetFixedRotation=function(a){if(a)this.m_flags|=k.e_fixedRotationFlag;else this.m_flags&=~k.e_fixedRotationFlag;this.ResetMassData()};k.prototype.IsFixedRotation=function(){return(this.m_flags&k.e_fixedRotationFlag)==k.e_fixedRotationFlag};k.prototype.SetActive=function(a){if(a!=this.IsActive()){var c;if(a){this.m_flags|=k.e_activeFlag;a=this.m_world.m_contactManager.m_broadPhase;for(c=this.m_fixtureList;c;c=
c.m_next)c.CreateProxy(a,this.m_xf)}else{this.m_flags&=~k.e_activeFlag;a=this.m_world.m_contactManager.m_broadPhase;for(c=this.m_fixtureList;c;c=c.m_next)c.DestroyProxy(a);for(a=this.m_contactList;a;){c=a;a=a.next;this.m_world.m_contactManager.Destroy(c.contact)}this.m_contactList=null}}};k.prototype.IsActive=function(){return(this.m_flags&k.e_activeFlag)==k.e_activeFlag};k.prototype.IsSleepingAllowed=function(){return(this.m_flags&k.e_allowSleepFlag)==k.e_allowSleepFlag};k.prototype.GetFixtureList=
function(){return this.m_fixtureList};k.prototype.GetJointList=function(){return this.m_jointList};k.prototype.GetControllerList=function(){return this.m_controllerList};k.prototype.GetContactList=function(){return this.m_contactList};k.prototype.GetNext=function(){return this.m_next};k.prototype.GetUserData=function(){return this.m_userData};k.prototype.SetUserData=function(a){this.m_userData=a};k.prototype.GetWorld=function(){return this.m_world};k.prototype.b2Body=function(a,c){this.m_flags=0;
if(a.bullet)this.m_flags|=k.e_bulletFlag;if(a.fixedRotation)this.m_flags|=k.e_fixedRotationFlag;if(a.allowSleep)this.m_flags|=k.e_allowSleepFlag;if(a.awake)this.m_flags|=k.e_awakeFlag;if(a.active)this.m_flags|=k.e_activeFlag;this.m_world=c;this.m_xf.position.SetV(a.position);this.m_xf.R.Set(a.angle);this.m_sweep.localCenter.SetZero();this.m_sweep.t0=1;this.m_sweep.a0=this.m_sweep.a=a.angle;var g=this.m_xf.R,b=this.m_sweep.localCenter;this.m_sweep.c.x=g.col1.x*b.x+g.col2.x*b.y;this.m_sweep.c.y=g.col1.y*
b.x+g.col2.y*b.y;this.m_sweep.c.x+=this.m_xf.position.x;this.m_sweep.c.y+=this.m_xf.position.y;this.m_sweep.c0.SetV(this.m_sweep.c);this.m_contactList=this.m_controllerList=this.m_jointList=null;this.m_controllerCount=0;this.m_next=this.m_prev=null;this.m_linearVelocity.SetV(a.linearVelocity);this.m_angularVelocity=a.angularVelocity;this.m_linearDamping=a.linearDamping;this.m_angularDamping=a.angularDamping;this.m_force.Set(0,0);this.m_sleepTime=this.m_torque=0;this.m_type=a.type;if(this.m_type==
k.b2_dynamicBody)this.m_invMass=this.m_mass=1;else this.m_invMass=this.m_mass=0;this.m_invI=this.m_I=0;this.m_inertiaScale=a.inertiaScale;this.m_userData=a.userData;this.m_fixtureList=null;this.m_fixtureCount=0};k.prototype.SynchronizeFixtures=function(){var a=k.s_xf1;a.R.Set(this.m_sweep.a0);var c=a.R,g=this.m_sweep.localCenter;a.position.x=this.m_sweep.c0.x-(c.col1.x*g.x+c.col2.x*g.y);a.position.y=this.m_sweep.c0.y-(c.col1.y*g.x+c.col2.y*g.y);g=this.m_world.m_contactManager.m_broadPhase;for(c=this.m_fixtureList;c;c=
c.m_next)c.Synchronize(g,a,this.m_xf)};k.prototype.SynchronizeTransform=function(){this.m_xf.R.Set(this.m_sweep.a);var a=this.m_xf.R,c=this.m_sweep.localCenter;this.m_xf.position.x=this.m_sweep.c.x-(a.col1.x*c.x+a.col2.x*c.y);this.m_xf.position.y=this.m_sweep.c.y-(a.col1.y*c.x+a.col2.y*c.y)};k.prototype.ShouldCollide=function(a){if(this.m_type!=k.b2_dynamicBody&&a.m_type!=k.b2_dynamicBody)return false;for(var c=this.m_jointList;c;c=c.next)if(c.other==a)if(c.joint.m_collideConnected==false)return false;
return true};k.prototype.Advance=function(a){if(a===undefined)a=0;this.m_sweep.Advance(a);this.m_sweep.c.SetV(this.m_sweep.c0);this.m_sweep.a=this.m_sweep.a0;this.SynchronizeTransform()};Box2D.postDefs.push(function(){Box2D.Dynamics.b2Body.s_xf1=new K;Box2D.Dynamics.b2Body.e_islandFlag=1;Box2D.Dynamics.b2Body.e_awakeFlag=2;Box2D.Dynamics.b2Body.e_allowSleepFlag=4;Box2D.Dynamics.b2Body.e_bulletFlag=8;Box2D.Dynamics.b2Body.e_fixedRotationFlag=16;Box2D.Dynamics.b2Body.e_activeFlag=32;Box2D.Dynamics.b2Body.b2_staticBody=
0;Box2D.Dynamics.b2Body.b2_kinematicBody=1;Box2D.Dynamics.b2Body.b2_dynamicBody=2});z.b2BodyDef=function(){this.position=new y;this.linearVelocity=new y};z.prototype.b2BodyDef=function(){this.userData=null;this.position.Set(0,0);this.angle=0;this.linearVelocity.Set(0,0);this.angularDamping=this.linearDamping=this.angularVelocity=0;this.awake=this.allowSleep=true;this.bullet=this.fixedRotation=false;this.type=k.b2_staticBody;this.active=true;this.inertiaScale=1};u.b2ContactFilter=function(){};u.prototype.ShouldCollide=
function(a,c){var g=a.GetFilterData(),b=c.GetFilterData();if(g.groupIndex==b.groupIndex&&g.groupIndex!=0)return g.groupIndex>0;return(g.maskBits&b.categoryBits)!=0&&(g.categoryBits&b.maskBits)!=0};u.prototype.RayCollide=function(a,c){if(!a)return true;return this.ShouldCollide(a instanceof S?a:null,c)};Box2D.postDefs.push(function(){Box2D.Dynamics.b2ContactFilter.b2_defaultFilter=new u});D.b2ContactImpulse=function(){this.normalImpulses=new Vector_a2j_Number(A.b2_maxManifoldPoints);this.tangentImpulses=
new Vector_a2j_Number(A.b2_maxManifoldPoints)};H.b2ContactListener=function(){};H.prototype.BeginContact=function(){};H.prototype.EndContact=function(){};H.prototype.PreSolve=function(){};H.prototype.PostSolve=function(){};Box2D.postDefs.push(function(){Box2D.Dynamics.b2ContactListener.b2_defaultListener=new H});O.b2ContactManager=function(){};O.prototype.b2ContactManager=function(){this.m_world=null;this.m_contactCount=0;this.m_contactFilter=u.b2_defaultFilter;this.m_contactListener=H.b2_defaultListener;
this.m_contactFactory=new j(this.m_allocator);this.m_broadPhase=new B};O.prototype.AddPair=function(a,c){var g=a instanceof S?a:null,b=c instanceof S?c:null,e=g.GetBody(),f=b.GetBody();if(e!=f){for(var m=f.GetContactList();m;){if(m.other==e){var r=m.contact.GetFixtureA(),s=m.contact.GetFixtureB();if(r==g&&s==b)return;if(r==b&&s==g)return}m=m.next}if(f.ShouldCollide(e)!=false)if(this.m_contactFilter.ShouldCollide(g,b)!=false){m=this.m_contactFactory.Create(g,b);g=m.GetFixtureA();b=m.GetFixtureB();
e=g.m_body;f=b.m_body;m.m_prev=null;m.m_next=this.m_world.m_contactList;if(this.m_world.m_contactList!=null)this.m_world.m_contactList.m_prev=m;this.m_world.m_contactList=m;m.m_nodeA.contact=m;m.m_nodeA.other=f;m.m_nodeA.prev=null;m.m_nodeA.next=e.m_contactList;if(e.m_contactList!=null)e.m_contactList.prev=m.m_nodeA;e.m_contactList=m.m_nodeA;m.m_nodeB.contact=m;m.m_nodeB.other=e;m.m_nodeB.prev=null;m.m_nodeB.next=f.m_contactList;if(f.m_contactList!=null)f.m_contactList.prev=m.m_nodeB;f.m_contactList=
m.m_nodeB;++this.m_world.m_contactCount}}};O.prototype.FindNewContacts=function(){this.m_broadPhase.UpdatePairs(Box2D.generateCallback(this,this.AddPair))};O.prototype.Destroy=function(a){var c=a.GetFixtureA(),g=a.GetFixtureB();c=c.GetBody();g=g.GetBody();a.IsTouching()&&this.m_contactListener.EndContact(a);if(a.m_prev)a.m_prev.m_next=a.m_next;if(a.m_next)a.m_next.m_prev=a.m_prev;if(a==this.m_world.m_contactList)this.m_world.m_contactList=a.m_next;if(a.m_nodeA.prev)a.m_nodeA.prev.next=a.m_nodeA.next;
if(a.m_nodeA.next)a.m_nodeA.next.prev=a.m_nodeA.prev;if(a.m_nodeA==c.m_contactList)c.m_contactList=a.m_nodeA.next;if(a.m_nodeB.prev)a.m_nodeB.prev.next=a.m_nodeB.next;if(a.m_nodeB.next)a.m_nodeB.next.prev=a.m_nodeB.prev;if(a.m_nodeB==g.m_contactList)g.m_contactList=a.m_nodeB.next;this.m_contactFactory.Destroy(a);--this.m_contactCount};O.prototype.Collide=function(){for(var a=this.m_world.m_contactList;a;){var c=a.GetFixtureA(),g=a.GetFixtureB(),b=c.GetBody(),e=g.GetBody();if(b.IsAwake()==false&&e.IsAwake()==
false)a=a.GetNext();else{if(a.m_flags&l.e_filterFlag){if(e.ShouldCollide(b)==false){c=a;a=c.GetNext();this.Destroy(c);continue}if(this.m_contactFilter.ShouldCollide(c,g)==false){c=a;a=c.GetNext();this.Destroy(c);continue}a.m_flags&=~l.e_filterFlag}if(this.m_broadPhase.TestOverlap(c.m_proxy,g.m_proxy)==false){c=a;a=c.GetNext();this.Destroy(c)}else{a.Update(this.m_contactListener);a=a.GetNext()}}}};Box2D.postDefs.push(function(){Box2D.Dynamics.b2ContactManager.s_evalCP=new p});E.b2DebugDraw=function(){};
E.prototype.b2DebugDraw=function(){};E.prototype.SetFlags=function(){};E.prototype.GetFlags=function(){};E.prototype.AppendFlags=function(){};E.prototype.ClearFlags=function(){};E.prototype.SetSprite=function(){};E.prototype.GetSprite=function(){};E.prototype.SetDrawScale=function(){};E.prototype.GetDrawScale=function(){};E.prototype.SetLineThickness=function(){};E.prototype.GetLineThickness=function(){};E.prototype.SetAlpha=function(){};E.prototype.GetAlpha=function(){};E.prototype.SetFillAlpha=
function(){};E.prototype.GetFillAlpha=function(){};E.prototype.SetXFormScale=function(){};E.prototype.GetXFormScale=function(){};E.prototype.DrawPolygon=function(){};E.prototype.DrawSolidPolygon=function(){};E.prototype.DrawCircle=function(){};E.prototype.DrawSolidCircle=function(){};E.prototype.DrawSegment=function(){};E.prototype.DrawTransform=function(){};Box2D.postDefs.push(function(){Box2D.Dynamics.b2DebugDraw.e_shapeBit=1;Box2D.Dynamics.b2DebugDraw.e_jointBit=2;Box2D.Dynamics.b2DebugDraw.e_aabbBit=
4;Box2D.Dynamics.b2DebugDraw.e_pairBit=8;Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit=16;Box2D.Dynamics.b2DebugDraw.e_controllerBit=32});R.b2DestructionListener=function(){};R.prototype.SayGoodbyeJoint=function(){};R.prototype.SayGoodbyeFixture=function(){};N.b2FilterData=function(){this.categoryBits=1;this.maskBits=65535;this.groupIndex=0};N.prototype.Copy=function(){var a=new N;a.categoryBits=this.categoryBits;a.maskBits=this.maskBits;a.groupIndex=this.groupIndex;return a};S.b2Fixture=function(){this.m_filter=
new N};S.prototype.GetType=function(){return this.m_shape.GetType()};S.prototype.GetShape=function(){return this.m_shape};S.prototype.SetSensor=function(a){if(this.m_isSensor!=a){this.m_isSensor=a;if(this.m_body!=null)for(a=this.m_body.GetContactList();a;){var c=a.contact,g=c.GetFixtureA(),b=c.GetFixtureB();if(g==this||b==this)c.SetSensor(g.IsSensor()||b.IsSensor());a=a.next}}};S.prototype.IsSensor=function(){return this.m_isSensor};S.prototype.SetFilterData=function(a){this.m_filter=a.Copy();if(!this.m_body)for(a=
this.m_body.GetContactList();a;){var c=a.contact,g=c.GetFixtureA(),b=c.GetFixtureB();if(g==this||b==this)c.FlagForFiltering();a=a.next}};S.prototype.GetFilterData=function(){return this.m_filter.Copy()};S.prototype.GetBody=function(){return this.m_body};S.prototype.GetNext=function(){return this.m_next};S.prototype.GetUserData=function(){return this.m_userData};S.prototype.SetUserData=function(a){this.m_userData=a};S.prototype.TestPoint=function(a){return this.m_shape.TestPoint(this.m_body.GetTransform(),
a)};S.prototype.RayCast=function(a,c){return this.m_shape.RayCast(a,c,this.m_body.GetTransform())};S.prototype.GetMassData=function(a){if(a===undefined)a=null;if(a==null)a=new I;this.m_shape.ComputeMass(a,this.m_density);return a};S.prototype.SetDensity=function(a){if(a===undefined)a=0;this.m_density=a};S.prototype.GetDensity=function(){return this.m_density};S.prototype.GetFriction=function(){return this.m_friction};S.prototype.SetFriction=function(a){if(a===undefined)a=0;this.m_friction=a};S.prototype.GetRestitution=
function(){return this.m_restitution};S.prototype.SetRestitution=function(a){if(a===undefined)a=0;this.m_restitution=a};S.prototype.GetAABB=function(){return this.m_aabb};S.prototype.b2Fixture=function(){this.m_aabb=new U;this.m_shape=this.m_next=this.m_body=this.m_userData=null;this.m_restitution=this.m_friction=this.m_density=0};S.prototype.Create=function(a,c,g){this.m_userData=g.userData;this.m_friction=g.friction;this.m_restitution=g.restitution;this.m_body=a;this.m_next=null;this.m_filter=g.filter.Copy();
this.m_isSensor=g.isSensor;this.m_shape=g.shape.Copy();this.m_density=g.density};S.prototype.Destroy=function(){this.m_shape=null};S.prototype.CreateProxy=function(a,c){this.m_shape.ComputeAABB(this.m_aabb,c);this.m_proxy=a.CreateProxy(this.m_aabb,this)};S.prototype.DestroyProxy=function(a){if(this.m_proxy!=null){a.DestroyProxy(this.m_proxy);this.m_proxy=null}};S.prototype.Synchronize=function(a,c,g){if(this.m_proxy){var b=new U,e=new U;this.m_shape.ComputeAABB(b,c);this.m_shape.ComputeAABB(e,g);
this.m_aabb.Combine(b,e);c=F.SubtractVV(g.position,c.position);a.MoveProxy(this.m_proxy,this.m_aabb,c)}};aa.b2FixtureDef=function(){this.filter=new N};aa.prototype.b2FixtureDef=function(){this.userData=this.shape=null;this.friction=0.2;this.density=this.restitution=0;this.filter.categoryBits=1;this.filter.maskBits=65535;this.filter.groupIndex=0;this.isSensor=false};Z.b2Island=function(){};Z.prototype.b2Island=function(){this.m_bodies=new Vector;this.m_contacts=new Vector;this.m_joints=new Vector};
Z.prototype.Initialize=function(a,c,g,b,e,f){if(a===undefined)a=0;if(c===undefined)c=0;if(g===undefined)g=0;var m=0;this.m_bodyCapacity=a;this.m_contactCapacity=c;this.m_jointCapacity=g;this.m_jointCount=this.m_contactCount=this.m_bodyCount=0;this.m_allocator=b;this.m_listener=e;this.m_contactSolver=f;for(m=this.m_bodies.length;m<a;m++)this.m_bodies[m]=null;for(m=this.m_contacts.length;m<c;m++)this.m_contacts[m]=null;for(m=this.m_joints.length;m<g;m++)this.m_joints[m]=null};Z.prototype.Clear=function(){this.m_jointCount=
this.m_contactCount=this.m_bodyCount=0};Z.prototype.Solve=function(a,c,g){var b=0,e=0,f;for(b=0;b<this.m_bodyCount;++b){e=this.m_bodies[b];if(e.GetType()==k.b2_dynamicBody){e.m_linearVelocity.x+=a.dt*(c.x+e.m_invMass*e.m_force.x);e.m_linearVelocity.y+=a.dt*(c.y+e.m_invMass*e.m_force.y);e.m_angularVelocity+=a.dt*e.m_invI*e.m_torque;e.m_linearVelocity.Multiply(F.Clamp(1-a.dt*e.m_linearDamping,0,1));e.m_angularVelocity*=F.Clamp(1-a.dt*e.m_angularDamping,0,1)}}this.m_contactSolver.Initialize(a,this.m_contacts,
this.m_contactCount,this.m_allocator);c=this.m_contactSolver;c.InitVelocityConstraints(a);for(b=0;b<this.m_jointCount;++b){f=this.m_joints[b];f.InitVelocityConstraints(a)}for(b=0;b<a.velocityIterations;++b){for(e=0;e<this.m_jointCount;++e){f=this.m_joints[e];f.SolveVelocityConstraints(a)}c.SolveVelocityConstraints()}for(b=0;b<this.m_jointCount;++b){f=this.m_joints[b];f.FinalizeVelocityConstraints()}c.FinalizeVelocityConstraints();for(b=0;b<this.m_bodyCount;++b){e=this.m_bodies[b];if(e.GetType()!=
k.b2_staticBody){var m=a.dt*e.m_linearVelocity.x,r=a.dt*e.m_linearVelocity.y;if(m*m+r*r>A.b2_maxTranslationSquared){e.m_linearVelocity.Normalize();e.m_linearVelocity.x*=A.b2_maxTranslation*a.inv_dt;e.m_linearVelocity.y*=A.b2_maxTranslation*a.inv_dt}m=a.dt*e.m_angularVelocity;if(m*m>A.b2_maxRotationSquared)e.m_angularVelocity=e.m_angularVelocity<0?-A.b2_maxRotation*a.inv_dt:A.b2_maxRotation*a.inv_dt;e.m_sweep.c0.SetV(e.m_sweep.c);e.m_sweep.a0=e.m_sweep.a;e.m_sweep.c.x+=a.dt*e.m_linearVelocity.x;e.m_sweep.c.y+=
a.dt*e.m_linearVelocity.y;e.m_sweep.a+=a.dt*e.m_angularVelocity;e.SynchronizeTransform()}}for(b=0;b<a.positionIterations;++b){m=c.SolvePositionConstraints(A.b2_contactBaumgarte);r=true;for(e=0;e<this.m_jointCount;++e){f=this.m_joints[e];f=f.SolvePositionConstraints(A.b2_contactBaumgarte);r=r&&f}if(m&&r)break}this.Report(c.m_constraints);if(g){g=Number.MAX_VALUE;c=A.b2_linearSleepTolerance*A.b2_linearSleepTolerance;m=A.b2_angularSleepTolerance*A.b2_angularSleepTolerance;for(b=0;b<this.m_bodyCount;++b){e=
this.m_bodies[b];if(e.GetType()!=k.b2_staticBody){if((e.m_flags&k.e_allowSleepFlag)==0)g=e.m_sleepTime=0;if((e.m_flags&k.e_allowSleepFlag)==0||e.m_angularVelocity*e.m_angularVelocity>m||F.Dot(e.m_linearVelocity,e.m_linearVelocity)>c)g=e.m_sleepTime=0;else{e.m_sleepTime+=a.dt;g=F.Min(g,e.m_sleepTime)}}}if(g>=A.b2_timeToSleep)for(b=0;b<this.m_bodyCount;++b){e=this.m_bodies[b];e.SetAwake(false)}}};Z.prototype.SolveTOI=function(a){var c=0,g=0;this.m_contactSolver.Initialize(a,this.m_contacts,this.m_contactCount,
this.m_allocator);var b=this.m_contactSolver;for(c=0;c<this.m_jointCount;++c)this.m_joints[c].InitVelocityConstraints(a);for(c=0;c<a.velocityIterations;++c){b.SolveVelocityConstraints();for(g=0;g<this.m_jointCount;++g)this.m_joints[g].SolveVelocityConstraints(a)}for(c=0;c<this.m_bodyCount;++c){g=this.m_bodies[c];if(g.GetType()!=k.b2_staticBody){var e=a.dt*g.m_linearVelocity.x,f=a.dt*g.m_linearVelocity.y;if(e*e+f*f>A.b2_maxTranslationSquared){g.m_linearVelocity.Normalize();g.m_linearVelocity.x*=A.b2_maxTranslation*
a.inv_dt;g.m_linearVelocity.y*=A.b2_maxTranslation*a.inv_dt}e=a.dt*g.m_angularVelocity;if(e*e>A.b2_maxRotationSquared)g.m_angularVelocity=g.m_angularVelocity<0?-A.b2_maxRotation*a.inv_dt:A.b2_maxRotation*a.inv_dt;g.m_sweep.c0.SetV(g.m_sweep.c);g.m_sweep.a0=g.m_sweep.a;g.m_sweep.c.x+=a.dt*g.m_linearVelocity.x;g.m_sweep.c.y+=a.dt*g.m_linearVelocity.y;g.m_sweep.a+=a.dt*g.m_angularVelocity;g.SynchronizeTransform()}}for(c=0;c<a.positionIterations;++c){e=b.SolvePositionConstraints(0.75);f=true;for(g=0;g<
this.m_jointCount;++g){var m=this.m_joints[g].SolvePositionConstraints(A.b2_contactBaumgarte);f=f&&m}if(e&&f)break}this.Report(b.m_constraints)};Z.prototype.Report=function(a){if(this.m_listener!=null)for(var c=0;c<this.m_contactCount;++c){for(var g=this.m_contacts[c],b=a[c],e=0;e<b.pointCount;++e){Z.s_impulse.normalImpulses[e]=b.points[e].normalImpulse;Z.s_impulse.tangentImpulses[e]=b.points[e].tangentImpulse}this.m_listener.PostSolve(g,Z.s_impulse)}};Z.prototype.AddBody=function(a){a.m_islandIndex=
this.m_bodyCount;this.m_bodies[this.m_bodyCount++]=a};Z.prototype.AddContact=function(a){this.m_contacts[this.m_contactCount++]=a};Z.prototype.AddJoint=function(a){this.m_joints[this.m_jointCount++]=a};Box2D.postDefs.push(function(){Box2D.Dynamics.b2Island.s_impulse=new D});d.b2TimeStep=function(){};d.prototype.Set=function(a){this.dt=a.dt;this.inv_dt=a.inv_dt;this.positionIterations=a.positionIterations;this.velocityIterations=a.velocityIterations;this.warmStarting=a.warmStarting};h.b2World=function(){this.s_stack=
new Vector;this.m_contactManager=new O;this.m_contactSolver=new o;this.m_island=new Z};h.prototype.b2World=function(a,c){this.m_controllerList=this.m_jointList=this.m_contactList=this.m_bodyList=this.m_debugDraw=this.m_destructionListener=null;this.m_controllerCount=this.m_jointCount=this.m_contactCount=this.m_bodyCount=0;h.m_warmStarting=true;h.m_continuousPhysics=true;this.m_allowSleep=c;this.m_gravity=a;this.m_inv_dt0=0;this.m_contactManager.m_world=this;this.m_groundBody=this.CreateBody(new z)};
h.prototype.SetDestructionListener=function(a){this.m_destructionListener=a};h.prototype.SetContactFilter=function(a){this.m_contactManager.m_contactFilter=a};h.prototype.SetContactListener=function(a){this.m_contactManager.m_contactListener=a};h.prototype.SetDebugDraw=function(a){this.m_debugDraw=a};h.prototype.SetBroadPhase=function(a){var c=this.m_contactManager.m_broadPhase;this.m_contactManager.m_broadPhase=a;for(var g=this.m_bodyList;g;g=g.m_next)for(var b=g.m_fixtureList;b;b=b.m_next)b.m_proxy=
a.CreateProxy(c.GetFatAABB(b.m_proxy),b)};h.prototype.Validate=function(){this.m_contactManager.m_broadPhase.Validate()};h.prototype.GetProxyCount=function(){return this.m_contactManager.m_broadPhase.GetProxyCount()};h.prototype.CreateBody=function(a){if(this.IsLocked()==true)return null;a=new k(a,this);a.m_prev=null;if(a.m_next=this.m_bodyList)this.m_bodyList.m_prev=a;this.m_bodyList=a;++this.m_bodyCount;return a};h.prototype.DestroyBody=function(a){if(this.IsLocked()!=true){for(var c=a.m_jointList;c;){var g=
c;c=c.next;this.m_destructionListener&&this.m_destructionListener.SayGoodbyeJoint(g.joint);this.DestroyJoint(g.joint)}for(c=a.m_controllerList;c;){g=c;c=c.nextController;g.controller.RemoveBody(a)}for(c=a.m_contactList;c;){g=c;c=c.next;this.m_contactManager.Destroy(g.contact)}a.m_contactList=null;for(c=a.m_fixtureList;c;){g=c;c=c.m_next;this.m_destructionListener&&this.m_destructionListener.SayGoodbyeFixture(g);g.DestroyProxy(this.m_contactManager.m_broadPhase);g.Destroy()}a.m_fixtureList=null;a.m_fixtureCount=
0;if(a.m_prev)a.m_prev.m_next=a.m_next;if(a.m_next)a.m_next.m_prev=a.m_prev;if(a==this.m_bodyList)this.m_bodyList=a.m_next;--this.m_bodyCount}};h.prototype.CreateJoint=function(a){var c=q.Create(a,null);c.m_prev=null;if(c.m_next=this.m_jointList)this.m_jointList.m_prev=c;this.m_jointList=c;++this.m_jointCount;c.m_edgeA.joint=c;c.m_edgeA.other=c.m_bodyB;c.m_edgeA.prev=null;if(c.m_edgeA.next=c.m_bodyA.m_jointList)c.m_bodyA.m_jointList.prev=c.m_edgeA;c.m_bodyA.m_jointList=c.m_edgeA;c.m_edgeB.joint=c;
c.m_edgeB.other=c.m_bodyA;c.m_edgeB.prev=null;if(c.m_edgeB.next=c.m_bodyB.m_jointList)c.m_bodyB.m_jointList.prev=c.m_edgeB;c.m_bodyB.m_jointList=c.m_edgeB;var g=a.bodyA,b=a.bodyB;if(a.collideConnected==false)for(a=b.GetContactList();a;){a.other==g&&a.contact.FlagForFiltering();a=a.next}return c};h.prototype.DestroyJoint=function(a){var c=a.m_collideConnected;if(a.m_prev)a.m_prev.m_next=a.m_next;if(a.m_next)a.m_next.m_prev=a.m_prev;if(a==this.m_jointList)this.m_jointList=a.m_next;var g=a.m_bodyA,b=
a.m_bodyB;g.SetAwake(true);b.SetAwake(true);if(a.m_edgeA.prev)a.m_edgeA.prev.next=a.m_edgeA.next;if(a.m_edgeA.next)a.m_edgeA.next.prev=a.m_edgeA.prev;if(a.m_edgeA==g.m_jointList)g.m_jointList=a.m_edgeA.next;a.m_edgeA.prev=null;a.m_edgeA.next=null;if(a.m_edgeB.prev)a.m_edgeB.prev.next=a.m_edgeB.next;if(a.m_edgeB.next)a.m_edgeB.next.prev=a.m_edgeB.prev;if(a.m_edgeB==b.m_jointList)b.m_jointList=a.m_edgeB.next;a.m_edgeB.prev=null;a.m_edgeB.next=null;q.Destroy(a,null);--this.m_jointCount;if(c==false)for(a=
b.GetContactList();a;){a.other==g&&a.contact.FlagForFiltering();a=a.next}};h.prototype.AddController=function(a){a.m_next=this.m_controllerList;a.m_prev=null;this.m_controllerList=a;a.m_world=this;this.m_controllerCount++;return a};h.prototype.RemoveController=function(a){if(a.m_prev)a.m_prev.m_next=a.m_next;if(a.m_next)a.m_next.m_prev=a.m_prev;if(this.m_controllerList==a)this.m_controllerList=a.m_next;this.m_controllerCount--};h.prototype.CreateController=function(a){if(a.m_world!=this)throw Error("Controller can only be a member of one world");
a.m_next=this.m_controllerList;a.m_prev=null;if(this.m_controllerList)this.m_controllerList.m_prev=a;this.m_controllerList=a;++this.m_controllerCount;a.m_world=this;return a};h.prototype.DestroyController=function(a){a.Clear();if(a.m_next)a.m_next.m_prev=a.m_prev;if(a.m_prev)a.m_prev.m_next=a.m_next;if(a==this.m_controllerList)this.m_controllerList=a.m_next;--this.m_controllerCount};h.prototype.SetWarmStarting=function(a){h.m_warmStarting=a};h.prototype.SetContinuousPhysics=function(a){h.m_continuousPhysics=
a};h.prototype.GetBodyCount=function(){return this.m_bodyCount};h.prototype.GetJointCount=function(){return this.m_jointCount};h.prototype.GetContactCount=function(){return this.m_contactCount};h.prototype.SetGravity=function(a){this.m_gravity=a};h.prototype.GetGravity=function(){return this.m_gravity};h.prototype.GetGroundBody=function(){return this.m_groundBody};h.prototype.Step=function(a,c,g){if(a===undefined)a=0;if(c===undefined)c=0;if(g===undefined)g=0;if(this.m_flags&h.e_newFixture){this.m_contactManager.FindNewContacts();
this.m_flags&=~h.e_newFixture}this.m_flags|=h.e_locked;var b=h.s_timestep2;b.dt=a;b.velocityIterations=c;b.positionIterations=g;b.inv_dt=a>0?1/a:0;b.dtRatio=this.m_inv_dt0*a;b.warmStarting=h.m_warmStarting;this.m_contactManager.Collide();b.dt>0&&this.Solve(b);h.m_continuousPhysics&&b.dt>0&&this.SolveTOI(b);if(b.dt>0)this.m_inv_dt0=b.inv_dt;this.m_flags&=~h.e_locked};h.prototype.ClearForces=function(){for(var a=this.m_bodyList;a;a=a.m_next){a.m_force.SetZero();a.m_torque=0}};h.prototype.DrawDebugData=
function(){if(this.m_debugDraw!=null){this.m_debugDraw.m_sprite.graphics.clear();var a=this.m_debugDraw.GetFlags(),c,g,b;new y;new y;new y;var e;new U;new U;e=[new y,new y,new y,new y];var f=new w(0,0,0);if(a&E.e_shapeBit)for(c=this.m_bodyList;c;c=c.m_next){e=c.m_xf;for(g=c.GetFixtureList();g;g=g.m_next){b=g.GetShape();if(c.IsActive()==false)f.Set(0.5,0.5,0.3);else if(c.GetType()==k.b2_staticBody)f.Set(0.5,0.9,0.5);else if(c.GetType()==k.b2_kinematicBody)f.Set(0.5,0.5,0.9);else c.IsAwake()==false?
f.Set(0.6,0.6,0.6):f.Set(0.9,0.7,0.7);this.DrawShape(b,e,f)}}if(a&E.e_jointBit)for(c=this.m_jointList;c;c=c.m_next)this.DrawJoint(c);if(a&E.e_controllerBit)for(c=this.m_controllerList;c;c=c.m_next)c.Draw(this.m_debugDraw);if(a&E.e_pairBit){f.Set(0.3,0.9,0.9);for(c=this.m_contactManager.m_contactList;c;c=c.GetNext()){b=c.GetFixtureA();g=c.GetFixtureB();b=b.GetAABB().GetCenter();g=g.GetAABB().GetCenter();this.m_debugDraw.DrawSegment(b,g,f)}}if(a&E.e_aabbBit){b=this.m_contactManager.m_broadPhase;e=[new y,
new y,new y,new y];for(c=this.m_bodyList;c;c=c.GetNext())if(c.IsActive()!=false)for(g=c.GetFixtureList();g;g=g.GetNext()){var m=b.GetFatAABB(g.m_proxy);e[0].Set(m.lowerBound.x,m.lowerBound.y);e[1].Set(m.upperBound.x,m.lowerBound.y);e[2].Set(m.upperBound.x,m.upperBound.y);e[3].Set(m.lowerBound.x,m.upperBound.y);this.m_debugDraw.DrawPolygon(e,4,f)}}if(a&E.e_centerOfMassBit)for(c=this.m_bodyList;c;c=c.m_next){e=h.s_xf;e.R=c.m_xf.R;e.position=c.GetWorldCenter();this.m_debugDraw.DrawTransform(e)}}};h.prototype.QueryAABB=
function(a,c){var g=this.m_contactManager.m_broadPhase;g.Query(function(b){return a(g.GetUserData(b))},c)};h.prototype.QueryShape=function(a,c,g){if(g===undefined)g=null;if(g==null){g=new K;g.SetIdentity()}var b=this.m_contactManager.m_broadPhase,e=new U;c.ComputeAABB(e,g);b.Query(function(f){f=b.GetUserData(f)instanceof S?b.GetUserData(f):null;if(Y.TestOverlap(c,g,f.GetShape(),f.GetBody().GetTransform()))return a(f);return true},e)};h.prototype.QueryPoint=function(a,c){var g=this.m_contactManager.m_broadPhase,
b=new U;b.lowerBound.Set(c.x-A.b2_linearSlop,c.y-A.b2_linearSlop);b.upperBound.Set(c.x+A.b2_linearSlop,c.y+A.b2_linearSlop);g.Query(function(e){e=g.GetUserData(e)instanceof S?g.GetUserData(e):null;if(e.TestPoint(c))return a(e);return true},b)};h.prototype.RayCast=function(a,c,g){var b=this.m_contactManager.m_broadPhase,e=new V,f=new Q(c,g);b.RayCast(function(m,r){var s=b.GetUserData(r);s=s instanceof S?s:null;if(s.RayCast(e,m)){var v=e.fraction,t=new y((1-v)*c.x+v*g.x,(1-v)*c.y+v*g.y);return a(s,
t,e.normal,v)}return m.maxFraction},f)};h.prototype.RayCastOne=function(a,c){var g;this.RayCast(function(b,e,f,m){if(m===undefined)m=0;g=b;return m},a,c);return g};h.prototype.RayCastAll=function(a,c){var g=new Vector;this.RayCast(function(b){g[g.length]=b;return 1},a,c);return g};h.prototype.GetBodyList=function(){return this.m_bodyList};h.prototype.GetJointList=function(){return this.m_jointList};h.prototype.GetContactList=function(){return this.m_contactList};h.prototype.IsLocked=function(){return(this.m_flags&
h.e_locked)>0};h.prototype.Solve=function(a){for(var c,g=this.m_controllerList;g;g=g.m_next)g.Step(a);g=this.m_island;g.Initialize(this.m_bodyCount,this.m_contactCount,this.m_jointCount,null,this.m_contactManager.m_contactListener,this.m_contactSolver);for(c=this.m_bodyList;c;c=c.m_next)c.m_flags&=~k.e_islandFlag;for(var b=this.m_contactList;b;b=b.m_next)b.m_flags&=~l.e_islandFlag;for(b=this.m_jointList;b;b=b.m_next)b.m_islandFlag=false;parseInt(this.m_bodyCount);b=this.s_stack;for(var e=this.m_bodyList;e;e=
e.m_next)if(!(e.m_flags&k.e_islandFlag))if(!(e.IsAwake()==false||e.IsActive()==false))if(e.GetType()!=k.b2_staticBody){g.Clear();var f=0;b[f++]=e;for(e.m_flags|=k.e_islandFlag;f>0;){c=b[--f];g.AddBody(c);c.IsAwake()==false&&c.SetAwake(true);if(c.GetType()!=k.b2_staticBody){for(var m,r=c.m_contactList;r;r=r.next)if(!(r.contact.m_flags&l.e_islandFlag))if(!(r.contact.IsSensor()==true||r.contact.IsEnabled()==false||r.contact.IsTouching()==false)){g.AddContact(r.contact);r.contact.m_flags|=l.e_islandFlag;
m=r.other;if(!(m.m_flags&k.e_islandFlag)){b[f++]=m;m.m_flags|=k.e_islandFlag}}for(c=c.m_jointList;c;c=c.next)if(c.joint.m_islandFlag!=true){m=c.other;if(m.IsActive()!=false){g.AddJoint(c.joint);c.joint.m_islandFlag=true;if(!(m.m_flags&k.e_islandFlag)){b[f++]=m;m.m_flags|=k.e_islandFlag}}}}}g.Solve(a,this.m_gravity,this.m_allowSleep);for(f=0;f<g.m_bodyCount;++f){c=g.m_bodies[f];if(c.GetType()==k.b2_staticBody)c.m_flags&=~k.e_islandFlag}}for(f=0;f<b.length;++f){if(!b[f])break;b[f]=null}for(c=this.m_bodyList;c;c=
c.m_next)c.IsAwake()==false||c.IsActive()==false||c.GetType()!=k.b2_staticBody&&c.SynchronizeFixtures();this.m_contactManager.FindNewContacts()};h.prototype.SolveTOI=function(a){var c,g,b,e=this.m_island;e.Initialize(this.m_bodyCount,A.b2_maxTOIContactsPerIsland,A.b2_maxTOIJointsPerIsland,null,this.m_contactManager.m_contactListener,this.m_contactSolver);var f=h.s_queue;for(c=this.m_bodyList;c;c=c.m_next){c.m_flags&=~k.e_islandFlag;c.m_sweep.t0=0}for(b=this.m_contactList;b;b=b.m_next)b.m_flags&=~(l.e_toiFlag|
l.e_islandFlag);for(b=this.m_jointList;b;b=b.m_next)b.m_islandFlag=false;for(;;){var m=null,r=1;for(b=this.m_contactList;b;b=b.m_next)if(!(b.IsSensor()==true||b.IsEnabled()==false||b.IsContinuous()==false)){c=1;if(b.m_flags&l.e_toiFlag)c=b.m_toi;else{c=b.m_fixtureA;g=b.m_fixtureB;c=c.m_body;g=g.m_body;if((c.GetType()!=k.b2_dynamicBody||c.IsAwake()==false)&&(g.GetType()!=k.b2_dynamicBody||g.IsAwake()==false))continue;var s=c.m_sweep.t0;if(c.m_sweep.t0<g.m_sweep.t0){s=g.m_sweep.t0;c.m_sweep.Advance(s)}else if(g.m_sweep.t0<
c.m_sweep.t0){s=c.m_sweep.t0;g.m_sweep.Advance(s)}c=b.ComputeTOI(c.m_sweep,g.m_sweep);A.b2Assert(0<=c&&c<=1);if(c>0&&c<1){c=(1-c)*s+c;if(c>1)c=1}b.m_toi=c;b.m_flags|=l.e_toiFlag}if(Number.MIN_VALUE<c&&c<r){m=b;r=c}}if(m==null||1-100*Number.MIN_VALUE<r)break;c=m.m_fixtureA;g=m.m_fixtureB;c=c.m_body;g=g.m_body;h.s_backupA.Set(c.m_sweep);h.s_backupB.Set(g.m_sweep);c.Advance(r);g.Advance(r);m.Update(this.m_contactManager.m_contactListener);m.m_flags&=~l.e_toiFlag;if(m.IsSensor()==true||m.IsEnabled()==
false){c.m_sweep.Set(h.s_backupA);g.m_sweep.Set(h.s_backupB);c.SynchronizeTransform();g.SynchronizeTransform()}else if(m.IsTouching()!=false){c=c;if(c.GetType()!=k.b2_dynamicBody)c=g;e.Clear();m=b=0;f[b+m++]=c;for(c.m_flags|=k.e_islandFlag;m>0;){c=f[b++];--m;e.AddBody(c);c.IsAwake()==false&&c.SetAwake(true);if(c.GetType()==k.b2_dynamicBody){for(g=c.m_contactList;g;g=g.next){if(e.m_contactCount==e.m_contactCapacity)break;if(!(g.contact.m_flags&l.e_islandFlag))if(!(g.contact.IsSensor()==true||g.contact.IsEnabled()==
false||g.contact.IsTouching()==false)){e.AddContact(g.contact);g.contact.m_flags|=l.e_islandFlag;s=g.other;if(!(s.m_flags&k.e_islandFlag)){if(s.GetType()!=k.b2_staticBody){s.Advance(r);s.SetAwake(true)}f[b+m]=s;++m;s.m_flags|=k.e_islandFlag}}}for(c=c.m_jointList;c;c=c.next)if(e.m_jointCount!=e.m_jointCapacity)if(c.joint.m_islandFlag!=true){s=c.other;if(s.IsActive()!=false){e.AddJoint(c.joint);c.joint.m_islandFlag=true;if(!(s.m_flags&k.e_islandFlag)){if(s.GetType()!=k.b2_staticBody){s.Advance(r);s.SetAwake(true)}f[b+
m]=s;++m;s.m_flags|=k.e_islandFlag}}}}}b=h.s_timestep;b.warmStarting=false;b.dt=(1-r)*a.dt;b.inv_dt=1/b.dt;b.dtRatio=0;b.velocityIterations=a.velocityIterations;b.positionIterations=a.positionIterations;e.SolveTOI(b);for(r=r=0;r<e.m_bodyCount;++r){c=e.m_bodies[r];c.m_flags&=~k.e_islandFlag;if(c.IsAwake()!=false)if(c.GetType()==k.b2_dynamicBody){c.SynchronizeFixtures();for(g=c.m_contactList;g;g=g.next)g.contact.m_flags&=~l.e_toiFlag}}for(r=0;r<e.m_contactCount;++r){b=e.m_contacts[r];b.m_flags&=~(l.e_toiFlag|
l.e_islandFlag)}for(r=0;r<e.m_jointCount;++r){b=e.m_joints[r];b.m_islandFlag=false}this.m_contactManager.FindNewContacts()}}};h.prototype.DrawJoint=function(a){var c=a.GetBodyA(),g=a.GetBodyB(),b=c.m_xf.position,e=g.m_xf.position,f=a.GetAnchorA(),m=a.GetAnchorB(),r=h.s_jointColor;switch(a.m_type){case q.e_distanceJoint:this.m_debugDraw.DrawSegment(f,m,r);break;case q.e_pulleyJoint:c=a instanceof n?a:null;a=c.GetGroundAnchorA();c=c.GetGroundAnchorB();this.m_debugDraw.DrawSegment(a,f,r);this.m_debugDraw.DrawSegment(c,
m,r);this.m_debugDraw.DrawSegment(a,c,r);break;case q.e_mouseJoint:this.m_debugDraw.DrawSegment(f,m,r);break;default:c!=this.m_groundBody&&this.m_debugDraw.DrawSegment(b,f,r);this.m_debugDraw.DrawSegment(f,m,r);g!=this.m_groundBody&&this.m_debugDraw.DrawSegment(e,m,r)}};h.prototype.DrawShape=function(a,c,g){switch(a.m_type){case Y.e_circleShape:var b=a instanceof M?a:null;this.m_debugDraw.DrawSolidCircle(F.MulX(c,b.m_p),b.m_radius,c.R.col1,g);break;case Y.e_polygonShape:b=0;b=a instanceof W?a:null;
a=parseInt(b.GetVertexCount());var e=b.GetVertices(),f=new Vector(a);for(b=0;b<a;++b)f[b]=F.MulX(c,e[b]);this.m_debugDraw.DrawSolidPolygon(f,a,g);break;case Y.e_edgeShape:b=a instanceof L?a:null;this.m_debugDraw.DrawSegment(F.MulX(c,b.GetVertex1()),F.MulX(c,b.GetVertex2()),g)}};Box2D.postDefs.push(function(){Box2D.Dynamics.b2World.s_timestep2=new d;Box2D.Dynamics.b2World.s_xf=new K;Box2D.Dynamics.b2World.s_backupA=new G;Box2D.Dynamics.b2World.s_backupB=new G;Box2D.Dynamics.b2World.s_timestep=new d;
Box2D.Dynamics.b2World.s_queue=new Vector;Box2D.Dynamics.b2World.s_jointColor=new w(0.5,0.8,0.8);Box2D.Dynamics.b2World.e_newFixture=1;Box2D.Dynamics.b2World.e_locked=2})})();
(function(){var F=Box2D.Collision.Shapes.b2CircleShape,G=Box2D.Collision.Shapes.b2EdgeShape,K=Box2D.Collision.Shapes.b2PolygonShape,y=Box2D.Collision.Shapes.b2Shape,w=Box2D.Dynamics.Contacts.b2CircleContact,A=Box2D.Dynamics.Contacts.b2Contact,U=Box2D.Dynamics.Contacts.b2ContactConstraint,p=Box2D.Dynamics.Contacts.b2ContactConstraintPoint,B=Box2D.Dynamics.Contacts.b2ContactEdge,Q=Box2D.Dynamics.Contacts.b2ContactFactory,V=Box2D.Dynamics.Contacts.b2ContactRegister,M=Box2D.Dynamics.Contacts.b2ContactResult,
L=Box2D.Dynamics.Contacts.b2ContactSolver,I=Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,W=Box2D.Dynamics.Contacts.b2NullContact,Y=Box2D.Dynamics.Contacts.b2PolyAndCircleContact,k=Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,z=Box2D.Dynamics.Contacts.b2PolygonContact,u=Box2D.Dynamics.Contacts.b2PositionSolverManifold,D=Box2D.Dynamics.b2Body,H=Box2D.Dynamics.b2TimeStep,O=Box2D.Common.b2Settings,E=Box2D.Common.Math.b2Mat22,R=Box2D.Common.Math.b2Math,N=Box2D.Common.Math.b2Vec2,S=Box2D.Collision.b2Collision,
aa=Box2D.Collision.b2ContactID,Z=Box2D.Collision.b2Manifold,d=Box2D.Collision.b2TimeOfImpact,h=Box2D.Collision.b2TOIInput,l=Box2D.Collision.b2WorldManifold;Box2D.inherit(w,Box2D.Dynamics.Contacts.b2Contact);w.prototype.__super=Box2D.Dynamics.Contacts.b2Contact.prototype;w.b2CircleContact=function(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this,arguments)};w.Create=function(){return new w};w.Destroy=function(){};w.prototype.Reset=function(j,o){this.__super.Reset.call(this,j,o)};w.prototype.Evaluate=
function(){var j=this.m_fixtureA.GetBody(),o=this.m_fixtureB.GetBody();S.CollideCircles(this.m_manifold,this.m_fixtureA.GetShape()instanceof F?this.m_fixtureA.GetShape():null,j.m_xf,this.m_fixtureB.GetShape()instanceof F?this.m_fixtureB.GetShape():null,o.m_xf)};A.b2Contact=function(){this.m_nodeA=new B;this.m_nodeB=new B;this.m_manifold=new Z;this.m_oldManifold=new Z};A.prototype.GetManifold=function(){return this.m_manifold};A.prototype.GetWorldManifold=function(j){var o=this.m_fixtureA.GetBody(),
q=this.m_fixtureB.GetBody(),n=this.m_fixtureA.GetShape(),a=this.m_fixtureB.GetShape();j.Initialize(this.m_manifold,o.GetTransform(),n.m_radius,q.GetTransform(),a.m_radius)};A.prototype.IsTouching=function(){return(this.m_flags&A.e_touchingFlag)==A.e_touchingFlag};A.prototype.IsContinuous=function(){return(this.m_flags&A.e_continuousFlag)==A.e_continuousFlag};A.prototype.SetSensor=function(j){if(j)this.m_flags|=A.e_sensorFlag;else this.m_flags&=~A.e_sensorFlag};A.prototype.IsSensor=function(){return(this.m_flags&
A.e_sensorFlag)==A.e_sensorFlag};A.prototype.SetEnabled=function(j){if(j)this.m_flags|=A.e_enabledFlag;else this.m_flags&=~A.e_enabledFlag};A.prototype.IsEnabled=function(){return(this.m_flags&A.e_enabledFlag)==A.e_enabledFlag};A.prototype.GetNext=function(){return this.m_next};A.prototype.GetFixtureA=function(){return this.m_fixtureA};A.prototype.GetFixtureB=function(){return this.m_fixtureB};A.prototype.FlagForFiltering=function(){this.m_flags|=A.e_filterFlag};A.prototype.b2Contact=function(){};
A.prototype.Reset=function(j,o){if(j===undefined)j=null;if(o===undefined)o=null;this.m_flags=A.e_enabledFlag;if(!j||!o)this.m_fixtureB=this.m_fixtureA=null;else{if(j.IsSensor()||o.IsSensor())this.m_flags|=A.e_sensorFlag;var q=j.GetBody(),n=o.GetBody();if(q.GetType()!=D.b2_dynamicBody||q.IsBullet()||n.GetType()!=D.b2_dynamicBody||n.IsBullet())this.m_flags|=A.e_continuousFlag;this.m_fixtureA=j;this.m_fixtureB=o;this.m_manifold.m_pointCount=0;this.m_next=this.m_prev=null;this.m_nodeA.contact=null;this.m_nodeA.prev=
null;this.m_nodeA.next=null;this.m_nodeA.other=null;this.m_nodeB.contact=null;this.m_nodeB.prev=null;this.m_nodeB.next=null;this.m_nodeB.other=null}};A.prototype.Update=function(j){var o=this.m_oldManifold;this.m_oldManifold=this.m_manifold;this.m_manifold=o;this.m_flags|=A.e_enabledFlag;var q=false;o=(this.m_flags&A.e_touchingFlag)==A.e_touchingFlag;var n=this.m_fixtureA.m_body,a=this.m_fixtureB.m_body,c=this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);if(this.m_flags&A.e_sensorFlag){if(c){q=
this.m_fixtureA.GetShape();c=this.m_fixtureB.GetShape();n=n.GetTransform();a=a.GetTransform();q=y.TestOverlap(q,n,c,a)}this.m_manifold.m_pointCount=0}else{if(n.GetType()!=D.b2_dynamicBody||n.IsBullet()||a.GetType()!=D.b2_dynamicBody||a.IsBullet())this.m_flags|=A.e_continuousFlag;else this.m_flags&=~A.e_continuousFlag;if(c){this.Evaluate();q=this.m_manifold.m_pointCount>0;for(c=0;c<this.m_manifold.m_pointCount;++c){var g=this.m_manifold.m_points[c];g.m_normalImpulse=0;g.m_tangentImpulse=0;for(var b=
g.m_id,e=0;e<this.m_oldManifold.m_pointCount;++e){var f=this.m_oldManifold.m_points[e];if(f.m_id.key==b.key){g.m_normalImpulse=f.m_normalImpulse;g.m_tangentImpulse=f.m_tangentImpulse;break}}}}else this.m_manifold.m_pointCount=0;if(q!=o){n.SetAwake(true);a.SetAwake(true)}}if(q)this.m_flags|=A.e_touchingFlag;else this.m_flags&=~A.e_touchingFlag;o==false&&q==true&&j.BeginContact(this);o==true&&q==false&&j.EndContact(this);(this.m_flags&A.e_sensorFlag)==0&&j.PreSolve(this,this.m_oldManifold)};A.prototype.Evaluate=
function(){};A.prototype.ComputeTOI=function(j,o){A.s_input.proxyA.Set(this.m_fixtureA.GetShape());A.s_input.proxyB.Set(this.m_fixtureB.GetShape());A.s_input.sweepA=j;A.s_input.sweepB=o;A.s_input.tolerance=O.b2_linearSlop;return d.TimeOfImpact(A.s_input)};Box2D.postDefs.push(function(){Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag=1;Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag=2;Box2D.Dynamics.Contacts.b2Contact.e_islandFlag=4;Box2D.Dynamics.Contacts.b2Contact.e_toiFlag=8;Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag=
16;Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag=32;Box2D.Dynamics.Contacts.b2Contact.e_filterFlag=64;Box2D.Dynamics.Contacts.b2Contact.s_input=new h});U.b2ContactConstraint=function(){this.localPlaneNormal=new N;this.localPoint=new N;this.normal=new N;this.normalMass=new E;this.K=new E};U.prototype.b2ContactConstraint=function(){this.points=new Vector(O.b2_maxManifoldPoints);for(var j=0;j<O.b2_maxManifoldPoints;j++)this.points[j]=new p};p.b2ContactConstraintPoint=function(){this.localPoint=new N;
this.rA=new N;this.rB=new N};B.b2ContactEdge=function(){};Q.b2ContactFactory=function(){};Q.prototype.b2ContactFactory=function(j){this.m_allocator=j;this.InitializeRegisters()};Q.prototype.AddType=function(j,o,q,n){if(q===undefined)q=0;if(n===undefined)n=0;this.m_registers[q][n].createFcn=j;this.m_registers[q][n].destroyFcn=o;this.m_registers[q][n].primary=true;if(q!=n){this.m_registers[n][q].createFcn=j;this.m_registers[n][q].destroyFcn=o;this.m_registers[n][q].primary=false}};Q.prototype.InitializeRegisters=
function(){this.m_registers=new Vector(y.e_shapeTypeCount);for(var j=0;j<y.e_shapeTypeCount;j++){this.m_registers[j]=new Vector(y.e_shapeTypeCount);for(var o=0;o<y.e_shapeTypeCount;o++)this.m_registers[j][o]=new V}this.AddType(w.Create,w.Destroy,y.e_circleShape,y.e_circleShape);this.AddType(Y.Create,Y.Destroy,y.e_polygonShape,y.e_circleShape);this.AddType(z.Create,z.Destroy,y.e_polygonShape,y.e_polygonShape);this.AddType(I.Create,I.Destroy,y.e_edgeShape,y.e_circleShape);this.AddType(k.Create,k.Destroy,
y.e_polygonShape,y.e_edgeShape)};Q.prototype.Create=function(j,o){var q=parseInt(j.GetType()),n=parseInt(o.GetType());q=this.m_registers[q][n];if(q.pool){n=q.pool;q.pool=n.m_next;q.poolCount--;n.Reset(j,o);return n}n=q.createFcn;if(n!=null){if(q.primary){n=n(this.m_allocator);n.Reset(j,o)}else{n=n(this.m_allocator);n.Reset(o,j)}return n}else return null};Q.prototype.Destroy=function(j){if(j.m_manifold.m_pointCount>0){j.m_fixtureA.m_body.SetAwake(true);j.m_fixtureB.m_body.SetAwake(true)}var o=parseInt(j.m_fixtureA.GetType()),
q=parseInt(j.m_fixtureB.GetType());o=this.m_registers[o][q];o.poolCount++;j.m_next=o.pool;o.pool=j;o=o.destroyFcn;o(j,this.m_allocator)};V.b2ContactRegister=function(){};M.b2ContactResult=function(){this.position=new N;this.normal=new N;this.id=new aa};L.b2ContactSolver=function(){this.m_step=new H;this.m_constraints=new Vector};L.prototype.b2ContactSolver=function(){};L.prototype.Initialize=function(j,o,q,n){if(q===undefined)q=0;var a;this.m_step.Set(j);this.m_allocator=n;j=0;for(this.m_constraintCount=
q;this.m_constraints.length<this.m_constraintCount;)this.m_constraints[this.m_constraints.length]=new U;for(j=0;j<q;++j){a=o[j];n=a.m_fixtureA;var c=a.m_fixtureB,g=n.m_shape.m_radius,b=c.m_shape.m_radius,e=n.m_body,f=c.m_body,m=a.GetManifold(),r=O.b2MixFriction(n.GetFriction(),c.GetFriction()),s=O.b2MixRestitution(n.GetRestitution(),c.GetRestitution()),v=e.m_linearVelocity.x,t=e.m_linearVelocity.y,x=f.m_linearVelocity.x,C=f.m_linearVelocity.y,J=e.m_angularVelocity,T=f.m_angularVelocity;O.b2Assert(m.m_pointCount>
0);L.s_worldManifold.Initialize(m,e.m_xf,g,f.m_xf,b);c=L.s_worldManifold.m_normal.x;a=L.s_worldManifold.m_normal.y;n=this.m_constraints[j];n.bodyA=e;n.bodyB=f;n.manifold=m;n.normal.x=c;n.normal.y=a;n.pointCount=m.m_pointCount;n.friction=r;n.restitution=s;n.localPlaneNormal.x=m.m_localPlaneNormal.x;n.localPlaneNormal.y=m.m_localPlaneNormal.y;n.localPoint.x=m.m_localPoint.x;n.localPoint.y=m.m_localPoint.y;n.radius=g+b;n.type=m.m_type;for(g=0;g<n.pointCount;++g){r=m.m_points[g];b=n.points[g];b.normalImpulse=
r.m_normalImpulse;b.tangentImpulse=r.m_tangentImpulse;b.localPoint.SetV(r.m_localPoint);r=b.rA.x=L.s_worldManifold.m_points[g].x-e.m_sweep.c.x;s=b.rA.y=L.s_worldManifold.m_points[g].y-e.m_sweep.c.y;var P=b.rB.x=L.s_worldManifold.m_points[g].x-f.m_sweep.c.x,X=b.rB.y=L.s_worldManifold.m_points[g].y-f.m_sweep.c.y,$=r*a-s*c,ba=P*a-X*c;$*=$;ba*=ba;b.normalMass=1/(e.m_invMass+f.m_invMass+e.m_invI*$+f.m_invI*ba);var ca=e.m_mass*e.m_invMass+f.m_mass*f.m_invMass;ca+=e.m_mass*e.m_invI*$+f.m_mass*f.m_invI*ba;
b.equalizedMass=1/ca;ba=a;ca=-c;$=r*ca-s*ba;ba=P*ca-X*ba;$*=$;ba*=ba;b.tangentMass=1/(e.m_invMass+f.m_invMass+e.m_invI*$+f.m_invI*ba);b.velocityBias=0;r=n.normal.x*(x+-T*X-v- -J*s)+n.normal.y*(C+T*P-t-J*r);if(r<-O.b2_velocityThreshold)b.velocityBias+=-n.restitution*r}if(n.pointCount==2){C=n.points[0];x=n.points[1];m=e.m_invMass;e=e.m_invI;v=f.m_invMass;f=f.m_invI;t=C.rA.x*a-C.rA.y*c;C=C.rB.x*a-C.rB.y*c;J=x.rA.x*a-x.rA.y*c;x=x.rB.x*a-x.rB.y*c;c=m+v+e*t*t+f*C*C;a=m+v+e*J*J+f*x*x;f=m+v+e*t*J+f*C*x;if(c*
c<100*(c*a-f*f)){n.K.col1.Set(c,f);n.K.col2.Set(f,a);n.K.GetInverse(n.normalMass)}else n.pointCount=1}}};L.prototype.InitVelocityConstraints=function(j){for(var o=0;o<this.m_constraintCount;++o){var q=this.m_constraints[o],n=q.bodyA,a=q.bodyB,c=n.m_invMass,g=n.m_invI,b=a.m_invMass,e=a.m_invI,f=q.normal.x,m=q.normal.y,r=m,s=-f,v=0,t=0;if(j.warmStarting){t=q.pointCount;for(v=0;v<t;++v){var x=q.points[v];x.normalImpulse*=j.dtRatio;x.tangentImpulse*=j.dtRatio;var C=x.normalImpulse*f+x.tangentImpulse*
r,J=x.normalImpulse*m+x.tangentImpulse*s;n.m_angularVelocity-=g*(x.rA.x*J-x.rA.y*C);n.m_linearVelocity.x-=c*C;n.m_linearVelocity.y-=c*J;a.m_angularVelocity+=e*(x.rB.x*J-x.rB.y*C);a.m_linearVelocity.x+=b*C;a.m_linearVelocity.y+=b*J}}else{t=q.pointCount;for(v=0;v<t;++v){n=q.points[v];n.normalImpulse=0;n.tangentImpulse=0}}}};L.prototype.SolveVelocityConstraints=function(){for(var j=0,o,q=0,n=0,a=0,c=n=n=q=q=0,g=q=q=0,b=q=a=0,e=0,f,m=0;m<this.m_constraintCount;++m){a=this.m_constraints[m];var r=a.bodyA,
s=a.bodyB,v=r.m_angularVelocity,t=s.m_angularVelocity,x=r.m_linearVelocity,C=s.m_linearVelocity,J=r.m_invMass,T=r.m_invI,P=s.m_invMass,X=s.m_invI;b=a.normal.x;var $=e=a.normal.y;f=-b;g=a.friction;for(j=0;j<a.pointCount;j++){o=a.points[j];q=C.x-t*o.rB.y-x.x+v*o.rA.y;n=C.y+t*o.rB.x-x.y-v*o.rA.x;q=q*$+n*f;q=o.tangentMass*-q;n=g*o.normalImpulse;n=R.Clamp(o.tangentImpulse+q,-n,n);q=n-o.tangentImpulse;c=q*$;q=q*f;x.x-=J*c;x.y-=J*q;v-=T*(o.rA.x*q-o.rA.y*c);C.x+=P*c;C.y+=P*q;t+=X*(o.rB.x*q-o.rB.y*c);o.tangentImpulse=
n}parseInt(a.pointCount);if(a.pointCount==1){o=a.points[0];q=C.x+-t*o.rB.y-x.x- -v*o.rA.y;n=C.y+t*o.rB.x-x.y-v*o.rA.x;a=q*b+n*e;q=-o.normalMass*(a-o.velocityBias);n=o.normalImpulse+q;n=n>0?n:0;q=n-o.normalImpulse;c=q*b;q=q*e;x.x-=J*c;x.y-=J*q;v-=T*(o.rA.x*q-o.rA.y*c);C.x+=P*c;C.y+=P*q;t+=X*(o.rB.x*q-o.rB.y*c);o.normalImpulse=n}else{o=a.points[0];j=a.points[1];q=o.normalImpulse;g=j.normalImpulse;var ba=(C.x-t*o.rB.y-x.x+v*o.rA.y)*b+(C.y+t*o.rB.x-x.y-v*o.rA.x)*e,ca=(C.x-t*j.rB.y-x.x+v*j.rA.y)*b+(C.y+
t*j.rB.x-x.y-v*j.rA.x)*e;n=ba-o.velocityBias;c=ca-j.velocityBias;f=a.K;n-=f.col1.x*q+f.col2.x*g;for(c-=f.col1.y*q+f.col2.y*g;;){f=a.normalMass;$=-(f.col1.x*n+f.col2.x*c);f=-(f.col1.y*n+f.col2.y*c);if($>=0&&f>=0){q=$-q;g=f-g;a=q*b;q=q*e;b=g*b;e=g*e;x.x-=J*(a+b);x.y-=J*(q+e);v-=T*(o.rA.x*q-o.rA.y*a+j.rA.x*e-j.rA.y*b);C.x+=P*(a+b);C.y+=P*(q+e);t+=X*(o.rB.x*q-o.rB.y*a+j.rB.x*e-j.rB.y*b);o.normalImpulse=$;j.normalImpulse=f;break}$=-o.normalMass*n;f=0;ca=a.K.col1.y*$+c;if($>=0&&ca>=0){q=$-q;g=f-g;a=q*b;
q=q*e;b=g*b;e=g*e;x.x-=J*(a+b);x.y-=J*(q+e);v-=T*(o.rA.x*q-o.rA.y*a+j.rA.x*e-j.rA.y*b);C.x+=P*(a+b);C.y+=P*(q+e);t+=X*(o.rB.x*q-o.rB.y*a+j.rB.x*e-j.rB.y*b);o.normalImpulse=$;j.normalImpulse=f;break}$=0;f=-j.normalMass*c;ba=a.K.col2.x*f+n;if(f>=0&&ba>=0){q=$-q;g=f-g;a=q*b;q=q*e;b=g*b;e=g*e;x.x-=J*(a+b);x.y-=J*(q+e);v-=T*(o.rA.x*q-o.rA.y*a+j.rA.x*e-j.rA.y*b);C.x+=P*(a+b);C.y+=P*(q+e);t+=X*(o.rB.x*q-o.rB.y*a+j.rB.x*e-j.rB.y*b);o.normalImpulse=$;j.normalImpulse=f;break}f=$=0;ba=n;ca=c;if(ba>=0&&ca>=0){q=
$-q;g=f-g;a=q*b;q=q*e;b=g*b;e=g*e;x.x-=J*(a+b);x.y-=J*(q+e);v-=T*(o.rA.x*q-o.rA.y*a+j.rA.x*e-j.rA.y*b);C.x+=P*(a+b);C.y+=P*(q+e);t+=X*(o.rB.x*q-o.rB.y*a+j.rB.x*e-j.rB.y*b);o.normalImpulse=$;j.normalImpulse=f;break}break}}r.m_angularVelocity=v;s.m_angularVelocity=t}};L.prototype.FinalizeVelocityConstraints=function(){for(var j=0;j<this.m_constraintCount;++j)for(var o=this.m_constraints[j],q=o.manifold,n=0;n<o.pointCount;++n){var a=q.m_points[n],c=o.points[n];a.m_normalImpulse=c.normalImpulse;a.m_tangentImpulse=
c.tangentImpulse}};L.prototype.SolvePositionConstraints=function(j){if(j===undefined)j=0;for(var o=0,q=0;q<this.m_constraintCount;q++){var n=this.m_constraints[q],a=n.bodyA,c=n.bodyB,g=a.m_mass*a.m_invMass,b=a.m_mass*a.m_invI,e=c.m_mass*c.m_invMass,f=c.m_mass*c.m_invI;L.s_psm.Initialize(n);for(var m=L.s_psm.m_normal,r=0;r<n.pointCount;r++){var s=n.points[r],v=L.s_psm.m_points[r],t=L.s_psm.m_separations[r],x=v.x-a.m_sweep.c.x,C=v.y-a.m_sweep.c.y,J=v.x-c.m_sweep.c.x;v=v.y-c.m_sweep.c.y;o=o<t?o:t;t=
R.Clamp(j*(t+O.b2_linearSlop),-O.b2_maxLinearCorrection,0);t=-s.equalizedMass*t;s=t*m.x;t=t*m.y;a.m_sweep.c.x-=g*s;a.m_sweep.c.y-=g*t;a.m_sweep.a-=b*(x*t-C*s);a.SynchronizeTransform();c.m_sweep.c.x+=e*s;c.m_sweep.c.y+=e*t;c.m_sweep.a+=f*(J*t-v*s);c.SynchronizeTransform()}}return o>-1.5*O.b2_linearSlop};Box2D.postDefs.push(function(){Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold=new l;Box2D.Dynamics.Contacts.b2ContactSolver.s_psm=new u});Box2D.inherit(I,Box2D.Dynamics.Contacts.b2Contact);
I.prototype.__super=Box2D.Dynamics.Contacts.b2Contact.prototype;I.b2EdgeAndCircleContact=function(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this,arguments)};I.Create=function(){return new I};I.Destroy=function(){};I.prototype.Reset=function(j,o){this.__super.Reset.call(this,j,o)};I.prototype.Evaluate=function(){var j=this.m_fixtureA.GetBody(),o=this.m_fixtureB.GetBody();this.b2CollideEdgeAndCircle(this.m_manifold,this.m_fixtureA.GetShape()instanceof G?this.m_fixtureA.GetShape():null,j.m_xf,
this.m_fixtureB.GetShape()instanceof F?this.m_fixtureB.GetShape():null,o.m_xf)};I.prototype.b2CollideEdgeAndCircle=function(){};Box2D.inherit(W,Box2D.Dynamics.Contacts.b2Contact);W.prototype.__super=Box2D.Dynamics.Contacts.b2Contact.prototype;W.b2NullContact=function(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this,arguments)};W.prototype.b2NullContact=function(){this.__super.b2Contact.call(this)};W.prototype.Evaluate=function(){};Box2D.inherit(Y,Box2D.Dynamics.Contacts.b2Contact);Y.prototype.__super=
Box2D.Dynamics.Contacts.b2Contact.prototype;Y.b2PolyAndCircleContact=function(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this,arguments)};Y.Create=function(){return new Y};Y.Destroy=function(){};Y.prototype.Reset=function(j,o){this.__super.Reset.call(this,j,o);O.b2Assert(j.GetType()==y.e_polygonShape);O.b2Assert(o.GetType()==y.e_circleShape)};Y.prototype.Evaluate=function(){var j=this.m_fixtureA.m_body,o=this.m_fixtureB.m_body;S.CollidePolygonAndCircle(this.m_manifold,this.m_fixtureA.GetShape()instanceof
K?this.m_fixtureA.GetShape():null,j.m_xf,this.m_fixtureB.GetShape()instanceof F?this.m_fixtureB.GetShape():null,o.m_xf)};Box2D.inherit(k,Box2D.Dynamics.Contacts.b2Contact);k.prototype.__super=Box2D.Dynamics.Contacts.b2Contact.prototype;k.b2PolyAndEdgeContact=function(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this,arguments)};k.Create=function(){return new k};k.Destroy=function(){};k.prototype.Reset=function(j,o){this.__super.Reset.call(this,j,o);O.b2Assert(j.GetType()==y.e_polygonShape);
O.b2Assert(o.GetType()==y.e_edgeShape)};k.prototype.Evaluate=function(){var j=this.m_fixtureA.GetBody(),o=this.m_fixtureB.GetBody();this.b2CollidePolyAndEdge(this.m_manifold,this.m_fixtureA.GetShape()instanceof K?this.m_fixtureA.GetShape():null,j.m_xf,this.m_fixtureB.GetShape()instanceof G?this.m_fixtureB.GetShape():null,o.m_xf)};k.prototype.b2CollidePolyAndEdge=function(){};Box2D.inherit(z,Box2D.Dynamics.Contacts.b2Contact);z.prototype.__super=Box2D.Dynamics.Contacts.b2Contact.prototype;z.b2PolygonContact=
function(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this,arguments)};z.Create=function(){return new z};z.Destroy=function(){};z.prototype.Reset=function(j,o){this.__super.Reset.call(this,j,o)};z.prototype.Evaluate=function(){var j=this.m_fixtureA.GetBody(),o=this.m_fixtureB.GetBody();S.CollidePolygons(this.m_manifold,this.m_fixtureA.GetShape()instanceof K?this.m_fixtureA.GetShape():null,j.m_xf,this.m_fixtureB.GetShape()instanceof K?this.m_fixtureB.GetShape():null,o.m_xf)};u.b2PositionSolverManifold=
function(){};u.prototype.b2PositionSolverManifold=function(){this.m_normal=new N;this.m_separations=new Vector_a2j_Number(O.b2_maxManifoldPoints);this.m_points=new Vector(O.b2_maxManifoldPoints);for(var j=0;j<O.b2_maxManifoldPoints;j++)this.m_points[j]=new N};u.prototype.Initialize=function(j){O.b2Assert(j.pointCount>0);var o=0,q=0,n=0,a,c=0,g=0;switch(j.type){case Z.e_circles:a=j.bodyA.m_xf.R;n=j.localPoint;o=j.bodyA.m_xf.position.x+(a.col1.x*n.x+a.col2.x*n.y);q=j.bodyA.m_xf.position.y+(a.col1.y*
n.x+a.col2.y*n.y);a=j.bodyB.m_xf.R;n=j.points[0].localPoint;c=j.bodyB.m_xf.position.x+(a.col1.x*n.x+a.col2.x*n.y);a=j.bodyB.m_xf.position.y+(a.col1.y*n.x+a.col2.y*n.y);n=c-o;g=a-q;var b=n*n+g*g;if(b>Number.MIN_VALUE*Number.MIN_VALUE){b=Math.sqrt(b);this.m_normal.x=n/b;this.m_normal.y=g/b}else{this.m_normal.x=1;this.m_normal.y=0}this.m_points[0].x=0.5*(o+c);this.m_points[0].y=0.5*(q+a);this.m_separations[0]=n*this.m_normal.x+g*this.m_normal.y-j.radius;break;case Z.e_faceA:a=j.bodyA.m_xf.R;n=j.localPlaneNormal;
this.m_normal.x=a.col1.x*n.x+a.col2.x*n.y;this.m_normal.y=a.col1.y*n.x+a.col2.y*n.y;a=j.bodyA.m_xf.R;n=j.localPoint;c=j.bodyA.m_xf.position.x+(a.col1.x*n.x+a.col2.x*n.y);g=j.bodyA.m_xf.position.y+(a.col1.y*n.x+a.col2.y*n.y);a=j.bodyB.m_xf.R;for(o=0;o<j.pointCount;++o){n=j.points[o].localPoint;q=j.bodyB.m_xf.position.x+(a.col1.x*n.x+a.col2.x*n.y);n=j.bodyB.m_xf.position.y+(a.col1.y*n.x+a.col2.y*n.y);this.m_separations[o]=(q-c)*this.m_normal.x+(n-g)*this.m_normal.y-j.radius;this.m_points[o].x=q;this.m_points[o].y=
n}break;case Z.e_faceB:a=j.bodyB.m_xf.R;n=j.localPlaneNormal;this.m_normal.x=a.col1.x*n.x+a.col2.x*n.y;this.m_normal.y=a.col1.y*n.x+a.col2.y*n.y;a=j.bodyB.m_xf.R;n=j.localPoint;c=j.bodyB.m_xf.position.x+(a.col1.x*n.x+a.col2.x*n.y);g=j.bodyB.m_xf.position.y+(a.col1.y*n.x+a.col2.y*n.y);a=j.bodyA.m_xf.R;for(o=0;o<j.pointCount;++o){n=j.points[o].localPoint;q=j.bodyA.m_xf.position.x+(a.col1.x*n.x+a.col2.x*n.y);n=j.bodyA.m_xf.position.y+(a.col1.y*n.x+a.col2.y*n.y);this.m_separations[o]=(q-c)*this.m_normal.x+
(n-g)*this.m_normal.y-j.radius;this.m_points[o].Set(q,n)}this.m_normal.x*=-1;this.m_normal.y*=-1}};Box2D.postDefs.push(function(){Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA=new N;Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB=new N})})();
(function(){var F=Box2D.Common.Math.b2Mat22,G=Box2D.Common.Math.b2Math,K=Box2D.Common.Math.b2Vec2,y=Box2D.Common.b2Color,w=Box2D.Dynamics.Controllers.b2BuoyancyController,A=Box2D.Dynamics.Controllers.b2ConstantAccelController,U=Box2D.Dynamics.Controllers.b2ConstantForceController,p=Box2D.Dynamics.Controllers.b2Controller,B=Box2D.Dynamics.Controllers.b2ControllerEdge,Q=Box2D.Dynamics.Controllers.b2GravityController,V=Box2D.Dynamics.Controllers.b2TensorDampingController;Box2D.inherit(w,Box2D.Dynamics.Controllers.b2Controller);
w.prototype.__super=Box2D.Dynamics.Controllers.b2Controller.prototype;w.b2BuoyancyController=function(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this,arguments);this.normal=new K(0,-1);this.density=this.offset=0;this.velocity=new K(0,0);this.linearDrag=2;this.angularDrag=1;this.useDensity=false;this.useWorldGravity=true;this.gravity=null};w.prototype.Step=function(){if(this.m_bodyList){if(this.useWorldGravity)this.gravity=this.GetWorld().GetGravity().Copy();for(var M=this.m_bodyList;M;M=
M.nextBody){var L=M.body;if(L.IsAwake()!=false){for(var I=new K,W=new K,Y=0,k=0,z=L.GetFixtureList();z;z=z.GetNext()){var u=new K,D=z.GetShape().ComputeSubmergedArea(this.normal,this.offset,L.GetTransform(),u);Y+=D;I.x+=D*u.x;I.y+=D*u.y;var H=0;H=1;k+=D*H;W.x+=D*u.x*H;W.y+=D*u.y*H}I.x/=Y;I.y/=Y;W.x/=k;W.y/=k;if(!(Y<Number.MIN_VALUE)){k=this.gravity.GetNegative();k.Multiply(this.density*Y);L.ApplyForce(k,W);W=L.GetLinearVelocityFromWorldPoint(I);W.Subtract(this.velocity);W.Multiply(-this.linearDrag*
Y);L.ApplyForce(W,I);L.ApplyTorque(-L.GetInertia()/L.GetMass()*Y*L.GetAngularVelocity()*this.angularDrag)}}}}};w.prototype.Draw=function(M){var L=new K,I=new K;L.x=this.normal.x*this.offset+this.normal.y*1E3;L.y=this.normal.y*this.offset-this.normal.x*1E3;I.x=this.normal.x*this.offset-this.normal.y*1E3;I.y=this.normal.y*this.offset+this.normal.x*1E3;var W=new y(0,0,1);M.DrawSegment(L,I,W)};Box2D.inherit(A,Box2D.Dynamics.Controllers.b2Controller);A.prototype.__super=Box2D.Dynamics.Controllers.b2Controller.prototype;
A.b2ConstantAccelController=function(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this,arguments);this.A=new K(0,0)};A.prototype.Step=function(M){M=new K(this.A.x*M.dt,this.A.y*M.dt);for(var L=this.m_bodyList;L;L=L.nextBody){var I=L.body;I.IsAwake()&&I.SetLinearVelocity(new K(I.GetLinearVelocity().x+M.x,I.GetLinearVelocity().y+M.y))}};Box2D.inherit(U,Box2D.Dynamics.Controllers.b2Controller);U.prototype.__super=Box2D.Dynamics.Controllers.b2Controller.prototype;U.b2ConstantForceController=
function(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this,arguments);this.F=new K(0,0)};U.prototype.Step=function(){for(var M=this.m_bodyList;M;M=M.nextBody){var L=M.body;L.IsAwake()&&L.ApplyForce(this.F,L.GetWorldCenter())}};p.b2Controller=function(){};p.prototype.Step=function(){};p.prototype.Draw=function(){};p.prototype.AddBody=function(M){var L=new B;L.controller=this;L.body=M;L.nextBody=this.m_bodyList;L.prevBody=null;this.m_bodyList=L;if(L.nextBody)L.nextBody.prevBody=L;this.m_bodyCount++;
L.nextController=M.m_controllerList;L.prevController=null;M.m_controllerList=L;if(L.nextController)L.nextController.prevController=L;M.m_controllerCount++};p.prototype.RemoveBody=function(M){for(var L=M.m_controllerList;L&&L.controller!=this;)L=L.nextController;if(L.prevBody)L.prevBody.nextBody=L.nextBody;if(L.nextBody)L.nextBody.prevBody=L.prevBody;if(L.nextController)L.nextController.prevController=L.prevController;if(L.prevController)L.prevController.nextController=L.nextController;if(this.m_bodyList==
L)this.m_bodyList=L.nextBody;if(M.m_controllerList==L)M.m_controllerList=L.nextController;M.m_controllerCount--;this.m_bodyCount--};p.prototype.Clear=function(){for(;this.m_bodyList;)this.RemoveBody(this.m_bodyList.body)};p.prototype.GetNext=function(){return this.m_next};p.prototype.GetWorld=function(){return this.m_world};p.prototype.GetBodyList=function(){return this.m_bodyList};B.b2ControllerEdge=function(){};Box2D.inherit(Q,Box2D.Dynamics.Controllers.b2Controller);Q.prototype.__super=Box2D.Dynamics.Controllers.b2Controller.prototype;
Q.b2GravityController=function(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this,arguments);this.G=1;this.invSqr=true};Q.prototype.Step=function(){var M=null,L=null,I=null,W=0,Y=null,k=null,z=null,u=0,D=0,H=0;u=null;if(this.invSqr)for(M=this.m_bodyList;M;M=M.nextBody){L=M.body;I=L.GetWorldCenter();W=L.GetMass();for(Y=this.m_bodyList;Y!=M;Y=Y.nextBody){k=Y.body;z=k.GetWorldCenter();u=z.x-I.x;D=z.y-I.y;H=u*u+D*D;if(!(H<Number.MIN_VALUE)){u=new K(u,D);u.Multiply(this.G/H/Math.sqrt(H)*
W*k.GetMass());L.IsAwake()&&L.ApplyForce(u,I);u.Multiply(-1);k.IsAwake()&&k.ApplyForce(u,z)}}}else for(M=this.m_bodyList;M;M=M.nextBody){L=M.body;I=L.GetWorldCenter();W=L.GetMass();for(Y=this.m_bodyList;Y!=M;Y=Y.nextBody){k=Y.body;z=k.GetWorldCenter();u=z.x-I.x;D=z.y-I.y;H=u*u+D*D;if(!(H<Number.MIN_VALUE)){u=new K(u,D);u.Multiply(this.G/H*W*k.GetMass());L.IsAwake()&&L.ApplyForce(u,I);u.Multiply(-1);k.IsAwake()&&k.ApplyForce(u,z)}}}};Box2D.inherit(V,Box2D.Dynamics.Controllers.b2Controller);V.prototype.__super=
Box2D.Dynamics.Controllers.b2Controller.prototype;V.b2TensorDampingController=function(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this,arguments);this.T=new F;this.maxTimestep=0};V.prototype.SetAxisAligned=function(M,L){if(M===undefined)M=0;if(L===undefined)L=0;this.T.col1.x=-M;this.T.col1.y=0;this.T.col2.x=0;this.T.col2.y=-L;this.maxTimestep=M>0||L>0?1/Math.max(M,L):0};V.prototype.Step=function(M){M=M.dt;if(!(M<=Number.MIN_VALUE)){if(M>this.maxTimestep&&this.maxTimestep>0)M=this.maxTimestep;
for(var L=this.m_bodyList;L;L=L.nextBody){var I=L.body;if(I.IsAwake()){var W=I.GetWorldVector(G.MulMV(this.T,I.GetLocalVector(I.GetLinearVelocity())));I.SetLinearVelocity(new K(I.GetLinearVelocity().x+W.x*M,I.GetLinearVelocity().y+W.y*M))}}}}})();
(function(){var F=Box2D.Common.b2Settings,G=Box2D.Common.Math.b2Mat22,K=Box2D.Common.Math.b2Mat33,y=Box2D.Common.Math.b2Math,w=Box2D.Common.Math.b2Vec2,A=Box2D.Common.Math.b2Vec3,U=Box2D.Dynamics.Joints.b2DistanceJoint,p=Box2D.Dynamics.Joints.b2DistanceJointDef,B=Box2D.Dynamics.Joints.b2FrictionJoint,Q=Box2D.Dynamics.Joints.b2FrictionJointDef,V=Box2D.Dynamics.Joints.b2GearJoint,M=Box2D.Dynamics.Joints.b2GearJointDef,L=Box2D.Dynamics.Joints.b2Jacobian,I=Box2D.Dynamics.Joints.b2Joint,W=Box2D.Dynamics.Joints.b2JointDef,
Y=Box2D.Dynamics.Joints.b2JointEdge,k=Box2D.Dynamics.Joints.b2LineJoint,z=Box2D.Dynamics.Joints.b2LineJointDef,u=Box2D.Dynamics.Joints.b2MouseJoint,D=Box2D.Dynamics.Joints.b2MouseJointDef,H=Box2D.Dynamics.Joints.b2PrismaticJoint,O=Box2D.Dynamics.Joints.b2PrismaticJointDef,E=Box2D.Dynamics.Joints.b2PulleyJoint,R=Box2D.Dynamics.Joints.b2PulleyJointDef,N=Box2D.Dynamics.Joints.b2RevoluteJoint,S=Box2D.Dynamics.Joints.b2RevoluteJointDef,aa=Box2D.Dynamics.Joints.b2WeldJoint,Z=Box2D.Dynamics.Joints.b2WeldJointDef;
Box2D.inherit(U,Box2D.Dynamics.Joints.b2Joint);U.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;U.b2DistanceJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.m_localAnchor1=new w;this.m_localAnchor2=new w;this.m_u=new w};U.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)};U.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)};U.prototype.GetReactionForce=function(d){if(d===undefined)d=
0;return new w(d*this.m_impulse*this.m_u.x,d*this.m_impulse*this.m_u.y)};U.prototype.GetReactionTorque=function(){return 0};U.prototype.GetLength=function(){return this.m_length};U.prototype.SetLength=function(d){if(d===undefined)d=0;this.m_length=d};U.prototype.GetFrequency=function(){return this.m_frequencyHz};U.prototype.SetFrequency=function(d){if(d===undefined)d=0;this.m_frequencyHz=d};U.prototype.GetDampingRatio=function(){return this.m_dampingRatio};U.prototype.SetDampingRatio=function(d){if(d===
undefined)d=0;this.m_dampingRatio=d};U.prototype.b2DistanceJoint=function(d){this.__super.b2Joint.call(this,d);this.m_localAnchor1.SetV(d.localAnchorA);this.m_localAnchor2.SetV(d.localAnchorB);this.m_length=d.length;this.m_frequencyHz=d.frequencyHz;this.m_dampingRatio=d.dampingRatio;this.m_bias=this.m_gamma=this.m_impulse=0};U.prototype.InitVelocityConstraints=function(d){var h,l=0,j=this.m_bodyA,o=this.m_bodyB;h=j.m_xf.R;var q=this.m_localAnchor1.x-j.m_sweep.localCenter.x,n=this.m_localAnchor1.y-
j.m_sweep.localCenter.y;l=h.col1.x*q+h.col2.x*n;n=h.col1.y*q+h.col2.y*n;q=l;h=o.m_xf.R;var a=this.m_localAnchor2.x-o.m_sweep.localCenter.x,c=this.m_localAnchor2.y-o.m_sweep.localCenter.y;l=h.col1.x*a+h.col2.x*c;c=h.col1.y*a+h.col2.y*c;a=l;this.m_u.x=o.m_sweep.c.x+a-j.m_sweep.c.x-q;this.m_u.y=o.m_sweep.c.y+c-j.m_sweep.c.y-n;l=Math.sqrt(this.m_u.x*this.m_u.x+this.m_u.y*this.m_u.y);l>F.b2_linearSlop?this.m_u.Multiply(1/l):this.m_u.SetZero();h=q*this.m_u.y-n*this.m_u.x;var g=a*this.m_u.y-c*this.m_u.x;
h=j.m_invMass+j.m_invI*h*h+o.m_invMass+o.m_invI*g*g;this.m_mass=h!=0?1/h:0;if(this.m_frequencyHz>0){l=l-this.m_length;g=2*Math.PI*this.m_frequencyHz;var b=this.m_mass*g*g;this.m_gamma=d.dt*(2*this.m_mass*this.m_dampingRatio*g+d.dt*b);this.m_gamma=this.m_gamma!=0?1/this.m_gamma:0;this.m_bias=l*d.dt*b*this.m_gamma;this.m_mass=h+this.m_gamma;this.m_mass=this.m_mass!=0?1/this.m_mass:0}if(d.warmStarting){this.m_impulse*=d.dtRatio;d=this.m_impulse*this.m_u.x;h=this.m_impulse*this.m_u.y;j.m_linearVelocity.x-=
j.m_invMass*d;j.m_linearVelocity.y-=j.m_invMass*h;j.m_angularVelocity-=j.m_invI*(q*h-n*d);o.m_linearVelocity.x+=o.m_invMass*d;o.m_linearVelocity.y+=o.m_invMass*h;o.m_angularVelocity+=o.m_invI*(a*h-c*d)}else this.m_impulse=0};U.prototype.SolveVelocityConstraints=function(){var d,h=this.m_bodyA,l=this.m_bodyB;d=h.m_xf.R;var j=this.m_localAnchor1.x-h.m_sweep.localCenter.x,o=this.m_localAnchor1.y-h.m_sweep.localCenter.y,q=d.col1.x*j+d.col2.x*o;o=d.col1.y*j+d.col2.y*o;j=q;d=l.m_xf.R;var n=this.m_localAnchor2.x-
l.m_sweep.localCenter.x,a=this.m_localAnchor2.y-l.m_sweep.localCenter.y;q=d.col1.x*n+d.col2.x*a;a=d.col1.y*n+d.col2.y*a;n=q;q=-this.m_mass*(this.m_u.x*(l.m_linearVelocity.x+-l.m_angularVelocity*a-(h.m_linearVelocity.x+-h.m_angularVelocity*o))+this.m_u.y*(l.m_linearVelocity.y+l.m_angularVelocity*n-(h.m_linearVelocity.y+h.m_angularVelocity*j))+this.m_bias+this.m_gamma*this.m_impulse);this.m_impulse+=q;d=q*this.m_u.x;q=q*this.m_u.y;h.m_linearVelocity.x-=h.m_invMass*d;h.m_linearVelocity.y-=h.m_invMass*
q;h.m_angularVelocity-=h.m_invI*(j*q-o*d);l.m_linearVelocity.x+=l.m_invMass*d;l.m_linearVelocity.y+=l.m_invMass*q;l.m_angularVelocity+=l.m_invI*(n*q-a*d)};U.prototype.SolvePositionConstraints=function(){var d;if(this.m_frequencyHz>0)return true;var h=this.m_bodyA,l=this.m_bodyB;d=h.m_xf.R;var j=this.m_localAnchor1.x-h.m_sweep.localCenter.x,o=this.m_localAnchor1.y-h.m_sweep.localCenter.y,q=d.col1.x*j+d.col2.x*o;o=d.col1.y*j+d.col2.y*o;j=q;d=l.m_xf.R;var n=this.m_localAnchor2.x-l.m_sweep.localCenter.x,
a=this.m_localAnchor2.y-l.m_sweep.localCenter.y;q=d.col1.x*n+d.col2.x*a;a=d.col1.y*n+d.col2.y*a;n=q;q=l.m_sweep.c.x+n-h.m_sweep.c.x-j;var c=l.m_sweep.c.y+a-h.m_sweep.c.y-o;d=Math.sqrt(q*q+c*c);q/=d;c/=d;d=d-this.m_length;d=y.Clamp(d,-F.b2_maxLinearCorrection,F.b2_maxLinearCorrection);var g=-this.m_mass*d;this.m_u.Set(q,c);q=g*this.m_u.x;c=g*this.m_u.y;h.m_sweep.c.x-=h.m_invMass*q;h.m_sweep.c.y-=h.m_invMass*c;h.m_sweep.a-=h.m_invI*(j*c-o*q);l.m_sweep.c.x+=l.m_invMass*q;l.m_sweep.c.y+=l.m_invMass*c;
l.m_sweep.a+=l.m_invI*(n*c-a*q);h.SynchronizeTransform();l.SynchronizeTransform();return y.Abs(d)<F.b2_linearSlop};Box2D.inherit(p,Box2D.Dynamics.Joints.b2JointDef);p.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;p.b2DistanceJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments);this.localAnchorA=new w;this.localAnchorB=new w};p.prototype.b2DistanceJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_distanceJoint;this.length=1;this.dampingRatio=
this.frequencyHz=0};p.prototype.Initialize=function(d,h,l,j){this.bodyA=d;this.bodyB=h;this.localAnchorA.SetV(this.bodyA.GetLocalPoint(l));this.localAnchorB.SetV(this.bodyB.GetLocalPoint(j));d=j.x-l.x;l=j.y-l.y;this.length=Math.sqrt(d*d+l*l);this.dampingRatio=this.frequencyHz=0};Box2D.inherit(B,Box2D.Dynamics.Joints.b2Joint);B.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;B.b2FrictionJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.m_localAnchorA=new w;
this.m_localAnchorB=new w;this.m_linearMass=new G;this.m_linearImpulse=new w};B.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA)};B.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB)};B.prototype.GetReactionForce=function(d){if(d===undefined)d=0;return new w(d*this.m_linearImpulse.x,d*this.m_linearImpulse.y)};B.prototype.GetReactionTorque=function(d){if(d===undefined)d=0;return d*this.m_angularImpulse};B.prototype.SetMaxForce=
function(d){if(d===undefined)d=0;this.m_maxForce=d};B.prototype.GetMaxForce=function(){return this.m_maxForce};B.prototype.SetMaxTorque=function(d){if(d===undefined)d=0;this.m_maxTorque=d};B.prototype.GetMaxTorque=function(){return this.m_maxTorque};B.prototype.b2FrictionJoint=function(d){this.__super.b2Joint.call(this,d);this.m_localAnchorA.SetV(d.localAnchorA);this.m_localAnchorB.SetV(d.localAnchorB);this.m_linearMass.SetZero();this.m_angularMass=0;this.m_linearImpulse.SetZero();this.m_angularImpulse=
0;this.m_maxForce=d.maxForce;this.m_maxTorque=d.maxTorque};B.prototype.InitVelocityConstraints=function(d){var h,l=0,j=this.m_bodyA,o=this.m_bodyB;h=j.m_xf.R;var q=this.m_localAnchorA.x-j.m_sweep.localCenter.x,n=this.m_localAnchorA.y-j.m_sweep.localCenter.y;l=h.col1.x*q+h.col2.x*n;n=h.col1.y*q+h.col2.y*n;q=l;h=o.m_xf.R;var a=this.m_localAnchorB.x-o.m_sweep.localCenter.x,c=this.m_localAnchorB.y-o.m_sweep.localCenter.y;l=h.col1.x*a+h.col2.x*c;c=h.col1.y*a+h.col2.y*c;a=l;h=j.m_invMass;l=o.m_invMass;
var g=j.m_invI,b=o.m_invI,e=new G;e.col1.x=h+l;e.col2.x=0;e.col1.y=0;e.col2.y=h+l;e.col1.x+=g*n*n;e.col2.x+=-g*q*n;e.col1.y+=-g*q*n;e.col2.y+=g*q*q;e.col1.x+=b*c*c;e.col2.x+=-b*a*c;e.col1.y+=-b*a*c;e.col2.y+=b*a*a;e.GetInverse(this.m_linearMass);this.m_angularMass=g+b;if(this.m_angularMass>0)this.m_angularMass=1/this.m_angularMass;if(d.warmStarting){this.m_linearImpulse.x*=d.dtRatio;this.m_linearImpulse.y*=d.dtRatio;this.m_angularImpulse*=d.dtRatio;d=this.m_linearImpulse;j.m_linearVelocity.x-=h*d.x;
j.m_linearVelocity.y-=h*d.y;j.m_angularVelocity-=g*(q*d.y-n*d.x+this.m_angularImpulse);o.m_linearVelocity.x+=l*d.x;o.m_linearVelocity.y+=l*d.y;o.m_angularVelocity+=b*(a*d.y-c*d.x+this.m_angularImpulse)}else{this.m_linearImpulse.SetZero();this.m_angularImpulse=0}};B.prototype.SolveVelocityConstraints=function(d){var h,l=0,j=this.m_bodyA,o=this.m_bodyB,q=j.m_linearVelocity,n=j.m_angularVelocity,a=o.m_linearVelocity,c=o.m_angularVelocity,g=j.m_invMass,b=o.m_invMass,e=j.m_invI,f=o.m_invI;h=j.m_xf.R;var m=
this.m_localAnchorA.x-j.m_sweep.localCenter.x,r=this.m_localAnchorA.y-j.m_sweep.localCenter.y;l=h.col1.x*m+h.col2.x*r;r=h.col1.y*m+h.col2.y*r;m=l;h=o.m_xf.R;var s=this.m_localAnchorB.x-o.m_sweep.localCenter.x,v=this.m_localAnchorB.y-o.m_sweep.localCenter.y;l=h.col1.x*s+h.col2.x*v;v=h.col1.y*s+h.col2.y*v;s=l;h=0;l=-this.m_angularMass*(c-n);var t=this.m_angularImpulse;h=d.dt*this.m_maxTorque;this.m_angularImpulse=y.Clamp(this.m_angularImpulse+l,-h,h);l=this.m_angularImpulse-t;n-=e*l;c+=f*l;h=y.MulMV(this.m_linearMass,
new w(-(a.x-c*v-q.x+n*r),-(a.y+c*s-q.y-n*m)));l=this.m_linearImpulse.Copy();this.m_linearImpulse.Add(h);h=d.dt*this.m_maxForce;if(this.m_linearImpulse.LengthSquared()>h*h){this.m_linearImpulse.Normalize();this.m_linearImpulse.Multiply(h)}h=y.SubtractVV(this.m_linearImpulse,l);q.x-=g*h.x;q.y-=g*h.y;n-=e*(m*h.y-r*h.x);a.x+=b*h.x;a.y+=b*h.y;c+=f*(s*h.y-v*h.x);j.m_angularVelocity=n;o.m_angularVelocity=c};B.prototype.SolvePositionConstraints=function(){return true};Box2D.inherit(Q,Box2D.Dynamics.Joints.b2JointDef);
Q.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;Q.b2FrictionJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments);this.localAnchorA=new w;this.localAnchorB=new w};Q.prototype.b2FrictionJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_frictionJoint;this.maxTorque=this.maxForce=0};Q.prototype.Initialize=function(d,h,l){this.bodyA=d;this.bodyB=h;this.localAnchorA.SetV(this.bodyA.GetLocalPoint(l));this.localAnchorB.SetV(this.bodyB.GetLocalPoint(l))};
Box2D.inherit(V,Box2D.Dynamics.Joints.b2Joint);V.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;V.b2GearJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.m_groundAnchor1=new w;this.m_groundAnchor2=new w;this.m_localAnchor1=new w;this.m_localAnchor2=new w;this.m_J=new L};V.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)};V.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)};V.prototype.GetReactionForce=
function(d){if(d===undefined)d=0;return new w(d*this.m_impulse*this.m_J.linearB.x,d*this.m_impulse*this.m_J.linearB.y)};V.prototype.GetReactionTorque=function(d){if(d===undefined)d=0;var h=this.m_bodyB.m_xf.R,l=this.m_localAnchor1.x-this.m_bodyB.m_sweep.localCenter.x,j=this.m_localAnchor1.y-this.m_bodyB.m_sweep.localCenter.y,o=h.col1.x*l+h.col2.x*j;j=h.col1.y*l+h.col2.y*j;l=o;return d*(this.m_impulse*this.m_J.angularB-l*this.m_impulse*this.m_J.linearB.y+j*this.m_impulse*this.m_J.linearB.x)};V.prototype.GetRatio=
function(){return this.m_ratio};V.prototype.SetRatio=function(d){if(d===undefined)d=0;this.m_ratio=d};V.prototype.b2GearJoint=function(d){this.__super.b2Joint.call(this,d);var h=parseInt(d.joint1.m_type),l=parseInt(d.joint2.m_type);this.m_prismatic2=this.m_revolute2=this.m_prismatic1=this.m_revolute1=null;var j=0,o=0;this.m_ground1=d.joint1.GetBodyA();this.m_bodyA=d.joint1.GetBodyB();if(h==I.e_revoluteJoint){this.m_revolute1=d.joint1 instanceof N?d.joint1:null;this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);
this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);j=this.m_revolute1.GetJointAngle()}else{this.m_prismatic1=d.joint1 instanceof H?d.joint1:null;this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);j=this.m_prismatic1.GetJointTranslation()}this.m_ground2=d.joint2.GetBodyA();this.m_bodyB=d.joint2.GetBodyB();if(l==I.e_revoluteJoint){this.m_revolute2=d.joint2 instanceof N?d.joint2:null;this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);
this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);o=this.m_revolute2.GetJointAngle()}else{this.m_prismatic2=d.joint2 instanceof H?d.joint2:null;this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);o=this.m_prismatic2.GetJointTranslation()}this.m_ratio=d.ratio;this.m_constant=j+this.m_ratio*o;this.m_impulse=0};V.prototype.InitVelocityConstraints=function(d){var h=this.m_ground1,l=this.m_ground2,j=this.m_bodyA,o=this.m_bodyB,
q=0,n=0,a=0,c=0,g=a=0,b=0;this.m_J.SetZero();if(this.m_revolute1){this.m_J.angularA=-1;b+=j.m_invI}else{h=h.m_xf.R;n=this.m_prismatic1.m_localXAxis1;q=h.col1.x*n.x+h.col2.x*n.y;n=h.col1.y*n.x+h.col2.y*n.y;h=j.m_xf.R;a=this.m_localAnchor1.x-j.m_sweep.localCenter.x;c=this.m_localAnchor1.y-j.m_sweep.localCenter.y;g=h.col1.x*a+h.col2.x*c;c=h.col1.y*a+h.col2.y*c;a=g;a=a*n-c*q;this.m_J.linearA.Set(-q,-n);this.m_J.angularA=-a;b+=j.m_invMass+j.m_invI*a*a}if(this.m_revolute2){this.m_J.angularB=-this.m_ratio;
b+=this.m_ratio*this.m_ratio*o.m_invI}else{h=l.m_xf.R;n=this.m_prismatic2.m_localXAxis1;q=h.col1.x*n.x+h.col2.x*n.y;n=h.col1.y*n.x+h.col2.y*n.y;h=o.m_xf.R;a=this.m_localAnchor2.x-o.m_sweep.localCenter.x;c=this.m_localAnchor2.y-o.m_sweep.localCenter.y;g=h.col1.x*a+h.col2.x*c;c=h.col1.y*a+h.col2.y*c;a=g;a=a*n-c*q;this.m_J.linearB.Set(-this.m_ratio*q,-this.m_ratio*n);this.m_J.angularB=-this.m_ratio*a;b+=this.m_ratio*this.m_ratio*(o.m_invMass+o.m_invI*a*a)}this.m_mass=b>0?1/b:0;if(d.warmStarting){j.m_linearVelocity.x+=
j.m_invMass*this.m_impulse*this.m_J.linearA.x;j.m_linearVelocity.y+=j.m_invMass*this.m_impulse*this.m_J.linearA.y;j.m_angularVelocity+=j.m_invI*this.m_impulse*this.m_J.angularA;o.m_linearVelocity.x+=o.m_invMass*this.m_impulse*this.m_J.linearB.x;o.m_linearVelocity.y+=o.m_invMass*this.m_impulse*this.m_J.linearB.y;o.m_angularVelocity+=o.m_invI*this.m_impulse*this.m_J.angularB}else this.m_impulse=0};V.prototype.SolveVelocityConstraints=function(){var d=this.m_bodyA,h=this.m_bodyB,l=-this.m_mass*this.m_J.Compute(d.m_linearVelocity,
d.m_angularVelocity,h.m_linearVelocity,h.m_angularVelocity);this.m_impulse+=l;d.m_linearVelocity.x+=d.m_invMass*l*this.m_J.linearA.x;d.m_linearVelocity.y+=d.m_invMass*l*this.m_J.linearA.y;d.m_angularVelocity+=d.m_invI*l*this.m_J.angularA;h.m_linearVelocity.x+=h.m_invMass*l*this.m_J.linearB.x;h.m_linearVelocity.y+=h.m_invMass*l*this.m_J.linearB.y;h.m_angularVelocity+=h.m_invI*l*this.m_J.angularB};V.prototype.SolvePositionConstraints=function(){var d=this.m_bodyA,h=this.m_bodyB,l=0,j=0;l=this.m_revolute1?
this.m_revolute1.GetJointAngle():this.m_prismatic1.GetJointTranslation();j=this.m_revolute2?this.m_revolute2.GetJointAngle():this.m_prismatic2.GetJointTranslation();l=-this.m_mass*(this.m_constant-(l+this.m_ratio*j));d.m_sweep.c.x+=d.m_invMass*l*this.m_J.linearA.x;d.m_sweep.c.y+=d.m_invMass*l*this.m_J.linearA.y;d.m_sweep.a+=d.m_invI*l*this.m_J.angularA;h.m_sweep.c.x+=h.m_invMass*l*this.m_J.linearB.x;h.m_sweep.c.y+=h.m_invMass*l*this.m_J.linearB.y;h.m_sweep.a+=h.m_invI*l*this.m_J.angularB;d.SynchronizeTransform();
h.SynchronizeTransform();return 0<F.b2_linearSlop};Box2D.inherit(M,Box2D.Dynamics.Joints.b2JointDef);M.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;M.b2GearJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments)};M.prototype.b2GearJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_gearJoint;this.joint2=this.joint1=null;this.ratio=1};L.b2Jacobian=function(){this.linearA=new w;this.linearB=new w};L.prototype.SetZero=function(){this.linearA.SetZero();
this.angularA=0;this.linearB.SetZero();this.angularB=0};L.prototype.Set=function(d,h,l,j){if(h===undefined)h=0;if(j===undefined)j=0;this.linearA.SetV(d);this.angularA=h;this.linearB.SetV(l);this.angularB=j};L.prototype.Compute=function(d,h,l,j){if(h===undefined)h=0;if(j===undefined)j=0;return this.linearA.x*d.x+this.linearA.y*d.y+this.angularA*h+(this.linearB.x*l.x+this.linearB.y*l.y)+this.angularB*j};I.b2Joint=function(){this.m_edgeA=new Y;this.m_edgeB=new Y;this.m_localCenterA=new w;this.m_localCenterB=
new w};I.prototype.GetType=function(){return this.m_type};I.prototype.GetAnchorA=function(){return null};I.prototype.GetAnchorB=function(){return null};I.prototype.GetReactionForce=function(){return null};I.prototype.GetReactionTorque=function(){return 0};I.prototype.GetBodyA=function(){return this.m_bodyA};I.prototype.GetBodyB=function(){return this.m_bodyB};I.prototype.GetNext=function(){return this.m_next};I.prototype.GetUserData=function(){return this.m_userData};I.prototype.SetUserData=function(d){this.m_userData=
d};I.prototype.IsActive=function(){return this.m_bodyA.IsActive()&&this.m_bodyB.IsActive()};I.Create=function(d){var h=null;switch(d.type){case I.e_distanceJoint:h=new U(d instanceof p?d:null);break;case I.e_mouseJoint:h=new u(d instanceof D?d:null);break;case I.e_prismaticJoint:h=new H(d instanceof O?d:null);break;case I.e_revoluteJoint:h=new N(d instanceof S?d:null);break;case I.e_pulleyJoint:h=new E(d instanceof R?d:null);break;case I.e_gearJoint:h=new V(d instanceof M?d:null);break;case I.e_lineJoint:h=
new k(d instanceof z?d:null);break;case I.e_weldJoint:h=new aa(d instanceof Z?d:null);break;case I.e_frictionJoint:h=new B(d instanceof Q?d:null)}return h};I.Destroy=function(){};I.prototype.b2Joint=function(d){F.b2Assert(d.bodyA!=d.bodyB);this.m_type=d.type;this.m_next=this.m_prev=null;this.m_bodyA=d.bodyA;this.m_bodyB=d.bodyB;this.m_collideConnected=d.collideConnected;this.m_islandFlag=false;this.m_userData=d.userData};I.prototype.InitVelocityConstraints=function(){};I.prototype.SolveVelocityConstraints=
function(){};I.prototype.FinalizeVelocityConstraints=function(){};I.prototype.SolvePositionConstraints=function(){return false};Box2D.postDefs.push(function(){Box2D.Dynamics.Joints.b2Joint.e_unknownJoint=0;Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint=1;Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint=2;Box2D.Dynamics.Joints.b2Joint.e_distanceJoint=3;Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint=4;Box2D.Dynamics.Joints.b2Joint.e_mouseJoint=5;Box2D.Dynamics.Joints.b2Joint.e_gearJoint=6;Box2D.Dynamics.Joints.b2Joint.e_lineJoint=
7;Box2D.Dynamics.Joints.b2Joint.e_weldJoint=8;Box2D.Dynamics.Joints.b2Joint.e_frictionJoint=9;Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit=0;Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit=1;Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit=2;Box2D.Dynamics.Joints.b2Joint.e_equalLimits=3});W.b2JointDef=function(){};W.prototype.b2JointDef=function(){this.type=I.e_unknownJoint;this.bodyB=this.bodyA=this.userData=null;this.collideConnected=false};Y.b2JointEdge=function(){};Box2D.inherit(k,Box2D.Dynamics.Joints.b2Joint);
k.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;k.b2LineJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.m_localAnchor1=new w;this.m_localAnchor2=new w;this.m_localXAxis1=new w;this.m_localYAxis1=new w;this.m_axis=new w;this.m_perp=new w;this.m_K=new G;this.m_impulse=new w};k.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)};k.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)};k.prototype.GetReactionForce=
function(d){if(d===undefined)d=0;return new w(d*(this.m_impulse.x*this.m_perp.x+(this.m_motorImpulse+this.m_impulse.y)*this.m_axis.x),d*(this.m_impulse.x*this.m_perp.y+(this.m_motorImpulse+this.m_impulse.y)*this.m_axis.y))};k.prototype.GetReactionTorque=function(d){if(d===undefined)d=0;return d*this.m_impulse.y};k.prototype.GetJointTranslation=function(){var d=this.m_bodyA,h=this.m_bodyB,l=d.GetWorldPoint(this.m_localAnchor1),j=h.GetWorldPoint(this.m_localAnchor2);h=j.x-l.x;l=j.y-l.y;d=d.GetWorldVector(this.m_localXAxis1);
return d.x*h+d.y*l};k.prototype.GetJointSpeed=function(){var d=this.m_bodyA,h=this.m_bodyB,l;l=d.m_xf.R;var j=this.m_localAnchor1.x-d.m_sweep.localCenter.x,o=this.m_localAnchor1.y-d.m_sweep.localCenter.y,q=l.col1.x*j+l.col2.x*o;o=l.col1.y*j+l.col2.y*o;j=q;l=h.m_xf.R;var n=this.m_localAnchor2.x-h.m_sweep.localCenter.x,a=this.m_localAnchor2.y-h.m_sweep.localCenter.y;q=l.col1.x*n+l.col2.x*a;a=l.col1.y*n+l.col2.y*a;n=q;l=h.m_sweep.c.x+n-(d.m_sweep.c.x+j);q=h.m_sweep.c.y+a-(d.m_sweep.c.y+o);var c=d.GetWorldVector(this.m_localXAxis1),
g=d.m_linearVelocity,b=h.m_linearVelocity;d=d.m_angularVelocity;h=h.m_angularVelocity;return l*-d*c.y+q*d*c.x+(c.x*(b.x+-h*a-g.x- -d*o)+c.y*(b.y+h*n-g.y-d*j))};k.prototype.IsLimitEnabled=function(){return this.m_enableLimit};k.prototype.EnableLimit=function(d){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableLimit=d};k.prototype.GetLowerLimit=function(){return this.m_lowerTranslation};k.prototype.GetUpperLimit=function(){return this.m_upperTranslation};k.prototype.SetLimits=function(d,
h){if(d===undefined)d=0;if(h===undefined)h=0;this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_lowerTranslation=d;this.m_upperTranslation=h};k.prototype.IsMotorEnabled=function(){return this.m_enableMotor};k.prototype.EnableMotor=function(d){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableMotor=d};k.prototype.SetMotorSpeed=function(d){if(d===undefined)d=0;this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_motorSpeed=d};k.prototype.GetMotorSpeed=function(){return this.m_motorSpeed};
k.prototype.SetMaxMotorForce=function(d){if(d===undefined)d=0;this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_maxMotorForce=d};k.prototype.GetMaxMotorForce=function(){return this.m_maxMotorForce};k.prototype.GetMotorForce=function(){return this.m_motorImpulse};k.prototype.b2LineJoint=function(d){this.__super.b2Joint.call(this,d);this.m_localAnchor1.SetV(d.localAnchorA);this.m_localAnchor2.SetV(d.localAnchorB);this.m_localXAxis1.SetV(d.localAxisA);this.m_localYAxis1.x=-this.m_localXAxis1.y;
this.m_localYAxis1.y=this.m_localXAxis1.x;this.m_impulse.SetZero();this.m_motorImpulse=this.m_motorMass=0;this.m_lowerTranslation=d.lowerTranslation;this.m_upperTranslation=d.upperTranslation;this.m_maxMotorForce=d.maxMotorForce;this.m_motorSpeed=d.motorSpeed;this.m_enableLimit=d.enableLimit;this.m_enableMotor=d.enableMotor;this.m_limitState=I.e_inactiveLimit;this.m_axis.SetZero();this.m_perp.SetZero()};k.prototype.InitVelocityConstraints=function(d){var h=this.m_bodyA,l=this.m_bodyB,j,o=0;this.m_localCenterA.SetV(h.GetLocalCenter());
this.m_localCenterB.SetV(l.GetLocalCenter());var q=h.GetTransform();l.GetTransform();j=h.m_xf.R;var n=this.m_localAnchor1.x-this.m_localCenterA.x,a=this.m_localAnchor1.y-this.m_localCenterA.y;o=j.col1.x*n+j.col2.x*a;a=j.col1.y*n+j.col2.y*a;n=o;j=l.m_xf.R;var c=this.m_localAnchor2.x-this.m_localCenterB.x,g=this.m_localAnchor2.y-this.m_localCenterB.y;o=j.col1.x*c+j.col2.x*g;g=j.col1.y*c+j.col2.y*g;c=o;j=l.m_sweep.c.x+c-h.m_sweep.c.x-n;o=l.m_sweep.c.y+g-h.m_sweep.c.y-a;this.m_invMassA=h.m_invMass;this.m_invMassB=
l.m_invMass;this.m_invIA=h.m_invI;this.m_invIB=l.m_invI;this.m_axis.SetV(y.MulMV(q.R,this.m_localXAxis1));this.m_a1=(j+n)*this.m_axis.y-(o+a)*this.m_axis.x;this.m_a2=c*this.m_axis.y-g*this.m_axis.x;this.m_motorMass=this.m_invMassA+this.m_invMassB+this.m_invIA*this.m_a1*this.m_a1+this.m_invIB*this.m_a2*this.m_a2;this.m_motorMass=this.m_motorMass>Number.MIN_VALUE?1/this.m_motorMass:0;this.m_perp.SetV(y.MulMV(q.R,this.m_localYAxis1));this.m_s1=(j+n)*this.m_perp.y-(o+a)*this.m_perp.x;this.m_s2=c*this.m_perp.y-
g*this.m_perp.x;q=this.m_invMassA;n=this.m_invMassB;a=this.m_invIA;c=this.m_invIB;this.m_K.col1.x=q+n+a*this.m_s1*this.m_s1+c*this.m_s2*this.m_s2;this.m_K.col1.y=a*this.m_s1*this.m_a1+c*this.m_s2*this.m_a2;this.m_K.col2.x=this.m_K.col1.y;this.m_K.col2.y=q+n+a*this.m_a1*this.m_a1+c*this.m_a2*this.m_a2;if(this.m_enableLimit){j=this.m_axis.x*j+this.m_axis.y*o;if(y.Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*F.b2_linearSlop)this.m_limitState=I.e_equalLimits;else if(j<=this.m_lowerTranslation){if(this.m_limitState!=
I.e_atLowerLimit){this.m_limitState=I.e_atLowerLimit;this.m_impulse.y=0}}else if(j>=this.m_upperTranslation){if(this.m_limitState!=I.e_atUpperLimit){this.m_limitState=I.e_atUpperLimit;this.m_impulse.y=0}}else{this.m_limitState=I.e_inactiveLimit;this.m_impulse.y=0}}else this.m_limitState=I.e_inactiveLimit;if(this.m_enableMotor==false)this.m_motorImpulse=0;if(d.warmStarting){this.m_impulse.x*=d.dtRatio;this.m_impulse.y*=d.dtRatio;this.m_motorImpulse*=d.dtRatio;d=this.m_impulse.x*this.m_perp.x+(this.m_motorImpulse+
this.m_impulse.y)*this.m_axis.x;j=this.m_impulse.x*this.m_perp.y+(this.m_motorImpulse+this.m_impulse.y)*this.m_axis.y;o=this.m_impulse.x*this.m_s1+(this.m_motorImpulse+this.m_impulse.y)*this.m_a1;q=this.m_impulse.x*this.m_s2+(this.m_motorImpulse+this.m_impulse.y)*this.m_a2;h.m_linearVelocity.x-=this.m_invMassA*d;h.m_linearVelocity.y-=this.m_invMassA*j;h.m_angularVelocity-=this.m_invIA*o;l.m_linearVelocity.x+=this.m_invMassB*d;l.m_linearVelocity.y+=this.m_invMassB*j;l.m_angularVelocity+=this.m_invIB*
q}else{this.m_impulse.SetZero();this.m_motorImpulse=0}};k.prototype.SolveVelocityConstraints=function(d){var h=this.m_bodyA,l=this.m_bodyB,j=h.m_linearVelocity,o=h.m_angularVelocity,q=l.m_linearVelocity,n=l.m_angularVelocity,a=0,c=0,g=0,b=0;if(this.m_enableMotor&&this.m_limitState!=I.e_equalLimits){b=this.m_motorMass*(this.m_motorSpeed-(this.m_axis.x*(q.x-j.x)+this.m_axis.y*(q.y-j.y)+this.m_a2*n-this.m_a1*o));a=this.m_motorImpulse;c=d.dt*this.m_maxMotorForce;this.m_motorImpulse=y.Clamp(this.m_motorImpulse+
b,-c,c);b=this.m_motorImpulse-a;a=b*this.m_axis.x;c=b*this.m_axis.y;g=b*this.m_a1;b=b*this.m_a2;j.x-=this.m_invMassA*a;j.y-=this.m_invMassA*c;o-=this.m_invIA*g;q.x+=this.m_invMassB*a;q.y+=this.m_invMassB*c;n+=this.m_invIB*b}c=this.m_perp.x*(q.x-j.x)+this.m_perp.y*(q.y-j.y)+this.m_s2*n-this.m_s1*o;if(this.m_enableLimit&&this.m_limitState!=I.e_inactiveLimit){g=this.m_axis.x*(q.x-j.x)+this.m_axis.y*(q.y-j.y)+this.m_a2*n-this.m_a1*o;a=this.m_impulse.Copy();d=this.m_K.Solve(new w,-c,-g);this.m_impulse.Add(d);
if(this.m_limitState==I.e_atLowerLimit)this.m_impulse.y=y.Max(this.m_impulse.y,0);else if(this.m_limitState==I.e_atUpperLimit)this.m_impulse.y=y.Min(this.m_impulse.y,0);c=-c-(this.m_impulse.y-a.y)*this.m_K.col2.x;g=0;g=this.m_K.col1.x!=0?c/this.m_K.col1.x+a.x:a.x;this.m_impulse.x=g;d.x=this.m_impulse.x-a.x;d.y=this.m_impulse.y-a.y;a=d.x*this.m_perp.x+d.y*this.m_axis.x;c=d.x*this.m_perp.y+d.y*this.m_axis.y;g=d.x*this.m_s1+d.y*this.m_a1;b=d.x*this.m_s2+d.y*this.m_a2}else{d=0;d=this.m_K.col1.x!=0?-c/
this.m_K.col1.x:0;this.m_impulse.x+=d;a=d*this.m_perp.x;c=d*this.m_perp.y;g=d*this.m_s1;b=d*this.m_s2}j.x-=this.m_invMassA*a;j.y-=this.m_invMassA*c;o-=this.m_invIA*g;q.x+=this.m_invMassB*a;q.y+=this.m_invMassB*c;n+=this.m_invIB*b;h.m_linearVelocity.SetV(j);h.m_angularVelocity=o;l.m_linearVelocity.SetV(q);l.m_angularVelocity=n};k.prototype.SolvePositionConstraints=function(){var d=this.m_bodyA,h=this.m_bodyB,l=d.m_sweep.c,j=d.m_sweep.a,o=h.m_sweep.c,q=h.m_sweep.a,n,a=0,c=0,g=0,b=0,e=n=0,f=0;c=false;
var m=0,r=G.FromAngle(j);g=G.FromAngle(q);n=r;f=this.m_localAnchor1.x-this.m_localCenterA.x;var s=this.m_localAnchor1.y-this.m_localCenterA.y;a=n.col1.x*f+n.col2.x*s;s=n.col1.y*f+n.col2.y*s;f=a;n=g;g=this.m_localAnchor2.x-this.m_localCenterB.x;b=this.m_localAnchor2.y-this.m_localCenterB.y;a=n.col1.x*g+n.col2.x*b;b=n.col1.y*g+n.col2.y*b;g=a;n=o.x+g-l.x-f;a=o.y+b-l.y-s;if(this.m_enableLimit){this.m_axis=y.MulMV(r,this.m_localXAxis1);this.m_a1=(n+f)*this.m_axis.y-(a+s)*this.m_axis.x;this.m_a2=g*this.m_axis.y-
b*this.m_axis.x;var v=this.m_axis.x*n+this.m_axis.y*a;if(y.Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*F.b2_linearSlop){m=y.Clamp(v,-F.b2_maxLinearCorrection,F.b2_maxLinearCorrection);e=y.Abs(v);c=true}else if(v<=this.m_lowerTranslation){m=y.Clamp(v-this.m_lowerTranslation+F.b2_linearSlop,-F.b2_maxLinearCorrection,0);e=this.m_lowerTranslation-v;c=true}else if(v>=this.m_upperTranslation){m=y.Clamp(v-this.m_upperTranslation+F.b2_linearSlop,0,F.b2_maxLinearCorrection);e=v-this.m_upperTranslation;
c=true}}this.m_perp=y.MulMV(r,this.m_localYAxis1);this.m_s1=(n+f)*this.m_perp.y-(a+s)*this.m_perp.x;this.m_s2=g*this.m_perp.y-b*this.m_perp.x;r=new w;s=this.m_perp.x*n+this.m_perp.y*a;e=y.Max(e,y.Abs(s));f=0;if(c){c=this.m_invMassA;g=this.m_invMassB;b=this.m_invIA;n=this.m_invIB;this.m_K.col1.x=c+g+b*this.m_s1*this.m_s1+n*this.m_s2*this.m_s2;this.m_K.col1.y=b*this.m_s1*this.m_a1+n*this.m_s2*this.m_a2;this.m_K.col2.x=this.m_K.col1.y;this.m_K.col2.y=c+g+b*this.m_a1*this.m_a1+n*this.m_a2*this.m_a2;this.m_K.Solve(r,
-s,-m)}else{c=this.m_invMassA;g=this.m_invMassB;b=this.m_invIA;n=this.m_invIB;m=c+g+b*this.m_s1*this.m_s1+n*this.m_s2*this.m_s2;c=0;c=m!=0?-s/m:0;r.x=c;r.y=0}m=r.x*this.m_perp.x+r.y*this.m_axis.x;c=r.x*this.m_perp.y+r.y*this.m_axis.y;s=r.x*this.m_s1+r.y*this.m_a1;r=r.x*this.m_s2+r.y*this.m_a2;l.x-=this.m_invMassA*m;l.y-=this.m_invMassA*c;j-=this.m_invIA*s;o.x+=this.m_invMassB*m;o.y+=this.m_invMassB*c;q+=this.m_invIB*r;d.m_sweep.a=j;h.m_sweep.a=q;d.SynchronizeTransform();h.SynchronizeTransform();return e<=
F.b2_linearSlop&&f<=F.b2_angularSlop};Box2D.inherit(z,Box2D.Dynamics.Joints.b2JointDef);z.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;z.b2LineJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments);this.localAnchorA=new w;this.localAnchorB=new w;this.localAxisA=new w};z.prototype.b2LineJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_lineJoint;this.localAxisA.Set(1,0);this.enableLimit=false;this.upperTranslation=this.lowerTranslation=
0;this.enableMotor=false;this.motorSpeed=this.maxMotorForce=0};z.prototype.Initialize=function(d,h,l,j){this.bodyA=d;this.bodyB=h;this.localAnchorA=this.bodyA.GetLocalPoint(l);this.localAnchorB=this.bodyB.GetLocalPoint(l);this.localAxisA=this.bodyA.GetLocalVector(j)};Box2D.inherit(u,Box2D.Dynamics.Joints.b2Joint);u.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;u.b2MouseJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.K=new G;this.K1=new G;this.K2=new G;
this.m_localAnchor=new w;this.m_target=new w;this.m_impulse=new w;this.m_mass=new G;this.m_C=new w};u.prototype.GetAnchorA=function(){return this.m_target};u.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchor)};u.prototype.GetReactionForce=function(d){if(d===undefined)d=0;return new w(d*this.m_impulse.x,d*this.m_impulse.y)};u.prototype.GetReactionTorque=function(){return 0};u.prototype.GetTarget=function(){return this.m_target};u.prototype.SetTarget=function(d){this.m_bodyB.IsAwake()==
false&&this.m_bodyB.SetAwake(true);this.m_target=d};u.prototype.GetMaxForce=function(){return this.m_maxForce};u.prototype.SetMaxForce=function(d){if(d===undefined)d=0;this.m_maxForce=d};u.prototype.GetFrequency=function(){return this.m_frequencyHz};u.prototype.SetFrequency=function(d){if(d===undefined)d=0;this.m_frequencyHz=d};u.prototype.GetDampingRatio=function(){return this.m_dampingRatio};u.prototype.SetDampingRatio=function(d){if(d===undefined)d=0;this.m_dampingRatio=d};u.prototype.b2MouseJoint=
function(d){this.__super.b2Joint.call(this,d);this.m_target.SetV(d.target);var h=this.m_target.x-this.m_bodyB.m_xf.position.x,l=this.m_target.y-this.m_bodyB.m_xf.position.y,j=this.m_bodyB.m_xf.R;this.m_localAnchor.x=h*j.col1.x+l*j.col1.y;this.m_localAnchor.y=h*j.col2.x+l*j.col2.y;this.m_maxForce=d.maxForce;this.m_impulse.SetZero();this.m_frequencyHz=d.frequencyHz;this.m_dampingRatio=d.dampingRatio;this.m_gamma=this.m_beta=0};u.prototype.InitVelocityConstraints=function(d){var h=this.m_bodyB,l=h.GetMass(),
j=2*Math.PI*this.m_frequencyHz,o=l*j*j;this.m_gamma=d.dt*(2*l*this.m_dampingRatio*j+d.dt*o);this.m_gamma=this.m_gamma!=0?1/this.m_gamma:0;this.m_beta=d.dt*o*this.m_gamma;o=h.m_xf.R;l=this.m_localAnchor.x-h.m_sweep.localCenter.x;j=this.m_localAnchor.y-h.m_sweep.localCenter.y;var q=o.col1.x*l+o.col2.x*j;j=o.col1.y*l+o.col2.y*j;l=q;o=h.m_invMass;q=h.m_invI;this.K1.col1.x=o;this.K1.col2.x=0;this.K1.col1.y=0;this.K1.col2.y=o;this.K2.col1.x=q*j*j;this.K2.col2.x=-q*l*j;this.K2.col1.y=-q*l*j;this.K2.col2.y=
q*l*l;this.K.SetM(this.K1);this.K.AddM(this.K2);this.K.col1.x+=this.m_gamma;this.K.col2.y+=this.m_gamma;this.K.GetInverse(this.m_mass);this.m_C.x=h.m_sweep.c.x+l-this.m_target.x;this.m_C.y=h.m_sweep.c.y+j-this.m_target.y;h.m_angularVelocity*=0.98;this.m_impulse.x*=d.dtRatio;this.m_impulse.y*=d.dtRatio;h.m_linearVelocity.x+=o*this.m_impulse.x;h.m_linearVelocity.y+=o*this.m_impulse.y;h.m_angularVelocity+=q*(l*this.m_impulse.y-j*this.m_impulse.x)};u.prototype.SolveVelocityConstraints=function(d){var h=
this.m_bodyB,l,j=0,o=0;l=h.m_xf.R;var q=this.m_localAnchor.x-h.m_sweep.localCenter.x,n=this.m_localAnchor.y-h.m_sweep.localCenter.y;j=l.col1.x*q+l.col2.x*n;n=l.col1.y*q+l.col2.y*n;q=j;j=h.m_linearVelocity.x+-h.m_angularVelocity*n;var a=h.m_linearVelocity.y+h.m_angularVelocity*q;l=this.m_mass;j=j+this.m_beta*this.m_C.x+this.m_gamma*this.m_impulse.x;o=a+this.m_beta*this.m_C.y+this.m_gamma*this.m_impulse.y;a=-(l.col1.x*j+l.col2.x*o);o=-(l.col1.y*j+l.col2.y*o);l=this.m_impulse.x;j=this.m_impulse.y;this.m_impulse.x+=
a;this.m_impulse.y+=o;d=d.dt*this.m_maxForce;this.m_impulse.LengthSquared()>d*d&&this.m_impulse.Multiply(d/this.m_impulse.Length());a=this.m_impulse.x-l;o=this.m_impulse.y-j;h.m_linearVelocity.x+=h.m_invMass*a;h.m_linearVelocity.y+=h.m_invMass*o;h.m_angularVelocity+=h.m_invI*(q*o-n*a)};u.prototype.SolvePositionConstraints=function(){return true};Box2D.inherit(D,Box2D.Dynamics.Joints.b2JointDef);D.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;D.b2MouseJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,
arguments);this.target=new w};D.prototype.b2MouseJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_mouseJoint;this.maxForce=0;this.frequencyHz=5;this.dampingRatio=0.7};Box2D.inherit(H,Box2D.Dynamics.Joints.b2Joint);H.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;H.b2PrismaticJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.m_localAnchor1=new w;this.m_localAnchor2=new w;this.m_localXAxis1=new w;this.m_localYAxis1=new w;this.m_axis=new w;
this.m_perp=new w;this.m_K=new K;this.m_impulse=new A};H.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)};H.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)};H.prototype.GetReactionForce=function(d){if(d===undefined)d=0;return new w(d*(this.m_impulse.x*this.m_perp.x+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.x),d*(this.m_impulse.x*this.m_perp.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.y))};H.prototype.GetReactionTorque=
function(d){if(d===undefined)d=0;return d*this.m_impulse.y};H.prototype.GetJointTranslation=function(){var d=this.m_bodyA,h=this.m_bodyB,l=d.GetWorldPoint(this.m_localAnchor1),j=h.GetWorldPoint(this.m_localAnchor2);h=j.x-l.x;l=j.y-l.y;d=d.GetWorldVector(this.m_localXAxis1);return d.x*h+d.y*l};H.prototype.GetJointSpeed=function(){var d=this.m_bodyA,h=this.m_bodyB,l;l=d.m_xf.R;var j=this.m_localAnchor1.x-d.m_sweep.localCenter.x,o=this.m_localAnchor1.y-d.m_sweep.localCenter.y,q=l.col1.x*j+l.col2.x*o;
o=l.col1.y*j+l.col2.y*o;j=q;l=h.m_xf.R;var n=this.m_localAnchor2.x-h.m_sweep.localCenter.x,a=this.m_localAnchor2.y-h.m_sweep.localCenter.y;q=l.col1.x*n+l.col2.x*a;a=l.col1.y*n+l.col2.y*a;n=q;l=h.m_sweep.c.x+n-(d.m_sweep.c.x+j);q=h.m_sweep.c.y+a-(d.m_sweep.c.y+o);var c=d.GetWorldVector(this.m_localXAxis1),g=d.m_linearVelocity,b=h.m_linearVelocity;d=d.m_angularVelocity;h=h.m_angularVelocity;return l*-d*c.y+q*d*c.x+(c.x*(b.x+-h*a-g.x- -d*o)+c.y*(b.y+h*n-g.y-d*j))};H.prototype.IsLimitEnabled=function(){return this.m_enableLimit};
H.prototype.EnableLimit=function(d){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableLimit=d};H.prototype.GetLowerLimit=function(){return this.m_lowerTranslation};H.prototype.GetUpperLimit=function(){return this.m_upperTranslation};H.prototype.SetLimits=function(d,h){if(d===undefined)d=0;if(h===undefined)h=0;this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_lowerTranslation=d;this.m_upperTranslation=h};H.prototype.IsMotorEnabled=function(){return this.m_enableMotor};
H.prototype.EnableMotor=function(d){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableMotor=d};H.prototype.SetMotorSpeed=function(d){if(d===undefined)d=0;this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_motorSpeed=d};H.prototype.GetMotorSpeed=function(){return this.m_motorSpeed};H.prototype.SetMaxMotorForce=function(d){if(d===undefined)d=0;this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_maxMotorForce=d};H.prototype.GetMotorForce=function(){return this.m_motorImpulse};
H.prototype.b2PrismaticJoint=function(d){this.__super.b2Joint.call(this,d);this.m_localAnchor1.SetV(d.localAnchorA);this.m_localAnchor2.SetV(d.localAnchorB);this.m_localXAxis1.SetV(d.localAxisA);this.m_localYAxis1.x=-this.m_localXAxis1.y;this.m_localYAxis1.y=this.m_localXAxis1.x;this.m_refAngle=d.referenceAngle;this.m_impulse.SetZero();this.m_motorImpulse=this.m_motorMass=0;this.m_lowerTranslation=d.lowerTranslation;this.m_upperTranslation=d.upperTranslation;this.m_maxMotorForce=d.maxMotorForce;this.m_motorSpeed=
d.motorSpeed;this.m_enableLimit=d.enableLimit;this.m_enableMotor=d.enableMotor;this.m_limitState=I.e_inactiveLimit;this.m_axis.SetZero();this.m_perp.SetZero()};H.prototype.InitVelocityConstraints=function(d){var h=this.m_bodyA,l=this.m_bodyB,j,o=0;this.m_localCenterA.SetV(h.GetLocalCenter());this.m_localCenterB.SetV(l.GetLocalCenter());var q=h.GetTransform();l.GetTransform();j=h.m_xf.R;var n=this.m_localAnchor1.x-this.m_localCenterA.x,a=this.m_localAnchor1.y-this.m_localCenterA.y;o=j.col1.x*n+j.col2.x*
a;a=j.col1.y*n+j.col2.y*a;n=o;j=l.m_xf.R;var c=this.m_localAnchor2.x-this.m_localCenterB.x,g=this.m_localAnchor2.y-this.m_localCenterB.y;o=j.col1.x*c+j.col2.x*g;g=j.col1.y*c+j.col2.y*g;c=o;j=l.m_sweep.c.x+c-h.m_sweep.c.x-n;o=l.m_sweep.c.y+g-h.m_sweep.c.y-a;this.m_invMassA=h.m_invMass;this.m_invMassB=l.m_invMass;this.m_invIA=h.m_invI;this.m_invIB=l.m_invI;this.m_axis.SetV(y.MulMV(q.R,this.m_localXAxis1));this.m_a1=(j+n)*this.m_axis.y-(o+a)*this.m_axis.x;this.m_a2=c*this.m_axis.y-g*this.m_axis.x;this.m_motorMass=
this.m_invMassA+this.m_invMassB+this.m_invIA*this.m_a1*this.m_a1+this.m_invIB*this.m_a2*this.m_a2;if(this.m_motorMass>Number.MIN_VALUE)this.m_motorMass=1/this.m_motorMass;this.m_perp.SetV(y.MulMV(q.R,this.m_localYAxis1));this.m_s1=(j+n)*this.m_perp.y-(o+a)*this.m_perp.x;this.m_s2=c*this.m_perp.y-g*this.m_perp.x;q=this.m_invMassA;n=this.m_invMassB;a=this.m_invIA;c=this.m_invIB;this.m_K.col1.x=q+n+a*this.m_s1*this.m_s1+c*this.m_s2*this.m_s2;this.m_K.col1.y=a*this.m_s1+c*this.m_s2;this.m_K.col1.z=a*
this.m_s1*this.m_a1+c*this.m_s2*this.m_a2;this.m_K.col2.x=this.m_K.col1.y;this.m_K.col2.y=a+c;this.m_K.col2.z=a*this.m_a1+c*this.m_a2;this.m_K.col3.x=this.m_K.col1.z;this.m_K.col3.y=this.m_K.col2.z;this.m_K.col3.z=q+n+a*this.m_a1*this.m_a1+c*this.m_a2*this.m_a2;if(this.m_enableLimit){j=this.m_axis.x*j+this.m_axis.y*o;if(y.Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*F.b2_linearSlop)this.m_limitState=I.e_equalLimits;else if(j<=this.m_lowerTranslation){if(this.m_limitState!=I.e_atLowerLimit){this.m_limitState=
I.e_atLowerLimit;this.m_impulse.z=0}}else if(j>=this.m_upperTranslation){if(this.m_limitState!=I.e_atUpperLimit){this.m_limitState=I.e_atUpperLimit;this.m_impulse.z=0}}else{this.m_limitState=I.e_inactiveLimit;this.m_impulse.z=0}}else this.m_limitState=I.e_inactiveLimit;if(this.m_enableMotor==false)this.m_motorImpulse=0;if(d.warmStarting){this.m_impulse.x*=d.dtRatio;this.m_impulse.y*=d.dtRatio;this.m_motorImpulse*=d.dtRatio;d=this.m_impulse.x*this.m_perp.x+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.x;
j=this.m_impulse.x*this.m_perp.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.y;o=this.m_impulse.x*this.m_s1+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a1;q=this.m_impulse.x*this.m_s2+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a2;h.m_linearVelocity.x-=this.m_invMassA*d;h.m_linearVelocity.y-=this.m_invMassA*j;h.m_angularVelocity-=this.m_invIA*o;l.m_linearVelocity.x+=this.m_invMassB*d;l.m_linearVelocity.y+=this.m_invMassB*j;l.m_angularVelocity+=this.m_invIB*
q}else{this.m_impulse.SetZero();this.m_motorImpulse=0}};H.prototype.SolveVelocityConstraints=function(d){var h=this.m_bodyA,l=this.m_bodyB,j=h.m_linearVelocity,o=h.m_angularVelocity,q=l.m_linearVelocity,n=l.m_angularVelocity,a=0,c=0,g=0,b=0;if(this.m_enableMotor&&this.m_limitState!=I.e_equalLimits){b=this.m_motorMass*(this.m_motorSpeed-(this.m_axis.x*(q.x-j.x)+this.m_axis.y*(q.y-j.y)+this.m_a2*n-this.m_a1*o));a=this.m_motorImpulse;d=d.dt*this.m_maxMotorForce;this.m_motorImpulse=y.Clamp(this.m_motorImpulse+
b,-d,d);b=this.m_motorImpulse-a;a=b*this.m_axis.x;c=b*this.m_axis.y;g=b*this.m_a1;b=b*this.m_a2;j.x-=this.m_invMassA*a;j.y-=this.m_invMassA*c;o-=this.m_invIA*g;q.x+=this.m_invMassB*a;q.y+=this.m_invMassB*c;n+=this.m_invIB*b}g=this.m_perp.x*(q.x-j.x)+this.m_perp.y*(q.y-j.y)+this.m_s2*n-this.m_s1*o;c=n-o;if(this.m_enableLimit&&this.m_limitState!=I.e_inactiveLimit){d=this.m_axis.x*(q.x-j.x)+this.m_axis.y*(q.y-j.y)+this.m_a2*n-this.m_a1*o;a=this.m_impulse.Copy();d=this.m_K.Solve33(new A,-g,-c,-d);this.m_impulse.Add(d);
if(this.m_limitState==I.e_atLowerLimit)this.m_impulse.z=y.Max(this.m_impulse.z,0);else if(this.m_limitState==I.e_atUpperLimit)this.m_impulse.z=y.Min(this.m_impulse.z,0);g=-g-(this.m_impulse.z-a.z)*this.m_K.col3.x;c=-c-(this.m_impulse.z-a.z)*this.m_K.col3.y;c=this.m_K.Solve22(new w,g,c);c.x+=a.x;c.y+=a.y;this.m_impulse.x=c.x;this.m_impulse.y=c.y;d.x=this.m_impulse.x-a.x;d.y=this.m_impulse.y-a.y;d.z=this.m_impulse.z-a.z;a=d.x*this.m_perp.x+d.z*this.m_axis.x;c=d.x*this.m_perp.y+d.z*this.m_axis.y;g=d.x*
this.m_s1+d.y+d.z*this.m_a1;b=d.x*this.m_s2+d.y+d.z*this.m_a2}else{d=this.m_K.Solve22(new w,-g,-c);this.m_impulse.x+=d.x;this.m_impulse.y+=d.y;a=d.x*this.m_perp.x;c=d.x*this.m_perp.y;g=d.x*this.m_s1+d.y;b=d.x*this.m_s2+d.y}j.x-=this.m_invMassA*a;j.y-=this.m_invMassA*c;o-=this.m_invIA*g;q.x+=this.m_invMassB*a;q.y+=this.m_invMassB*c;n+=this.m_invIB*b;h.m_linearVelocity.SetV(j);h.m_angularVelocity=o;l.m_linearVelocity.SetV(q);l.m_angularVelocity=n};H.prototype.SolvePositionConstraints=function(){var d=
this.m_bodyA,h=this.m_bodyB,l=d.m_sweep.c,j=d.m_sweep.a,o=h.m_sweep.c,q=h.m_sweep.a,n,a=0,c=0,g=0,b=a=n=0,e=0;c=false;var f=0,m=G.FromAngle(j),r=G.FromAngle(q);n=m;e=this.m_localAnchor1.x-this.m_localCenterA.x;var s=this.m_localAnchor1.y-this.m_localCenterA.y;a=n.col1.x*e+n.col2.x*s;s=n.col1.y*e+n.col2.y*s;e=a;n=r;r=this.m_localAnchor2.x-this.m_localCenterB.x;g=this.m_localAnchor2.y-this.m_localCenterB.y;a=n.col1.x*r+n.col2.x*g;g=n.col1.y*r+n.col2.y*g;r=a;n=o.x+r-l.x-e;a=o.y+g-l.y-s;if(this.m_enableLimit){this.m_axis=
y.MulMV(m,this.m_localXAxis1);this.m_a1=(n+e)*this.m_axis.y-(a+s)*this.m_axis.x;this.m_a2=r*this.m_axis.y-g*this.m_axis.x;var v=this.m_axis.x*n+this.m_axis.y*a;if(y.Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*F.b2_linearSlop){f=y.Clamp(v,-F.b2_maxLinearCorrection,F.b2_maxLinearCorrection);b=y.Abs(v);c=true}else if(v<=this.m_lowerTranslation){f=y.Clamp(v-this.m_lowerTranslation+F.b2_linearSlop,-F.b2_maxLinearCorrection,0);b=this.m_lowerTranslation-v;c=true}else if(v>=this.m_upperTranslation){f=
y.Clamp(v-this.m_upperTranslation+F.b2_linearSlop,0,F.b2_maxLinearCorrection);b=v-this.m_upperTranslation;c=true}}this.m_perp=y.MulMV(m,this.m_localYAxis1);this.m_s1=(n+e)*this.m_perp.y-(a+s)*this.m_perp.x;this.m_s2=r*this.m_perp.y-g*this.m_perp.x;m=new A;s=this.m_perp.x*n+this.m_perp.y*a;r=q-j-this.m_refAngle;b=y.Max(b,y.Abs(s));e=y.Abs(r);if(c){c=this.m_invMassA;g=this.m_invMassB;n=this.m_invIA;a=this.m_invIB;this.m_K.col1.x=c+g+n*this.m_s1*this.m_s1+a*this.m_s2*this.m_s2;this.m_K.col1.y=n*this.m_s1+
a*this.m_s2;this.m_K.col1.z=n*this.m_s1*this.m_a1+a*this.m_s2*this.m_a2;this.m_K.col2.x=this.m_K.col1.y;this.m_K.col2.y=n+a;this.m_K.col2.z=n*this.m_a1+a*this.m_a2;this.m_K.col3.x=this.m_K.col1.z;this.m_K.col3.y=this.m_K.col2.z;this.m_K.col3.z=c+g+n*this.m_a1*this.m_a1+a*this.m_a2*this.m_a2;this.m_K.Solve33(m,-s,-r,-f)}else{c=this.m_invMassA;g=this.m_invMassB;n=this.m_invIA;a=this.m_invIB;f=n*this.m_s1+a*this.m_s2;v=n+a;this.m_K.col1.Set(c+g+n*this.m_s1*this.m_s1+a*this.m_s2*this.m_s2,f,0);this.m_K.col2.Set(f,
v,0);f=this.m_K.Solve22(new w,-s,-r);m.x=f.x;m.y=f.y;m.z=0}f=m.x*this.m_perp.x+m.z*this.m_axis.x;c=m.x*this.m_perp.y+m.z*this.m_axis.y;s=m.x*this.m_s1+m.y+m.z*this.m_a1;m=m.x*this.m_s2+m.y+m.z*this.m_a2;l.x-=this.m_invMassA*f;l.y-=this.m_invMassA*c;j-=this.m_invIA*s;o.x+=this.m_invMassB*f;o.y+=this.m_invMassB*c;q+=this.m_invIB*m;d.m_sweep.a=j;h.m_sweep.a=q;d.SynchronizeTransform();h.SynchronizeTransform();return b<=F.b2_linearSlop&&e<=F.b2_angularSlop};Box2D.inherit(O,Box2D.Dynamics.Joints.b2JointDef);
O.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;O.b2PrismaticJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments);this.localAnchorA=new w;this.localAnchorB=new w;this.localAxisA=new w};O.prototype.b2PrismaticJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_prismaticJoint;this.localAxisA.Set(1,0);this.referenceAngle=0;this.enableLimit=false;this.upperTranslation=this.lowerTranslation=0;this.enableMotor=false;this.motorSpeed=this.maxMotorForce=
0};O.prototype.Initialize=function(d,h,l,j){this.bodyA=d;this.bodyB=h;this.localAnchorA=this.bodyA.GetLocalPoint(l);this.localAnchorB=this.bodyB.GetLocalPoint(l);this.localAxisA=this.bodyA.GetLocalVector(j);this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle()};Box2D.inherit(E,Box2D.Dynamics.Joints.b2Joint);E.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;E.b2PulleyJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.m_groundAnchor1=new w;this.m_groundAnchor2=
new w;this.m_localAnchor1=new w;this.m_localAnchor2=new w;this.m_u1=new w;this.m_u2=new w};E.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)};E.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)};E.prototype.GetReactionForce=function(d){if(d===undefined)d=0;return new w(d*this.m_impulse*this.m_u2.x,d*this.m_impulse*this.m_u2.y)};E.prototype.GetReactionTorque=function(){return 0};E.prototype.GetGroundAnchorA=function(){var d=
this.m_ground.m_xf.position.Copy();d.Add(this.m_groundAnchor1);return d};E.prototype.GetGroundAnchorB=function(){var d=this.m_ground.m_xf.position.Copy();d.Add(this.m_groundAnchor2);return d};E.prototype.GetLength1=function(){var d=this.m_bodyA.GetWorldPoint(this.m_localAnchor1),h=d.x-(this.m_ground.m_xf.position.x+this.m_groundAnchor1.x);d=d.y-(this.m_ground.m_xf.position.y+this.m_groundAnchor1.y);return Math.sqrt(h*h+d*d)};E.prototype.GetLength2=function(){var d=this.m_bodyB.GetWorldPoint(this.m_localAnchor2),
h=d.x-(this.m_ground.m_xf.position.x+this.m_groundAnchor2.x);d=d.y-(this.m_ground.m_xf.position.y+this.m_groundAnchor2.y);return Math.sqrt(h*h+d*d)};E.prototype.GetRatio=function(){return this.m_ratio};E.prototype.b2PulleyJoint=function(d){this.__super.b2Joint.call(this,d);this.m_ground=this.m_bodyA.m_world.m_groundBody;this.m_groundAnchor1.x=d.groundAnchorA.x-this.m_ground.m_xf.position.x;this.m_groundAnchor1.y=d.groundAnchorA.y-this.m_ground.m_xf.position.y;this.m_groundAnchor2.x=d.groundAnchorB.x-
this.m_ground.m_xf.position.x;this.m_groundAnchor2.y=d.groundAnchorB.y-this.m_ground.m_xf.position.y;this.m_localAnchor1.SetV(d.localAnchorA);this.m_localAnchor2.SetV(d.localAnchorB);this.m_ratio=d.ratio;this.m_constant=d.lengthA+this.m_ratio*d.lengthB;this.m_maxLength1=y.Min(d.maxLengthA,this.m_constant-this.m_ratio*E.b2_minPulleyLength);this.m_maxLength2=y.Min(d.maxLengthB,(this.m_constant-E.b2_minPulleyLength)/this.m_ratio);this.m_limitImpulse2=this.m_limitImpulse1=this.m_impulse=0};E.prototype.InitVelocityConstraints=
function(d){var h=this.m_bodyA,l=this.m_bodyB,j;j=h.m_xf.R;var o=this.m_localAnchor1.x-h.m_sweep.localCenter.x,q=this.m_localAnchor1.y-h.m_sweep.localCenter.y,n=j.col1.x*o+j.col2.x*q;q=j.col1.y*o+j.col2.y*q;o=n;j=l.m_xf.R;var a=this.m_localAnchor2.x-l.m_sweep.localCenter.x,c=this.m_localAnchor2.y-l.m_sweep.localCenter.y;n=j.col1.x*a+j.col2.x*c;c=j.col1.y*a+j.col2.y*c;a=n;j=l.m_sweep.c.x+a;n=l.m_sweep.c.y+c;var g=this.m_ground.m_xf.position.x+this.m_groundAnchor2.x,b=this.m_ground.m_xf.position.y+
this.m_groundAnchor2.y;this.m_u1.Set(h.m_sweep.c.x+o-(this.m_ground.m_xf.position.x+this.m_groundAnchor1.x),h.m_sweep.c.y+q-(this.m_ground.m_xf.position.y+this.m_groundAnchor1.y));this.m_u2.Set(j-g,n-b);j=this.m_u1.Length();n=this.m_u2.Length();j>F.b2_linearSlop?this.m_u1.Multiply(1/j):this.m_u1.SetZero();n>F.b2_linearSlop?this.m_u2.Multiply(1/n):this.m_u2.SetZero();if(this.m_constant-j-this.m_ratio*n>0){this.m_state=I.e_inactiveLimit;this.m_impulse=0}else this.m_state=I.e_atUpperLimit;if(j<this.m_maxLength1){this.m_limitState1=
I.e_inactiveLimit;this.m_limitImpulse1=0}else this.m_limitState1=I.e_atUpperLimit;if(n<this.m_maxLength2){this.m_limitState2=I.e_inactiveLimit;this.m_limitImpulse2=0}else this.m_limitState2=I.e_atUpperLimit;j=o*this.m_u1.y-q*this.m_u1.x;n=a*this.m_u2.y-c*this.m_u2.x;this.m_limitMass1=h.m_invMass+h.m_invI*j*j;this.m_limitMass2=l.m_invMass+l.m_invI*n*n;this.m_pulleyMass=this.m_limitMass1+this.m_ratio*this.m_ratio*this.m_limitMass2;this.m_limitMass1=1/this.m_limitMass1;this.m_limitMass2=1/this.m_limitMass2;
this.m_pulleyMass=1/this.m_pulleyMass;if(d.warmStarting){this.m_impulse*=d.dtRatio;this.m_limitImpulse1*=d.dtRatio;this.m_limitImpulse2*=d.dtRatio;d=(-this.m_impulse-this.m_limitImpulse1)*this.m_u1.x;j=(-this.m_impulse-this.m_limitImpulse1)*this.m_u1.y;n=(-this.m_ratio*this.m_impulse-this.m_limitImpulse2)*this.m_u2.x;g=(-this.m_ratio*this.m_impulse-this.m_limitImpulse2)*this.m_u2.y;h.m_linearVelocity.x+=h.m_invMass*d;h.m_linearVelocity.y+=h.m_invMass*j;h.m_angularVelocity+=h.m_invI*(o*j-q*d);l.m_linearVelocity.x+=
l.m_invMass*n;l.m_linearVelocity.y+=l.m_invMass*g;l.m_angularVelocity+=l.m_invI*(a*g-c*n)}else this.m_limitImpulse2=this.m_limitImpulse1=this.m_impulse=0};E.prototype.SolveVelocityConstraints=function(){var d=this.m_bodyA,h=this.m_bodyB,l;l=d.m_xf.R;var j=this.m_localAnchor1.x-d.m_sweep.localCenter.x,o=this.m_localAnchor1.y-d.m_sweep.localCenter.y,q=l.col1.x*j+l.col2.x*o;o=l.col1.y*j+l.col2.y*o;j=q;l=h.m_xf.R;var n=this.m_localAnchor2.x-h.m_sweep.localCenter.x,a=this.m_localAnchor2.y-h.m_sweep.localCenter.y;
q=l.col1.x*n+l.col2.x*a;a=l.col1.y*n+l.col2.y*a;n=q;var c=q=l=0,g=0;l=g=l=g=c=q=l=0;if(this.m_state==I.e_atUpperLimit){l=d.m_linearVelocity.x+-d.m_angularVelocity*o;q=d.m_linearVelocity.y+d.m_angularVelocity*j;c=h.m_linearVelocity.x+-h.m_angularVelocity*a;g=h.m_linearVelocity.y+h.m_angularVelocity*n;l=-(this.m_u1.x*l+this.m_u1.y*q)-this.m_ratio*(this.m_u2.x*c+this.m_u2.y*g);g=this.m_pulleyMass*-l;l=this.m_impulse;this.m_impulse=y.Max(0,this.m_impulse+g);g=this.m_impulse-l;l=-g*this.m_u1.x;q=-g*this.m_u1.y;
c=-this.m_ratio*g*this.m_u2.x;g=-this.m_ratio*g*this.m_u2.y;d.m_linearVelocity.x+=d.m_invMass*l;d.m_linearVelocity.y+=d.m_invMass*q;d.m_angularVelocity+=d.m_invI*(j*q-o*l);h.m_linearVelocity.x+=h.m_invMass*c;h.m_linearVelocity.y+=h.m_invMass*g;h.m_angularVelocity+=h.m_invI*(n*g-a*c)}if(this.m_limitState1==I.e_atUpperLimit){l=d.m_linearVelocity.x+-d.m_angularVelocity*o;q=d.m_linearVelocity.y+d.m_angularVelocity*j;l=-(this.m_u1.x*l+this.m_u1.y*q);g=-this.m_limitMass1*l;l=this.m_limitImpulse1;this.m_limitImpulse1=
y.Max(0,this.m_limitImpulse1+g);g=this.m_limitImpulse1-l;l=-g*this.m_u1.x;q=-g*this.m_u1.y;d.m_linearVelocity.x+=d.m_invMass*l;d.m_linearVelocity.y+=d.m_invMass*q;d.m_angularVelocity+=d.m_invI*(j*q-o*l)}if(this.m_limitState2==I.e_atUpperLimit){c=h.m_linearVelocity.x+-h.m_angularVelocity*a;g=h.m_linearVelocity.y+h.m_angularVelocity*n;l=-(this.m_u2.x*c+this.m_u2.y*g);g=-this.m_limitMass2*l;l=this.m_limitImpulse2;this.m_limitImpulse2=y.Max(0,this.m_limitImpulse2+g);g=this.m_limitImpulse2-l;c=-g*this.m_u2.x;
g=-g*this.m_u2.y;h.m_linearVelocity.x+=h.m_invMass*c;h.m_linearVelocity.y+=h.m_invMass*g;h.m_angularVelocity+=h.m_invI*(n*g-a*c)}};E.prototype.SolvePositionConstraints=function(){var d=this.m_bodyA,h=this.m_bodyB,l,j=this.m_ground.m_xf.position.x+this.m_groundAnchor1.x,o=this.m_ground.m_xf.position.y+this.m_groundAnchor1.y,q=this.m_ground.m_xf.position.x+this.m_groundAnchor2.x,n=this.m_ground.m_xf.position.y+this.m_groundAnchor2.y,a=0,c=0,g=0,b=0,e=l=0,f=0,m=0,r=e=m=l=e=l=0;if(this.m_state==I.e_atUpperLimit){l=
d.m_xf.R;a=this.m_localAnchor1.x-d.m_sweep.localCenter.x;c=this.m_localAnchor1.y-d.m_sweep.localCenter.y;e=l.col1.x*a+l.col2.x*c;c=l.col1.y*a+l.col2.y*c;a=e;l=h.m_xf.R;g=this.m_localAnchor2.x-h.m_sweep.localCenter.x;b=this.m_localAnchor2.y-h.m_sweep.localCenter.y;e=l.col1.x*g+l.col2.x*b;b=l.col1.y*g+l.col2.y*b;g=e;l=d.m_sweep.c.x+a;e=d.m_sweep.c.y+c;f=h.m_sweep.c.x+g;m=h.m_sweep.c.y+b;this.m_u1.Set(l-j,e-o);this.m_u2.Set(f-q,m-n);l=this.m_u1.Length();e=this.m_u2.Length();l>F.b2_linearSlop?this.m_u1.Multiply(1/
l):this.m_u1.SetZero();e>F.b2_linearSlop?this.m_u2.Multiply(1/e):this.m_u2.SetZero();l=this.m_constant-l-this.m_ratio*e;r=y.Max(r,-l);l=y.Clamp(l+F.b2_linearSlop,-F.b2_maxLinearCorrection,0);m=-this.m_pulleyMass*l;l=-m*this.m_u1.x;e=-m*this.m_u1.y;f=-this.m_ratio*m*this.m_u2.x;m=-this.m_ratio*m*this.m_u2.y;d.m_sweep.c.x+=d.m_invMass*l;d.m_sweep.c.y+=d.m_invMass*e;d.m_sweep.a+=d.m_invI*(a*e-c*l);h.m_sweep.c.x+=h.m_invMass*f;h.m_sweep.c.y+=h.m_invMass*m;h.m_sweep.a+=h.m_invI*(g*m-b*f);d.SynchronizeTransform();
h.SynchronizeTransform()}if(this.m_limitState1==I.e_atUpperLimit){l=d.m_xf.R;a=this.m_localAnchor1.x-d.m_sweep.localCenter.x;c=this.m_localAnchor1.y-d.m_sweep.localCenter.y;e=l.col1.x*a+l.col2.x*c;c=l.col1.y*a+l.col2.y*c;a=e;l=d.m_sweep.c.x+a;e=d.m_sweep.c.y+c;this.m_u1.Set(l-j,e-o);l=this.m_u1.Length();if(l>F.b2_linearSlop){this.m_u1.x*=1/l;this.m_u1.y*=1/l}else this.m_u1.SetZero();l=this.m_maxLength1-l;r=y.Max(r,-l);l=y.Clamp(l+F.b2_linearSlop,-F.b2_maxLinearCorrection,0);m=-this.m_limitMass1*l;
l=-m*this.m_u1.x;e=-m*this.m_u1.y;d.m_sweep.c.x+=d.m_invMass*l;d.m_sweep.c.y+=d.m_invMass*e;d.m_sweep.a+=d.m_invI*(a*e-c*l);d.SynchronizeTransform()}if(this.m_limitState2==I.e_atUpperLimit){l=h.m_xf.R;g=this.m_localAnchor2.x-h.m_sweep.localCenter.x;b=this.m_localAnchor2.y-h.m_sweep.localCenter.y;e=l.col1.x*g+l.col2.x*b;b=l.col1.y*g+l.col2.y*b;g=e;f=h.m_sweep.c.x+g;m=h.m_sweep.c.y+b;this.m_u2.Set(f-q,m-n);e=this.m_u2.Length();if(e>F.b2_linearSlop){this.m_u2.x*=1/e;this.m_u2.y*=1/e}else this.m_u2.SetZero();
l=this.m_maxLength2-e;r=y.Max(r,-l);l=y.Clamp(l+F.b2_linearSlop,-F.b2_maxLinearCorrection,0);m=-this.m_limitMass2*l;f=-m*this.m_u2.x;m=-m*this.m_u2.y;h.m_sweep.c.x+=h.m_invMass*f;h.m_sweep.c.y+=h.m_invMass*m;h.m_sweep.a+=h.m_invI*(g*m-b*f);h.SynchronizeTransform()}return r<F.b2_linearSlop};Box2D.postDefs.push(function(){Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength=2});Box2D.inherit(R,Box2D.Dynamics.Joints.b2JointDef);R.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;R.b2PulleyJointDef=
function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments);this.groundAnchorA=new w;this.groundAnchorB=new w;this.localAnchorA=new w;this.localAnchorB=new w};R.prototype.b2PulleyJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_pulleyJoint;this.groundAnchorA.Set(-1,1);this.groundAnchorB.Set(1,1);this.localAnchorA.Set(-1,0);this.localAnchorB.Set(1,0);this.maxLengthB=this.lengthB=this.maxLengthA=this.lengthA=0;this.ratio=1;this.collideConnected=true};R.prototype.Initialize=
function(d,h,l,j,o,q,n){if(n===undefined)n=0;this.bodyA=d;this.bodyB=h;this.groundAnchorA.SetV(l);this.groundAnchorB.SetV(j);this.localAnchorA=this.bodyA.GetLocalPoint(o);this.localAnchorB=this.bodyB.GetLocalPoint(q);d=o.x-l.x;l=o.y-l.y;this.lengthA=Math.sqrt(d*d+l*l);l=q.x-j.x;j=q.y-j.y;this.lengthB=Math.sqrt(l*l+j*j);this.ratio=n;n=this.lengthA+this.ratio*this.lengthB;this.maxLengthA=n-this.ratio*E.b2_minPulleyLength;this.maxLengthB=(n-E.b2_minPulleyLength)/this.ratio};Box2D.inherit(N,Box2D.Dynamics.Joints.b2Joint);
N.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;N.b2RevoluteJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.K=new G;this.K1=new G;this.K2=new G;this.K3=new G;this.impulse3=new A;this.impulse2=new w;this.reduced=new w;this.m_localAnchor1=new w;this.m_localAnchor2=new w;this.m_impulse=new A;this.m_mass=new K};N.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)};N.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)};
N.prototype.GetReactionForce=function(d){if(d===undefined)d=0;return new w(d*this.m_impulse.x,d*this.m_impulse.y)};N.prototype.GetReactionTorque=function(d){if(d===undefined)d=0;return d*this.m_impulse.z};N.prototype.GetJointAngle=function(){return this.m_bodyB.m_sweep.a-this.m_bodyA.m_sweep.a-this.m_referenceAngle};N.prototype.GetJointSpeed=function(){return this.m_bodyB.m_angularVelocity-this.m_bodyA.m_angularVelocity};N.prototype.IsLimitEnabled=function(){return this.m_enableLimit};N.prototype.EnableLimit=
function(d){this.m_enableLimit=d};N.prototype.GetLowerLimit=function(){return this.m_lowerAngle};N.prototype.GetUpperLimit=function(){return this.m_upperAngle};N.prototype.SetLimits=function(d,h){if(d===undefined)d=0;if(h===undefined)h=0;this.m_lowerAngle=d;this.m_upperAngle=h};N.prototype.IsMotorEnabled=function(){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);return this.m_enableMotor};N.prototype.EnableMotor=function(d){this.m_enableMotor=d};N.prototype.SetMotorSpeed=function(d){if(d===
undefined)d=0;this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_motorSpeed=d};N.prototype.GetMotorSpeed=function(){return this.m_motorSpeed};N.prototype.SetMaxMotorTorque=function(d){if(d===undefined)d=0;this.m_maxMotorTorque=d};N.prototype.GetMotorTorque=function(){return this.m_maxMotorTorque};N.prototype.b2RevoluteJoint=function(d){this.__super.b2Joint.call(this,d);this.m_localAnchor1.SetV(d.localAnchorA);this.m_localAnchor2.SetV(d.localAnchorB);this.m_referenceAngle=d.referenceAngle;
this.m_impulse.SetZero();this.m_motorImpulse=0;this.m_lowerAngle=d.lowerAngle;this.m_upperAngle=d.upperAngle;this.m_maxMotorTorque=d.maxMotorTorque;this.m_motorSpeed=d.motorSpeed;this.m_enableLimit=d.enableLimit;this.m_enableMotor=d.enableMotor;this.m_limitState=I.e_inactiveLimit};N.prototype.InitVelocityConstraints=function(d){var h=this.m_bodyA,l=this.m_bodyB,j,o=0;j=h.m_xf.R;var q=this.m_localAnchor1.x-h.m_sweep.localCenter.x,n=this.m_localAnchor1.y-h.m_sweep.localCenter.y;o=j.col1.x*q+j.col2.x*
n;n=j.col1.y*q+j.col2.y*n;q=o;j=l.m_xf.R;var a=this.m_localAnchor2.x-l.m_sweep.localCenter.x,c=this.m_localAnchor2.y-l.m_sweep.localCenter.y;o=j.col1.x*a+j.col2.x*c;c=j.col1.y*a+j.col2.y*c;a=o;j=h.m_invMass;o=l.m_invMass;var g=h.m_invI,b=l.m_invI;this.m_mass.col1.x=j+o+n*n*g+c*c*b;this.m_mass.col2.x=-n*q*g-c*a*b;this.m_mass.col3.x=-n*g-c*b;this.m_mass.col1.y=this.m_mass.col2.x;this.m_mass.col2.y=j+o+q*q*g+a*a*b;this.m_mass.col3.y=q*g+a*b;this.m_mass.col1.z=this.m_mass.col3.x;this.m_mass.col2.z=this.m_mass.col3.y;
this.m_mass.col3.z=g+b;this.m_motorMass=1/(g+b);if(this.m_enableMotor==false)this.m_motorImpulse=0;if(this.m_enableLimit){var e=l.m_sweep.a-h.m_sweep.a-this.m_referenceAngle;if(y.Abs(this.m_upperAngle-this.m_lowerAngle)<2*F.b2_angularSlop)this.m_limitState=I.e_equalLimits;else if(e<=this.m_lowerAngle){if(this.m_limitState!=I.e_atLowerLimit)this.m_impulse.z=0;this.m_limitState=I.e_atLowerLimit}else if(e>=this.m_upperAngle){if(this.m_limitState!=I.e_atUpperLimit)this.m_impulse.z=0;this.m_limitState=
I.e_atUpperLimit}else{this.m_limitState=I.e_inactiveLimit;this.m_impulse.z=0}}else this.m_limitState=I.e_inactiveLimit;if(d.warmStarting){this.m_impulse.x*=d.dtRatio;this.m_impulse.y*=d.dtRatio;this.m_motorImpulse*=d.dtRatio;d=this.m_impulse.x;e=this.m_impulse.y;h.m_linearVelocity.x-=j*d;h.m_linearVelocity.y-=j*e;h.m_angularVelocity-=g*(q*e-n*d+this.m_motorImpulse+this.m_impulse.z);l.m_linearVelocity.x+=o*d;l.m_linearVelocity.y+=o*e;l.m_angularVelocity+=b*(a*e-c*d+this.m_motorImpulse+this.m_impulse.z)}else{this.m_impulse.SetZero();
this.m_motorImpulse=0}};N.prototype.SolveVelocityConstraints=function(d){var h=this.m_bodyA,l=this.m_bodyB,j=0,o=j=0,q=0,n=0,a=0,c=h.m_linearVelocity,g=h.m_angularVelocity,b=l.m_linearVelocity,e=l.m_angularVelocity,f=h.m_invMass,m=l.m_invMass,r=h.m_invI,s=l.m_invI;if(this.m_enableMotor&&this.m_limitState!=I.e_equalLimits){o=this.m_motorMass*-(e-g-this.m_motorSpeed);q=this.m_motorImpulse;n=d.dt*this.m_maxMotorTorque;this.m_motorImpulse=y.Clamp(this.m_motorImpulse+o,-n,n);o=this.m_motorImpulse-q;g-=
r*o;e+=s*o}if(this.m_enableLimit&&this.m_limitState!=I.e_inactiveLimit){d=h.m_xf.R;o=this.m_localAnchor1.x-h.m_sweep.localCenter.x;q=this.m_localAnchor1.y-h.m_sweep.localCenter.y;j=d.col1.x*o+d.col2.x*q;q=d.col1.y*o+d.col2.y*q;o=j;d=l.m_xf.R;n=this.m_localAnchor2.x-l.m_sweep.localCenter.x;a=this.m_localAnchor2.y-l.m_sweep.localCenter.y;j=d.col1.x*n+d.col2.x*a;a=d.col1.y*n+d.col2.y*a;n=j;d=b.x+-e*a-c.x- -g*q;var v=b.y+e*n-c.y-g*o;this.m_mass.Solve33(this.impulse3,-d,-v,-(e-g));if(this.m_limitState==
I.e_equalLimits)this.m_impulse.Add(this.impulse3);else if(this.m_limitState==I.e_atLowerLimit){j=this.m_impulse.z+this.impulse3.z;if(j<0){this.m_mass.Solve22(this.reduced,-d,-v);this.impulse3.x=this.reduced.x;this.impulse3.y=this.reduced.y;this.impulse3.z=-this.m_impulse.z;this.m_impulse.x+=this.reduced.x;this.m_impulse.y+=this.reduced.y;this.m_impulse.z=0}}else if(this.m_limitState==I.e_atUpperLimit){j=this.m_impulse.z+this.impulse3.z;if(j>0){this.m_mass.Solve22(this.reduced,-d,-v);this.impulse3.x=
this.reduced.x;this.impulse3.y=this.reduced.y;this.impulse3.z=-this.m_impulse.z;this.m_impulse.x+=this.reduced.x;this.m_impulse.y+=this.reduced.y;this.m_impulse.z=0}}c.x-=f*this.impulse3.x;c.y-=f*this.impulse3.y;g-=r*(o*this.impulse3.y-q*this.impulse3.x+this.impulse3.z);b.x+=m*this.impulse3.x;b.y+=m*this.impulse3.y;e+=s*(n*this.impulse3.y-a*this.impulse3.x+this.impulse3.z)}else{d=h.m_xf.R;o=this.m_localAnchor1.x-h.m_sweep.localCenter.x;q=this.m_localAnchor1.y-h.m_sweep.localCenter.y;j=d.col1.x*o+
d.col2.x*q;q=d.col1.y*o+d.col2.y*q;o=j;d=l.m_xf.R;n=this.m_localAnchor2.x-l.m_sweep.localCenter.x;a=this.m_localAnchor2.y-l.m_sweep.localCenter.y;j=d.col1.x*n+d.col2.x*a;a=d.col1.y*n+d.col2.y*a;n=j;this.m_mass.Solve22(this.impulse2,-(b.x+-e*a-c.x- -g*q),-(b.y+e*n-c.y-g*o));this.m_impulse.x+=this.impulse2.x;this.m_impulse.y+=this.impulse2.y;c.x-=f*this.impulse2.x;c.y-=f*this.impulse2.y;g-=r*(o*this.impulse2.y-q*this.impulse2.x);b.x+=m*this.impulse2.x;b.y+=m*this.impulse2.y;e+=s*(n*this.impulse2.y-
a*this.impulse2.x)}h.m_linearVelocity.SetV(c);h.m_angularVelocity=g;l.m_linearVelocity.SetV(b);l.m_angularVelocity=e};N.prototype.SolvePositionConstraints=function(){var d=0,h,l=this.m_bodyA,j=this.m_bodyB,o=0,q=h=0,n=0,a=0;if(this.m_enableLimit&&this.m_limitState!=I.e_inactiveLimit){d=j.m_sweep.a-l.m_sweep.a-this.m_referenceAngle;var c=0;if(this.m_limitState==I.e_equalLimits){d=y.Clamp(d-this.m_lowerAngle,-F.b2_maxAngularCorrection,F.b2_maxAngularCorrection);c=-this.m_motorMass*d;o=y.Abs(d)}else if(this.m_limitState==
I.e_atLowerLimit){d=d-this.m_lowerAngle;o=-d;d=y.Clamp(d+F.b2_angularSlop,-F.b2_maxAngularCorrection,0);c=-this.m_motorMass*d}else if(this.m_limitState==I.e_atUpperLimit){o=d=d-this.m_upperAngle;d=y.Clamp(d-F.b2_angularSlop,0,F.b2_maxAngularCorrection);c=-this.m_motorMass*d}l.m_sweep.a-=l.m_invI*c;j.m_sweep.a+=j.m_invI*c;l.SynchronizeTransform();j.SynchronizeTransform()}h=l.m_xf.R;c=this.m_localAnchor1.x-l.m_sweep.localCenter.x;d=this.m_localAnchor1.y-l.m_sweep.localCenter.y;q=h.col1.x*c+h.col2.x*
d;d=h.col1.y*c+h.col2.y*d;c=q;h=j.m_xf.R;var g=this.m_localAnchor2.x-j.m_sweep.localCenter.x,b=this.m_localAnchor2.y-j.m_sweep.localCenter.y;q=h.col1.x*g+h.col2.x*b;b=h.col1.y*g+h.col2.y*b;g=q;n=j.m_sweep.c.x+g-l.m_sweep.c.x-c;a=j.m_sweep.c.y+b-l.m_sweep.c.y-d;var e=n*n+a*a;h=Math.sqrt(e);q=l.m_invMass;var f=j.m_invMass,m=l.m_invI,r=j.m_invI,s=10*F.b2_linearSlop;if(e>s*s){e=1/(q+f);n=e*-n;a=e*-a;l.m_sweep.c.x-=0.5*q*n;l.m_sweep.c.y-=0.5*q*a;j.m_sweep.c.x+=0.5*f*n;j.m_sweep.c.y+=0.5*f*a;n=j.m_sweep.c.x+
g-l.m_sweep.c.x-c;a=j.m_sweep.c.y+b-l.m_sweep.c.y-d}this.K1.col1.x=q+f;this.K1.col2.x=0;this.K1.col1.y=0;this.K1.col2.y=q+f;this.K2.col1.x=m*d*d;this.K2.col2.x=-m*c*d;this.K2.col1.y=-m*c*d;this.K2.col2.y=m*c*c;this.K3.col1.x=r*b*b;this.K3.col2.x=-r*g*b;this.K3.col1.y=-r*g*b;this.K3.col2.y=r*g*g;this.K.SetM(this.K1);this.K.AddM(this.K2);this.K.AddM(this.K3);this.K.Solve(N.tImpulse,-n,-a);n=N.tImpulse.x;a=N.tImpulse.y;l.m_sweep.c.x-=l.m_invMass*n;l.m_sweep.c.y-=l.m_invMass*a;l.m_sweep.a-=l.m_invI*(c*
a-d*n);j.m_sweep.c.x+=j.m_invMass*n;j.m_sweep.c.y+=j.m_invMass*a;j.m_sweep.a+=j.m_invI*(g*a-b*n);l.SynchronizeTransform();j.SynchronizeTransform();return h<=F.b2_linearSlop&&o<=F.b2_angularSlop};Box2D.postDefs.push(function(){Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse=new w});Box2D.inherit(S,Box2D.Dynamics.Joints.b2JointDef);S.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;S.b2RevoluteJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments);this.localAnchorA=
new w;this.localAnchorB=new w};S.prototype.b2RevoluteJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_revoluteJoint;this.localAnchorA.Set(0,0);this.localAnchorB.Set(0,0);this.motorSpeed=this.maxMotorTorque=this.upperAngle=this.lowerAngle=this.referenceAngle=0;this.enableMotor=this.enableLimit=false};S.prototype.Initialize=function(d,h,l){this.bodyA=d;this.bodyB=h;this.localAnchorA=this.bodyA.GetLocalPoint(l);this.localAnchorB=this.bodyB.GetLocalPoint(l);this.referenceAngle=this.bodyB.GetAngle()-
this.bodyA.GetAngle()};Box2D.inherit(aa,Box2D.Dynamics.Joints.b2Joint);aa.prototype.__super=Box2D.Dynamics.Joints.b2Joint.prototype;aa.b2WeldJoint=function(){Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,arguments);this.m_localAnchorA=new w;this.m_localAnchorB=new w;this.m_impulse=new A;this.m_mass=new K};aa.prototype.GetAnchorA=function(){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA)};aa.prototype.GetAnchorB=function(){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB)};aa.prototype.GetReactionForce=
function(d){if(d===undefined)d=0;return new w(d*this.m_impulse.x,d*this.m_impulse.y)};aa.prototype.GetReactionTorque=function(d){if(d===undefined)d=0;return d*this.m_impulse.z};aa.prototype.b2WeldJoint=function(d){this.__super.b2Joint.call(this,d);this.m_localAnchorA.SetV(d.localAnchorA);this.m_localAnchorB.SetV(d.localAnchorB);this.m_referenceAngle=d.referenceAngle;this.m_impulse.SetZero();this.m_mass=new K};aa.prototype.InitVelocityConstraints=function(d){var h,l=0,j=this.m_bodyA,o=this.m_bodyB;
h=j.m_xf.R;var q=this.m_localAnchorA.x-j.m_sweep.localCenter.x,n=this.m_localAnchorA.y-j.m_sweep.localCenter.y;l=h.col1.x*q+h.col2.x*n;n=h.col1.y*q+h.col2.y*n;q=l;h=o.m_xf.R;var a=this.m_localAnchorB.x-o.m_sweep.localCenter.x,c=this.m_localAnchorB.y-o.m_sweep.localCenter.y;l=h.col1.x*a+h.col2.x*c;c=h.col1.y*a+h.col2.y*c;a=l;h=j.m_invMass;l=o.m_invMass;var g=j.m_invI,b=o.m_invI;this.m_mass.col1.x=h+l+n*n*g+c*c*b;this.m_mass.col2.x=-n*q*g-c*a*b;this.m_mass.col3.x=-n*g-c*b;this.m_mass.col1.y=this.m_mass.col2.x;
this.m_mass.col2.y=h+l+q*q*g+a*a*b;this.m_mass.col3.y=q*g+a*b;this.m_mass.col1.z=this.m_mass.col3.x;this.m_mass.col2.z=this.m_mass.col3.y;this.m_mass.col3.z=g+b;if(d.warmStarting){this.m_impulse.x*=d.dtRatio;this.m_impulse.y*=d.dtRatio;this.m_impulse.z*=d.dtRatio;j.m_linearVelocity.x-=h*this.m_impulse.x;j.m_linearVelocity.y-=h*this.m_impulse.y;j.m_angularVelocity-=g*(q*this.m_impulse.y-n*this.m_impulse.x+this.m_impulse.z);o.m_linearVelocity.x+=l*this.m_impulse.x;o.m_linearVelocity.y+=l*this.m_impulse.y;
o.m_angularVelocity+=b*(a*this.m_impulse.y-c*this.m_impulse.x+this.m_impulse.z)}else this.m_impulse.SetZero()};aa.prototype.SolveVelocityConstraints=function(){var d,h=0,l=this.m_bodyA,j=this.m_bodyB,o=l.m_linearVelocity,q=l.m_angularVelocity,n=j.m_linearVelocity,a=j.m_angularVelocity,c=l.m_invMass,g=j.m_invMass,b=l.m_invI,e=j.m_invI;d=l.m_xf.R;var f=this.m_localAnchorA.x-l.m_sweep.localCenter.x,m=this.m_localAnchorA.y-l.m_sweep.localCenter.y;h=d.col1.x*f+d.col2.x*m;m=d.col1.y*f+d.col2.y*m;f=h;d=
j.m_xf.R;var r=this.m_localAnchorB.x-j.m_sweep.localCenter.x,s=this.m_localAnchorB.y-j.m_sweep.localCenter.y;h=d.col1.x*r+d.col2.x*s;s=d.col1.y*r+d.col2.y*s;r=h;d=n.x-a*s-o.x+q*m;h=n.y+a*r-o.y-q*f;var v=a-q,t=new A;this.m_mass.Solve33(t,-d,-h,-v);this.m_impulse.Add(t);o.x-=c*t.x;o.y-=c*t.y;q-=b*(f*t.y-m*t.x+t.z);n.x+=g*t.x;n.y+=g*t.y;a+=e*(r*t.y-s*t.x+t.z);l.m_angularVelocity=q;j.m_angularVelocity=a};aa.prototype.SolvePositionConstraints=function(){var d,h=0,l=this.m_bodyA,j=this.m_bodyB;d=l.m_xf.R;
var o=this.m_localAnchorA.x-l.m_sweep.localCenter.x,q=this.m_localAnchorA.y-l.m_sweep.localCenter.y;h=d.col1.x*o+d.col2.x*q;q=d.col1.y*o+d.col2.y*q;o=h;d=j.m_xf.R;var n=this.m_localAnchorB.x-j.m_sweep.localCenter.x,a=this.m_localAnchorB.y-j.m_sweep.localCenter.y;h=d.col1.x*n+d.col2.x*a;a=d.col1.y*n+d.col2.y*a;n=h;d=l.m_invMass;h=j.m_invMass;var c=l.m_invI,g=j.m_invI,b=j.m_sweep.c.x+n-l.m_sweep.c.x-o,e=j.m_sweep.c.y+a-l.m_sweep.c.y-q,f=j.m_sweep.a-l.m_sweep.a-this.m_referenceAngle,m=10*F.b2_linearSlop,
r=Math.sqrt(b*b+e*e),s=y.Abs(f);if(r>m){c*=1;g*=1}this.m_mass.col1.x=d+h+q*q*c+a*a*g;this.m_mass.col2.x=-q*o*c-a*n*g;this.m_mass.col3.x=-q*c-a*g;this.m_mass.col1.y=this.m_mass.col2.x;this.m_mass.col2.y=d+h+o*o*c+n*n*g;this.m_mass.col3.y=o*c+n*g;this.m_mass.col1.z=this.m_mass.col3.x;this.m_mass.col2.z=this.m_mass.col3.y;this.m_mass.col3.z=c+g;m=new A;this.m_mass.Solve33(m,-b,-e,-f);l.m_sweep.c.x-=d*m.x;l.m_sweep.c.y-=d*m.y;l.m_sweep.a-=c*(o*m.y-q*m.x+m.z);j.m_sweep.c.x+=h*m.x;j.m_sweep.c.y+=h*m.y;
j.m_sweep.a+=g*(n*m.y-a*m.x+m.z);l.SynchronizeTransform();j.SynchronizeTransform();return r<=F.b2_linearSlop&&s<=F.b2_angularSlop};Box2D.inherit(Z,Box2D.Dynamics.Joints.b2JointDef);Z.prototype.__super=Box2D.Dynamics.Joints.b2JointDef.prototype;Z.b2WeldJointDef=function(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,arguments);this.localAnchorA=new w;this.localAnchorB=new w};Z.prototype.b2WeldJointDef=function(){this.__super.b2JointDef.call(this);this.type=I.e_weldJoint;this.referenceAngle=
0};Z.prototype.Initialize=function(d,h,l){this.bodyA=d;this.bodyB=h;this.localAnchorA.SetV(this.bodyA.GetLocalPoint(l));this.localAnchorB.SetV(this.bodyB.GetLocalPoint(l));this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle()}})();
(function(){var F=Box2D.Dynamics.b2DebugDraw;F.b2DebugDraw=function(){this.m_xformScale=this.m_fillAlpha=this.m_alpha=this.m_lineThickness=this.m_drawScale=1;var G=this;this.m_sprite={graphics:{clear:function(){G.m_ctx.clearRect(0,0,G.m_ctx.canvas.width,G.m_ctx.canvas.height)}}}};F.prototype._color=function(G,K){return"rgba("+((G&16711680)>>16)+","+((G&65280)>>8)+","+(G&255)+","+K+")"};F.prototype.b2DebugDraw=function(){this.m_drawFlags=0};F.prototype.SetFlags=function(G){if(G===undefined)G=0;this.m_drawFlags=
G};F.prototype.GetFlags=function(){return this.m_drawFlags};F.prototype.AppendFlags=function(G){if(G===undefined)G=0;this.m_drawFlags|=G};F.prototype.ClearFlags=function(G){if(G===undefined)G=0;this.m_drawFlags&=~G};F.prototype.SetSprite=function(G){this.m_ctx=G};F.prototype.GetSprite=function(){return this.m_ctx};F.prototype.SetDrawScale=function(G){if(G===undefined)G=0;this.m_drawScale=G};F.prototype.GetDrawScale=function(){return this.m_drawScale};F.prototype.SetLineThickness=function(G){if(G===
undefined)G=0;this.m_lineThickness=G;this.m_ctx.strokeWidth=G};F.prototype.GetLineThickness=function(){return this.m_lineThickness};F.prototype.SetAlpha=function(G){if(G===undefined)G=0;this.m_alpha=G};F.prototype.GetAlpha=function(){return this.m_alpha};F.prototype.SetFillAlpha=function(G){if(G===undefined)G=0;this.m_fillAlpha=G};F.prototype.GetFillAlpha=function(){return this.m_fillAlpha};F.prototype.SetXFormScale=function(G){if(G===undefined)G=0;this.m_xformScale=G};F.prototype.GetXFormScale=function(){return this.m_xformScale};
F.prototype.DrawPolygon=function(G,K,y){if(K){var w=this.m_ctx,A=this.m_drawScale;w.beginPath();w.strokeStyle=this._color(y.color,this.m_alpha);w.moveTo(G[0].x*A,G[0].y*A);for(y=1;y<K;y++)w.lineTo(G[y].x*A,G[y].y*A);w.lineTo(G[0].x*A,G[0].y*A);w.closePath();w.stroke()}};F.prototype.DrawSolidPolygon=function(G,K,y){if(K){var w=this.m_ctx,A=this.m_drawScale;w.beginPath();w.strokeStyle=this._color(y.color,this.m_alpha);w.fillStyle=this._color(y.color,this.m_fillAlpha);w.moveTo(G[0].x*A,G[0].y*A);for(y=
1;y<K;y++)w.lineTo(G[y].x*A,G[y].y*A);w.lineTo(G[0].x*A,G[0].y*A);w.closePath();w.fill();w.stroke()}};F.prototype.DrawCircle=function(G,K,y){if(K){var w=this.m_ctx,A=this.m_drawScale;w.beginPath();w.strokeStyle=this._color(y.color,this.m_alpha);w.arc(G.x*A,G.y*A,K*A,0,Math.PI*2,true);w.closePath();w.stroke()}};F.prototype.DrawSolidCircle=function(G,K,y,w){if(K){var A=this.m_ctx,U=this.m_drawScale,p=G.x*U,B=G.y*U;A.moveTo(0,0);A.beginPath();A.strokeStyle=this._color(w.color,this.m_alpha);A.fillStyle=
this._color(w.color,this.m_fillAlpha);A.arc(p,B,K*U,0,Math.PI*2,true);A.moveTo(p,B);A.lineTo((G.x+y.x*K)*U,(G.y+y.y*K)*U);A.closePath();A.fill();A.stroke()}};F.prototype.DrawSegment=function(G,K,y){var w=this.m_ctx,A=this.m_drawScale;w.strokeStyle=this._color(y.color,this.m_alpha);w.beginPath();w.moveTo(G.x*A,G.y*A);w.lineTo(K.x*A,K.y*A);w.closePath();w.stroke()};F.prototype.DrawTransform=function(G){var K=this.m_ctx,y=this.m_drawScale;K.beginPath();K.strokeStyle=this._color(16711680,this.m_alpha);
K.moveTo(G.position.x*y,G.position.y*y);K.lineTo((G.position.x+this.m_xformScale*G.R.col1.x)*y,(G.position.y+this.m_xformScale*G.R.col1.y)*y);K.strokeStyle=this._color(65280,this.m_alpha);K.moveTo(G.position.x*y,G.position.y*y);K.lineTo((G.position.x+this.m_xformScale*G.R.col2.x)*y,(G.position.y+this.m_xformScale*G.R.col2.y)*y);K.closePath();K.stroke()}})();var i;for(i=0;i<Box2D.postDefs.length;++i)Box2D.postDefs[i]();delete Box2D.postDefs;

/*C:\uniserver\www\hdp\public_html\lib/box2d.js*/
var   b2Vec2 = Box2D.Common.Math.b2Vec2
         	,	b2BodyDef = Box2D.Dynamics.b2BodyDef
         	,	b2Body = Box2D.Dynamics.b2Body
         	,	b2FixtureDef = Box2D.Dynamics.b2FixtureDef
         	,	b2Fixture = Box2D.Dynamics.b2Fixture
         	,	b2World = Box2D.Dynamics.b2World
         	,	b2MassData = Box2D.Collision.Shapes.b2MassData
         	,	b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
         	,	b2CircleShape = Box2D.Collision.Shapes.b2CircleShape
         	,	b2DebugDraw = Box2D.Dynamics.b2DebugDraw
			,	b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef
			,	b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef
			,	b2ContactListener = Box2D.Dynamics.b2ContactListener
			,	b2FilterData = Box2D.Dynamics.b2FilterData
            ;

/**@
* #Box2D
* @category Box2D
* Component that adds the Box2D physics engine capabilities to the entities.
*/
Crafty.c("Box2D", {
	/**@
	* #.body
	* The 'b2Body' element of the entity.
	*/
	body : null,

	/**@
	* #.fixtures
	* Array than contains the b2Fixtures of the entity.
	*/
	fixtures : null,

	init: function () {
		this.requires("2D");

		if (!Crafty.box2D.world) {
			Crafty.box2D.init(0, 10, 55, true);
		}
	},
	/**@
	* #.box2d
	* @comp Box2D
	* @sign public void .box2d(Object obj)
	* @param obj - Object with the bodyType(dynamic, static, kinematic) and fixture data to make
	* the fist fixture of the body.
	*
	* Create the b2Body and link to the crafty entity, it only need the bodyType
	* ie: .box2d({bodyType: 'solid'})
	* this will create a b2Body and make a fixture with the default, the other params of the object,
	* are the same of the method .addFixture
	* 
	* You can pass also a custom b2BodyDef using the argument .bodyDef
	* ie:
	* var customDef = new b2BodyDef;
	* customDef.type = "dynamic";
	* customDef.position.Set(X, Y);
	* customDef.angle = ANGLE_IN_RADIANS;
	* ...
	* .box2d(bodyDef : customDef);
	*
	*/
	box2d: function(obj) {
		var world = Crafty.box2D.world;
		var PTM_RATIO =	Crafty.box2D.PTM_RATIO;
		var fixDef;
		var BodyDef;
		var vertexCount = 0;
		this.fixtures = [];		
		
		if(obj.bodyDef){
		
			var BodyDef = obj.bodyDef;
			
		}else{
			var BodyDef = new b2BodyDef;

			if(obj.bodyType === "dynamic"){
				BodyDef.type = b2Body.b2_dynamicBody;
			}else if (obj.bodyType === "static"){
				BodyDef.type = b2Body.b2_staticBody;
			}else{
				BodyDef.type = b2Body.b2_kinematicBody;
			}


			BodyDef.position.Set(this._x/PTM_RATIO, this._y/PTM_RATIO);
		}
		
		BodyDef.userData = this;
		this.body = world.CreateBody(BodyDef);

		this.addFixture(obj);

		return this;
	},
	/**@
	* #.addFixture
	* @comp Box2D
	* @sign public void .addFixture(Object fixture)
	* @param fixture - Object with the B2FixtureDef or the propierties to make
	*	a B2Fixture (Density, Friction, Restitution, Shape, etc)
	*
	* Add a fixture to te body of the entity, you can pass a complete B2FixtureDef for more control
	* ie: .addFixture({fixDef: B2FixtureDef}) or pass the propierties what you want
    * ie: .addFixture(
	*				  {
	*					density: Number,
	*					friction: Number,
	*					restitution: Number,
	*					shape: Array with the shape or String with the shape you want('circle', 'box')
    *				  })
	*
	* If you pass a empty obj, the metod will create a fixture with default values, when the
	* fixture is made, it's attached to the body and add to the fixtures Array
	*/
	addFixture : function(setup) {

		var fixDef = {};

		// Custom fixture
		if (setup.fixDef) {

			fixDef = setup.fixDef;

			fixDef.shape = this._addShapeToFixture(fixDef.shape);

		// Preconfigured fixture
		} else {

			fixDef = new b2FixtureDef();
			fixDef.density = (!isNaN(setup.density)) ? setup.density : 1;
			fixDef.friction = (!isNaN(setup.friction)) ? setup.friction : 0.5;
			fixDef.restitution = (!isNaN(setup.restitution)) ? setup.restitution : 0.2;
      fixDef.isSensor = Boolean(setup.isSensor);

			// Add some filter stuff
			fixDef.filter = this._addFilterToFixture(setup);

			// Enrich the fixture with a shape
			fixDef.shape = this._addShapeToFixture(setup.shape);
		}

		// Fixture was built
		if (Object.keys(fixDef).length) {

			this.fixtures.push(this.body.CreateFixture(fixDef));
		}

		return this;
	},

	/**
	 * Add filter stuff to the fixDef
	 * @param {[type]} setup  [description]
	 */
	_addFilterToFixture: function(setup) {

		var filter = new b2FilterData();

		filter.categoryBits = (!isNaN(setup.categoryBits)) ? setup.categoryBits : 0x0001;
		filter.maskBits = (!isNaN(setup.maskBits)) ? setup.maskBits : 0xffff;
		filter.groupIndex = (!isNaN(setup.groupIndex)) ? setup.groupIndex : 0;

		return filter;
	},

	_addShapeToFixture: function(shapeSetup) {

		var shape;

		var PTM_RATIO = Crafty.box2D.PTM_RATIO;

		// adoptar la forma si se pasa completa
		if (typeof shapeSetup === "object" && shapeSetup.m_radius) {
			shape = shapeSetup;
			
			shape.SetLocalPosition(new b2Vec2(
				this._w / PTM_RATIO / 2,
				this._h / PTM_RATIO / 2
			));
		}
		// ShapeSetup is a string! A circle!
		else if (typeof shapeSetup === "string" && shapeSetup === "circle") {

			shape = new b2CircleShape(
				this._w / PTM_RATIO / 2
			);

			shape.SetLocalPosition(new b2Vec2(
				this._w / PTM_RATIO / 2,
				this._h / PTM_RATIO / 2
			));

		// Shape is an array, hopefully..
		} else if (Object.prototype.toString.call( shapeSetup ) === '[object Array]') {

			shape = new b2PolygonShape();
			var vertexCount = shapeSetup.length;
			var shapeArray = [];

			for (var i = 0; i < vertexCount; i++) {
				var vector = shapeSetup[i];
				shapeArray.push(new b2Vec2(vector[0] / PTM_RATIO, vector[1] / PTM_RATIO));
			}

			shape.SetAsArray(shapeArray, vertexCount);

		// No, it's a box! (maybe a shape wasn't defined!)
		} else {

			shape = new b2PolygonShape();
			shape.SetAsOrientedBox(
				(this.w / 2) / PTM_RATIO, (this.h / 2) / PTM_RATIO,
				new b2Vec2(
					(this.w / 2) / PTM_RATIO, (this.h / 2) / PTM_RATIO
				)
			);
		}

		return shape || null;
	},

	/**@
	* #.contact
	* @comp Box2D
	* @sign public Boolean/Array contact(String component)
	* @param component - Check collision with entities that has this component
	* @return `false` if no collision or the param component don't had the Box2D comp. If a collision is detected, returns an Array of objects that are colliding.
	* Takes an argument for a component to test collision for. If a collision is found, an array of
	* every object in collision along with 'contact' info.
	*
	* If no collision or the target component don't had the Box2D comp, will return false. The return collision data will be an Array of Objects with the
	* the object collided and the 'contact' object return from Box2D.
	* ~~~
	* [{
	*    obj: [entity],
	*    contact: [obj]
	* }]
	* ~~~
	* @see .onContact
	*/
	contact:function(comp){
		var finalresult = [];
		var entitys = Crafty(comp);
		for(entity in entitys){
			if(!isNaN(entity)){
				var obj = Crafty(entitys[entity]);
				if(!obj.__c["Box2D"]){
					return false;
				}else{
					for(_contact in Crafty.box2D.contacts){
						var contact = Crafty.box2D.contacts[_contact];
						for(i in this.fixtures){
							var fixtureA = this.fixtures[i];
							for(j in obj.fixtures){
								var fixtureB = obj.fixtures[j];
								if ((contact.fixtureA === fixtureA && contact.fixtureB === fixtureB) ||
									(contact.fixtureA === fixtureB && contact.fixtureB === fixtureA)) {

									finalresult.push(
														{
															obj: obj,
															contact : contact
														});
								}
							}
						}
					}
				}
			}
		}

		return (finalresult.length) ? finalresult : false;
	},
	/**@
	* #.onContact
	* @comp Box2D
	* @sign public this .onContact(String component, Function hit)
	* @param component - Component to check collisions for
	* @param hit - Callback method to execute when collided with component
	* Creates an enterframe event calling .contact() each time and if collision detected will invoke the callback.
	* @see .contact
	*/
	onContact: function (comp, fn) {
		this.bind("EnterFrame", function () {
			var hitdata = this.contact(comp);
			if (hitdata) {
				fn.call(this, hitdata);
			}
		});
		return this;
	},
});

/**@
* #Crafty.box2D
* @category Box2D
* Collection of methods to init Box2D World.
*/
Crafty.extend({
	box2D: {
		ShowBox2DDebug : false,
		contacts : null,
		paused: false,
	/**@
		* #Crafty.box2D.world
		* @comp Crafty.box2D
		* This will return the b2World element.
		*/
		world : null,

	/**@
		* #Crafty.box2D.PTM_RATIO
		* @comp Crafty.box2D
		* This will return the pixel-to-meter ratio used to draw the b2World.
		*/
		PTM_RATIO : null,

		/**@
		* #Crafty.box2D.init
		* @comp Crafty.box2D
		* @sign public void Crafty.box2D.init(Number gx, Number gy, Number ptm_ratio, Boolean doSleep)
		* @param gx - gravity force of the x-axis
		* @param gy - gravity force of the y-axis
		* @param ptm_ratio - pixel-to-meter ratio
		* @param doSleep permit the Box2D world sleep
		* Creates a b2World element and bind the Box2D 'step' to Crafty EnterFrame funct
		* Must be called before any entities with the Box2D component can be drawn.
		*
		* This method will automatically be called if no `Crafty.canvas.b2World` is
		* found.
		*/
		init: function (gx, gy, ptm_ratio, doSleep) {
			var _world = new b2World(
							   new b2Vec2(gx, gy)    //gravity
							,  doSleep                 //allow sleep
						 );

			var _PTM_RATIO = ptm_ratio;

			var _contacts = [];

			//Add the contactlistener and bind the Crafty EnterFrame
			var contactListener = new b2ContactListener;
			contactListener.BeginContact = function(contact)
										   {
												var myContact = {
																	fixtureA: contact.GetFixtureA(),
																	fixtureB: contact.GetFixtureB()
																};

												//don't add if contact is already in the list
												for(contact in _contacts){
													if ((_contacts[contact].fixtureA == myContact.fixtureA) &&
														(_contacts[contact].fixtureB == myContact.fixtureB)) {
															return;
													}
												}
												_contacts.push(myContact);
										   };

			contactListener.EndContact = function(contact)
										   {
												var myContact = {
																	fixtureA: contact.GetFixtureA(),
																	fixtureB: contact.GetFixtureB()
																};

												for(contact in _contacts){
													if ((_contacts[contact].fixtureA == myContact.fixtureA) &&
														(_contacts[contact].fixtureB == myContact.fixtureB)) {
														_contacts.splice(contact, 1);
														return;
													}
												}
										   };

			_world.SetContactListener(contactListener);

			Crafty.bind("EnterFrame", function() {
				if (!Crafty.box2D.paused) {
					var fps = 40;
					var timeStep = 1.0/(fps * 0.8);

					//move the box2d world ahead
					_world.Step(timeStep , 8 , 3);
					_world.ClearForces();
					/*_world.Step(
						   1 / 30   //frame-rate
						,  8       //velocity iterations
						,  3       //position iterations
					 );*/

					for(var b = _world.GetBodyList(); b; b=b.GetNext()) {
						if (b.GetUserData()) {
							var sprite = b.GetUserData();
							sprite.attr(
										{
											x: b.GetPosition().x * _PTM_RATIO,
											y:b.GetPosition().y * _PTM_RATIO
										}
								);
							sprite.rotation = Crafty.math.radToDeg(b.GetAngle());

						}
					}
				}
				
				if(Crafty.box2D.ShowBox2DDebug){
					_world.DrawDebugData();
				}
				
				if (!Crafty.box2D.paused) _world.ClearForces();
			});

			Crafty.box2D.world = _world;
			Crafty.box2D.PTM_RATIO = _PTM_RATIO;
			Crafty.box2D.contacts = _contacts;
		},
		
		pause: function() {
			Crafty.box2D.paused = true;
			return this;
		},
		unpause: function() {
			Crafty.box2D.paused = false;
			return this;
		},
		
		showDebugInfo : function(){
			var _world = Crafty.box2D.world;
			var _PTM_RATIO = Crafty.box2D.PTM_RATIO;

			if (Crafty.support.canvas) {
				var c = document.createElement("canvas");
				c.id = "Box2DCanvasDebug";
				c.width = Crafty.viewport.width;
				c.height = Crafty.viewport.height;
				c.style.position = 'absolute';
				c.style.left = "0px";
				c.style.top = "0px";

				Crafty.stage.elem.appendChild(c);

				var debugDraw = new b2DebugDraw();
				debugDraw.SetSprite(c.getContext('2d'));
				debugDraw.SetDrawScale(_PTM_RATIO);
				debugDraw.SetFillAlpha(0.7);
				debugDraw.SetLineThickness(1.0);
				debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
				_world.SetDebugDraw(debugDraw);
				Crafty.box2D.ShowBox2DDebug = true;
			}else{
				Crafty.box2D.ShowBox2DDebug = false;
			}
		}
	}
});

/*C:\uniserver\www\hdp\public_html\src/global.js*/
// *** Funciones disponibles globalmente para todo el proyecto

// Extrae las coordenadas del mouse de un evento de mouse, esté lanzándose desde Cocoon o en PC
function mouseCoords(e) {
	if (cocoon) {
		if (e.type === 'touchend' || e.type === 'touchcancel') {
			return {x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY};
		}
		else {
			return {x: e.targetTouches[0].clientX, y: e.targetTouches[0].clientY};
		}
	} else {
		return {x: e.clientX, y: e.clientY};
	}
}

// Generates a random float between 2 values
function randomFloat(min, max) {
	return Math.random() * (max - min + 1) + min;
}
;

// Generates a random integer between 2 values
function randomInt(min, max) {
	return Math.floor(Math.random() * (max - min + 1) + min);
}
;

//obtener y eliminar un elemento aleatorio de un array
function getRandomArray(arr) {
	var elem = Crafty.math.randomElementOfArray(arr);
	var index = arr.indexOf(elem);
	return arr.splice(index, 1);
}

//+ Desordenar un array
//@ http://jsfromhell.com/array/shuffle [v1.0]
function shuffle(o) { //v1.0
	for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x)
		;
	return o;
}
;


// Intenta dejar el mundo Box2D totalmente vacío
function resetBox2D() {
	if (world.GetBodyCount() > 0) {
		var ventana = world.GetBodyList();
		var temp;
		// Iteramos entre todos los cuerpos existentes para destruirlos
		while (ventana !== null) {
			temp = ventana;
			world.DestroyBody(temp);
			ventana = ventana.m_next;
		}
	}

	Crafty.box2D.unpause(); // Despausamos por si está pausado
}


/* ***** GESTIÓN DE MEMORIA ***** */

// Intenta descargar una lista de recursos de memoria (CocoonJS)
function limpiarRecurso(datos) {

	var num = datos.rutas.length;
	var ruta;
	for (i = 0; i < num; i++) {
		ruta = datos.rutas[i];
		// Si el objeto existe,
		if (!!Crafty.assets[ruta]) {
			console.log("Desechando " + ruta);
			if (cocoon)
				Crafty.assets[ruta].dispose();
			delete Crafty.assets[ruta];
		}
	}
	datos.cargado = false;
}

// Intenta limpiar todos los recursos de memoria (excepto los globales)
function limpiarTodo() {
	if (Recursos.menuPrincipal.cargado)
		limpiarRecurso(Recursos.menuPrincipal);
	if (Recursos.menuCuadros.cargado)
		limpiarRecurso(Recursos.menuCuadros);
}

// Carga los recursos descritos en el objeto "datos" (elemento del objeto Recursos)
// Cuando termina de cargarlos, ejecuta la función f()
// Cada escena es responsable de cargar sus propios recursos
// Si mostrarCortina es true se muestra la cortina de carga por defecto
// Automáticamente se limpia la memoria antes de cargar un nuevo set de recursos
function cargarRecursos(datos, mostrarCortina, f) {
	if (datos.cargado === false) {
		//limpiarTodo(); // Inicialmente, limpiamos la memoria
		console.log("Cargando recursos en memoria (" + (datos.rutas.length + (datos.audio ? 1 : 0)) + ")...");
		datos.cargado = true;

		if (mostrarCortina) {
			// eliminamos las entidades no persistentes
			Crafty("2D").each(function () {
				if (!this.has("Persist")) this.destroy();
			});
			
			// Mostramos cortina de carga	
			Crafty.e("2D, Canvas, Color").attr({ w: 1280, h: 800, z: 90000 }).color("#EB6054");
			Crafty.e("2D, Canvas, Image").attr({ x: 540, y: 330, z: 90000 }).image("img/carga/pajaro.png");
			Crafty.e("2D, Canvas, Image").attr({ x: 588, y: 518, z: 90000 }).image("img/carga/cargando.png");
			Crafty.e("2D, Canvas, Image").attr({ x: 577, y: 707, z: 90000 }).image("img/carga/logo.png");
		}
		
		Crafty.load(datos.rutas, function() {
			console.log("Carga terminada; Creando sprites...");
			if (!datos.spritesListas) {
				datos.initSprites();
				datos.spritesListas = true;
			}
			console.log("Sprites creadas!");
			f();
		});

	}
	else {
		console.log("Recursos ya cargados");
		f();
	}
}

// Elimina todo el progreso del jugador
function resetProgreso() {
	var i;
	for (i = 0 ; i < 5 ; i++) {
		progreso[i].bloqueado = true;
		progreso[i].baudilios = [0,0,0,0,0,0];
		progreso[i].puntaje = [0,0,0,0,0,0];
	}
	progreso[0].bloqueado = false; // primer nivel
}
/*C:\uniserver\www\hdp\public_html\src/datos/progreso.js*/
// Conserva el progreso del jugador en el videojuego
var progreso = [
	{	// morro
		bloqueado: false, // true si este cuadro está deshabilitado
		baudilios: [0,0,0,0,0,0], // número de baudilios por nivel
		puntaje: [0,0,0,0,0,0] // puntaje por nivel
	},
	{	// belalcazar
		bloqueado: true,
		baudilios: [0,0,0,0,0,0],
		puntaje: [0,0,0,0,0,0]
	},
	{	// parque
		bloqueado: true,
		baudilios: [0,0,0,0,0,0],
		puntaje: [0,0,0,0,0,0]
	},
	{	// humilladero
		bloqueado: true,
		baudilios: [0,0,0,0,0,0],
		puntaje: [0,0,0,0,0,0]
	},
	{	// valencia
		bloqueado: true,
		baudilios: [0,0,0,0,0,0],
		puntaje: [0,0,0,0,0,0]
	}
];

/*C:\uniserver\www\hdp\public_html\src/datos/dbTest.js*/
//banco de preguntas del test
﻿var tests = [];
//esta corresponde al banco de preguntas de la primera postal

//el Morro
tests[0] = {
	numPreguntas: 1,
	pregunta: [
		{
			texto: "El Morro |de Tulcán| es una montaña |Artificial|\nprehispánica.",
			trampa: ["Natural", "de Popayán"]
		},
		{
			texto: "El Morro es considerado el sitio |Arqueológico| más\n importante de |Popayán|.",
			trampa: ["Colombia", "Botánico"]
		},
		{
			texto: "El Morro fué |Construido| por los |Indígenas|\ndel Valle de |Pubenza|.",
			trampa: ["Cauca", "Misioneros"]
		},
		{
			texto: "El Morro fué |Construido| con bloques de |Adobe|.",
			trampa: ["Decorado", "Cemento"]
		},
		{
			texto: "En 1957, fuertes |Lluvias| causaron un derrumbe\n en el Morro, el cual dejó |Tumbas| a la vista.",
			trampa: ["Joyas", "Temblores"]
		},
		{
			texto: "En el Morro encontraron una |Moneda|, al parecer de la\n época de |Fernando| VII.",
			trampa: ["Calavera", "Carlos"]
		},
		{
			texto: "Investigaciones |Arqueológicas| encontraron en\nel interior del Morro 14 |Enterramientos|.",
			trampa: ["Collares", "Antropológicas"]
		},
		{
			texto: "El Instituto Etnológico de la Universidad del |Cauca|\n comprobó la |Autenticidad| de los restos encontrados\nen el Morro.",
			trampa: ["Valle", "Antiguedad"]
		},
		{
			texto: "Al parecer el |Morro| era un sitio |Sagrado|.",
			trampa: ["Oscuro", "Trono"]
		},
		{
			texto: "En el Morro se hacían |Ritos| |Fúnebres|.",
			trampa: ["Musicales", "Fiestas"]
		},
		{
			texto: "La |Estatua| de Sebastián de Belalcázar fue ubicada\n sobre el Morro en |1937|.",
			trampa: ["1935", "Pintura"]
		},
		{
			texto: "La estatua de |Belalcázar| se instaló en el morro\n para celebrar el |Cumpleaños| de Popayán.",
			trampa: ["Bolivar", "Nombramiento"]
		}
	]
};


//Sebastian de Belalcazar
tests[1] = {
	numPreguntas: 2,
	pregunta: [
		{
			texto: 'Sebastián de Belalcázar fue el |Conquistador| que |Fundó| la\nciudad de Popayán.',
			trampa: ["Descubrió", "Emperador"]
		},
		{
			texto: 'El verdadero |Nombre| de Sebastián de Belalcázar era Sebastián\n|Moyano|.',
			trampa: ["Aguirre ", "Motivo"]
		},
		{
			texto: 'La palabra |Popayán| proviene de "|pop-pioyá-n|".',
			trampa: ["Papiyón", "Pipián"]
		},
		{
			texto: 'Los conquistadores asumieron el nombre Popayán porque sus\n|Intérpretes| Yucatecos las designaron como las "|Tierras|\ndel cacique Pioyán"',
			trampa: ["Discípulos", "Amigos", "Huestes"]
		},
		{
			texto: 'Mientras conquistaba Popayán, Belalcázar |Atravesó| lo que\nhoy se conoce como Timbío -en |Octubre| de 1535-.',
			trampa: ["Agosto", "Mayo", "Incendió"]
		},
		{
			texto: 'Belalcázar venció a |3000| indígenas con un |Ejército| de 100\nhombres.',
			trampa: ["1000", "2000", "Tumulto"]
		},
		{
			texto: 'Mientras buscaba el tesoro de El Dorado, también fundó las\nciudades de |Quito y Guayaquil|, en Ecuador, y\n|Santiago de Cali y Popayán|, en Colombia.',
			trampa: ["Quito y Otavalo", "Guayaquil e Ibarra", "Santiago de Cali y Neiva"]
		},
		{
			texto: 'En mayo de |1540| Sebastián de Belalcázar volvió a |España|\npara legitimar sus derechos.',
			trampa: ["Perú", "Italia", "1537"]
		},
		{
			texto: 'Belalcázar fue declarado primer |Gobernador| de la Provincia\nde Popayán en la corte de |Carlos I| de España.',
			trampa: ["Carlos V", "Carlos II", "Emancipador"]
		},
		{
			texto: 'Belalcázar murió de avanzada edad, a causa de una enfermedad\nmientras preparaba su último viaje a |España|, en Cartagena de\nIndias en |1551|.',
			trampa: ["1552", "Italia", "1557"]
		}
	]
};

//Puente de Humilladero
tests[2] = {
	numPreguntas: 3,
	pregunta: [
		{
			texto: 'El Puente del Humilladero fue |Construido| bajo la dirección de\nFray Serafín Barbetti y se inauguró el |31 de julio| de 1873.',
			trampa: ["21 de julio", "31 de junio", "Diseñado"]
		},
		{
			texto: 'El |Obispo| de la ciudad tuvo la idea de agradecer\n|Públicamente| a Barbetti por su buen trabajo y 82\npersonalidades firmaron una nota.',
			trampa: ["Alcalde", "Solemnemente", "Regidor"]
		},
		{
			texto: 'El Puente del humilladero es un |Viaducto| estilo romano con\n|Doce| arcos y una longitud de 240 metros.',
			trampa: ["Trece", "Quince", "Edificio"]
		},
		{
			texto: 'El Puente del humilladero fue construido para unir el\n|Sector| de |El Callejón| -hoy barrio Bolívar- y el\ncentro de la ciudad, que se encuentra atravesado por el\nRío |Molino|.',
			trampa: ["El Placer", "Mirador", "El Poblado", "Ejido", "Viaducto"]
		},
		{
			texto: 'Barbetti le dio forma al puente con los |Ladrillos| que se\ndescartaron de la reconstrucción de la |Catedral| de\nPopayán -destruida por el terremoto de 1736- y las obras de\nla Torre del Reloj.',
			trampa: ["Implementos", "Diócesis", "Alcaldía", "Penitenciaria", "1736", "1735"]
		},
		{
			texto: 'La mezcla usada para |Pegar| los ladrillos del Puente\ndel Humilladero era de |Cal y barro| pero le agregaron\n|Sangre| de bueyes para que los ladrillos se adhieran más.',
			trampa: ["Cal y yeso", "Saliva", "Cal y arena", "Alisar", "Cal y estuco"]
		},
		{
			texto: 'Para |Inaugurar| el Puente del Humilladero Barbetti hizo\npasar una recua de |Mulas| cargadas y |Almorzó| bajo el\narco principal.',
			trampa: ["Acampó", "Ovejas", "Clausurar", "Durmió", "Vacas"]
		},
		{
			texto: 'Se dice que lo del "Humilladero" se debe a que las\n|Personas| que por allí subían al |Centro| lo\nhacían casi |Arrodillados|.',
			trampa: ["Llorando", "Arrastrados", "Desesperados", "Norte", "Caravanas"]
		},
		{
			texto: 'En |1883| la Legislatura del |Estado| lo\nbautizó como |Puente Bolívar|.',
			trampa: ["1884", "Puente Cauca", "Puente Mayor", "Puente Central", "Cauca"]
		}
	]
};


//Parque Francisco Jose de Caldas
tests[3] = {
	numPreguntas: 4,
	pregunta: [
		{
			texto: 'El Parque Francisco José de Caldas se creó con la fundación\nde Popayán, en |1537|.',
			trampa: ["1535", "1536", "1539"]
		},
		{
			texto: 'En las ciudades fundadas los |Conquistadores| españoles\nelegían un espacio amplio y trazaban a partir suyo las calles,\ny edificaban alrededor |Casonas| gubernamentales, una\niglesia católica y las |Viviendas| de los nuevos pobladores.',
			trampa: ["Haciendas", "Pacificadores", "Huertas"]
		},
		{
			texto: 'En el centro del Parque Caldas hay un |Monumento| al\nprócer Francisco José de Caldas, llamado también el\n|Sabio| Caldas.',
			trampa: ["Busto", "General", "Capitán", "Poema", "Obelisco"]
		},
		{
			texto: 'Caldas es uno de los |Hijos| ilustres de\nPopayán y fue |Reconocido| también por sus\nestudios en |Botánica y astronomía|.',
			trampa: ["Botánica y Matemáticas", "Botánica e ingeniería", "Ovacionado", "Botánica y arquitectura", "Señores", "Políticos"]
		},
		{
			texto: 'La estatua de Caldas que adorna el Parque se construyó para\nconmemorar los |100 años| de la independencia de Colombia.',
			trampa: ["80 años", "90 años", "99 años", "98 años"]
		},
		{
			texto: 'Las |Placas| de la estatua de Caldas tienen su firma, una\nmuestra de |La planta| Bomarea caldasii -llamada así en su\nhonor- e imágenes de un octante y un |Hipsómetro|, su invento\npara determinar la |Altitud| de un lugar sobre el nivel del\nmar mediante la ebullición del agua.',
			trampa: ["Barómetro", "Embudo", "El hongo", "La roca", "Bielas", "Longitud", "Acidez"]
		},
		{
			texto: 'A 10 metros del parque se encuentra el Panteón de los\n|Próceres|, un monumento que contiene los sepulcros\nde |15| hijos ilustres de Popayán: |Camilo| Torres,\nTomás Cipriano de Mosquera y Francisco José de Caldas,\nentre otros.',
			trampa: ["Alejandro", "Maestros", "13", "Caudillos", "16", "Francisco"]
		},
		{
			texto: 'Frente al parque se levanta la Torre |Del Reloj|, uno\nde los |Símbolos| más representativos de Popayán\nque se terminó de construir en |1682|.',
			trampa: ["1690", "Lugares", "del Gobernador ", "del Parque", "1684", "1680", "Espacios"]
		},
		{
			texto: 'En 1737 se le adjuntó a la torre junto al parque un reloj de\nfabricación |Inglesa|, que funcionaría continuamente\nhasta 1814, cuando se le extrajeron sus |Pesas| para\nhacer |Municiones|.',
			trampa: ["Estribos", "Japonesa", "Claustros", "Tornillos", "Francesa", "Resortes", "Suiza", "Cuchillos"]
		},
		{
			texto: 'Junto al parque está la Catedral Basílica Nuestra |Señora|\nde la Asunción, una iglesia |Católica| ofrendada a la\nVirgen María terminada de construir en |Junio de 1906| sobre\nlos cimientos de antiguas iglesias.',
			trampa: ["Madre", "Gótica", "Hermana", "Junio de 1907", "Junio de 1905", "Antigua"]
		}
	]
};



//Guillermo Valencia
tests[4] = {
	numPreguntas: 5,
	pregunta: [
		{
			texto: 'La |Casona| donde vivió y murió Guillermo Valencia\nes monumento nacional por Ley 80 de diciembre de 1943.\nFunciona allí el Museo |Nacional| Guillermo Valencia\ny exhibe, entre otras reliquias, |retratos| de amigos y\npersonajes que él admiraba, obras de arte de La Colonia y\nLa Independencia, y una biblioteca con más de |7.000|\nlibros.',
			trampa: ["Moderno", "6.000", "Departamental", "8.000", "Estancia", "Joyas ", "Hacienda", "Objetos", "6.500"]
		},
		{
			texto: 'Guillermo Valencia fue uno de los payaneses más ilustres\ndel último |Siglo|. Nació en |1873|, y\ncomo fue un gran |Orador| obtuvo reconocimiento\n|Político| desde muy joven.',
			trampa: ["Administrativo", "Encomendador", "Académico", "1871", "1870", "Decenio", "1870", "Terrateniente", "1872", "Social", "Lustro"]
		},
		{
			texto: 'Aunque Valencia fue un |Poeta| prodigioso la mayoría\nde su obra se condensa en |Ritos|, un libro |Publicado|\nen 1899, cuando tenía |25| años.',
			trampa: ["Editado ", "Literato", "Impreso", "Nostalgias", "Escritor", "Sueños", "26", "Humanista", "27", "Misterios"]
		},
		{
			texto: 'Su hijo Guillermo León fue presidente de Colombia entre\n|1962 y 1966|, y su hija Josefina fue la primera mujer en\nser |Gobernadora| del Cauca y ministra de Educación.',
			trampa: ["1966 y 1970", "Intendente", "Minas y energía", "1958 y 1962", "Senadora", "Concejal", "Cultura", "1960 y 1964", "Educación", "Regente", "Desarrollo"]
		},
		{
			texto: 'A la vuelta de la Casa Museo Valencia está ubicada la\n|Casona| donde nació y vivió el |General| Tomas\nCipriano de Mosquera, donde funcionan actualmente la Casa\nMuseo Mosquera y el |Centro| de Investigaciones\n|Históricas| José María |Arboleda| Llorente.',
			trampa: ["Capitán", "Sociales", "Gobernador", "Mosquera", "López", "Módulo", "Médicas", "Edificio", "Hacienda", "Científicas"]
		},
		{
			texto: 'Hay una estatua del Maestro Valencia vigilando la entrada\ndel Puente del |Humilladero|, recurrente en miles de registros\n|fotográficos|. Fue construida por Victorio Macho, el mismo\n|escultor| del monumento a Sebastián de Belalcázar\nque |Reposa| en el Morro de Tulcán.',
			trampa: ["Amor", "Victorino", "Judiciales", "Pintor", "Decorador", "Bolívar", "Adorna", "Banco", "Diseñador", "Florentino"]
		},
		{
			texto: 'Valencia escribió el |Himno| de la Universidad del\nCauca y para musicalizarlo invitó al |Compositor| caucano\n|Avelino Paz|. Lo |Interpretaron| por primera vez el 11\nde noviembre de 1922 en la coronación del |Reinado|\nuniversitario.',
			trampa: ["Avelino Pérez", "Periódico", "Socializaron", "Avelino Pasos", "Músico", "Cantaron", "Reglamento ", "Carnaval", "Arreglista", "Avelino Páez", "Desfile"]
		}
	]
};
/*C:\uniserver\www\hdp\public_html\src/datos/nivel0.js*/
var niveles = [];

niveles[0] = {
	nombre: 'El morro',
	subnivel: [
		{
			id: 0,
			duracion: 8000,
			//esto se podria simplificar a una variable que se llame PATH
			fondo: 'img/act/morro/1/fondo.png',
			dato: "\b< Morro de Tulcán >\b\nEs una \bmontaña artificial\b\n prehispánica -al parecer data del\n año \b1600 - 600 a.C.\b- de carácter\n \bceremonial funerario\b, ubicada en el\n costado noreste de Popayán,\n considerada el \bsitio arqueológico\b\n más importante de la ciudad.",
			pista: { ladoIzq: true, y: 250 },
			actividad: function() {
				var actividad = new ActMorro1();
				return actividad;
			}
		},
		{
			id: 1,
			duracion: 21000,
			fondo: 'img/act/morro/2/fondo.png',
			dato: 'Esta \bpirámide truncada\b fué\n construída por los \baborígenes\b de la\n zona aprovechando una elevación\n natural, moldeada empleando\n \bbloques de adobe y relleno\b,\n cuidadosamente ubicados para\n lograr la estructura final.',
			pista: { ladoIzq: true, y: 200 },
			actividad: function() {
				var actividad = new ActMorro2();
				return actividad;
			}
		},
		{
			id: 2,
			duracion: 5000,
			fondo: 'img/act/morro/3/fondo.jpg',
			dato: 'En \b1957\b, fuertes lluvias causaron\n un derrumbe en uno de sus costados\n y dejó a la vista \btumbas, cerámicas\n y osarios\b. También encontraron una\n \bmoneda\b al parecer de la época de\n \bFernando VII\b, pues tenía grabada\n una flor de lis que indicaba la\n dinastía de los \bBorbón\b.',
			pista: { ladoIzq: false, y: 350 },
			actividad: function() {
				var actividad = new ActMorro3();
				actividad.totAciertos = 1;
				actividad.attrVentilador = {x: 60, y: 215, z: 10};
				actividad.attrNube = {x: -10, y: 18, z: 4};
				actividad.velocidadAngular = 4;//velocidad angular de ventilador
				actividad.aceleracionFriccion = -0.05;//aceleracion friccion
				actividad.nubeVelocidadRetorno = 1;
				return actividad;
			}
		},
		{
			id: 3,
			duracion: 15000,
			fondo: 'img/act/morro/4/fondo.jpg',
			dato: 'Investigaciones arqueológicas\n encontraron el interior del morro,\n enterramientos de \b14 tumbas\b con\n esqueletos de niños y adultos de\n hace más de 700 años.\n El arqueólogo \bJulio Cubillos\b entregó\n los restos al Instituto Etnológico de\n la Universidad del Cauca, que\n comprobó su autenticidad.',
			pista: { ladoIzq: false, y: 510 },
			actividad: function() {
				var actividad = new ActMorro4();
				actividad.totAciertos = 14;
				return actividad;
			}
		},
		{
			id: 4,
			duracion: 8000,
			fondo: 'img/act/morro/5/fondo.png',
			dato: 'Al parecer, este cerro era \bsagrado\b\n y en él se hacían \britos fúnebres\b,\n pues además de tumbas, se\n encontraron en su cima restos de\n \bvasijas de cerámica\b.',
			pista: { ladoIzq: true, y: 300 },
			actividad: function() {
				var actividad = new ActMorro5();
				actividad.totAciertos = 1;
				actividad.attrComplementoPolea = {x: 664, y: -382, z: 4};
				actividad.attrPolea = {x: 916, y: 126, z: 6};
				actividad.velocidadAngular = 4;
				actividad.aceleracionFriccion = -0.05;
				return actividad;
			}
		},
		{
			id: 5,
			duracion: 7000,
			fondo: 'img/act/morro/6/fondo.png',
			dato: 'En \b1937\b, para celebrar el\n cumpleaños \b400 de Popayán\b, se\n niveló su cima para hacer una\n plataforma donde se ubicaría la\n estatua de \bSebastián de Belalcázar\b,\n lo que causó el daño total de la\n cúspide original de la pirámide.',
			pista: { ladoIzq: true, y: 100 },
			actividad: function() {
				var actividad = new ActMorro6();
				return actividad;
			}
		}
	]
};

/*C:\uniserver\www\hdp\public_html\src/datos/nivel1.js*/

niveles[1] = {
	nombre: 'Sebastian de Belalcazar',
	subnivel: [
		{
			id: 1,
			duracion: 6000,
			//duracion: 7000,
			fondo: 'img/act/belalcaz/1/fondo.png',
			dato: '\b< Sebastián de Belalcazar >\b\nFué el conquistador español que el \b13\nde enero de 1537\b fundó la ciudad de\n\bPopayán\b, en inmediaciones del valle de\nPubenza.\nSu verdadero nombre fué \bSebastián\n Moyano\b y adoptó el nombre del pueblo\n donde nació (Belalcazar, Andalucía).',
			pista: { ladoIzq: true, y: 90 },
			actividad: function() {
				var actividad = new ActBelalcaz1();
				actividad.totAciertos = 4;
				return actividad;
			}
		},
		{
			id: 2,
			duracion: 25000,
			fondo: 'img/act/belalcaz/2/fondo.png',
			dato: '"Popayán" proviene de \b"pop-pioyá-n"\b,\ndonde \b"pop"\b significa gran cacique y\nla \b"n"\b al final representa la designación\nde un lugar. Los conquistadores al\nmando de Belalcazar asumieron este\nnombre del cacique de la región, pues\nsus intérpretes Yucatecos las llamaban\n\b"tierras del cacique Pioyán"\b.',
			pista: { ladoIzq: true, y: 250 },
			actividad: function() {
				var actividad = new ActBelalcaz2();
				actividad.totAciertos = 3;
				return actividad;
			}
		},
		{
			id: 3,
			duracion: 3000000,
			fondo: 'img/act/belalcaz/3/fondo.png',
			dato: 'Mientras conquistaba Popayán, atravesó\nlo que hoy se conoce como Timbío -en\noctubre de 1535- y venció a \b3000\nindígenas\b con un ejército de tan solo\n\b100 hombres\b.',
			pista: { ladoIzq: true, y: 250 },
			actividad: function() {
				var actividad = new ActBelalcaz3();
				return actividad;
			}
		},
		{
			id: 4,
			duracion: 4000,
			fondo: 'img/act/belalcaz/4/fondo.png',
			dato: 'Mientras buscaba el tesoro de\n \bEl Dorado\b, también fundó la ciudades\n de \bQuito\b y \bGuayaquil\b, en Ecuador,\n y \bSantiago de Cali\b y \bNeiva\b, en\n Colombia.',
			pista: { ladoIzq: true, y: 250 },
			actividad: function() {
				var actividad = new ActBelalcaz4();
				return actividad;
			}
		},
		{
			id: 5,
			duracion: 28000,
			fondo: 'img/act/belalcaz/5/fondo.jpg',
			dato: 'En mayo de 1540, \bvolvió a España\b para\nlegitimar sus derechos, y en la corte de\n\bCarlos V\b de Alemania y \bCarlos I\b de\nEspaña, fue declarado \bprimer\n gobernador\b de la Provincia de Popayán.\n Reconocidos sus derechos por el\n emperador, regresó a las américas.',
			pista: { ladoIzq: true, y: 250 },
			actividad: function() {
				var actividad = new ActBelalcaz5();
				return actividad;
			}
		},
		{
			id: 6,
			duracion: 17000,
			fondo: 'img/act/belalcaz/6/fondo.jpg',
			dato: 'Murió de avanzada edad, a causa de una\n \benfermedad\b mientras preparaba su\núltimo viaje a España, en \bCartagena\n de Indias\b en 1551.',
			pista: { ladoIzq: false, y: 30 },
			actividad: function() {
				var actividad = new ActBelalcaz6();
				return actividad;
			}
		}
	]
};


/*C:\uniserver\www\hdp\public_html\src/datos/nivel2.js*/

niveles[2] = {
	nombre: 'Parque Caldas',
	subnivel: [
		{
			id: 1,
			duracion: 25000,
			fondo: '',
			dato: "Apareció con la fundación de la ciudad,\nen 1537. Como era costumbre en las\nciudades coloniales españolas, los\nconquistadores elegían un espacio\namplio y trazaban las calles de forma\nperpendicular para edificar los edificios\nque representaban los poderes\nen España.",
			pista: { ladoIzq: true, y: 90 },
			actividad: function() {
				var actividad = new ActParque1();
				actividad.totAciertos = 4;
				return actividad;
			}
		},
		{
			id: 2,
			duracion: 12000,
			fondo: 'img/act/parque/2/fondo.jpg',
			dato: 'En el centro del parque hay un\nmonumento a Francisco José de Caldas,\nreconocido botánico, astrónomo y\nprócer colombiano (también llamado\n"sabio Caldas"); uno de los grandes\nhijos ilustres de Popayán. Éste\nmonumento se construyó para\nconmemorar los 100 años de la\nindependencia de Colombia.',
			pista: { ladoIzq: true, y: 90 },
			actividad: function() {
				var actividad = new ActParque2();
				actividad.totAciertos = 8;
				return actividad;
			}
		},
		{
			id: 3,
			duracion: 60000,
			fondo: 'img/act/parque/3/fondo.jpg',
			dato: "Las placas que acompañan el\nmonumento al sabio Caldas exponen\nsu firma, una muestra de la planta\ntrepadora Bomarea caldasii - llamada\nasí en su honor - y la figura de un\noctante y un hipsómetro, un invento\nsuyo.",
			pista: { ladoIzq: true, y: 90 },
			actividad: function() {
				var actividad = new ActParque3();
				return actividad;
			}
		},
		{
			id: 4,
			duracion: 30000000000,
			fondo: 'img/act/parque/4/fondo.jpg',
			dato: 'A 10 metros del parque se encuentra el\nPanteón de los Próceres, un monumento\nque contiene los sepulcros de 15 hijos\nilustres de Popayán: Camilo Torres,\nTomás Cipriano de Mosquera, Francisco\nJosé de Caldas, entre otros.',
			pista: { ladoIzq: true, y: 90 },
			actividad: function() {
				var actividad = new ActParque4();
				actividad.totAciertos = 15;
				return actividad;
			}
		},
		{
			id: 5,
			duracion: 15000,
			fondo: 'img/act/parque/5/fondo.jpg',
			dato: 'Frente al parque se levanta la Torre del\nReloj, uno de los símbolos más\nrepresentativos de Popayán. Terminó de\nconstruirse en 1682 y en 1737 se le\nadjuntó un reloj de fabricación inglesa,\nque funcionaría continuamente hasta\n1814, cuando se le extrajeron sus pesas\nde plomo para hacer municiones durante\nlas guerras de la Independencia.',
			pista: { ladoIzq: true, y: 90 },
			actividad: function() {
				var actividad = new ActParque5();
				return actividad;
			}
		},
		{
			id: 6,
			duracion: 15000,
			fondo: 'img/act/parque/6/fondo.jpg',
			dato: 'En el parque se encuentra la Catedral\nBasílica Nuestra Señora de la Asunción,\nuna iglesia católica ofrendada a la\nVirgen María terminada de construir en\njunio de 1906 sobre los cimientos de\nantiguas iglesias. Ha sido afectada por\nvarios terremotos, que le han requerido\nvarias reconstrucciones. En ella se\ncentran varios actos religiosos de la\nSemana Santa.',
			pista: { ladoIzq: true, y: 90 },
			actividad: function() {
				var actividad = new ActParque6();
				actividad.totAciertos = 10;
				return actividad;
			}
		}
	]
};


/*C:\uniserver\www\hdp\public_html\src/datos/nivel3.js*/

niveles[3] = {
	nombre: 'Puente Humilladero',
	subnivel: [
		{
			id: 1,
			duracion: 25000,
			fondo: '',
			dato: 'Es un viaducto estilo romano con doce\narcos y una longitud de 240 metros,\nconstruido para unir el sector de\nEl Callejón -hoy barrio Bolívar- y el\ncentro de la ciudad, que se encuentra\natravesado por el Río Molino.',
			pista: {ladoIzq: true, y: 90},
			actividad: function() {
				var actividad = new ActPuente1();
				return actividad;
			}
		},
		{
			id: 2,
			duracion: 200000,
			fondo: 'img/puente/2/fondo.png',
			dato: 'Fue levantado bajo la dirección de\nFray Serafín Barbetti y se inauguró el\n31 de julio de 1873. El obispo de la\nciudad tuvo la idea de agradecer\npúblicamente a Barbetti y 82\npersonalidades firmaron una nota.',
			pista: {ladoIzq: true, y: 90},
			actividad: function() {
				var actividad = new ActPuente2();
				return actividad;
			}
		},
		{
			id: 3,
			duracion: 200000,
			fondo: 'img/puente/3/fondo.png',
			dato: 'Barbetti le dio forma al puente con los\nladrillos que se descartaron de la\nreconstrucción de la Catedral de\nPopayán -destruida por el terremoto\nde 1736- y las obras de la\nTorre del Reloj.',
			pista: {ladoIzq: true, y: 90},
			actividad: function() {
				var actividad = new ActPuente3();
				return actividad;
			}
		},
		{
			id: 4,
			duracion: 2000000000,
			fondo: 'img/puente/4/fondo.png',
			dato: 'La mezcla usada para pegar los ladrillos\ndel puente era de cal y barro, pero le\nagregaron sangre de bueyes para que\nlos ladrillos se adhieran más entre sí.',
			pista: {ladoIzq: true, y: 90},
			actividad: function() {
				var actividad = new ActPuente4();
				return actividad;
			}
		},
		{
			id: 5,
			duracion: 2000000000,
			fondo: 'img/puente/5/fondo.png',
			dato: 'Para inaugurar el Puente del\nHumilladero, Barbetti hizo pasar una\nrecua de mulas cargadas y almorzó\nbajo el arco principal, desafiando una\ndenuncia -hecha por un profesor ante\nlas autoridades gubernamentales- de\nque la obra colapsaría.',
			pista: {ladoIzq: true, y: 90},
			actividad: function() {
				var actividad = new ActPuente5();
				return actividad;
			}
		},
		{
			id: 6,
			duracion: 2000000000,
			fondo: 'img/puente/6/fondo.png',
			dato: 'Se cree que el nombre "Puente del\nhumilladero" se debe a que las personas\nque por allí subían al centro lo hacían\ncasi de rodillas. En 1883 la Legislatura\ndel Estado lo bautizó como\n"Puente Bolívar".',
			pista: {ladoIzq: true, y: 90},
			actividad: function() {
				var actividad = new ActPuente6();
				return actividad;
			}
		}
	]
};


/*C:\uniserver\www\hdp\public_html\src/datos/nivel4.js*/

niveles[4] = {
	nombre: '',
	subnivel: [
		{
			id: 1,
			duracion: 200000,
			fondo: 'img/belalcaz/1/fondo.png',
			dato : '',
			actividad: function() {
				var actividad = new ActValencia1();
				return actividad;
			}
		},
		{
			id: 2,
			duracion: 200000,
			fondo: 'img/belalcaz/2/fondo.png',
			dato : '',
			actividad: function() {
				var actividad = new ActValencia2();
				return actividad;
			}
		},
		{
			id: 3,
			duracion: 200000,
			fondo: 'img/belalcaz/3/fondo.png',
			dato : '',
			actividad: function() {
				var actividad = new ActValencia3();
				return actividad;
			}
		},
		{
			id: 4,
			duracion: 2000000000,
			fondo: 'img/belalcaz/4/fondo.png',
			dato : '',
			actividad: function() {
				var actividad = new ActValencia4();
				return actividad;
			}
		},
		{
			id: 5,
			duracion: 2000000000,
			fondo: 'img/belalcaz/5/fondo.png',
			dato : '',
			actividad: function() {
				var actividad = new ActValencia5();
				return actividad;
			}
		},
		{
			id: 6,
			duracion: 2000000000,
			fondo: 'img/belalcaz/6/fondo.png',
			dato : '',
			actividad: function() {
				var actividad = new ActValencia6();
				return actividad;
			}
		}
	]
};


/*C:\uniserver\www\hdp\public_html\src/compo/Sonido.js*/
/**
 * Helper para la gestión de sonidos en Crafty
 */
var Sonido = function() {
	this.idMusicaActual = ""; // id de música actual
	this.bloqueado = false;
	
	/* MÉTODOS:
	crear(id, ruta)
	reproducir(id)
	loop(id)
	silenciar()
	isMuted()
	pausa()
	pararMusica()
	limpiar()
	limpiarTodo()
	*/
};

// Crea un recurso de sonido en id
Sonido.prototype.crear = function(id, ruta) {
	Crafty.audio.create(id, ruta);
};

// Reproduce el sonido en id 1 vez
Sonido.prototype.reproducir = function(id) {
	Crafty.audio.play(id);
};

// Reproduce infinitamente el sonido en id y lo almacena como la "música" actual
Sonido.prototype.reproducirMusica = function(id) {
	if (this.idMusicaActual !== id) {
		this.pararMusica();
		Crafty.audio.play(id, -1);
		this.idMusicaActual = id;
	}
};

// Intercambia el estado del "mute" entre true y false
Sonido.prototype.silenciar = function() {
	Crafty.audio.toggleMute();
	return Crafty.audio.muted;
};

//para verificar si esta muted o no
Sonido.prototype.isMuted = function(){
	return Crafty.audio.muted;
}

// Pausa y despausa el sonido
Sonido.prototype.pausa = function() {
	Crafty.audio.togglePause();
	return this;
};

// Detiene la reproducción de la música actual
Sonido.prototype.pararMusica = function() {
	if (this.idMusicaActual !== "") {
		Crafty.audio.stop(this.idMusicaActual);
		this.idMusicaActual = "";
	}
};

// Remueve un audio de memoria
Sonido.prototype.limpiar = function(id) {
	Crafty.audio.stop(id);
	if (cocoon) (Crafty.sounds[id].obj).dispose();
	Crafty.audio.remove(id);
	
};

// Remueve todos los audios en memoria
Sonido.prototype.limpiarTodo = function() {
	Crafty.audio.stop();
	Crafty.audio.remove();
	//@TODO: remover de memoria de cocoon todos los audios
	this.idMusicaActual = "";
};
/*C:\uniserver\www\hdp\public_html\src/compo/sprites.js*/
function spritesGlobal() {
	Crafty.sprite("img/global/temporizador.png", {
		sprBarraFondo: [0, 0, 628, 26],
		sprBarraTemporizador: [7, 78, 618, 18],
		sprReloj: [629, 0, 56, 64],
		sprPausa: [688, 0, 62, 64]
	});
	
	Crafty.sprite("img/global/fondo-pistas.png", {
		sprAC_fonPistaIzq: [0,0,512,256],
		sprAC_fonPistaDer: [0,256,512,256]
	});
	Crafty.sprite("img/global/pistas.png", {
		sprAC_msgPista: [0,0,204,170]
	});
	
	Crafty.sprite(16, 23, "img/global/myriad.png", {
		spr_letra: [0, 0]
	});
	Crafty.sprite("img/global/font-asap36.png", { "spr_asapNormal": [0,0, 37, 47] });
	Crafty.sprite("img/global/font-asap36bold.png", { "spr_asapBold": [0,0, 37, 47] });

	// Escena de pausa y perdiste
	Crafty.sprite("img/global/pau-botones.png", {
		sprPAU_btSalir: [0,0,60,60],
		sprPAU_btSalir2: [79,0,60,60],
		sprPAU_btReiniciar: [0,61,79,63],
		sprPAU_btReiniciar2: [79,61,79,63],
		sprPAU_btContinuar: [0,125,43,53],
		sprPAU_btContinuar2: [79,125,43,53]
	});
	Crafty.sprite("img/global/pau-hoja.png", {
		sprPAU_hoja: [0,0,8,7]
	});

	// Partículas
	//se usa en la actividad de bloques-morro
	Crafty.sprite("img/particulas/polvo.png", {
		spr_polvo: [0, 0, 32, 28]
	});
	Crafty.sprite("img/particulas/fuegos.png", {
		spr_fuegosArt: [0, 0, 23, 21]
	});
	Crafty.sprite("img/particulas/nube.png", {
		spr_nube: [0, 0, 96, 94]
	});
	
	
	Crafty.sprite("img/global/bt-atras.png", {
		sprGL_btAtras: [0,0,63,64],
		sprGL_btAtras2: [0,65,63,63]
	});
	
	// Sprites de gestos indicadores
	Crafty.sprite("img/global/gestos.png", {
		sprGL_gestoTap: [0,0,56,36],
		sprGL_gestoDrag: [0,64,52,49],
		sprGL_gestoRot: [0,128,64,64]
	});

	// icono de acierto o error, reutilizado en varias partes
	Crafty.sprite("img/global/advertencias.png", {
		sprGL_advBien: [0, 0, 75, 76],
		sprGL_advMal: [0, 76, 75, 76],
		sprGL_advExclama: [0, 152, 75, 76]
	});

	spritesPuntaje();
}
/*C:\uniserver\www\hdp\public_html\src/compo/Caballo.js*/
Crafty.c('Caballo', {
    saltos: 0,
    
	init: function() {
        this.requires('2D, Canvas, Tweener, SpriteAnimation');
    },
    
	Caballo: function(spr) {
        this.sprCaballo = spr;
        this.requires(spr)
                .reel('caminando', 1000, [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0]])
                .animate('caminando', -1);
        return this;
    },
    
	caminar: function(nvaPosicion, tiempo, callback) {
		this.cancelTweener();
        this.addTween({x: nvaPosicion.x, y: nvaPosicion.y}, 'easeOutQuad', tiempo, callback);
        return this;
    },
	
	// Agrega una espada (o algùn otro sprite) al caballo
	// Si se pasa una cadena vacía, se le quita la espada
    espada: function(spr) {
        if (spr !== "") {
			this.sprEspada = spr;
			this._espada = Crafty.e("2D, Canvas, " + spr)
								.attr({x: this.x + 140, y: this.y - 37, z: this.z - 1});
			this._espada.vy = 0.1755;
			this._espada.y0 = this._espada.y;
			this.attach(this._espada);
		}
		else {
			this.sprEspada = "";
			if (this._espada) {
				this._espada.destroy();
				this._espada = null;
			}
		}
        /*
		espada.bind("EnterFrame", function() {
            this.y += this.vy;
            if (this.y < this.y0 || this.y > (this.y0 + 2)) {
                this.vy = -this.vy;
            }
        });*/
        
        return this;
    },
    prop: function(prop, spr) {
        this.w = this.w * prop;
        this.h = this.h * prop;
        if (spr) {
            this.sprEspada = spr;
            this.espada(this.sprEspada);
            this._espada.w = this._espada.w * prop;
            this._espada.h = this._espada.h * prop;
            this._espada.x = this.x + 140 * prop;
            this._espada.y = this.y - 37 * prop;
        }
        return this;
    },
    t: 0, // Cuenta interna para la función
    dt: 0, // Incremento a sumar a la cuenta interna cada frame
    ciclo1: false, // true si está en el ciclo 0. Se alterna entre ciclo 0 y 1 (true-false)
    xIni: 0, // Posición inicial de la entidad
    amplitud: 0, // amplitud de oscilación
    /**
     * realiza un recorrido con forma de parabolica
     * @param {type} saltarA :objeto con x,y posiciones 
     * @param {type} t
     * @returns {undefined}
     */
    saltar: function() {
        this.z = 15;
        this.y -= 100;
        this.svx = 10;
        this.oscilarX(90, 28);
        //Crafty.e("2D,Canvas,Color,Draggable").color('blue').attr({x: this.x, y: this.y, w: 50, h: 50})
        //Crafty.e("2D,Canvas,Color,Draggable").color('blue').attr({x: this.x, y: this.y, w: 70, h: 70})

    },
    _calculo: function(t) {
        return 1 - 4 * (t - 0.5) * (t - 0.5);
    },
    // Oscilar un deltaX como máximo alrededor de la posición actual
    oscilarX: function(amplitud, periodo) {
        this.dt = 1 / periodo;
        this.xIni = this.y;
        this.amplitud = amplitud;

        this.osc = this.bind("EnterFrame", this.frame);

        return this;
    },
    // Invocada cada EnterFrame
    frame: function() {
        this.t += this.dt;
        if (this.t >= 1) {
            this.ciclo1 = (this.ciclo1 ? false : true);
            this.t = 0;
            this.saltos += 1;
        }
        this.x += this.svx;
        this.y = this.xIni - this.amplitud * this._calculo(this.t);

        if (this.saltos == 4) {
            this.unbind("EnterFrame");
            this.animate("caminando", -1);
            this.caminar({x: this.x + 100, y: this.y}, 4);
        }
        //Crafty.e("2D,Canvas,Color").color('blue').attr({x: this.x, y: this.y, w: 10, h: 10})
    },
});

/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Gesto.js*/
// Gesto de indicación en actividad
Crafty.c("Gesto", {
	e_mano: null, // Mano del gesto
	tipo: 0, // 1.toque rapido, 2.drag, 3.rotar
	duracion: 0, // Duración máxima en frames
	retardo: 0, // Frames a esperar antes de aparecer
	e_delayAnim: null,
	xIni: 0, // Coordenadas iniciales del gesto
	yIni: 0,
	deltaY: 0, // Taza de cambio en Y (opcional)
	frame: 0, // Contador interno de frames, usado en girar
	conf: null, // objeto de configuración
	
	init: function() {
		this.requires("2D, Canvas, DelayFrame, Tweener");
		this.e_mano = Crafty.e("2D, Canvas, Image, Tweener").image("img/global/mano.png");
		this.attach(this.e_mano);
		this.z = 9000;
		this.visible = false;
		this.e_mano.z = 9001;
		this.e_mano.visible = false;
		this.e_delayAnim = Crafty.e("DelayFrame");
	},
	
	// numTipo = 1.toque rapido, 2.drag, 3.rotar
	// dur = duración en frames
	// retard = retardo en frames para que aparezca
	Gesto: function(numTipo, conf) {
		this.tipo = numTipo;
		this.duracion = conf.duracion;
		this.retardo = conf.retardo;
		this.conf = conf;
		
		if (numTipo === 1) {
			this.requires("sprGL_gestoTap");
			this.e_mano.attr({ x: 20, y: 28 });
		}
		else if (numTipo === 2) {
			this.requires("sprGL_gestoDrag");
			this.e_mano.attr({ x: 13, y: 25 });
		}
		else {
			this.requires("sprGL_gestoRot");
			this.deltaY = (this.conf.desplY ? this.conf.desplY : 0);
			this.e_mano.attr({ x: 13, y: 26 });
		}
		
		this.attr({ x: conf.coords[0], y: conf.coords[1] });
		
		var self = this;
		Crafty.e("DelayFrame").delay(function() {
			self.animar();
		}, this.retardo);
		
		
		this.delay(function() {
			console.log("destroy")
			this.e_delayAnim.destroy();
			this.destroy();
		}, this.duracion);
		
		return this;
	},
	
	// Inicia la animación correspondiente al tipo de gesto
	animar: function() {
		// desplazamos el origen para que coincida con el centro del dedo
		this.x -= 30;
		this.y -= 30;
		
		// Almacenamos las coords. iniciales
		this.xIni = this._x;
		this.yIni = this._y;
		
		if (this.tipo === 1) {
			this.animToqueRapido();
		}
		else if (this.tipo === 2) {
			this.animArrastre();
		}
		else {
			this.animRotar();
		}
		
		return this;
	},
	
	/*
	 * Animación de gesto de toque rápido
	 * Configuración:
	 * coords: Coordenadas del centro de rotación
	 * duracion: Frames de duración del gesto
	 * retardo: Retardo en iniciar el gesto
	 * deltaX: Cambio en x por frame
	 * deltaY: Cambio en y por frame
	 * repetirX: Cambio en X por repetición
	 */
	animToqueRapido: function() {
		var self = this;
		this.visible = true;

		this.e_mano.attr({ alpha: 1, visible: true });
		console.log("animToqueRapido")
			
		Crafty.e("DelayFrame").delay(function() {
			self.visible = false;
			self.e_mano.addTween({ alpha: 0.1 }, "linear", 8, function() {
				self.e_delayAnim.delay(function() {
					if (self.conf.deltaX) { self.x += self.conf.deltaX; }
					if (self.conf.deltaY) { self.y += self.conf.deltaY; }
					self.animToqueRapido();
				}, 8);
			});
		}, 13);
		
		
	},
	
	/* Animación de gesto de rotar
	 * Configuración:
	 * coords: Coordenadas del centro de rotación
	 * duracion: Frames de duración del gesto
	 * retardo: Retardo en iniciar el gesto
	 * radio: Radio de giro
	 * desplY: (opc) Distancia a desplazar posición Y cada frame
	*/
	animRotar: function() {
		var self = this;
		this.e_mano.attr({ alpha: 0, visible: true });

		// Para la cuenta, usamos el contador del delayframe
		var grados, xR, yR;
		var r = this.conf.radio;
		this.x = this.xIni + r;
		this.y = this.yIni;
		this.visible = true;
		this.desaparecer = false; // true si la mano ya está desapareciendo
		
		this.e_mano.addTween({ alpha: 1 }, "linear", 12);
		
		this.bind("EnterFrame", function() {
			grados = this.frame * 0.08;
			yR = Math.sin(grados);
			xR = Math.cos(grados);
			this.x = this.xIni + xR * r;
			this.y = this.yIni + yR * r;
			
			if (this.deltaY !== 0) {
				this.y += this.conf.desplY;
				this.conf.desplY += this.deltaY;
			}

			if (!this.desaparecer) {
				if (this.c >= (this.duracion - 11)) {
					this.e_mano.addTween({ alpha: 0 }, "linear", 10);
					this.desaparecer = true;
				}
			}
			this.frame++;
		});
	},
	
	
	
	/* Animación de gesto de arrastre
	 * Configuración:
	 * coords: Coordenadas de inicio de arrastre [x1, y1]
	 * coordsFin: Coordenadas de fin de arrastre [x2, y2]
	 * desplX: Distancia a desplazar X cada repetición
	 */
	animArrastre: function() {
		var self = this;
		var mano = this.e_mano;
		mano.attr({ alpha: 0, visible: true });

		this.visible = true;
		var xFin = this.conf.coordsFin[0] - 30;
		var yFin = this.conf.coordsFin[1] - 30;
		var desplX = (this.conf.desplX) ? this.conf.desplX : 0;
		
		mano.addTween({ alpha: 1 }, "linear", 5, function() {
			self.addTween({ x: xFin, y: yFin }, "easeInOutCubic", 40, function() {
				mano.addTween({ alpha: 0 }, "linear", 10, function() {
					self.visible = false;
					self.attr({ x: self.xIni, y: self.yIni });

					if (self.conf.repetir > 1) {
						self.conf.repetir--;
						Crafty.e("DelayFrame").delay(function() {
							if (desplX !== 0) {
								self.x += desplX;
								self.conf.coordsFin[0]+= desplX;
							}
							self.animArrastre();
						}, 10);
					}
					else {
						self.ocultar();
					}
				});
			});
		});	
	},
	
	ocultar: function() {
		console.log("ocultar")
		this.visible = false;
		this.e_mano.visible = false;
		this.e_delayAnim.destroy();
		this.destroy();
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Boton.js*/
// Describe un botón con una posición inicial almacenada, que al hacerle click muestra una sprite diferente
// Tiene un posible estado de bloqueo
// inicializar con Boton(nomSprNormal, nomSprActivo)
Crafty.c("Boton", {
	spriteNormal: "",
	spriteActivo: "",
	xIni: 0, // Coordenadas donde aparece normalmente el botón
	yIni: 0,
	e_btActivo: null, // Entidad que temporalmente aparece mostrando el estado activo
	bloqueado: false, // poner en true cuando no debería responder a eventos
	
	init: function() {
		this.requires("2D, Canvas, Mouse");
		this.e_btActivo = Crafty.e("2D, Canvas, Tweener").attr({ alpha: 0.0, visible: false });
	},
	
	habilitar: function() {
		this.bloqueado = false;
		return this;
	},
	bloquear: function() {
		this.bloqueado = true;
		return this;
	},
	
	// setter de las coords iniciales
	posIni: function(x, y) {
		this.xIni = x;
		this.yIni = y;
		this.x = x;
		this.y = y;
		return this;
	},
	
	Boton: function(nomSprNormal, nomSprActivo) {
		this.addComponent(nomSprNormal);
		this.e_btActivo.addComponent(nomSprActivo).attr({ x: this._x, y: this._y, z: 99999 });
		if (this.has("Persist"))
			this.e_btActivo.addComponent("Persist");
		
		this.attach(this.e_btActivo);
		
		this.bind("MouseDown", function(e) {
			if (!this.bloqueado) {
				this.mostrarActivo();
			}
		}).bind("MouseUp", function(e) {
			if (!this.bloqueado) {	
				this.ocultarActivo();
			}
		}).bind("MouseOut", function(e) {
			if (!this.bloqueado) {
				this.ocultarActivo();
			}
		});
		
		return this;
	},
	
	mostrarActivo: function() {
		this.e_btActivo.attr({ visible: true }).addTween({ alpha: 1.0 }, "linear", 5);
		return this;
	},
	ocultarActivo: function() {
		if (this.e_btActivo._visible && this.e_btActivo._alpha > 0) {
			this.e_btActivo.attr({ alpha: 1.0 }).addTween({ alpha: 0.0 }, "linear", 5, function() { this.visible = false; });
		}
		return this;
	},
	
	// Oculta de inmediato el botón y su entidad de estado activo
	ocultar: function() {
		this.visible = false;
		this.e_btActivo.visible = false;
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Advertencia.js*/
// Globo de advertencia para mostrar
// Puede mostrar un chulo, una equis o una exclamación, según el estado solicitado
// Aviso que se anexa al caballo
// Para usarlo, crear la advertencia y 
Crafty.c("Advertencia", {
	tipoAviso: -1, // 0: OK, 1: MAL, 2: Exclamación
	spriteActual: "",
	duracion: 0, // frames
	
	init: function() {
		this.requires("2D, Canvas, Tweener").attr({ alpha: 0, z: 900, visible: false });
	},
	
	/*
	 * Muestra el aviso en la [x,y] actual.
	 * Desaparece luego de "duracion" frames.
	 */
	mostrar: function(tipoAviso, duracion) {
		this.duracion = duracion;
		
		if (tipoAviso !== this.tipoAviso) {
			// Quitamos el Sprite anterior
			if (this.spriteActual !== "") {
				this.removeComponent(this.spriteActual);
			}

			switch (tipoAviso) {
				case 0: this.spriteActual = "sprGL_advBien"; break;
				case 1: this.spriteActual = "sprGL_advMal"; break;
				case 2: this.spriteActual = "sprGL_advExclama"; break;
			}
			this.addComponent(this.spriteActual);
		}
		
		// Mostramos temporalmente y luego escondemos
		var y0 = this._y;
		this.y -= 50;
		this.alpha = 0;
		this.visible = true;
		this.addTween({ y: y0, alpha: 1 }, "easeOutElastic", 40);
		
		var self = this;
		Crafty.e("DelayFrame").delay(function() {
			self.alpha = 0;
			self.visible = false;
		}, duracion);
		
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Cortina.js*/
function Cortina() {
	this.e_cortina = null; // Referencia a la entidad de la cortina en crafty
	
	this.init();
}

Cortina.prototype.init = function() {
	this.e_cortina = Crafty.e("2D, Canvas, Color, Tweener")
							.color("#FFFFFF")
							.attr({ x:0, y:0, w:1280, h:800, z:9000, alpha:0.0, visible:false});
};

// Mostrar la cortina de una vez
Cortina.prototype.visible = function() {
	this.e_cortina.attr({ alpha:1.0, visible:true });
};

// Aparece la cortina tapando todo
// Opcionalmente, se puede pasar una escena como cadena o una función a ejecutar
Cortina.prototype.aparecer = function(duracion, escena) {
	this.e_cortina
			.attr({ alpha:0.0, visible:true })
			.addTween({ alpha:1.0 }, "easeInCubic", duracion, function() {
				if(typeof(escena) === 'string') {
					Crafty.enterScene(escena);
				}
				else if(typeof(escena) === 'function') {
					escena();
				}
			});
};

// Desaparece la cortina
Cortina.prototype.desaparecer = function(duracion) {
	this.e_cortina
			.attr({ alpha:1.0, visible:true })
			.addTween({ alpha:0.0 }, "easeOutCubic", duracion, function() { this.visible = false; });
};
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Oscilador.js*/
// Agregar este componente para ponerlo a oscilar en una dirección
Crafty.c("Oscilador", {
	t: 0, // Cuenta interna para la función
	dt: 0, // Incremento a sumar a la cuenta interna cada frame
	ciclo1: false, // true si está en el ciclo 0. Se alterna entre ciclo 0 y 1 (true-false)
	xIni: 0, // Posición inicial de la entidad
	yIni: 0,
	amplitud: 0, // amplitud de oscilación
	sentido: 0, // 0: horizontal, 1: vertical
	
	init: function() {
		this.requires("2D, Canvas");
	},
	
	// Devuelve la posición según el valor en t
	// t debe estar entre 0 y 1
	// El resultado estará entre 0 y 1
	_calculo: function(t) {
		return 1 - 4 * (t - 0.5) * (t - 0.5);
	},
	
	// Oscilar un deltaX como máximo alrededor de la posición actual
	oscilarX: function(amplitud, periodo) {
		this.dt = 1 / periodo;
		this.xIni = this._x;
		this.amplitud = amplitud;
		this.sentido = 0;
		
		this.bind("EnterFrame", this.frame);
		
		return this;
	},
	
	// Oscilar un deltaY como máximo alrededor de la posición actual
	oscilarY: function(amplitud, periodo) {
		this.dt = 1 / periodo;
		this.yIni = this._y;
		this.amplitud = amplitud;
		this.sentido = 1;
		
		this.bind("EnterFrame", this.frame);
		
		return this;
	},
	
	// Invocada cada EnterFrame
	frame: function() {
		this.t += this.dt;
			
		if (this.t >= 1) {
			this.ciclo1 = (this.ciclo1 ? false : true);
			this.t = 0;
		}

		if (this.sentido === 0) {
			if (!this.ciclo1) {
				this.x = this.xIni + this.amplitud * this._calculo(this.t);
			} else {
				this.x = this.xIni - this.amplitud * this._calculo(this.t);
			}
		}
		else if (this.sentido === 1) {
			if (!this.ciclo1) {
				this.y = this.yIni + this.amplitud * this._calculo(this.t);
			} else {
				this.y = this.yIni - this.amplitud * this._calculo(this.t);
			}
		}
	},
	
	// Detiene la oscilación y remueve el evento del enterFrame
	pararOscilar: function() {
		this.unbind("EnterFrame", this.frame);
		return this;
	}
	
});
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/CajaTexto.js*/

Crafty.c("CajaTexto", {
	colsSprite: 32,
	posXMax: 0,
	lineHeight: 23,
	pag: 0,
	fontWidth: new Array(4, 6, 9, 9, 14, 11, 3, 5, 5, 7, 11, 4, 6, 4, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 11, 11, 11, 7, 13, 11, 10, 10, 12, 9, 9, 12, 12, 4, 7, 10, 8, 14, 12, 12, 10, 12, 10, 9, 9, 12, 10, 15, 10, 10, 10, 5, 6, 5, 11, 9, 5, 9, 10, 8, 10, 9, 5, 10, 10, 4, 4, 8, 4, 15, 10, 10, 10, 10, 6, 7, 6, 10, 9, 13, 8, 8, 8, 5, 4, 5, 11, 9, 9, 9, 4, 9, 6, 18, 9, 9, 5, 21, 9, 5, 16, 9, 10, 9, 9, 4, 4, 6, 6, 5, 9, 18, 5, 11, 7, 5, 16, 9, 8, 10, 4, 4, 9, 9, 9, 9, 4, 9, 5, 12, 6, 8, 11, 6, 8, 5, 6, 11, 6, 5, 5, 10, 9, 4, 5, 4, 6, 8, 14, 14, 14, 7, 11, 11, 11, 11, 11, 11, 14, 10, 9, 9, 9, 9, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 10, 10, 10, 9, 9, 9, 9, 9, 9, 14, 8, 9, 9, 9, 9, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 8, 10, 8),
	paginas: new Array(),
	e_letras: [],
	init: function() {
	},
	setTexto: function(texto) {
		this.paginas[this.pag] = texto;
		return this;
	},
	limpiarPantalla: function() {
		Crafty("LetraCaja").destroy();
		return this;
	},
	/**
	 * Dibujar las palabras compuestas de letras, empezando desde la posicion 
	 * dada por la funcion attr(), 
	 * @returns {Anonym$0}
	 */
	mostrarPag: function() {
		var i = 0;
		var letra = '';
		var code = 0;
		var fila = 0;
		var col = 0;
		var texto = this.paginas[this.pag];
		var len = texto.length;
		//console.log('mostrar: x: '+this.x+', y: '+this.y+', z: '+this.z+', w: '+this.w+', h: '+this.h);
		var posX = this.x;
		var posY = this.y;
		var posX0 = this.x;
		var posY0 = this.y;
		this.posXMax = this.x + this.w;
		this.posYMax = this.y + this.h;

		//Representa una palabra del texto, se dibuja al final de su recorrido letra a letra
		var objPalabra = new wPalabra(this, posX, posY);

		for (i = 0; i < len; i++) {
			// obtenemos el codigo correspondiente
			letra = texto.charAt(i);
			if (letra === ' ') {
				//dibujar la palabra que acaba de terminar de construirse
				objPalabra.dibujar();
				//la nueva posicion de la palabra que acabo de dibujarse mas 8 será la nueva posición de la nueva palabra
				posX = objPalabra.x0 + 8;
				//lanueva palabra
				objPalabra = new wPalabra(this, posX, posY);
			}
			else if (letra === "\n") {
				//dibujar la palabra que se estaba construyendo
				objPalabra.dibujar();
				//ubicarse en la posicion X original para la nueva palabra y aumentar la Y
				posX = posX0;
				posY += this.lineHeight;
				objPalabra = new wPalabra(this, posX, posY);
			}
			else {
				code = letra.charCodeAt(0) - 33;
				fila = Math.floor(code / this.colsSprite);
				col = code - (fila * 32);

				//agregar una nueva letra a la palabra
				objPalabra.nuevaLetra(col, fila, this.fontWidth[code]);
				//calcular la siguiente posisicion de la proxima letra 
				posX += this.fontWidth[code];

				//si la posicion se sale del tamano establecido. se ubica en la siguiente linea
				if (posX > this.posXMax) {
					posX = posX0;
					posY += this.lineHeight;

					//actualizar posicion de la palabra que se esta construyendo
					objPalabra.x0 = posX;
					objPalabra.y0 = posY;
				}
			}
			if (i === (len - 1)) {
				objPalabra.dibujar();
			}
		}
		this.pag++;
		return this;
	}
});

//Objeto para controlar las palabras, x0:posicion en x inicial de la 
//palabra y0:posicion en y in icial de la palabra
var wPalabra = function(cajaTexto, x0, y0) {
	this.index = 0;
	//atributos: 0:posX, 1:posY, 2:ancho, 3:alto, 4:columna, 5:fila, 6:anchoEfectivo
	this.attr = [];
	this.x0 = x0;
	this.y0 = y0;
	this.anchoLetra = 16;
	this.altoLetra = 23;

	this.nuevaLetra = function(col, fila, anchoEfectivo) {
		this.attr[this.index] = [col, fila, anchoEfectivo];
		this.index = this.index + 1;
		return this;
	};

	this.dibujar = function() {
		for (var i = 0; i < this.index; i++) {
			if (this.index > 0) {
				var l = Crafty.e("Canvas, 2D, spr_letra, LetraCaja")
						.attr({x: this.x0, y: this.y0, z: 3, w: this.anchoLetra, h: this.altoLetra})
						.sprite(this.attr[i][0], this.attr[i][1]);
				cajaTexto.e_letras.push(l);
			}
			this.x0 += this.attr[i][2];
		}
		return this;
	};
};








/**
 * @fileoverview Archivo de prueba.
 ////aqui tomo el objeto palabra y se dibuja independientemente.
 Crafty.c("CajaTexto", {
 anchoLetra: 16,
 altoLetra: 23,
 colsSprite: 32,
 posXMax: 384,
 lineHeight: 23,
 pag: 0,
 fontWidth: new Array(4, 6, 9, 9, 14, 11, 3, 5, 5, 7, 11, 4, 6, 4, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 11, 11, 11, 7, 13, 11, 10, 10, 12, 9, 9, 12, 12, 4, 7, 10, 8, 14, 12, 12, 10, 12, 10, 9, 9, 12, 10, 15, 10, 10, 10, 5, 6, 5, 11, 9, 5, 9, 10, 8, 10, 9, 5, 10, 10, 4, 4, 8, 4, 15, 10, 10, 10, 10, 6, 7, 6, 10, 9, 13, 8, 8, 8, 5, 4, 5, 11, 9, 9, 9, 4, 9, 6, 18, 9, 9, 5, 21, 9, 5, 16, 9, 10, 9, 9, 4, 4, 6, 6, 5, 9, 18, 5, 11, 7, 5, 16, 9, 8, 10, 4, 4, 9, 9, 9, 9, 4, 9, 5, 12, 6, 8, 11, 6, 8, 5, 6, 11, 6, 5, 5, 10, 9, 4, 5, 4, 6, 8, 14, 14, 14, 7, 11, 11, 11, 11, 11, 11, 14, 10, 9, 9, 9, 9, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 10, 10, 10, 9, 9, 9, 9, 9, 9, 14, 8, 9, 9, 9, 9, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 8, 10, 8),
 paginas: new Array(
 "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ultricies nisi a neque tincidunt laoreet id ut tortor. Aenean diam massa, auctor\n et nisi id, lacinia venenatis dui. Sed aliquam\n pulvinar tellus, malesuada semper ante\n malesuada vel.",
 "El t�rmino saga se utiliza para referirse a una narraci�n parecida a una epopeya familiar que se extiende a varias generaciones, dividida en episodios, actos o vol�menes."
 ),
 init: function() {
 this.requires("2D, Canvas, Draggable, Keyboard")
 .bind('KeyDown', function() {
 if (this.isDown('SPACE')) {
 Crafty("LetraCaja").destroy();
 this.mostrarPag();
 }
 });
 },
 setTexto: function(texto) {
 this.paginas[this.pag] = texto;
 return this;
 },
 mostrarPag: function() {
 var i = 0;
 var letra = '';
 var code = 0;
 var fila = 0;
 var col = 0;
 var texto = this.paginas[this.pag];
 var len = texto.length;
 var posX = 0;
 var posY = 0;
 
 var wPalabra = function() {
 this.index = 0;
 //atributos: 0:posX, 1:posY, 2:ancho, 3:alto, 4:columna, 5:fila
 this.attr = [];
 
 this.nuevaLetra = function(posX, posY, anchoLetra, altoLetra, col, fila) {
 this.attr[this.index] = [posX,posY,anchoLetra,altoLetra,col,fila];
 this.index = this.index + 1;
 return this;
 };
 
 this.dibujar = function() {
 for (var i = 0; i < this.index; i++) {
 Crafty.e("Canvas, 2D, spr_letra, Draggable, LetraCaja")
 .attr({x: this.attr[i][0],  y: this.attr[i][1], w: this.attr[i][2], h: this.attr[i][3]})
 .sprite(this.attr[i][4], this.attr[i][5]);
 }
 return this;
 };
 };
 var objPalabra = new wPalabra();
 
 for (i = 0; i < len; i++) {
 // obtenemos el c�digo correspondiente
 letra = texto.charAt(i);
 if (letra === ' ') {
 if (posX > 0) {
 posX += 8;
 }
 //////////////////////
 objPalabra.dibujar();
 objPalabra = new wPalabra();
 }
 else if (letra === "\n") {
 posX = 0;
 posY += this.lineHeight;
 /////////////////////////
 objPalabra.dibujar();
 objPalabra = new wPalabra();
 }
 //////////////////////////
 else if (i === (len - 1)) {
 objPalabra.dibujar();
 objPalabra = new wPalabra();
 }
 else {
 code = letra.charCodeAt(0) - 33;
 fila = Math.floor(code / this.colsSprite);
 col = code - (fila * 32);
 console.log(letra, code, fila, col);
 // ubicamos el sprite correcto
 //Crafty.e("Canvas, 2D, spr_letra, Draggable, LetraCaja")
 // .attr({w: this.anchoLetra, h: this.altoLetra, x: posX, y: posY})
 // .sprite(col, fila);
 
 
 ///////////////////
 objPalabra.nuevaLetra(posX, posY, this.anchoLetra, this.altoLetra, col, fila);
 
 posX += this.fontWidth[code];
 if (posX > this.posXMax) {
 posX = 0;
 posY += this.lineHeight;
 }
 }
 }
 
 this.pag++;
 return this;
 }
 });
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 /**
 * @fileoverview Archivo de prueba.
 
 Crafty.c("CajaTexto", {
 anchoLetra: 16,
 altoLetra: 23,
 colsSprite: 32,
 posXMax: 384,
 lineHeight: 23,
 pag: 0,
 fontWidth: new Array(4,6,9,9,14,11,3,5,5,7,11,4,6,4,6,9,9,9,9,9,9,9,9,9,9,4,4,11,11,11,7,13,11,10,10,12,9,9,12,12,4,7,10,8,14,12,12,10,12,10,9,9,12,10,15,10,10,10,5,6,5,11,9,5,9,10,8,10,9,5,10,10,4,4,8,4,15,10,10,10,10,6,7,6,10,9,13,8,8,8,5,4,5,11,9,9,9,4,9,6,18,9,9,5,21,9,5,16,9,10,9,9,4,4,6,6,5,9,18,5,11,7,5,16,9,8,10,4,4,9,9,9,9,4,9,5,12,6,8,11,6,8,5,6,11,6,5,5,10,9,4,5,4,6,8,14,14,14,7,11,11,11,11,11,11,14,10,9,9,9,9,4,4,4,4,12,12,12,12,12,12,12,11,12,12,12,12,12,10,10,10,9,9,9,9,9,9,14,8,9,9,9,9,4,4,4,4,10,10,10,10,10,10,10,11,10,10,10,10,10,8,10,8),
 paginas: new Array (
 "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut ultricies nisi a neque tincidunt laoreet id ut tortor. Aenean diam massa, auctor\n et nisi id, lacinia venenatis dui. Sed aliquam\n pulvinar tellus, malesuada semper ante\n malesuada vel.",
 "El t�rmino saga se utiliza para referirse a una narraci�n parecida a una epopeya familiar que se extiende a varias generaciones, dividida en episodios, actos o vol�menes."
 ),
 
 init: function() {
 this.requires("2D, Canvas, Draggable, Keyboard")
 .bind('KeyDown', function () {
 if (this.isDown('SPACE')) {
 Crafty("LetraCaja").destroy();
 this.mostrarPag();
 }
 });
 },
 
 setTexto : function (texto) {
 this.paginas[this.pag] = texto;
 return this;
 },
 mostrarPag: function() {
 var i = 0;
 var letra = '';
 var code = 0;
 var fila = 0;
 var col = 0;
 var texto = this.paginas[this.pag];
 var len = texto.length;
 var posX = 0;
 var posY = 0;
 
 
 for (i = 0 ; i < len ; i++) {
 // obtenemos el c�digo correspondiente
 letra = texto.charAt(i);
 if (letra === ' ') {
 if (posX > 0) {
 posX += 8;
 }
 }
 else if (letra === "\n") {
 posX = 0;
 posY += this.lineHeight;
 }
 else {
 code = letra.charCodeAt(0) - 33;
 fila = Math.floor(code / this.colsSprite);
 col = code - (fila * 32);
 console.log(letra, code, fila, col);
 
 // ubicamos el sprite correcto
 Crafty.e("Canvas, 2D, spr_letra, Draggable, LetraCaja")
 .attr({ w: this.anchoLetra, h: this.altoLetra, x: posX, y: posY })
 .sprite(col, fila);
 posX += this.fontWidth[code];
 if (posX > this.posXMax) {
 posX = 0;
 posY += this.lineHeight;
 }
 }
 }
 
 this.pag++;
 return this;
 }
 });*/

    
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/BloqueTexto.js*/
Crafty.c("BloqueTexto", {
	anchoCelda: 37,
	altoCelda: 47,
	colsSprite: 21,
	lineHeight: 49,
	bold: false, // true si se usa la fuente bold+
	anchoBloque: 0, // dimensiones MBR
	altoBloque: 0,
	animar: false,
	ultPosX: 0, // posX del último caracter escrito
	anchoCajaOpcion: 10, // Ancho de la caja donde se encaja la opción
	
	colorFrente: "#D3554A", // Color de las opciones de test generadas
	colorFondo: "#D3554A", // Color de fondo del test
	
	sprNormal: "spr_asapNormal",
	sprBold: "spr_asapBold",
	
	fontWidth: [
	5,11,19,17,24,21,4,10,10,11, 17,5,10,5,17,18,17,19,16,16,17,
	17,16,17,5,6,18,17,18,15,29, 22,17,20,21,15,14,21,21,4,12,19,
	15,25,20,24,18,23,18,17,20,21, 21,31,22,20,20,7,8,14,22,16,17,
	16,17,16,10,19,15,5,9,15,8, 26,15,18,17,17,10,14,11,16,16,26,
	17,16,15,9,9,17,22,16,7,20, 23,20,21,16,17,7,17,18,16,15],
	
	fontWidthB: [
	8,14,19,18,26,23,5,10,10,12, 18,7,11,7,17,17,17,20,17,18,18,
	18,18,18,7,8,18,18,19,16,29, 23,19,21,22,17,15,22,22,7,13,20,
	16,26,21,24,19,24,20,18,20,22, 22,33,23,22,21,8,8,15,22,17,18,
	16,18,17,12,19,17,6,10,17,10, 27,17,19,18,18,12,14,12,17,18,27,
	18,18,16,10,10,18,23,17,9,22, 24,21,22,17,17,8,18,19,17,17],
	
	_texto: "Aqui va el _texto", // \n para saltos de línea, \b para activar y desactivar negrilla
	ordenLetras: ['!','"','#','$','%','&',"'",'(',')','*','+',',','-','.','1','2','3','4','5','6','7','8','9','0',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','[',']','^','_','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','{','}','¿','Á','É','Í','Ñ','Ó','Ú','Ü','á','é','í','ñ','ó','ú','ü'],
	
	_arrLetras: null, // arreglo de letras a mostrar
	_numLetraAnim: 0, // letra actualmente animando
	_animInterval: null, // referencia al interval para cerrarlo
	
	_arrEspacios: null, // arreglo de espacios de test
	_arrOpciones: null, // arreglo de opciones de test
	
	init: function() {
		this.requires("2D, Canvas");
		this._arrLetras = [];
		this._arrEspacios = [];
		this._arrOpciones = [];
	},
	
	BloqueTexto: function(txt, animar) {
		var i = 0;
		var letra = '';
		var code = 0;
		var fila = 0;
		var col = 0;
		this._texto = txt;
		var texto = txt;
		var len = texto.length;
		var posX = this._x;
		var posY = this._y;
		var anchoLetra;
		this.animar = animar;
		this.anchoBloque = 0;
		this.altoBloque = this._y + this.lineHeight;
		var espaciado;
		var sigLetra;
		var e_letra;
		var txtOpcion;
		var e_espacio;
		var anchoEspacio, longitudOpcion;
		var numOpciones;

		for (i = 0 ; i < len ; i++) {
			// obtenemos el código correspondiente
			letra = texto.charAt(i);
			
			// Campo de test
			if (letra === "|") {
				// Obtenemos el texto de la opción
				j = i + 1;
				while (texto.charAt(j) !== '|' && j < len) {
					j++;
				}
				txtOpcion = texto.slice(i+1, j);
				longitudOpcion = txtOpcion.length;
				
				// Construimos la opción y su correspondiente espacio
				e_espacio = Crafty.e("TestEspacio");
				this._arrEspacios.push(e_espacio);
				
				var e_opcion = Crafty.e("TestOpcion").TestOpcion(txtOpcion, e_espacio, this.colorFrente, this.colorFondo);
				this._arrOpciones.push(e_opcion);
				
				anchoEspacio = this.anchoCajaOpcion;
				e_espacio.attr({ x: posX, y: posY + 2, w: anchoEspacio, h: this.altoCelda - 4, z: this._z, visible: (!this.animar) });
				
				numOpciones++;
				i += longitudOpcion + 1;
				posX += anchoEspacio;
			}
			else {
				// Espacio
				if (letra === ' ') {
					if (posX > this._x) {
						posX += 11;
					}
				}
				// Salto de línea
				else if (letra === "\n") {
					// actualizamos ancho y alto de bloque
					posX = this._x;
					posY += this.lineHeight;
					this.altoBloque = posY + this.lineHeight - this._y;
				}
				// Marca de negrilla
				else if (letra === "\b") {
					this.bold = !this.bold;
				}
				// * Caracter normal
				else {
					charNum = this.getCharNum(letra);
					charPos = this.getCharCoords(charNum);
					fila = charPos[1];
					col = charPos[0];
					
					if (!this.bold) anchoLetra = this.fontWidth[charNum];
					else anchoLetra = this.fontWidthB[charNum];
					
					// ubicamos el sprite correcto
					e_letra = Crafty.e("Canvas, 2D");
					if (this.has("Persist")) e_letra.addComponent("Persist");
					
					if (!this.bold) e_letra.addComponent(this.sprNormal);
					else e_letra.addComponent(this.sprBold);
					
					e_letra.attr({ x: posX, y: posY, z: this._z, w: anchoLetra, h: this.altoCelda, visible: (!this.animar), alpha: 1 })
							.sprite(col * this.anchoCelda, fila * this.altoCelda, anchoLetra, this.altoCelda);
					
					this._arrLetras.push(e_letra);
					//console.log(this._arrLetras)
					
					// espaciado de letra
					espaciado = (this.bold) ? anchoLetra + 3.2 : anchoLetra + 3.6;
					
					if (!this.bold) {
						// normal
						if (letra === 'o' || letra === 'i' || letra === 'f' || letra === 'c') espaciado -= 1;
						else if (letra === 'í' || letra === 's' || letra === '1' || letra === '2' || letra === '7') espaciado -= 2;
						
						if (i < len - 1) {
							sigLetra = texto.charAt(i + 1);
							if (sigLetra === 'o' || sigLetra === 'f') espaciado -= 1;
							else if (sigLetra === 'j') espaciado -= 2.5;
						}
					}
					else {
						// negrilla
						if (letra === 'v' || letra === 'f' || letra === 'l' || letra === 'y' || letra === 'r') espaciado -= 1;
						
						if (i < len - 1) {
							sigLetra = texto.charAt(i + 1);
							if (sigLetra === 'j') espaciado -= 3.5;
							else if (sigLetra === 'o' || sigLetra === 'f' || sigLetra === 's' || sigLetra === 'y') espaciado -= 1;
						}
					}
					
					posX += espaciado;
				}
				
				if ((posX - this._x) > this.anchoBloque)
					this.anchoBloque = posX - this._x;
			}
		}
		
		this.w = this.anchoBloque;
		this.h = this.altoBloque;
		
		// Ya que tenemos las dimensiones del bloque, amarramos las letras
		var numEntLetras = this._arrLetras.length;
		for (i = 0 ; i < numEntLetras ; i++) {
			this.attach(this._arrLetras[i]);
		}
		
		this.ultPosX = this._arrLetras[numEntLetras - 1]._x;
		
		return this;
	},
	
	animMostrar: function(f_cBack) {
		var self = this;
		this._numLetraAnim = 0;
		this._animInterval = setInterval(function() {
			if (self._numLetraAnim < self._arrLetras.length) {
				self._arrLetras[self._numLetraAnim].visible = true;
				self._numLetraAnim++;
				
			} else {
				clearInterval(self._animInterval);
				self.mostrarEspacios();
				if (f_cBack) f_cBack();
			}
		}, 5);
		
		return this;
	},
	
	// Muestra los espacios disponibles
	mostrarEspacios: function() {
		var numEsp = this._arrEspacios.length;
		var e_esp;
		for (i = 0 ; i < numEsp ; i++) {
			e_esp = this._arrEspacios[i];
			e_esp.attr({ alpha: 0, visible: true })
					.addTween({ alpha: 1 }, "linear", 10);
		}
		return this;
	},
	
	// Destruye todas las entidades de letras en el bloque y resetea las variables
	reset: function() {
		clearInterval(this._animInterval); // evitar creación de más letras
		
		var numEntLetras = this._arrLetras.length;
		for (i = 0 ; i < numEntLetras ; i++) {
			this._arrLetras[i].destroy();
		}
		this.bold = false;
		this.anchoBloque = 0;
		this.altoBloque = 0;
		this.animar = false;
		this.ultPosX = 0;
		this._numLetraAnim = 0;
		this._arrLetras = [];
		
		var cuenta;
		// Destruimos espacios de test
		cuenta = this._arrEspacios.length;
		for (i = 0 ; i < cuenta ; i++) {
			this._arrEspacios[i].destroy();
		}
		this._arrEspacios = [];
		
		// Destruimos opciones de test
		cuenta = this._arrOpciones.length;
		for (i = 0 ; i < cuenta ; i++) {
			this._arrOpciones[i].destroy();
		}
		this._arrOpciones = [];
		
		
		return this;
	},
	
	// vuelve invisibles las letras del bloque de texto sin destruirlas ni modificar la entidad
	ocultar: function() {
		var numEntLetras = this._arrLetras.length;
		for (i = 0 ; i < numEntLetras ; i++) {
			this._arrLetras[i].visible = false;
		}
		return this;
	},
	
	// vuelve visibles inmediatamente las letras del bloque de texto
	mostrar: function() {
		var numEntLetras = this._arrLetras.length;
		for (i = 0 ; i < numEntLetras ; i++) {
			this._arrLetras[i].visible = true;
		}
		return this;
	},
	
	// Devuelve las entidades de opciones
	getOpciones: function() {
		return this._arrOpciones;
	},
	
	// Devuelve el ancho y alto del bloque [w, h]
	getDimensiones: function() {
		return [this.anchoBloque, this.altoBloque];
	},
	
	getCharNum: function(c) {
		var i = 0;
		for (i = 0 ; i < 104 ; i++) {
			if (c === this.ordenLetras[i]) return i;
		}
		return -1;
	},
	
	getCharCoords: function(n) {
		var x = 0, y = 0;
		while (n >= 21) {
			n -= 21;
			y++;
		}
		return [n, y];
	},
	
	getArrEspacios: function() { return this._arrEspacios; }
});
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Fondo.js*/
Crafty.c('Fondo', {
	init: function() {
		this.requires('2D, Canvas, Image')
			.attr({x:0, y:0, z: 0});
	}
});


/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Particulas.js*/
Crafty.c("Particula", {
	yIni: 0, // Posición inicial Y de la partícula
	vx: 0, // Velocidad en x
	atenuacion: 0, // Reduce la rapidez de movimiento de esta partícula
	magnitud: 0, // Medida de la altura que alcanza la partícula
	duracion: 0, // Duración en frames antes de destruir esta partícula
	frame: 0, // contador interno de frames
	funcionCalc: this.calcX2inv, // Función de cálculo de la altura con respecto a la frame
	
	init: function() {
		this.bind("EnterFrame", function() {
			this.y = this.calcX2inv();
			this.x += this.vx;
			this.frame++;
			if (this.frame === (this.duracion - 3)) { this.alpha = 0.2; }
			if (this.frame > this.duracion) { this.destroy(); }
		});
	},
	
	// Función de cálculo de la altura con respecto a la frame
	calcX2inv: function() {
		var f1 = this.frame / this.atenuacion;
		return (this.yIni + this.magnitud * ((f1 - 1) * (f1 - 1) - 1)); // función x^2 inversa
	},
	
	// Función de cálculo de la altura con respecto a la frame
	calcLinear: function() {
		return this.y + magnitud;
	}
});

// Generador de partículas
// Para usar, establecer el sprite en .partCompo, configurar e invocar iniciar()
function Particulas(conf) {
	this.x = conf.x || 0; // posición del origen de las partículas
	this.y = conf.y || 0;
	this.z = conf.z || 1;
	this.vx = conf.vx || 0; // Velocidad x de las partículas por defecto
	this.atenuacion = conf.atenuacion || 12; // Reduce la rapidez de movimiento de las partículas
	this.magnitud = conf.magnitud || 20; // Medida de la altura que alcanzan las partículas
	this.duracion = conf.duracion || 35; // Duración en frames de las partículas antes de destruirse
	this.deltaDura = conf.deltaDura || 5; // Variación aleatoria en la duración
	this.deltaOriX = conf.deltaOriX || 0; // Longitud de variación aleatoria de la coord. x del origen (en sentido +X)
	this.deltaOriY = conf.deltaOriY || 0;
	this.deltaVx = conf.deltaVx || 2; // Variación aleatoria en la velocidad x
	this.periodo = conf.periodo || 200; // tiempo en ms. para generar la siguiente partícula
	this.numParticulas = conf.numParticulas || 16; // contador de partículas por generar. Luego se apaga el generador
	this.objInterval = conf.objInterval || null; // objeto del setInterval()
	this.f_crear = conf.f_crear || null; // función a invocar cada vez que se cree una partícula. Recibe la entidad como parametro
	this.componentes = conf.componentes || ""; // Componentes adicionales de cada partícula (miSprite, SpriteAnimation, etc.)
	
	this.cuentaParticulas = 0;
}

// Inicialización
Particulas.prototype.init = function() {
	
};

// Generates a random float between 2 values
Particulas.prototype.random = function(min, max) {
	return Math.random() * (max - min + 1) + min;
};

// Generates a random integer between 2 values
Particulas.prototype.randomInt = function(min, max) {
	return Math.floor(Math.random() * (max - min + 1) + min);
};

// Inicia el bucle de generación de partículas
Particulas.prototype.iniciar = function() {
	var self = this;
	this.frame = 0;
	this.cuentaParticulas = 0;
	
	if (self.cuentaParticulas < self.numParticulas) {
		this.objInterval = window.setInterval(function() {
			if (self.cuentaParticulas >= self.numParticulas) {
				clearInterval(self.objInterval);
			}
			else {
				self.crear(self);
				self.cuentaParticulas++;
			}
		}, this.periodo);
	}
};

// Dispara una partícula desde el origen
Particulas.prototype.crear = function(self) {
	var e_part = Crafty.e("2D, Canvas, Particula, " + this.componentes);
	
	// Establecemos atributos iniciales
	if (self.deltaOriX === 0) {
		e_part.x = self.x;
	} else {
		e_part.x = self.x + self.random(0, self.deltaOriX);
	}
	
	if (self.deltaOriY === 0) {
		e_part.yIni = self.y;
	} else {
		e_part.yIni = self.y + self.random(0, self.deltaOriY);
	}
	
	e_part.z = self.z;
	
	if (self.deltaVx === 0) {
		e_part.vx = self.vx;
	} else {
		e_part.vx = self.random(self.vx - self.deltaVx, self.vx + self.deltaVx);
	}
	
	e_part.atenuacion = self.atenuacion;
	e_part.magnitud = self.magnitud;
	if (this.deltaDura === 0) {
		e_part.duracion = self.duracion;
	} else {
		e_part.duracion = self.randomInt(self.duracion - self.deltaDura, self.duracion + self.deltaDura);
	}
	
	if (this.f_crear) {
		this.f_crear(e_part);
	}
};
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/Iluminador.js*/
// Permite iluminar un elemento con un overlay semitransparente
// Evanece y desvanece un bloque de las mismas medidas de la entidad a la que se agrega el iluminador
// Para usar, invocar la función "iluminar()" con el color HEX, la opacidad (0-1) y el número de frames de animación
Crafty.c("Iluminador", {
	e_ilumina: null, // recubre la entidad
	f_ilumCback: null, // apuntar a una función si hay que invocar algún callback al terminar de iluminar
	
	init: function() {
		this.e_ilumina = Crafty.e("2D, Canvas, Color, Tweener")
								.attr({ visible:false, alpha:0.0, z:3000 });
	},
	
	
	iluminar: function(color, opacidad, frames, f_callback) {
		var self = this;
		
		var hayCallback = (arguments.length === 4);
		
		this.e_ilumina
				.attr({ x: this._x, y: this._y, h: this._h, w: this._w , visible:true, alpha: 0.0 })
				.color(color)
				.addTween({ alpha:opacidad }, "easeOutCubic", frames, function() {
					this.addTween({ alpha:0.0 }, "easeOutCubic", frames, function() {
						this.visible = false;
						if (hayCallback) f_callback();
					});
				});
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/graficos/DelayFrame.js*/
/* Retardo basado en un contador de frames
 * Si se destruye esta entidad, no se ejecuta el callback
 * Ejemplo de uso:
 * Crafty.e("DelayFrame").delay(function() { alert("Hola mundo!"); }, 200);
 * Opcionalmente se le puede incluir un argumento
*/
Crafty.c("DelayFrame", {
	c: 0, // Cuenta
	max: 0, // Máximo
	f_callback: null, // Callback a ejecutar
	arg: null, // Objeto de ámbito a enviar al callback
	
	init: function() {
		
	},
	
	// Iniciar un conteo hasta max, tras lo cual se invoca la función de callback
	delay: function(f, max, arg) {
		this.c = 0;
		this.f_callback = f;
		this.max = max;
		if (arg) this.arg = arg;
		this.bind("EnterFrame", this._tic);
		return this;
	},
	
	// Invocar el callback repetidamente contando max frames
	interval: function(f, max, arg) {
		
		this.f_callback = f;
		this.max = max;
		if (arg) this.arg = arg;
		this.bind("EnterFrame", this._tic2);
		return this;
	},
	
	// Tic del delay
	_tic: function() {
		this.c++;
		
		if (this.c >= this.max) {
			this.f_callback(this.arg);
			this.unbind("EnterFrame", this._tic);
			if (this.__c.length <= 1) this.destroy(); // Destruir sólo si el delayframe está en una entidad que no hace nada más
		}
	},
	
	// Tic del interval
	_tic2: function() {
		this.c++;
		if (this.c >= this.max) {
			this.c = 0;
			this.f_callback(this.arg);
		}
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/interac/AreaRotacion.js*/
Crafty.c('AreaRotacion', {
	siguienteCuadroActual: 0,
	cuadroActual: 0,
	ventilador: null,
	attrs: [],
	_cuadros: [],
	
	init: function() {
	},
	iniciar: function() {
		var x0 = this.x;
		var y0 = this.y;
		var w0 = this.w / 2;
		var h0 = this.h / 2;
		this.attrs = [
			{x: x0 - 2 * w0, y: y0 - 2 * h0, w: 4 * w0, h: 4 * h0, z: 10},
			{x: x0 + 2 * w0, y: y0 - 2 * h0, w: 4 * w0, h: 4 * h0, z: 10},
			{x: x0 + 2 * w0, y: y0 + 2 * h0, w: 4 * w0, h: 4 * h0, z: 10},
			{x: x0 - 2 * w0, y: y0 + 2 * h0, w: 4 * w0, h: 4 * h0, z: 10}
		];
		var estaArea = this;
		var cuadros = [];
		//dibujar las areas para el mouse
		var colores = ['blue', 'green', 'black', 'white'];
		for (var i = 0; i < this.attrs.length; i++) {
			cuadros[i] = Crafty.e('2D, Canvas, Mouse').attr(this.attrs[i]);
			cuadros[i].cuadro = i;
			cuadros[i].siguienteCuadro = (1 + i) < this.attrs.length ? 1 + i : 0;
			
			// Opcional: colorear los cuadros
			//cuadros[i].addComponent("Color").color(colores[i]).attr({ alpha: 0.5 });
			
			cuadros[i].bind('MouseOver',
					function() {
						if (!Crafty.isPaused()) {
							estaArea.cuadroActual = this.cuadro;
							if (estaArea.cuadroActual === estaArea.siguienteCuadroActual) {
								estaArea.ventilador.girar();//se avanza con el ventilador.
							}
						}
					});
			cuadros[i].bind('MouseOut',
					function() {
						estaArea.siguienteCuadroActual = this.siguienteCuadro;
					});
		}
		
		this._cuadros = cuadros;
	},
	
	// Invocar para que el área de rotación deje de recibir eventos del Mouse
	bloquear: function() {
		var i;
		var numCuadros = this._cuadros.length;
		for (i = 0; i < numCuadros; i++) {
			this._cuadros[i].unbind("MouseOver");
			this._cuadros[i].unbind("MouseOut");
		}
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/interac/Ventilador.js*/
Crafty.c("Ventilador", {
	//velocidad angular
	va: 0,
	//aceleracion angular
	aa: 0,
	//aceleracion friccion
	af: 0,
	baseX: 0, // Desplazamiento de la base (opcional9
	baseY: 0,
	//referencia a la ProgressBar que refleja el avance 
	barra: null,
	//imagen de fondo del ventilador
	base: null,
	init: function() {
		this.requires('2D, Canvas');
		this.bind('EnterFrame', function() {
			if (this.va >= 0) {
				this.rotation += this.va;
				this.va += this.aa;
				this.va += this.af;
				if (this.barra !== null) {
					this.barra.aumentar(this.va / 3);
				}//0.1
				this.aa = 0;
			} else {
				this.va = 0;
				if (this.barra !== null) {
					this.barra.disminuir();
				}
			}
		});
	},
	proporcion: function(prop) {
		this.w = this.w * prop;
		this.h = this.h * prop;
		this.base.w = this.base.w * prop;
		this.base.h = this.base.h * prop;
		return this;
	},
	arrancar: function() {
		this.origin(this.w / 2.0, this.h / 2.0);
		this.base.x = this.x - ((this.base.w - this.w) / 2.0) + this.baseX;//ubicar el ventilador en la mitad de la base
		this.base.y = this.y - 25 + this.baseY;//ubicar el ventilador en la mitad de la base
		this.base.z = this.z - 1;

		this.areaRotacion = Crafty.e('AreaRotacion')
				.attr({x: this.x, y: this.y, w: this.w / 2, h: this.h / 2});
		this.areaRotacion.ventilador = this;
		this.areaRotacion.iniciar();
		return this;
	},
	girar: function() {
		this.aa += 0.4;
		return this;
	},
	
	// Invocar para que el ventilador deje de recibir eventos del mouse
	bloquear: function() {
		this.unbind("EnterFrame");
		this.areaRotacion.bloquear();
		return this;
	}

});



/*C:\uniserver\www\hdp\public_html\src/compo/interac/Arrastrable.js*/
/**
 * Juego de componentes que permite arrastrar y soltar entidades
 */

Crafty.c('Arrastrable', {
	mouseIniX: 0, // Coordenadas del mouse
	mouseIniY: 0,
	
	// variables de caída libre
	vy: 0.0,
	vx: 0.0,
	ay: 0.8,
	
	art_cayendo: false, // true si el número está cayendo o rebotando
	ini: false, //true si el componente a acabo de ser soltado.
	presionado: false, //verdadero si el componente esta presionado
	areaCajon: null, //(obligatorio) referencia a entidad AreaCajon 
	act: null, //(obligatorio) objeto que implementa funcion que se ejecuta luego de ajustar la entidad al cajon

	eventoMove: "mousemove", // Nombres de los eventos de mouse asociados
	eventoUp: "mouseup",
	
	init: function() {
		this.requires('2D, Canvas, Tweener, Mouse')
			.bind('MouseDown', function(e) {
				this.art_cayendo = false;
				this.presionado = true;
				this.vy = 0;
				
				// Configuramos los eventos para esta entidad
				if (cocoon) { this.eventoMove = "touchmove"; this.eventoUp = "touchend"; }
		
				Crafty.addEvent(this, Crafty.stage.elem, this.eventoMove, this.Art_arrastrar);
				Crafty.addEvent(this, Crafty.stage.elem, this.eventoUp, this.Art_soltar);

				
				var pos = mouseCoords(e);
				this.mouseIniX = pos.x;
				this.mouseIniY = pos.y;
			})
			.bind("EnterFrame", this.eventoFrame);
	},
	
	// Asociada al MouseMove
	Art_arrastrar: function(e) {
		if (this.presionado) {
			var nuevaPos = mouseCoords(e);

			this.x += nuevaPos.x - this.mouseIniX;
			this.y += nuevaPos.y - this.mouseIniY;

			// Actualizamos posición del mouse
			this.mouseIniX = nuevaPos.x;
			this.mouseIniY = nuevaPos.y;
		}
	},
	
	Art_soltar: function(e) {
		Crafty.removeEvent(this, Crafty.stage.elem, this.eventoMove, this.Art_arrastrar);
		Crafty.removeEvent(this, Crafty.stage.elem, this.eventoUp, this.Art_soltar);
		
		this.art_cayendo = true;
		this.presionado = false;
		this.ini = true;

		var pos = mouseCoords(e);
		this.mXSol = pos.x;
		this.mYSol = pos.y;
		
		return this;
	},
	
	eventoFrame: function() {
		// caer si es necesario
		if (this.art_cayendo) {
			this.vy += this.ay;
			this.y = this._y + this.vy;
			
			// si se sale de la pantalla, dejar de caer y resetear variables
			if (this._y > 800) {
				this.art_cayendo = false;
				this.visible = false;
				this.vy = 0;
			}
			
			// Si choca contra el suelo, atenuar y rebotar
			if (this.y >= this.maxY && this.vy > 0) {
				this.vy = -(this.vy - this.atenua * this.vy);
				this.y = this.maxY;

				// Si la velocidad es demasiado pequeña, dejar de caer
				if (this.vy > -0.3 && this.vy < 1) {
					//this.art_cayendo = false;
					this.ini = false;
				}
			}
			if (this.x + this.vx < 0 || this.x + this.w + this.vx > 1280) {
				this.vx = -this.vx;
			}
			this.x += this.vx;

			if (this.ini) {
				this.detectarCajon();
			}
		}
	},
	
	detectarCajon: function() {
		//verificar si el numero del area corresponde con el numero actual
		if (this.areaCajon && !this.areaCajon.encontrado) {
			if (this.mXSol > this.areaCajon.x && this.mXSol < (this.areaCajon.x + this.areaCajon.w)
					&& this.mYSol > this.areaCajon.y && this.mYSol < (this.areaCajon.y + this.areaCajon.h)) {
				this.areaCajon.encontrado = true;
				
				var act = this.act;
				var areaCajon = this.areaCajon;
				Crafty.removeEvent(this, Crafty.stage.elem, this.eventoMove, this.Art_arrastrar);
				Crafty.removeEvent(this, Crafty.stage.elem, this.eventoUp, this.Art_soltar);
				this.unbind("EnterFrame", this.eventoFrame);
				this.unbind("MouseDown");
				this.unbind("MouseMove");
				this.unbind("MouseUp");
				
				// ajustarse al cajón
				this.addTween({x: this.areaCajon.x, y: this.areaCajon.y, rotation: 0}, 'easeOutCubic', 15, function() {
					this.addComponent("Completo");
					if (act.arrastreCompleto) {
						act.arrastreCompleto(this);
					}
					areaCajon.visible = false;
				});
				
				return true;
			}
		}
		return false;
	}
});

Crafty.c('AreaCajon', {
	//numero: 0,
	encontrado: false,
	init: function() {
		this.requires('2D, Canvas');
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/interac/ToqueRapido.js*/
var ToqueRapido = function() {
	this.val = 0; // Valor actual
	this.vMax = 100; // Valor máximo
	this.vMin = 0;
	this.vRestar = 1; // Velocidad con que se resta al valor actual
	this.incremento = 4; // Cantidad de incremento por cada click
	
	this.numFrames = 3; // Decrementar cada número de frames
	this._cuenta = 0; // Cuenta interna de frames
	this._callbackCambio = null; // Callback a invocar en evento de cambio de valor
	this._callbackMaximo = null; // Callback a invocar en evento de alcanzar el máximo
	
	this.e_area = null; // Entidad Crafty de área de click
	this._padre = null; // Referencia al objeto creador
	
	// objPadre es una referencia al objeto creador
	this.init = function(objPadre) {
		this._padre = objPadre;
		this.e_area = Crafty.e("2D, Canvas, Mouse").attr({ x: 0, y: 0, w: 1280, h: 700 });
		//this.e_area.requires("Color").color("#33FF66");
		this.e_area.objToque = this; // Referencia al objeto ToqueRapido
		
		this.e_area.bind("MouseDown", function() { this.objToque.incrementar(); });
		this.e_area.bind("EnterFrame", function() { this.objToque.tic(); });
		return this;
	};
	
	// Cada tic del reloj (invocada en EnterFrame)
	this.tic = function tic() {
		this._cuenta++;
		if (this._cuenta === this.numFrames) {
			this._cuenta = 0;
			this.decrementar();
		}
	};
	
	// decrementar valor
	this.decrementar = function decrementar() {
		if (this.val > this.vMin) {
			this.val -= this.vRestar;
			if(this._callbackCambio) { this._callbackCambio(); }
		}
	};
	
	// incrementar valor
	this.incrementar = function incrementar() {
		this.val += this.incremento;
		if(this._callbackCambio) { this._callbackCambio(); }
		
		if (this.val >= this.vMax) {
			this.maximoAlcanzado();
		}
	};
	
	// evento al alcanzar el máximo
	this.maximoAlcanzado = function maximoAlcanzado() {
		console.log("maximo!");
		this.e_area.unbind("MouseDown");
		this.e_area.unbind("EnterFrame");
		if(this._callbackMaximo) { this._callbackMaximo(); }
	};
	
	// Establecer el callback de evento de cambio (su ámbito será este objeto, referirse al padre con this._padre)
	this.callbackCambio = function(refFuncion) {
		this._callbackCambio = refFuncion;
		return this;
	};
	
	// Establecer el callback de evento de alcanzar el máximo (su ámbito será este objeto, referirse al padre con this._padre)
	this.callbackMaximo = function(refFuncion) {
		this._callbackMaximo = refFuncion;
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/compo/fisica/PisoBox2D.js*/
Crafty.c('PisoBox2D', {
	coordenadas: [],
	piso: [],
	init: function() {
		this.requires('2D, Canvas, Box2D');
	},
	dibujarPiso: function() {
		for (var i = 0; i < this.coordenadas.length - 1; i++) {
			this.piso[i] = Crafty.e('2D, Canvas, Box2D')
					.box2d({
						bodyType: 'static',
						shape: [this.coordenadas[i], this.coordenadas[i + 1]]
					});
		}
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/fisica/B2arrastre.js*/
/* 
 * Permite arrastrar una entidad box2D
 * Suponemos que box2D ya se ha inicializado y que "world" es una var. global con Crafty.world
 * Para emplear este objeto, lo declaramos como var. global así: var b2a = null;
 * Y lo inicializamos con una referencia a un objeto piso.
 */

var B2arrastre = function() {
	this.dragging = false; // True mientras se está arrastrando un elemento
	this.mJoint = null; // Mouse Joint
	this.mouseX = 0; // Posición x del mouse en coordenadas de box2D (dividir entre relación pixel-metro)
	this.mouseY = 0;
	this.e_cuerpo = null; // Referencia a entidad que se encuentra arrastrando
	this.eventoMove = "mousemove";
	this.eventoUp = "mouseup";
		
	// Inicializa el funcionamiento del componente B2arrastre
	// Obligatorio invocarla antes de utilizar el componente
	// e_piso debe ser una entidad existente box2d que represente el piso (o cualquier estática)
	this.init = function(e_piso) {
		this.e_piso = e_piso;
		
		if (cocoon) { this.eventoMove = "touchmove"; this.eventoUp = "touchend"; }
		
		Crafty.addEvent(this, Crafty.stage.elem, this.eventoMove, this.arrastrar);
		Crafty.addEvent(this, Crafty.stage.elem, this.eventoUp, this.soltar);
	};
	
	this.arrastrar = function(e) {
		if (this.dragging) {
			var pos = this.b2dPosMouse(e);
			this.mJoint.SetTarget(new b2Vec2(pos.x, pos.y));
		}
	};
	
	this.soltar = function(e) {
		if (this.dragging) {
			world.DestroyJoint(this.mJoint);
			this.mJoint = null;
			this.dragging = false;

			this.e_cuerpo.arrastrando = false;
			this.e_cuerpo = null;
		}
	};
	
	
	// Amarra un cuerpo al mouse creando una MouseJoint
	// Suponemos que world contiene Crafty.box2d.world y e_piso contiene una entidad cualquiera
	this.crearMouseJoint = function(e_cuerpo, b2MouseX, b2MouseY) {
		// por seguridad, eliminamos cualquier otro joint existente
		if (this.mJoint) {
			world.DestroyJoint(this.mJoint);
			this.mJoint = null;
		}
		
		this.e_cuerpo = e_cuerpo;
		e_cuerpo.arrastrando = true;
		var md = new b2MouseJointDef();
		md.bodyA = this.e_piso.body; // necesario para crear el mouseJoint
		md.bodyB = e_cuerpo.body;
		md.target = new b2Vec2(b2MouseX, b2MouseY);
		md.collideConnected = true;
		md.maxForce = 1000.0 * e_cuerpo.body.GetMass();
		md.dampingRatio = 0;
		this.mJoint = world.CreateJoint(md);
		e_cuerpo.body.SetAwake(true);
	};
	
	// Normalizamos las coordenadas del mouse correspondientes a Box2D
	// Invocar esta función siempre que se requiera obtener las coords. del mouse
	this.b2dPosMouse = function(e) {
		if (cocoon) {
			if (e.type === 'touchend' || e.type === 'touchcancel' ) {
				return { x: e.changedTouches[0].clientX / 32, y: e.changedTouches[0].clientY / 32 };
			}
			else {
				return { x: e.targetTouches[0].clientX / 32, y: e.targetTouches[0].clientY / 32 };
			}
		}
		else {
			return { x: e.clientX / 32, y: e.clientY / 32 };
		}
		
	};
	
	// Destruye este objeto para poder crear otros
	this.destruir = function() {
		Crafty.removeEvent(this, Crafty.stage.elem, this.eventoMove, this.arrastrar);
		Crafty.removeEvent(this, Crafty.stage.elem, this.eventoUp, this.soltar);
	};
};


// Componente que permite arrastrar la entidad con el mouse
// Antes de usar el componente, debe existir una instancia global inicializada del objeto B2arrastre llamada b2a
// La entidad debe ser un objeto Box2d válido
Crafty.c("B2arrastre", {
	arrastrable: true, // La entidad puede deshabilitar el arrastre con esta bandera
	arrastrando: false, // true si se está arrastrando
	b2a: null, // referencia al gestor de arrastre
	
	init: function() {
		this.requires("2D, Canvas, Box2D, Mouse");
		return this;
	},
	
	// Obligatorio invocar. Asocia el gestor de arrastre con este objeto
	B2arrastre: function(objB2A) {
		this.b2a = objB2A;
		
		this.bind("MouseDown", function(e) {
			if (this.arrastrable) {
				var pos = objB2A.b2dPosMouse(e);
				this.b2a.crearMouseJoint(this, pos.x, pos.y);
				this.b2a.dragging = true;
			}
		});
		
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/debug/PuntoCoordenada.js*/
/*Componenete que permite obtener un array con todos los puntos
 * por los que se ha pasado, presionar una tecla cualquiera para 
 * guardar la coordenada, presionar la tecla E para imprimir las coordenadas */
Crafty.c('PuntoCoordenada', {
	coordenadas: [],
	init: function() {
		this.requires('2D, Canvas, Color, Keyboard, Draggable')
				.color('white')
				.attr({x: 900, y: 500, z: 5, w: 5, h: 5});

		this.bind('KeyDown', function() {
			if (this.isDown('E')) {
				var txt = "[";
				var primer = true;
				for (i = 0 ; i < this.coordenadas.length ; i++) {
					if (primer) { primer = false; }
					else { txt += ", "; }
					txt += "[" + this.coordenadas[i][0] + "," + this.coordenadas[i][1] + "]";
				}
				console.log(txt);
			}
			else {
				this.coordenadas.push([this.x, this.y]);
			}
		});

	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/debug/PuntoCoordRel.js*/
/* Componenete que permite obtener un array con todos los puntos
 * por los que se ha pasado, presionar ESPACIO para 
 * guardar la coordenada, presionar la tecla E para imprimir las coordenadas
 * COORDENADAS RELATIVAS A LA ENTIDAD */
Crafty.c('PuntoCoordRel', {
	e_punto: null,
	
	init: function() {
		var e_padre = this;
		this.e_punto = Crafty.e('2D, Canvas, Image, Keyboard, Draggable')
				.image('img/otros/mira-coords.png')
				.attr({x: this.x, y: this.y, z: 50000, w: 31, h: 31});
		
		this.e_punto.coordenadas = [];
		
		this.e_punto.bind('KeyDown', function() {
			if (this.isDown('E')) {
				var txt = "[";
				var primer = true;
				for (i = 0 ; i < this.coordenadas.length ; i++) {
					if (primer) { primer = false; }
					else { txt += ","; }
					txt += "[" + this.coordenadas[i][0] + "," + this.coordenadas[i][1] + "]";
				}
				txt += "]";
				console.log(txt);
			}
			else if (this.isDown('UP_ARROW')) { this.y -= 1; }
			else if (this.isDown('DOWN_ARROW')) { this.y += 1; }
			else if (this.isDown('RIGHT_ARROW')) { this.x += 1; }
			else if (this.isDown('LEFT_ARROW')) { this.x -= 1; }
			else if (this.isDown('SPACE')) {
				Crafty.e("2D, Canvas, Color").attr({ w: 3, h: 3, x: this.x + 14, y: this.y + 14, z: 49999 }).color("#FFFFFF");
				this.coordenadas.push([this.x + 15 - e_padre.x, this.y + 15 - e_padre.y]);
			}
		});
		
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/compo/debug/Ubicador.js*/
/* 
 * Debug: permite arrastrar la entidad e imprime la posición en la que se encuentra
 * También dibuja unas marcas en las esquinas del rectángulo contenedor
 */
Crafty.c("Ubicador", {
	init: function() {
		this.requires("Draggable");
		this.bind("MouseUp", function() {
			console.log("x: " + this.x + ", y: " + this.y);
		});
		
		this.bind("Draw", function(e) {
			var ctx = e.ctx;
			ctx.strokeStyle = "#FFFF00";
			ctx.fillRect(this.x,this.y,1,1);
		});
	}
});


/*C:\uniserver\www\hdp\public_html\src/menu-pri/sprites.js*/
// Sprites del menú principal
function spritesMenuPri() {
	Crafty.sprite("img/menu-pri/caballo.png", {
		sprMI_caballo: [0, 0, 210, 204]
	});

	Crafty.sprite("img/menu-pri/bt-jugar.png", {
		sprMI_btJugar: [0, 0, 161, 231],
		sprMI_btJugar2: [162, 0, 161, 231]
	});

	Crafty.sprite("img/menu-pri/bt-opciones.png", {
		sprMI_btConfig: [1,0,63,63],
		sprMI_btConfig2: [1,65,63,63],
		sprMI_btAudio: [0,129,85,57],
		sprMI_btAudio2: [0,189,85,57],
		sprMI_btLike: [0,248,56,52],
		sprMI_btLike2: [0,302,56,52]
	});

	Crafty.sprite("img/menu-pri/bt-configurac.png", {
		sprMI_btReset: [0,0,360,54],
		sprMI_btReset2: [0,55,360,54],
		sprMI_btFaq: [0,111,345,55],
		sprMI_btFaq2: [0,167,345,55],
		sprMI_btTutorial: [0,223,242,55],
		sprMI_btTutorial2: [0,279,242,55],
		sprMI_btCreditos: [0,335,201,55],
		sprMI_btCreditos2: [0,392,201,55]
	});
	
	Crafty.sprite("img/menu-pri/bt-dialogo.png", {
		sprMI_btAceptar: [0, 0, 69, 69],
		sprMI_btAceptar2: [0, 69, 69, 69],
		sprMI_btCancelar: [69, 0, 69, 69],
		sprMI_btCancelar2: [69, 69, 69, 69]
	});
	
	Crafty.sprite("img/menu-pri/creditos.png", {
		sprMI_creditos: [0, 0, 512, 548]
	});
}
/*C:\uniserver\www\hdp\public_html\src/menu-pri/comp-config.js*/
// Diálogo de reestablecer progreso
Crafty.c("MP_DialogReset", {
	e_texto: null,
	e_btAceptar: null,
	e_btCancelar: null,
	f_callback: null, // Invocar al hacer ocultar este diálogo
	
	init: function() {
		this.requires("2D, Canvas, Image, Tweener")
				.attr({ x: 315, y: 200, z: 9000, alpha: 0, visible: false })
				.image("img/menu-pri/fon-dialogo.png");
		
		this.e_texto = Crafty.e("BloqueTexto")
						.attr({ x: this._x + 85, y: this._y + 130, z: 9001 })
						.BloqueTexto("Se eliminará todo tu progreso.\n\b¿Estás de acuerdo?", false)
						.ocultar();
		this.e_btAceptar = Crafty.e("Boton")
						.attr({ x: this._x + 226, y: this._y + 302, z: 9001 })
						.Boton("sprMI_btAceptar", "sprMI_btAceptar2")
						.ocultar();
		this.e_btCancelar = Crafty.e("Boton")
						.attr({ x: this._x + 353, y: this._y + 302, z: 9001 })
						.Boton("sprMI_btCancelar", "sprMI_btCancelar2")
						.ocultar();
				
		// Acciones
		var self = this;
		
		this.e_btCancelar.bind("MouseUp", function() {
			self.ocultar();
		});
		
		this.e_btAceptar.bind("MouseUp", function() {
			resetProgreso();
			self.ocultar();
		});
	},
	
	mostrar: function() {
		this.visible = true;
		this.addTween({ alpha: 1 }, "linear", 5, function() {
			this.e_texto.mostrar();
			this.e_btAceptar.visible = true;
			this.e_btCancelar.visible = true;
		});
		
		return this;
	},
	
	ocultar: function() {
		this.visible = false;
		this.alpha = 0;
		this.e_texto.ocultar();
		this.e_btAceptar.ocultar();
		this.e_btCancelar.ocultar();
		this.f_callback();
		return this;
	}
});


Crafty.c("Scroller", {
	scrY: 0,
	altoReal: 0,
	vy: 0,
	hMarco: 0,
	
	init: function() {
		this.requires("2D, Canvas");
	},
	
	Scroller: function(nomSprite, vy, hMarco) {
		this.vy = vy;
		this.addComponent(nomSprite);
		this.altoReal = this._h;
		this.hMarco = hMarco;
		this.h = hMarco;
		this.sprite(0, -this.hMarco, this._w, this.hMarco);
		
		return this;
	},
	
	scroll: function() {
		this.sprite(0, this.scrY, this._w, this.hMarco);
		this.scrY += this.vy;
		
		if (this.scrY >= this.altoReal) {
			this.unbind("EnterFrame");
		}
	},
	
	mostrar: function() {
		this.scrY = -this.hMarco;
		this.bind("EnterFrame", this.scroll);
		this.visible = true;
		
		return this;
	},
	
	ocultar: function() {
		this.visible = false;
		this.unbind("EnterFrame");
		return this;
	}
});

// Diálogo de créditos
Crafty.c("MP_DialogCredi", {
	e_scroll: null,
	e_btAceptar: null,
	f_callback: null, // Invocar al hacer ocultar este diálogo
	
	init: function() {
		this.requires("2D, Canvas, Image, Tweener")
				.attr({ x: 315, y: 200, z: 9000, alpha: 0, visible: false })
				.image("img/menu-pri/fon-dialogo.png");
		
		this.e_scroll = Crafty.e("Scroller")
						.attr({ x: this._x + 65, y: this._y + 45, z: 9001, visible: false })
						.Scroller("sprMI_creditos", 0.6, 320);
		this.e_btAceptar = Crafty.e("Boton")
						.attr({ x: this._x + 290, y: this._y + 375, z: 9001 })
						.Boton("sprMI_btAceptar", "sprMI_btAceptar2")
						.ocultar();
		
		// Acciones
		var self = this;
		
		this.e_btAceptar.bind("MouseUp", function() {
			self.ocultar();
		});
	},
	
	mostrar: function() {
		this.visible = true;
		this.addTween({ alpha: 1 }, "linear", 5, function() {
			this.e_scroll.mostrar();
			this.e_btAceptar.visible = true;
		});
		
		return this;
	},
	
	ocultar: function() {
		this.visible = false;
		this.alpha = 0;
		this.e_scroll.ocultar();
		this.e_btAceptar.ocultar();
		this.f_callback();
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/menu-pri/componentes.js*/
// Agrupa algunas funcionalidades comunes a los botones laterales de esta escena
Crafty.c("MI_btLateral", {
	init: function() {
		this.requires("Boton, Tweener, Delay");
	},
	
	// Deslizarse desde su lado de la pantalla a su posición visible
	animMostrar: function(retardo) {
		this.ocultarLateral();
		this.visible = true;
		this.delay(function() {
			this.addTween({ x:this.xIni }, "easeOutBack", 60, function() { this.habilitar(); }); 
		}, retardo);
	},
	
	// Deslizarse desde su lado de la pantalla a su posición visible
	animEsconder: function(retardo) {
		this.bloquear()
			.delay(function() {
				this.addTween({ x:1280 }, "easeInCubic", 40, function() { this.visible = false; }); 
			}, retardo);
	},
	
	// Inmediatamente mueve al lado de la pantalla y vuelve invisible
	ocultarLateral: function() {
		this.x = 1280;
		this.visible = false;
		return this;
	}
});

Crafty.c("MI_btJugar", {
	init: function() {
		this.requires("Boton, Tweener")
			.Boton("sprMI_btJugar", "sprMI_btJugar2");
	},
	
	// desliza hacia abajo y desvanece
	animEsconder: function() {
		this.bloquear()
			.addTween({ y:488, alpha:0.0 }, "easeInCubic", 60, function() {
				this.visible = false;
			});
		return this;
	},
	
	// desliza hacia arriba y aparece
	animMostrar: function() {
		this.attr({ y:488, alpha:0.0, visible:true })
			.addTween({ y:388, alpha:1.0 }, "easeOutCubic", 80, function() { this.habilitar(); });
		return this;
	}
});

Crafty.c("MI_btConfig", {
	init: function() {
		this.requires("MI_btLateral")
			.Boton("sprMI_btConfig", "sprMI_btConfig2");
	}
});

Crafty.c("MI_btAudio", {
	activo: false,
	
	init: function() {
		this.spr_audio = "sprMI_btAudio";
		this.spr_mute = "sprMI_btAudio2";
		this.requires("MI_btLateral")
			.Boton(this.spr_audio, this.spr_mute);
		this.unbind("MouseDown");
		this.unbind("MouseUp");
		this.bind("MouseDown", function() {
			if (this.activo) {
				this.activo = false;
			} else {
				this.activo = true;
			};
		});
		var mute = gesSonido.isMuted();
		if(mute){
			this.cambiarSprite(mute);
		}
	},
	cambiarSprite : function(mute){
		if(mute){
			//poner sprite de mute
			this.removeComponent(this.spr_audio);
			this.addComponent(this.spr_mute);
		}
		else {
			//poner sprite de audio
			this.removeComponent(this.spr_mute);
			this.addComponent(this.spr_audio);
		}
		return this;
	}
});

Crafty.c("MI_btLike", {
	init: function() {
		this.requires("MI_btLateral")
			.Boton("sprMI_btLike", "sprMI_btLike2");
	}
});


// Componentes de la pantalla de configuración

// Botón del menú de configuración
Crafty.c("MI_btMenuConfig", {
	init: function() {
		this.requires("Boton, Tweener, Delay")
			.attr({ visible: false, alpha: 0.0 });
		this.bloquear();
	},
	
	// deslizar y aparecer desde abajo
	animMostrar: function (deltaY, atraso) {
		this.attr({y: (this.yIni + deltaY), visible: true});
		this.delay(function() {
			this.addTween({y:this.yIni, alpha:1.0}, "easeOutCubic", 50, function() {
				this.habilitar();
			});
		}, atraso);
	},
	
	// desaparece y desliza hacia abajo
	animEsconder: function (deltaY, atraso) {
		this.bloquear();
		this.delay(function() {
			this.addTween({y: (this.yIni + deltaY), alpha: 0.0}, "easeInQuad", 30, function() {
				this.visible = false;
			});
		}, atraso);
	}
});


Crafty.c("MI_btReset", {
	init: function() {
		this.requires("MI_btMenuConfig");
		this.Boton("sprMI_btReset", "sprMI_btReset2");
	}
});

Crafty.c("MI_btFaq", {
	init: function() {
		this.requires("MI_btMenuConfig");
		this.Boton("sprMI_btFaq", "sprMI_btFaq2");
	}
});

Crafty.c("MI_btTutorial", {
	init: function() {
		this.requires("MI_btMenuConfig");
		this.Boton("sprMI_btTutorial", "sprMI_btTutorial2");
	}
});

Crafty.c("MI_btCreditos", {
	init: function() {
		this.requires("MI_btMenuConfig");
		this.Boton("sprMI_btCreditos", "sprMI_btCreditos2");
	}
});

Crafty.c("MI_btAtras", {
	init: function() {
		this.requires("MI_btLateral")
			.Boton("sprGL_btAtras", "sprGL_btAtras2");
	}
});
/*C:\uniserver\www\hdp\public_html\src/menu-pri/escena.js*/
Crafty.defineScene("menuPrincipal", function() {
	// Menú principal
	var e_fondo, e_cielo, e_pisoFondo, e_pisoFrente, e_caballo, e_caballoSomb, e_nubeIzq, e_nubeDer, e_logo; // decoración
	var e_btJugar, e_btConfig, e_btAudio, e_btLike; // botones menú principal
	var e_logoConfig, e_btReset, e_btFaq, e_btTutorial, e_btCreditos, e_btAtras; // menú configuración
	var e_dialogReset, e_dialogCredi;
	var objCortina = new Cortina();
	

	function crearEntidades() {
		// Decoración menú principal
		e_fondo = Crafty.e("2D, Canvas, Color")
				.attr({x: 0, y: 0, w: Crafty.viewport._width, h: Crafty.viewport._height})
				.color("#688fa0");
		e_cielo = Crafty.e("2D, Canvas, Image, Tweener")
				.attr({x: 0, y: 70, z: 1})
				.image("img/menu-pri/fondo.png");
		e_pisoFrente = Crafty.e("2D, Canvas, Image, Tweener")
				.attr({x: 373, y: 840, z: 20, w: 908, h: 145})
				.image("img/menu-pri/piso-frente.png");
		e_pisoFondo = Crafty.e("2D, Canvas, Image, Tweener")
				.attr({x: 0, y: 680, z: 10})
				.image("img/menu-pri/piso-fondo.png");
		e_caballoSomb = Crafty.e("2D, Canvas, Image, Tweener")
				.attr({x: 905, y: 845, z: 25, w: 153, h: 94})
				.image("img/menu-pri/caballo-somb.png");
		e_caballo = Crafty.e("2D, Canvas, sprMI_caballo, SpriteAnimation")
				.attr({x: 845, y: 656, z: 25, w: 210, h: 204})
				.reel("contemplar", 3500, [
					[0, 0], [210, 0], [420, 0], [630, 0], [840, 0], [1050, 0], [1260, 0], [1470, 0], [0, 204], [210, 204], [420, 204], [630, 204], [840, 204], [1050, 204], [1260, 204], [1470, 204], [0, 408], [210, 408], [420, 408], [630, 408], [840, 408], [1050, 408], [1260, 408], [1470, 408], [0, 612], [210, 612], [420, 612], [630, 612], [840, 612], [1050, 612], [1260, 612], [1470, 612], [0, 816], [210, 816], [420, 816], [630, 816], [840, 816], [1050, 816], [1260, 816], [1470, 816]
				]);
		e_nubeIzq = Crafty.e("2D, Canvas, Image, Tweener, Oscilador")
				.attr({x: -190, y: 410, z: 5})
				.image("img/menu-pri/nube-izq.png");
		e_nubeDer = Crafty.e("2D, Canvas, Image, Tweener, Oscilador")
				.attr({x: 850, y: 360, z: 5})
				.image("img/menu-pri/nube-der.png");
		e_logo = Crafty.e("2D, Canvas, Image, Tweener, Delay")
				.attr({x: 440, y: 174, z: 25, alpha: 0.0})
				.image("img/menu-pri/logo.png");

		// Botones menú principal
		e_btJugar = Crafty.e("MI_btJugar")
				.posIni(560, 388)
				.attr({ z: 7, visible: false, alpha: 0.0 });
		e_btConfig = Crafty.e("MI_btConfig")
				.attr({ x: 1280, y: 186, z: 25 }).posIni(1165, 186).ocultarLateral();
		e_btAudio = Crafty.e("MI_btAudio")
				.attr({ x: 1280, y: 289, z: 25 }).posIni(1154, 289).ocultarLateral();
		e_btLike = Crafty.e("MI_btLike")
				.attr({ x: 1280, y: 385, z: 25 }).posIni(1168, 385).ocultarLateral();

		// Decoración menú configuración
		e_logoConfig = Crafty.e("2D, Canvas, Image, Tweener, Delay")
				.attr({x: 495, y: 106, z: 25, alpha: 0.0, visible: false})
				.image("img/menu-pri/logo-config.png");

		// Botones menú configuración
		e_btReset = Crafty.e("MI_btReset")
				.attr({z: 25, alpha: 0.0, visible: false}).posIni(461, 309);
		/*
		e_btFaq = Crafty.e("MI_btFaq")
				.attr({z: 25, alpha: 0.0, visible: false}).posIni(469, 380);
		e_btTutorial = Crafty.e("MI_btTutorial")
				.attr({z: 25, alpha: 0.0, visible: false}).posIni(519, 451);
		*/
		e_btCreditos = Crafty.e("MI_btCreditos")
				//.attr({z: 25, alpha: 0.0, visible: false}).posIni(541, 519);
				.attr({z: 25, alpha: 0.0, visible: false}).posIni(541, 380);
		
		e_btAtras = Crafty.e("MI_btAtras")
				.attr({z: 25}).posIni(1165, 185).ocultar();
		
		// Diálogos
		e_dialogReset = Crafty.e("MP_DialogReset");
		e_dialogCredi = Crafty.e("MP_DialogCredi");
		
	}

	// Animación de entrada del menú principal
	function animEntradaIni() {
		// FadeOut desde cortina blanca
		var objCortina = new Cortina();
		objCortina.desaparecer(100);

		// el cielo, los pisos y las nubes suben en perspectiva
		e_cielo.addTween({y: 0}, "easeOutCubic", 150);
		e_pisoFondo.addTween({y: 588}, "easeOutCubic", 170);
		e_caballo.animate("contemplar", -1);
		e_caballo.attach(e_caballoSomb);
		e_pisoFrente.attach(e_caballo).addTween({y: 656}, "easeOutCubic", 250);
		e_nubeIzq.addTween({x: -170, y: 310}, "easeOutCubic", 190, function() {
			this.oscilarX(20, 480);
		});
		e_nubeDer.addTween({x: 815, y: 260}, "easeOutCubic", 190, function() {
			this.oscilarX(20, 450);
		});
		// el logo aparece con fadein
		e_logo.delay(function() {
			this.addTween({alpha: 1.0}, "linear", 100);
		}, 1000);

		// luego de un momento, los botones aparecen
		Crafty.e("Delay").delay(function() {
			// btJugar sube detrás de las montañas
			e_btJugar.animMostrar();

			// Los botones laterales se deslizan desde su borde de la pantalla
			e_btConfig.animMostrar(0);
			e_btAudio.animMostrar(200);
			e_btLike.animMostrar(400);
		}, 2000);
	}

	// Animación de transición desde el menú principal al menú de configuración
	function animEntrarMenuConfig() {
		// Los botones se repliegan de donde salieron
		e_btAudio.animEsconder(120);
		e_btLike.animEsconder(240);
		e_btJugar.animEsconder();

		// el logo se desvanece, y aparece su versión del menú de config
		e_logo.addTween({alpha: 0.0}, "linear", 50, function() {
			this.visible = false;
			e_logoConfig.attr({visible: true}).addTween({alpha: 1.0}, "linear", 50);
		});

		// aparecen los botones de config. desde abajo
		Crafty.e("Delay").delay(function() {
			e_btReset.animMostrar(70, 0);
			//e_btFaq.animMostrar(90, 100);
			//e_btTutorial.animMostrar(110, 200);
			//e_btCreditos.animMostrar(130, 300);
			e_btCreditos.animMostrar(90, 100);

			e_btAtras.animMostrar(0);
		}, 1400);

		// los pisos y las nubes se mueven para crear ilusión de perspectiva
		e_nubeIzq.addTween({x: (e_nubeIzq._x - 6)}, "easeOutCubic", 70);
		e_nubeDer.addTween({x: (e_nubeDer._x - 6)}, "easeOutCubic", 70);
		e_pisoFondo.addTween({x: -10}, "easeOutCubic", 70);
		e_pisoFrente.addTween({x: (e_pisoFrente._x + 35)}, "easeOutCubic", 70);
	}

	// Animación de transición desde el menú de configuración al menú principal
	function animSalirMenuConfig() {
		// Desvanecer el logo pequeño y aparecer el grande
		e_logoConfig.addTween({alpha: 0.0}, "linear", 60, function() {
			this.visible = false;
			e_logo.attr({visible: true}).addTween({alpha: 1.0}, "linear", 60);
		});

		// Deslizar abajo y desvanecer los botones de configuración
		e_btCreditos.animEsconder(130, 0);
		/*e_btTutorial.animEsconder(110, 60);
		e_btFaq.animEsconder(90, 120);
		e_btReset.animEsconder(70, 180);*/
		e_btReset.animEsconder(110, 60);

		// Regresamos las montañas y nubes a su ubicación original
		e_nubeIzq.addTween({x: (e_nubeIzq._x + 6)}, "easeOutCubic", 70);
		e_nubeDer.addTween({x: (e_nubeDer._x + 6)}, "easeOutCubic", 70);
		e_pisoFondo.addTween({x: 0}, "easeOutCubic", 70);
		e_pisoFrente.addTween({x: (e_pisoFrente._x - 35)}, "easeOutCubic", 70);

		// Mostramos el boton jugar y los botones de opciones
		Crafty.e("Delay").delay(function() {
			e_btConfig.animMostrar(0);
			e_btAudio.animMostrar(200);
			e_btLike.animMostrar(400);
			e_btJugar.animMostrar();
		}, 1200);
	}


	// Animación de transición de salida de esta escena a la selección de postal
	// Activa la siguiente escena
	function transicionJugar() {
		// Escondemos los botones laterales
		e_btConfig.animEsconder(0);
		e_btAudio.animEsconder(40);
		e_btLike.animEsconder(80);

		// desplazamos los terrenos y las nubes hacia abajo
		e_pisoFrente.addTween({y: 1000}, "easeInCubic", 75);
		e_pisoFondo.addTween({y: 800}, "easeInCubic", 105);
		e_nubeIzq.pararOscilar().addTween({y: 800}, "easeInCubic", 140);
		e_nubeDer.pararOscilar().addTween({y: 800}, "easeInCubic", 145);
		e_cielo.addTween({y: 100}, "easeInCubic", 200);

		e_btJugar.animEsconder();
		e_logo.addTween({alpha: 0.0}, "linear", 40);

		Crafty.e("Delay").delay(function() {
			objCortina.aparecer(60, "MenuCuadros");
		}, 250);
	}
	
	// Bloquear los botones del menú de configuración
	function bloquearBtConfig() {
		e_btReset.bloquear();
		e_btCreditos.bloquear();
		//e_btTutorial.bloquear();
		//e_btFaq.bloquear();
	}
	// Habilitar los botones del menú de configuración
	function desbloquearBtConfig() {
		e_btReset.habilitar();
		e_btCreditos.habilitar();
		//e_btTutorial.habilitar();
		//e_btFaq.habilitar();
	}

	gesSonido.crear('m_inicio', 'audio/global/tema.ogg');
	gesSonido.reproducirMusica('m_inicio');
	
	crearEntidades();

	// Mostrar menu de configuracíon al hacer click en el botón config
	e_btConfig.bind("MouseUp", function() {
		if (!this.bloqueado) {
			this.animEsconder(30);
			animEntrarMenuConfig();
		}
	});

	// Mostrar menu de configuracíon al hacer click en el botón config
	e_btAudio.bind("MouseUp", function() {
		var mute = gesSonido.silenciar();
		this.cambiarSprite(mute);
	});
	
	// Like en facebook?
	e_btLike.bind("MouseUp", function() {
		CocoonJS.App.openURL("https://www.facebook.com/historiaspopayan");
	});
	
	// Al hacer click en btAtras, ocultar el menú de configuración y volver al menú principal
	e_btAtras.bind("MouseUp", function() {
		if (!this.bloqueado) {
			this.animEsconder(0);
			animSalirMenuConfig();
		}
	});

	// Al hacer click en btJugar, activar la transición a la escena de jugar
	e_btJugar.bind("MouseUp", function() {
		if (!this.bloqueado) {
			this.bloquear();
			transicionJugar();
		}
	});
	
	// Mostrar diálogo de reestablecer progreso
	e_btReset.bind("MouseUp", function() {
		if (!this.bloqueado) {
			bloquearBtConfig();
			e_dialogReset.f_callback = desbloquearBtConfig;
			e_dialogReset.mostrar();
		}
	});
	
	// Mostrar diálogo de créditos
	e_btCreditos.bind("MouseUp", function() {
		if (!this.bloqueado) {
			bloquearBtConfig();
			e_dialogCredi.f_callback = desbloquearBtConfig;
			e_dialogCredi.mostrar();
		}
	});

	animEntradaIni();
});
/*C:\uniserver\www\hdp\public_html\src/menu-cuadros/sprites.js*/
// Sprites del menú de cuadros
function spritesMenuCuadros() {
	Crafty.sprite("img/menu-cuadros/candado.png", {
		sprMC_sinCandado: [0,0,76,76],
		sprMC_conCandado: [1,78,76,76]
	});
	Crafty.sprite("img/menu-cuadros/numeros.png", {
		sprMC_numBaud: [0,0,14,21]
	});
	Crafty.sprite("img/menu-cuadros/numeros-act.png", {
		sprMC_numAct: [0,0,60,60]
	});
	Crafty.sprite("img/menu-cuadros/bt-atras.png", {
		sprMC_btAtrasCuadro: [0,0,164,94],
		sprMC_btAtrasCuadro2: [0,99,164,94]
	});
	Crafty.sprite("img/menu-cuadros/baudilio-peq.png", {
		sprMC_BaudilioPeq: [0,0,55,48]
	});
	
	Crafty.sprite("img/menu-cuadros/c1.png", {
		sprMC_c1: [0,0,367,254]
	});
	Crafty.sprite("img/menu-cuadros/c2.png", {
		sprMC_c2: [0,0,248,343],
		sprMC_c2apaga: [248,0,248,343]
	});
	Crafty.sprite("img/menu-cuadros/c3.png", {
		sprMC_c3: [0,0,395,256],
		sprMC_c3apaga: [0,256,395,256]
	});
	Crafty.sprite("img/menu-cuadros/c4.png", {
		sprMC_c4: [0,0,376,256],
		sprMC_c4apaga: [0,256,376,256]
	});
	Crafty.sprite("img/menu-cuadros/c5.png", {
		sprMC_c5: [0,0,350,242],
		sprMC_c5apaga: [0,242,350,242]
	});
	
	Crafty.sprite("img/menu-cuadros/c1desv.jpg", {
		sprMC_c1desv: [0,0,320,280]
	});
	Crafty.sprite("img/menu-cuadros/c2desv.jpg", {
		sprMC_c2desv: [0,0,197,230]
	});
	Crafty.sprite("img/menu-cuadros/c3desv.jpg", {
		sprMC_c3desv: [0,0,320,280]
	});
	Crafty.sprite("img/menu-cuadros/c4desv.jpg", {
		sprMC_c4desv: [0,0,320,280]
	});
	Crafty.sprite("img/menu-cuadros/c5desv.jpg", {
		sprMC_c5desv: [0,0,320,280]
	});
}
/*C:\uniserver\www\hdp\public_html\src/menu-cuadros/MC_Cuadro.js*/
/*
 * MC_Cuadro(num, xi, yi, xc, yc, act, grilla)
 * posIni(x, y)
 * crearCandado(offsetX, offsetY)
 * ponerCandado()
 * quitarCandado()
 * ponerAprobado()
 * habilitar()
 * bloquear()
 * animMostrarGrande()
 * animOcultarGrande()
 * animEsconder()
 * animMostrar()
 */

Crafty.c("MC_Cuadro", {
	num: 0, // 1 a 5 -> id del cuadro
	bloqueado: true, // bloqueado para no responder a eventos del mouse
	candado: true, // poner candado para no permitir acceder por falta de progreso en el juego DIFERENTE A BLOQUEADO
	xIni: 0,
	yIni: 0,
	wIni: 0,
	hIni: 0,
	xCentro: 0, // coords donde se "centraría" el cuadro
	yCentro: 0,
	
	e_cGrande: null, // entidad del cuadro grande
	ordenActiv: new Array(6), // Orden de las actividades
	_actividades: null, // Referencia al arreglo de entidades de actividades
	dirOcultar: 0, // Dirección hacia la cual se desliza el cuadro para ocultarse
	e_grilla: null, // Referencia a la grilla
	e_sombra: null, // Referencia a la sombra del cuadro grande

	e_candado: null, // Candado que acompaña al cuadro
	e_baudilio: null, // Moneda del cuadro
	vertical: false, // El cuadro es vertical?

	init: function() {
		this.requires("2D, Canvas, Tint, Tweener, Mouse");
	},

	MC_Cuadro: function(num, xi, yi, xc, yc, act, grilla, sombra) {
		this.num = num;
		this.posIni(xi, yi);
		this.xCentro = xc;
		this.yCentro = yc;
		this._actividades = act;
		this.e_grilla = grilla;
		this.e_sombra = sombra;
		
		this.requires("sprMC_c" + num);
		
		this.e_baudilios = Crafty.e("MC_Baudilios");
		
		switch (num) {
			case 1: this.ordenActiv = [3,4,1,6,5,2];
					this.dirOcultar = 0;
					this.areaMap([38,38],[273,38],[273,180],[38,180]);
					this.e_baudilios.attr({x: this.x + 78, y: this.y + 190}).MC_Baudilios();
			break;
			case 2: this.ordenActiv = [1,3,4,5,2,6];
					this.dirOcultar = 0;
					this.areaMap([20,21],[178,21],[178,282],[20,282]);
					this.e_baudilios.attr({x: this.x + 20, y: this.y + 290}).MC_Baudilios();
					this.vertical = true;
			break;
			case 3: this.ordenActiv = [1,2,3,4,5,6];
					this.dirOcultar = 3;
					this.areaMap([41,29],[294,29],[294,183],[41,183]);
					this.e_baudilios.attr({x: this.x + 86, y: this.y + 190}).MC_Baudilios();
			break;
			case 4: this.ordenActiv = [1,2,3,4,5,6];
					this.dirOcultar = 1;
					this.areaMap([40,39],[280,39],[280,185],[40,185]);
					this.e_baudilios.attr({x: this.x + 77, y: this.y + 190}).MC_Baudilios();
			break;
			case 5: this.ordenActiv = [1,2,3,4,5,6];
					this.dirOcultar = 1;
					this.areaMap([36,36],[259,36],[259,172],[36,172]);
					this.e_baudilios.attr({x: this.x + 70, y: this.y + 180}).MC_Baudilios();
					break;
		}

		var props = { x: 128, y: 85, z: 90, alpha: 0.0, visible: false };
		if (this.vertical) props = { x: 385, y: 8, z: 90, alpha: 0.0, visible: false };
		
		this.e_cGrande = Crafty.e("2D, Canvas, Image, Tweener")
								.image("img/menu-cuadros/c" + num + "gra.jpg")
								.attr(props);
		this.wIni = this._w;
		this.hIni = this._h;
		
		this.attach(this.e_baudilios);
		
		return this;
	},
	
	// setter de las coords iniciales
	posIni: function(x, y) {
		this.xIni = x;
		this.yIni = y;
		return this;
	},
	
	crearCandado: function(offsetX, offsetY) {
		this.e_candado = Crafty.e("2D, Canvas, sprMC_conCandado")
				.attr({x: this._x + offsetX, y: this._y + offsetY});
		this.attach(this.e_candado);
		return this;
	},
	// Pone un candado al cuadro y lo deshabilita
	ponerCandado: function() {
		this.candado = true;
		this.e_candado.sprite(0, 78);
		this.bloquear();
		this.removeComponent("sprMC_c" + this.num).addComponent("sprMC_c" + this.num + "apaga");
		return this;
	},
	// Quita el candado (o chulo) del cuadro
	quitarCandado: function() {
		this.candado = false;
		this.e_candado.visible = false;
		this.removeComponent("sprMC_c" + this.num + "apaga").addComponent("sprMC_c" + this.num);
		this.habilitar();
		return this;
	},
	// Pone el chulo en el cuadro
	ponerAprobado: function() {
		this.candado = false;
		this.e_candado.sprite(0, 0);
		return this;
	},
	habilitar: function() {
		this.bloqueado = false;
		return this;
	},
	bloquear: function() {
		this.bloqueado = true;
		return this;
	},
	
	
	// Muestra este cuadro en su versión grande, con sus respectivas actividades
	animMostrarGrande: function() {
		var self = this;
		
		this.e_baudilios.ocultar();
		
		// Actualizamos el estado de las actividades para este cuadro
		var act, orden;
		
		for (i = 0 ; i < 6 ; i++) {
			orden = this.ordenActiv[i] - 1;
			act = this._actividades[orden];
			act.numAct = i;
			act.imgCuadro(this.num);
			act.actualizarBaudAct();
			
			if (progreso[this.num - 1].puntaje[i - 1] > 0 || i === 0)
				act.habilitar();
			else
				act.bloquear();
		}
		
		// centrar y volver grande
		var props = { x: 300, y: 140, w: 800, h: 600 };
		if (this.vertical) props = { x: 420, y: 70, w: 520, h: 700 };
		
		this.addTween({x: this.xCentro, y: this.yCentro}, "easeInOutCubic", 35, function() {
			this.addTween(props, "linear", 10);
			
			// aparecer el cuadro grande
			
			this.e_cGrande
				.attr({visible: true})
				.addTween({alpha: 1.0}, "linear", 12, function() {
					self.e_grilla.animAparecer();
					// vamos habilitando las actividades en orden

					for (i = 0; i < 6; i++) {
						self._actividades[i].animMostrar();
					}

					if (self.e_sombra !== null) self.e_sombra.animMostrar();
			});
		});
	},
	
	// Animación para esconder el cuadro grande y volver a ubicar al pequeño
	animOcultarGrande: function() {
		this.e_grilla.animOcultar();
		for (i = 0; i < 6; i++) {
			this._actividades[i].animOcultar();
		}
		this.e_cGrande.addTween({alpha: 0}, "linear", 12);
		if (this.e_sombra !== null) this.e_sombra.ocultar();
		this.addTween({x: this.xIni, y: this.yIni, w: this.wIni, h: this.hIni}, "linear", 10, function() {
			this.habilitar();
			this.e_baudilios.mostrar();
		});
	},
	
	// Desplaza el cuadro para esconderlo en la dirección "dir" (0 arr,1 der,2 aba,3 izq)
	animEsconder: function() {
		this.bloquear();
		var props;
		switch (this.dirOcultar) {
			case 0: props = {y: -this._h}; break;
			case 1: props = {x: 1280}; break;
			case 2: props = {y: 800}; break;
			case 3: props = {x: -this._w}; break;
		}

		this.addTween(props, "easeInQuad", 18, function() {
			this.visible = false;
		});
	},
	
	// Desliza el cuadro desde un lado para mostrarlo en su posicion normal
	animMostrar: function() {
		this.visible = true;
		this.addTween({ x:this.xIni, y:this.yIni}, "easeInQuad", 18, function() {
			if (!this.candado) this.habilitar();
		});
	},
	
	// Actualiza su estado según el progreso del jugador
	actualizarProgreso: function() {
		if (progreso[this.num - 1].bloqueado) this.ponerCandado();
		else this.quitarCandado();

		// calculamos el total de baudilios del cuadro
		var b = 0;
		for (j = 0 ; j < 6 ; j++) b += progreso[this.num - 1].baudilios[j];

		this.e_baudilios.numBaudilios(b);
	}
});
/*C:\uniserver\www\hdp\public_html\src/menu-cuadros/MC_btActiv.js*/
// Botón de actividad
Crafty.c("MC_btActiv", {
	num: 0, // 1-6, ubicación de botón en el sprite
	numC: 0, // 1-5, num de cuadro
	numAct: 0, // 1-6, num de actividad a ejecutar. Puede no corresponder a la ubicación en el sprite
	bloqueado: true,
	e_baudiliosActiv: null, // indicador de baudilios de esta actividad
	e_numAct: null, // Indicador de número de actividad
	
	init: function() {
		this.requires("2D, Canvas, Mouse, Sprite, Tweener, Iluminador")
				.attr({ z:96, alpha:0, visible:false });
		
		this.e_baudiliosActiv = Crafty.e("MC_BaudiliosAct");
		
		this.e_numAct = Crafty.e("2D, Canvas, sprMC_numAct")
								.attr({ z:100, visible:false });
		
		var self = this;
		
		this.bind("MouseUp", function() {
			if (!this.bloqueado) {
				console.log("Abriendo actividad " + this.numC + " - " + this.numAct);
				this.bloqueado = true;
				
				this.iluminar("#FFFFFF", 0.5, 5, function() {
					var objCortina = new Cortina();
					objCortina.aparecer(25, function() {
						gesActividad.ejecutar(self.numC - 1, self.numAct);
					});
				});
			}
		});
	},
	
	MC_btActiv: function(n) {
		this.num = n;
		return this;
	},
	
	// Reposiciona este botón según el sentido del cuadro
	// También posiciona los baudilios del botón
	posicionar: function(vertical) {
		var n = this.num - 1;
		var fila = 0, col = 0;
		
		if (!vertical) {
			// Cuadro horizontal
			if (n < 3) {
				this.x = 162 + n * 320;
				this.y = 118;
			} else {
				this.x = 162 + (n - 3) * 320;
				this.y = 118 + 280;
			}
			
			this.e_baudiliosActiv.attr({ x: this._x + 70, y: this._y + 120 });
			this.e_numAct.x = this._x + 259;
			this.e_numAct.y = (this.num < 3) ? this._y + 1 : this._y;
		}
		else {
			// Vertical
			if (n === 1 || n === 3 || n === 5) col = 1;
			
			if (n === 2 || n === 3) fila = 1;
			else if (n === 4 || n === 5) fila = 2;
			
			this.x = 444 + col * 197;
			this.y = 57 + fila * 230;
			
			this.e_baudiliosActiv.attr({ x: this._x + 11, y: this._y + 95 });
			this.e_numAct.x = this._x + 137;
			this.e_numAct.y = (this.num < 2) ? this._y : this._y - 1;
		}
		
		return this;
	},
	
	// Establece el sprite de este botón, con el num de cuadro
	// Reposiciona las actividades según la orientación del cuadro
	imgCuadro: function(nc) {
		this.removeComponent("sprMC_c" + this.numC + "desv");
		this.numC = nc;
		this.addComponent("sprMC_c" + this.numC + "desv");

		var vertical = (nc === 2);
		
		if (vertical) {
			switch (this.num) {
				case 1: this.sprite(0,0,197,230); break;
				case 2: this.sprite(197,0,197,230); break;
				case 3: this.sprite(0,230,197,230); break;
				case 4: this.sprite(197,230,197,230); break;
				case 5: this.sprite(0,460,197,231); break;
				case 6: this.sprite(197,460,197,231); break;
			}
		}
		else {
			switch (this.num) {
				case 1: this.sprite(0,0,320,280); break;
				case 2: this.sprite(320,0,320,280); break;
				case 3: this.sprite(640,0,319,280); break;
				case 4: this.sprite(0,281,320,280); break;
				case 5: this.sprite(320,281,320,280); break;
				case 6: this.sprite(640,281,319,280); break;
			}
		}
		
		this.posicionar(vertical);
		
		return this;
	},
	
	// actualiza el número de baudilios activados para este botón
	actualizarBaudAct: function() {
		this.e_baudiliosActiv.numBaudilios(progreso[this.numC - 1].baudilios[this.numAct]);
		this.e_numAct.sprite(0, (this.numAct) * 60);
		return this;
	},
	
	habilitar: function() {
		this.bloqueado = false;
		this.alpha = 0;
		return this;
	},
	bloquear: function() {
		this.bloqueado = true;
		this.alpha = 1.0;
		return this;
	},
	
	animOcultar: function() {
		this.visible = false;
		this.e_numAct.visible = false;
		this.e_baudiliosActiv.ocultar();
		return this;
	},
	
	// Mostrar este botón de actividad (sea transparente o no)
	animMostrar: function() {
		this.alpha = 0.0;
		this.visible = true;
			
		if (this.bloqueado) {
			this.addTween({ alpha: 1.0 }, "linear", 5);
		}
		else {
			this.e_baudiliosActiv.animMostrar();
			this.e_numAct.visible = true;
		}
		
		return this;
	}
	
	
});
/*C:\uniserver\www\hdp\public_html\src/menu-cuadros/componentes.js*/
// Sombra del cuadro grande
Crafty.c("MC_Sombra", {
	e_sup: null, e_inf: null, e_izq: null, e_der: null,
	
	init: function() {
		this.e_sup = Crafty.e("2D, Canvas, Image, Tweener").image("img/menu-cuadros/sombra-sup.png").attr({ x:128, y:21, alpha:0.0, visible:false });
		this.e_inf = Crafty.e("2D, Canvas, Image, Tweener").image("img/menu-cuadros/sombra-inf.png").attr({ x:128, y:709, alpha:0.0, visible:false });
		this.e_izq = Crafty.e("2D, Canvas, Image, Tweener").image("img/menu-cuadros/sombra-izq.png").attr({ x:64, y:-10, alpha:0.0, visible:false });
		this.e_der = Crafty.e("2D, Canvas, Image, Tweener").image("img/menu-cuadros/sombra-der.png").attr({ x:1152, y:-10, alpha:0.0, visible:false });
	},
	
	animMostrar: function() {
		this.e_sup.visible = true;
		this.e_inf.visible = true;
		this.e_izq.visible = true;
		this.e_der.visible = true;
		this.e_sup.addTween({ alpha:1.0 }, "linear", 5);
		this.e_inf.addTween({ alpha:1.0 }, "linear", 5);
		this.e_izq.addTween({ alpha:1.0 }, "linear", 5);
		this.e_der.addTween({ alpha:1.0 }, "linear", 5);
		return this;
	},
	
	ocultar: function() {
		this.e_sup.visible = false;
		this.e_inf.visible = false;
		this.e_izq.visible = false;
		this.e_der.visible = false;
		return this;
	}
});

// Grilla en cuadros horizontales o verticales
Crafty.c("MC_grilla", {
	e_lineaA: null,
	e_lineaB1: null,
	e_lineaB2: null,
	
	MC_grilla: function(horizontal) {
		this.e_lineaA = Crafty.e("2D, Canvas, Image, Tweener");
		this.e_lineaB1 = Crafty.e("2D, Canvas, Image, Tweener");
		this.e_lineaB2 = Crafty.e("2D, Canvas, Image, Tweener");
		
		if (horizontal) {
			this.e_lineaA.attr({x: 161, y: 397, z: 97, alpha: 0.0, visible: false}).image("img/menu-cuadros/grilla1-hor.png");
			this.e_lineaB1.attr({x: 480, y: 121, z: 97, alpha: 0.0, visible: false}).image("img/menu-cuadros/grilla1-ver.png");
			this.e_lineaB2.attr({x: 800, y: 121, z: 97, alpha: 0.0, visible: false}).image("img/menu-cuadros/grilla1-ver.png");
		} else {
			this.e_lineaA.attr({x: 639, y: 57, z: 97, alpha: 0.0, visible: false}).image("img/menu-cuadros/grilla2-ver.png");
			this.e_lineaB1.attr({x: 444, y: 285, z: 97, alpha: 0.0, visible: false}).image("img/menu-cuadros/grilla2-hor.png");
			this.e_lineaB2.attr({x: 444, y: 515, z: 97, alpha: 0.0, visible: false}).image("img/menu-cuadros/grilla2-hor.png");
		}
		
		return this;
	},
	
	init: function() {
		
	},
	
	animAparecer: function() {
		this.e_lineaA.attr({visible: true}).addTween({alpha: 1.0}, "linear", 5);
		this.e_lineaB1.attr({visible: true}).addTween({alpha: 1.0}, "linear", 5);
		this.e_lineaB2.attr({visible: true}).addTween({alpha: 1.0}, "linear", 5);
		return this;
	},
	animOcultar: function() {
		this.e_lineaA.addTween({alpha: 0.0}, "linear", 5, function () { this.visible = false; });
		this.e_lineaB1.addTween({alpha: 0.0}, "linear", 5, function () { this.visible = false; });
		this.e_lineaB2.addTween({alpha: 0.0}, "linear", 5, function () { this.visible = false; });
		return this;
	}
});


// Baudilios de botón de actividad
Crafty.c("MC_BaudiliosAct", {
	e_baud1: null,
	e_baud2: null,
	e_baud3: null,
	
	init: function() {
		this.requires("2D");
		this.e_baud1 = Crafty.e("2D, Canvas, sprMC_BaudilioPeq, Tweener").attr({ z: 100, alpha: 0.0, visible: false });
		this.e_baud2 = Crafty.e("2D, Canvas, sprMC_BaudilioPeq, Tweener").attr({ x: 60, z: 100, alpha: 0.0, visible: false });
		this.e_baud3 = Crafty.e("2D, Canvas, sprMC_BaudilioPeq, Tweener").attr({ x: 120, z: 100, alpha: 0.0, visible: false });
		this.attach(this.e_baud1);
		this.attach(this.e_baud2);
		this.attach(this.e_baud3);
	},
	
	animMostrar: function() {
		var b2 = this.e_baud2;
		var b3 = this.e_baud3;
		
		this.e_baud1.visible = true;
		this.e_baud2.visible = true;
		this.e_baud3.visible = true;
		this.e_baud1.addTween({ alpha:1.0 }, "linear", 5, function() {
			b2.addTween({ alpha:1.0 }, "linear", 5, function() {
				b3.addTween({ alpha:1.0 }, "linear", 5);
			});
		});
		return this;
	},
	ocultar: function() {
		this.e_baud1.alpha = 0.0;
		this.e_baud2.alpha = 0.0;
		this.e_baud3.alpha = 0.0;
		this.e_baud1.visible = false;
		this.e_baud2.visible = false;
		this.e_baud3.visible = false;
		return this;
	},
	
	// Muestra un determinado número de baudilios
	numBaudilios: function(n) {
		switch(n) {
			case 0: this.e_baud1.sprite(0,0); this.e_baud2.sprite(0,0); this.e_baud3.sprite(0,0); break;
			case 1: this.e_baud1.sprite(0,51); this.e_baud2.sprite(0,0); this.e_baud3.sprite(0,0); break;
			case 2: this.e_baud1.sprite(0,51); this.e_baud2.sprite(0,51); this.e_baud3.sprite(0,0); break;
			case 3: this.e_baud1.sprite(0,51); this.e_baud2.sprite(0,51); this.e_baud3.sprite(0,51); break;
		}
		return this;
	}
});


/* Medidor de baudilios de cada cuadro */
Crafty.c("MC_Baudilios", {
	e_numBaud: null, // numero de baudilios
	e_numTotal: null, // entidad de num total

	init: function() {
		this.requires("2D, Canvas, Image, Tweener")
					.image("img/menu-cuadros/monedas.png")
					.attr({z: 90});
		this.e_numTotal = Crafty.e("2D, Canvas, Image").image("img/menu-cuadros/num-total.png");
		this.e_numBaud = Crafty.e("MC_NumBaud");
	},
	
	MC_Baudilios: function() {
		this.e_numBaud.attr({ x:this.x + 73, y: this.y + 18 });
		this.attach(this.e_numBaud);
		this.e_numTotal.attr({ x:this.x + 105, y: this.y + 18 });
		this.attach(this.e_numTotal);
		return this;
	},
	
	// Establece el número de baudilios
	numBaudilios: function(n) {
		this.e_numBaud.MC_NumBaud(n);
		if (n < 10) {
			this.e_numBaud.x = this._x + 58;
			this.e_numTotal.x = this._x + 92;
		}
		else {
			this.e_numBaud.x = this._x + 73;
			this.e_numTotal.x = this._x + 107;
		}
		return this;
	},
	
	// oculta el medidor
	ocultar: function() {
		this.visible = false;
		this.e_numBaud.ocultar();
		this.e_numTotal.visible = false;
		return this;
	},
	mostrar: function() {
		this.visible = true;
		this.e_numBaud.mostrar();
		this.e_numTotal.visible = true;
		return this;
	}
});

/* Número de baudilios en el medidor de baudilios */
Crafty.c("MC_NumBaud", {
	num: 0, // numero a mostrar
	e_digito0: null,
	e_digito1: null,

	init: function() {
		this.requires("2D");
		this.e_digito0 = Crafty.e("2D, Canvas, sprMC_numBaud").attr({ visible: false, h:21 });
		this.e_digito1 = Crafty.e("2D, Canvas, sprMC_numBaud").attr({ visible: true, x:14, h:21 });
		this.attach(this.e_digito0);
		this.attach(this.e_digito1);
	},
	
	MC_NumBaud: function(num) {
		this.num = num;
		
		this.e_digito1.h = 21; // corregir bug de escalado en attach
		if (num < 10) {
			this.e_digito0.visible = false;
			this.e_digito1.sprite(0, num * 21); // sólo mostrar el segundo dígito
		}
		else {
			this.e_digito0.sprite(0, 21).attr({ visible: true, h:21 });
			this.e_digito1.sprite(0, (num - 10) * 21);
		}

		return this;
	},
	
	ocultar: function() {
		this.e_digito0.visible = false;
		this.e_digito1.visible = false;
	},
	mostrar: function() {
		if (this.num > 9) this.e_digito0.visible = true;
		this.e_digito1.visible = true;
	}
});


/*C:\uniserver\www\hdp\public_html\src/menu-cuadros/escena.js*/
Crafty.defineScene("MenuCuadros", function() {
	//boton de atras para la postal
	var e_btAtrasFondo, e_btAtrasCuadro;
	var e_fondo, e_logo; // Fondo
	var cuadros = new Array(5); // Cuadros en la pared

	var numCuadroActivo = -1; // Cuadro [1:5] actualmente activo (-1 si ninguno)
	var e_grillaH, e_grillaV, e_sombraH;
	var actividades = new Array(6);
	var e_btAtras;
	var objCortina = new Cortina();
	

	function crearEntidades() {
		e_fondo = Crafty.e("2D, Canvas, Image, Tweener")
				.image("img/menu-cuadros/fondo.jpg")
				.attr({x: 0, y: -190, w: 1280, h: 990});
		e_logo = Crafty.e("2D, Canvas, Image")
				.image("img/menu-cuadros/logo.png")
				.attr({x: 514, y: 670, w: 249, h: 92});
		e_fondo.attach(e_logo);

		// Actividades
		for (i = 0; i < 6; i++) {
			actividades[i] = Crafty.e("MC_btActiv").MC_btActiv(i + 1);
		}
		
		e_grillaH = Crafty.e("MC_grilla").MC_grilla(true);
		e_grillaV = Crafty.e("MC_grilla").MC_grilla(false);
		
		e_sombraH = Crafty.e("MC_Sombra");
		
		// Cuadros en la pared
		cuadros[0] = Crafty.e("MC_Cuadro")
							.MC_Cuadro(1, 200, 80, 500, 291, actividades, e_grillaH, e_sombraH)
							.attr({x: 200, y: -480, w: 367, h: 254})
							.crearCandado(2, 0);
		cuadros[1] = Crafty.e("MC_Cuadro")
							.MC_Cuadro(2, 550, 50, 542, 248, actividades, e_grillaV, null)
							.attr({x: 550, y: -400, w: 248, h: 343})
							.crearCandado(-17, -18);
		cuadros[2] = Crafty.e("MC_Cuadro")
							.MC_Cuadro(3, 241, 343, 473, 290, actividades, e_grillaH, e_sombraH)
							.attr({x: 241, y: -300, w: 395, h: 256})
							.crearCandado(2, 0);
		cuadros[3] = Crafty.e("MC_Cuadro")
							.MC_Cuadro(4, 782, 120, 481, 292, actividades, e_grillaH, e_sombraH)
							.attr({x: 782, y: -500, w: 376, h: 260})
							.crearCandado(2, 0);
		cuadros[4] = Crafty.e("MC_Cuadro")
							.MC_Cuadro(5, 741, 365, 494, 304, actividades, e_grillaH, e_sombraH)
							.attr({x: 741, y: -300, w: 350, h: 242})
							.crearCandado(1, 0);

		

		// Botón de atrás para la escena
		e_btAtras = Crafty.e("Boton, Tweener")
								.attr({z: 100}).posIni(53, 675)
								.Boton("sprGL_btAtras", "sprGL_btAtras2")
								.bloquear();
		e_fondo.attach(e_btAtras);

		// Botón de atrás para cada cuadro
		e_btAtrasCuadro = Crafty.e("Boton, Tweener")
								.attr({ z: 101, alpha: 0.0 }).posIni(1130, 141)
								.Boton("sprMC_btAtrasCuadro", "sprMC_btAtrasCuadro2")
								.bloquear();
	}

	// Establecer funcionalidad de entidades
	function initAcciones() {
		// Cuadros
		for (i = 0; i < 5; i++) {
			cuadros[i].bind("MouseUp", function() {
				if (!this.bloqueado) {
					if (!this.candado) {
						numCuadroActivo = this.num;
						animMostrarCuadro(this.num);
					}
				}
			});
		}

		// Botón de atrás para la escena
		e_btAtras.bind("MouseUp", function() {
			if (!this.bloqueado) {
				
				this.bloquear();
				objCortina.aparecer(40, 'Inicio');
			}
		});

		// Botón de atrás para cada cuadro
		e_btAtrasCuadro.bind("MouseUp", function() {
			if (!this.bloqueado) {
				this.bloquear();
				animSalirCuadro(numCuadroActivo);
			}
		});
	}

	// Animación de entrada del menú principal
	function animEntradaIni() {
		// Deslizamos los cuadrados desde arriba
		for (i = 0 ; i < 5 ; i++) {
			cuadros[i].bloquear()
						.addTween({y: cuadros[i].yIni}, "easeOutQuad", 50, function() {
							if (!this.candado) this.habilitar();
						});
		}
		Crafty.e("Delay").delay(function() { e_btAtras.habilitar(); }, 400);
		
	}

	// Retirar el botón de atrás, empequeñecer el cuadro, devolver los otros cuadros a sus lugares, devolver la pared a su estado normal
	function animSalirCuadro(numCuadro) {
		var e_cActivo = cuadros[numCuadro - 1];
		e_cActivo.animOcultarGrande();
		
		// Mostramos los otros cuadros
		for (i = 0 ; i < 5 ; i++) {
			if (numCuadro !== i + 1)
				cuadros[i].animMostrar();
		}

		// volvemos a colocar el fondo
		e_fondo.addTween({y: -190}, "easeInOutCubic", 40);
		
		// Quitamos el botón "atrás" de los cuadros
		e_btAtrasCuadro.bloquear();
		e_btAtrasCuadro.addTween({alpha: 0}, "linear", 8);
	}

	// Retirar los cuadros y desplazar la cámara hacia arriba
	// También posicionar el cuadro accedido
	function animMostrarCuadro(numCuadro) {
		var e_cActivo = cuadros[numCuadro - 1];
		e_cActivo.bloquear();

		// Escondemos los otros cuadros
		for (i = 0 ; i < 5 ; i++) {
			if (numCuadro !== i + 1)
				cuadros[i].animEsconder();
		}

		// desplazamos el fondo hacia arriba
		e_fondo.addTween({y: 0}, "easeInOutCubic", 40);
		
		// Mostramos el cuadro en su versión grande
		e_cActivo.animMostrarGrande();
		
		Crafty.e("Delay").delay(function() {
			e_btAtrasCuadro.addTween({alpha: 1}, "linear", 15, function() { this.habilitar(); });
		}, 1200);
	}

	// Bloquea los niveles de acuerdo con el progreso del jugador
	function actEstadoCuadros() {
		for (i = 0 ; i < 5 ; i++) {
			cuadros[i].actualizarProgreso();
		}
	}


	// Cargamos recursos del menú de cuadros y luego iniciamos la escena
	objCortina.visible();
	cargarRecursos(Recursos.menuCuadros, false, function() {
		console.log("Recursos cargados!");
		
		crearEntidades();
		initAcciones();
		actEstadoCuadros();

		objCortina.desaparecer(50);
		Crafty.e("Delay").delay(function() {
			animEntradaIni();
		}, 700);
		gesSonido.reproducirMusica('m_inicio');
	});
});
/*C:\uniserver\www\hdp\public_html\src/escenas/EscInicio.js*/
Crafty.defineScene("Inicio", function() {
	
	// Cargamos recursos de esta escena antes de renderizar
	cargarRecursos(Recursos.global, false, function() {
		Crafty.e("2D, Canvas, Color").attr({ w:1280, h:800 }).color("#FFFFFF");

		Crafty.e("2D, Canvas, Image")
				.attr({ x: 467, y: 320, z: 1 })
				.image("img/carga/pvd-titulo.png");

		Crafty.e("2D, Canvas, Image")
				.attr({ x: 184, y: 626, z: 1 })
				.image("img/carga/pvd-logos.png");


		// Cargamos recursos del menú principal y mostramos su escena
		cargarRecursos(Recursos.menuPrincipal, false, function() {
			var objCortina = new Cortina();
			objCortina.aparecer(80, 'menuPrincipal');
		});
	});
});


/*C:\uniserver\www\hdp\public_html\src/test/Test.js*/
var Test = function() {
	this.nivel = 0;
	this.banco = null;
	this.preguntaActual = null;
	this.contRespuestasOK = 0;
	this.numPreguntas = 0; // Número de preguntas que se debe aprobar para concluir el test
	this.f_inicializar = null; // Función a ejecutar para inicializar la pregunta
};

// Elige una pregunta aleatoria
Test.prototype.elegirPregunta = function() {
	this.preguntaActual = Crafty.math.randomElementOfArray(this.banco);
};


// Inicia la escena de test
Test.prototype.iniciarTest = function(nivel) {
	//obtener las preugntas de la base de datos
	//obtener aleatoriamente la pregunta
	//mosrtar la pregunta
	this.nivel = nivel;
	this.banco = tests[nivel].pregunta;
	this.numPreguntas = tests[nivel].numPreguntas;
	this.contRespuestasOK = 0;
	gesSonido.pararMusica();
	
	cargarRecursos(Recursos.test, true, function() {
		Crafty.enterScene("TestPregunta");
	});
};

Test.prototype.siguientePregunta = function() {
	//obtener aleatoriamente la pregunta
	//mosrtar la pregunta
	var sigP = Crafty.math.randomElementOfArray(this.banco);
	if (sigP === this.preguntaActual) {
		this.siguientePregunta();
	}
	else {
		this.preguntaActual = sigP;
		this.f_inicializar();
	}
	return this;
};

Test.prototype.verificarPregunta = function(num) {
	//verificar que los campos correspondan con las opciones
	var contR = 0;
	var contRT = 0;
	Crafty("TestEspacio").each(function() {
		if (this.resultado !== null) {
			contR += 1;
			if (this.resultado) {
				contRT += 1;
			}
		}
	});
	if (contR >= num) {
		//en caso que este completo el test se muestran los resultados
		//mostrar los resultados con imagenes chulito y equis
		Crafty("TestEspacio").each(function() {
			this.mostrarResultado();
		});
		
		if (contRT === contR) {
			this.contRespuestasOK += 1;
			
			if (this.contRespuestasOK >= this.numPreguntas) {
				this.finalizarTest();
			}
			else {
				var self = this;
				Crafty.e("Delay").delay(function() {
					self.siguientePregunta();
				}, 2000);
			}
		} else {
			//mostrar pantalla repetir en caso de perdida
			this.mostrarPantallaRepetir();
		}

	}
	return this;
};
Test.prototype.mostrarPantallaRepetir = function() {
	//obtener los componentes para hacer una pregunta nueva
	//en caso de pregunta nueva se escoje aleatoriamente
	//sino se va a la escena de postal
	this.contRespuestasOK = 0;
	var fondo = Crafty.e("2D, Canvas, Color, Tweener")
			.attr({x: 0, y: 0, z: 100, w: 1280, h: 800, alpha: 0})
			.color("#3F3B2F");
	var imgIntentar = Crafty.e("2D, Canvas, Image, Tweener")
			.attr({x: 520, y: 101, z: 101, alpha: 0})
			.image("img/test/prueba_de_nuevo.png");
	var e_btAceptar = Crafty.e("Boton, Tweener")
			.attr({x: 514, y: 595, z: 9001, alpha: 0})
			.Boton("sprTE_btAceptar", "sprTE_btAceptar2")
	var e_btCancelar = Crafty.e("Boton, Tweener")
			.attr({x: 651, y: 595, z: 9001, alpha: 0})
			.Boton("sprTE_btCancelar", "sprTE_btCancelar2")
	
	var self = this;
	e_btAceptar.bind("MouseUp", function() {
		fondo.addTween({alpha: 0}, 'easeInOutQuad', 15);
		imgIntentar.addTween({alpha: 0}, 'easeInOutQuad', 15);
		e_btAceptar.addTween({alpha: 0}, 'easeInOutQuad', 15);
		e_btCancelar.addTween({alpha: 0}, 'easeInOutQuad', 15, function() {
			self.siguientePregunta();
		});
	});
	e_btCancelar.bind("MouseUp", function() {
		Crafty.scene("MenuCuadros");
	});
	
	Crafty.e("Delay")
			.delay(function() {
				fondo.addTween({alpha: 1}, 'easeInOutQuad', 15);
				imgIntentar.addTween({alpha: 1}, 'easeInOutQuad', 15);
				e_btAceptar.addTween({alpha: 1}, 'easeInOutQuad', 15);
				e_btCancelar.addTween({alpha: 1}, 'easeInOutQuad', 15);
			}, 1000);

	return this;
};

Test.prototype.finalizarTest = function() {
	Crafty.e("Delay").delay(function() {
		Crafty.enterScene("MenuCuadros");
	}, 2000);
	return this;
};


/**
 * Estructura que contiene la logica para realizar un test
 * almacenado en el objeto tests[this.indexTest]
 
 var Test = function() {
 this.indexTest = -1;
 this.indexPregunta = -1;
 this.respuestasSeleccionadas = [];
 this.ACIERTO = '1';
 this.FRACASO = '-1';
 
 /**
 * Comenzar el test que se encuentra en tests[indexTest]
 * @param {type} indexTest posicion del test en la estructura de tests
 * @returns {Juego}
 
 this.iniciarTest = function(indexTest) {
 //Iniciar el gestor de contenido de tests 
 this.indexTest = indexTest;
 this.indexPregunta = -1;
 return this;
 };
 
 /**
 * Obtener la siguiente pregunta del test actual.
 * @returns {unresolved}
 
 this.siguientePregunta = function() {
 this.indexPregunta = this.indexPregunta + 1;
 return tests[this.indexTest].getPregunta(this.indexPregunta);
 };
 
 /**
 * retorna true si ha recorrido todo el test actual
 * @returns {Boolean}
 
 this.terminoTestActual = function() {
 //pregunta si la pregunta actual es el numero de preguntas del test.
 return tests[this.indexTest].preguntas.length === this.indexPregunta;
 };
 
 /**
 * Almacena la seleccion de una pregunta 
 * @param {type} respuesta
 * @returns {Juego}
 
 this.guardarSeleccion = function(respuesta) {
 this.respuestasSeleccionadas[this.indexPregunta] = respuesta;
 return this;
 };
 
 /**
 * calcula los resultados comparando las respuestas seleccionadas con 
 * las respeestas correctas del test actual
 * @returns {Juego}
 
 this.resultadosRespMultiple = function() {
 this.aciertos = 0;
 this.fracasos = 0;
 for (var indexRespuestas in this.respuestasSeleccionadas) {
 var respuestaCorrecta = tests[this.indexTest].getPregunta(indexRespuestas).respuestaCorrecta;
 var respuestaSeleccionada = this.respuestasSeleccionadas[indexRespuestas];
 
 
 console.log(respuestaSeleccionada+' correct: '+ respuestaCorrecta);
 if (respuestaSeleccionada === respuestaCorrecta) {
 this.aciertos++;
 }
 else {
 this.fracasos++;
 }
 }
 return this;
 }
 };*/


/*C:\uniserver\www\hdp\public_html\src/test/componentes.js*/
Crafty.c("TestOpcion", {
	e_espacioVerdad: null, // referencia su espacio correspondiente en el test (null si no tiene)
	e_bloTexto: null, // bloque de texto
	e_sombra: null, // sombra de la opción
	e_cubierta: null, // color sólido usado para cubrir esta entidad (desvanecerla)
	xIni: 0, // posición inicial de esta opción
	yIni: 0,
	arrEspacios: null, // referencia al arreglo de espacios del BloqueTexto
	bloqueado: false, // true si ya no se deja manipular
	colorNormal: "#D3554A",
	colorHover: "#C81F10",
	
	init: function() {
		this.requires("2D, Canvas, Draggable, Color, Tweener, DelayFrame").attr({ z: 1 });
		this.e_sombra = Crafty.e("2D, Canvas, Color").color("#222222").attr({ alpha: 0.5 });
		this.e_cubierta = Crafty.e("2D, Canvas, Color, Tweener").attr({ alpha: 1 });
		this.attach(this.e_sombra);
		this.attach(this.e_cubierta);

		this.bind("StartDrag", function() {
			this.hover();
		});

		this.bind("MouseUp", function(e) {
			if (!this.bloqueado) {
				var mCoords = mouseCoords(e);
				var num = this.arrEspacios.length;
				var e_espacio;

				for (i = 0; i < num; i++) {
					e_espacio = this.arrEspacios[i];
					if (!e_espacio.bloqueado) {
						if (e_espacio.isAt(mCoords.x, mCoords.y)) {
							if (e_espacio._w >= this._w) {
								// Se soltó la opción sobre un espacio -> acomodar la opción
								this.bloquear();
								e_espacio.bloqueado = true;
								
								var xCentro = e_espacio._x + (e_espacio._w - this._w) / 2;
								this.addTween({ x: xCentro, y: e_espacio._y }, "easeInOutCubic", 12, function() {
									e_espacio.visible = false;
									e_espacio.e_opcion = this;
									
									this.noHover();
									this.e_sombra.visible = false;
									// agregar puntaje
									//verificar si el espacio asignado es igual al espcio enchoclado
									if (this.e_espacioVerdad === e_espacio) {
										e_espacio.resultado = true;
									} else {
										e_espacio.resultado = false;
									}
									//verificar si todos los campos fueron diligenciados
									gestorTest.verificarPregunta(num);
								});
							}
							break;
						}
					}
				}

				if (!this.bloqueado)
					this.animVolverIni();
			}
		});
	},
	
	TestOpcion: function(texto, e_espacio, colorFrente, colorCubierta) {
		this.e_espacioVerdad = e_espacio;
		if (colorFrente) this.colorNormal = colorFrente;
		if (colorCubierta) this.e_cubierta.color(colorCubierta);
		
		this.e_bloTexto = Crafty.e("BloqueTexto");
		this.e_bloTexto.z = this._z + 1;
		this.e_bloTexto.bold = true;
		this.e_bloTexto.BloqueTexto(texto, false);
		this.e_bloTexto.x = 10;
		this.e_bloTexto.y = -2;
		
		var dim = this.e_bloTexto.getDimensiones();
		this.w = dim[0] + 20;
		this.h = dim[1] - 6;
		this.attach(this.e_bloTexto);
		
		
		
		this.color(this.colorNormal);
		this.e_sombra.attr({ x: 2, y: 2, w: this._w, h: this._h, z: 0 });
		this.e_cubierta.attr({ x: 0, y: 0, w: this._w + 2, h: this._h + 2, z: 900 });
		return this;
	},
	
	setArrEspacios: function(arrEsp) {
		this.arrEspacios = arrEsp;
		return this;
	},
	
	setPosIni: function() {
		this.xIni = this._x;
		this.yIni = this._y;
		return this;
	},
	
	// Destaca la opción
	hover: function() {
		this.z = 100;
		this.e_bloTexto.z = this._z + 1;
		this.e_sombra.z = this._z - 1;
		var children = this.e_bloTexto._children;
		var num = children.length;
		for (i = 0; i < num; i++) {
			children[i].z = this._z + 1;
		}

		this.color(this.colorHover);
		return this;
	},
	
	noHover: function() {
		this.z = 1;
		this.e_bloTexto.z = this._z + 1;
		this.e_sombra.z = this._z - 1;
		var children = this.e_bloTexto._children;
		var num = children.length;
		for (i = 0; i < num; i++) {
			children[i].z = this._z + 1;
		}

		this.color(this.colorNormal);
		return this;
	},
	
	animVolverIni: function() {
		if (!this.bloqueado) {
			this.bloqueado = true;
			this.disableDrag();
			this.addTween({x: this.xIni, y: this.yIni}, "easeOutCubic", 40, function() {
				this.noHover();
				this.enableDrag();
				this.bloqueado = false;
			});
		}
		return this;
	},
	
	// Evita recibir más eventos del mouse
	bloquear: function() {
		this.removeComponent("Draggable");
		this.removeComponent("Mouse");
		this.unbind("MouseUp");
		this.bloqueado = true;
		return this;
	},
	
	// Quita la cubierta de esta opción, revelando su contenido
	animAparecer: function() {
		var y0 = this._y;
		this.y = y0 + 15;
		this.addTween({ y: y0 }, "easeOutBack", 12);
		this.e_cubierta.addTween({ alpha: 0 }, "linear", 5, function() { this.visible = false; });
		return this;
	}
});

Crafty.c("TestEspacio", {
	bloqueado: false, // true si ya no recibe opciones
	resultado: null,
	e_resultado: null, // Marca de calificación de este espacio
	e_opcion: null, // Referencia a entidad actualmente encajada en este espacio
	
	init: function() {
		this.requires("2D, Canvas, Color, Mouse, Tweener")
			.color("#F6F0BB");
	
		this.e_resultado = Crafty.e("2D, Canvas, Tweener")
									.attr({ y: this._y + 30, z: 30, visible: false, alpha: 0 });
		
		this.bind("Remove", function() {
			this.e_resultado.destroy();
			return this;
		});
	},
	
	// dibujar si esta bien o si esta mal en las respuestas.
	mostrarResultado: function() {
		if (this.resultado) {
			this.e_resultado.requires("sprTE_bien");
		}
		else {
			this.e_resultado.requires("sprTE_mal");
		}
		
		this.e_resultado.attr({ visible: true, x: this.e_opcion._x + this.e_opcion._w })
						.addTween({ y: this._y - 76, alpha: 1 }, "easeOutBack", 15);
		
		return this;
	}

});
/*C:\uniserver\www\hdp\public_html\src/test/escena.js*/
//en esta escena se muestra la pregunta actual del gestor de test
Crafty.defineScene("TestPregunta", function() {
	var colorFrente, colorFondo;
	var et; // bloque de texto
	var opciones = []; // entidades de opciones
	var texto = ""; // Texto de la pregunta
	var textosTrampa = []; // Arreglo de textos de opciones trampa
	var inicializar;
	
	et = Crafty.e("BloqueTexto").attr({ x: 100, y: 180 });
	
	// Creamos entidades decorativas
	var e_fondo = Crafty.e("2D, Canvas, Color").attr({w: 1280, h: 800});
	var e_llave = Crafty.e("2D, Canvas, Image").attr({ x: 1080, y: 48 }).image("img/test/llave.png");
	Crafty.e("2D, Canvas, sprTE_linea").attr({x: 20, y: 566});
	Crafty.e("2D, Canvas, sprTE_linea").attr({x: 531, y: 566});
	Crafty.e("2D, Canvas, sprTE_linea").attr({x: 1042, y: 566}).crop(0, 0, 211, 14);
	Crafty.e("2D, Canvas, sprTE_numeros").attr({x: 95, y: 70});
	
	//Crafty.e("2D, Canvas, Color, Mouse").color("#FFFFFF").attr({ w: 30, h: 30, z: 5566}).bind("MouseUp", function() { inicializar(); });
	
	
	
	// *** FUNCIONES DE LA ESCENA ***
	
	// Elige una pregunta aleatoria del nivel y compone el escenario acorde
	inicializar = function inicializar() {
		gestorTest.elegirPregunta();
		texto = gestorTest.preguntaActual.texto;
		textosTrampa = gestorTest.preguntaActual.trampa;
	
		et.reset();
		for (i = 0 ; i < opciones.length ; i++) {
			opciones[i].destroy();
		}
		opciones = [];
		
		elegirColor();
		e_fondo.color(colorFondo);
		et.colorFrente = colorFrente;
		et.colorFondo = colorFondo;
		
		construirPregunta();
	};
	
	gestorTest.f_inicializar = inicializar;
	inicializar();
	
	// Establece el color de frente y de fondo de la pregunta actual
	function elegirColor() {
		var numColor = randomInt(0, 4);
		switch (numColor) {
			case 0: colorFrente = "#D3554A"; colorFondo = "#EA6054"; break;
			case 1: colorFrente = "#33766A"; colorFondo = "#4CAB9A"; break;
			case 2: colorFrente = "#645A35"; colorFondo = "#938759"; break;
			case 3: colorFrente = "#BD721E"; colorFondo = "#EA881B"; break;
			case 4: colorFrente = "#58801C"; colorFondo = "#80BA27"; break;
		}
	}
	
	
	// Muestra una por una las opciones disponibles
	function animMostrarOpciones() {
		var e_op, i = 0;
		for (i = 0; i < opciones.length; i++) {
			e_op = opciones[i];
			e_op.delay(function() { this.animAparecer(); }, 20 * (i + 1));
		}
	}
	
	
	// Crea la pregunta y las respuestas de la pregunta actual
	function construirPregunta() {
		// Preparamos los datos de esta pregunta
		var trampas = [];
		var textosVerdad = [];
		var texto = gestorTest.preguntaActual.texto;
		var textosTrampa = gestorTest.preguntaActual.trampa;

		// Obtenemos todas las opciones incluídas en el texto
		var i, j, letra;
		var len = texto.length;
		for (i = 0 ; i < len ; i++) {
			letra = texto.charAt(i);
			if (letra === "|") {
				j = i + 1;
				while (texto.charAt(j) !== '|' && j < len) { j++; }
				textosVerdad.push(texto.slice(i+1, j));
				i = j + 1;
			}
		}

		var e_opcion;

		// Obtenemos el ancho máximo de las opciones verdaderas
		var anchoMaxOpcion = 0;
		for (i = 0; i < textosVerdad.length; i++) {
			e_opcion = Crafty.e("TestOpcion").TestOpcion(textosVerdad[i], null);
			if (anchoMaxOpcion < e_opcion._w) anchoMaxOpcion = e_opcion._w;
			e_opcion.destroy();
		}

		// Creamos todas las opciones trampa y actualizamos el ancho máximo
		for (i = 0; i < textosTrampa.length; i++) {
			e_opcion = Crafty.e("TestOpcion").TestOpcion(textosTrampa[i], null, colorFrente, colorFondo);
			if (anchoMaxOpcion < e_opcion._w) anchoMaxOpcion = e_opcion._w;
			trampas.push(e_opcion);
		}

		// Construimos el bloque de texto
		et.anchoCajaOpcion = anchoMaxOpcion;
		et.BloqueTexto(texto, true);
		
		// Ubicamos las opciones
		opciones = trampas.concat(et.getOpciones()); // Opciones contiene todas las entidades
		shuffle(opciones);

		var totOpciones = opciones.length;
		var posX = 100;
		var maxX = 1150;
		var posY = 600;

		var e_op, anchoOp, resto;
		var opcionesLinea = [];

		for (i = 0; i < totOpciones; i++) {
			e_op = opciones[i];
			anchoOp = e_op._w;

			if (posX + anchoOp > maxX) {
				// Alineamos al centro
				resto = (maxX - posX) / 2;
				for (j = 0; j < opcionesLinea.length; j++) {
					opcionesLinea[j].x += resto + 25;
				}
				opcionesLinea = [];

				posX = 100;
				posY += 65;
			}

			e_op.x = posX;
			e_op.y = posY;
			opcionesLinea.push(e_op);
			posX += anchoOp + 50;
		}

		// Alineamos última línea
		resto = (maxX - posX) / 2;
		for (j = 0; j < opcionesLinea.length; j++) {
			opcionesLinea[j].x += resto + 25;
		}

		// Fijamos posiciones iniciales luego de alinear
		// También establecemos las referencias al arreglo de espacios
		var arrEsp = et.getArrEspacios();
		for (i = 0; i < totOpciones; i++) {
			e_op = opciones[i];
			e_op.setPosIni();
			e_op.setArrEspacios(arrEsp);
		}
		
		// mostramos el texto y las opciones
		et.animMostrar(function() {
			animMostrarOpciones();
		});
	}
});

/*C:\uniserver\www\hdp\public_html\src/test/sprites.js*/
function spritesTest() {
	Crafty.sprite("img/test/linea.png", {"sprTE_linea": [0, 0, 511, 14]});
	Crafty.sprite("img/test/numeros.png", {"sprTE_numeros": [0, 0, 63, 60]});

	Crafty.sprite("img/menu-pri/bt-dialogo.png", {
		sprTE_btAceptar: [0, 0, 69, 69],
		sprTE_btAceptar2: [0, 69, 69, 69],
		sprTE_btCancelar: [69, 0, 69, 69],
		sprTE_btCancelar2: [69, 69, 69, 69]
	});
}

/*C:\uniserver\www\hdp\public_html\src/act/base/AC_Perdiste.js*/
Crafty.c("AC_Perdiste", {
	e_fondo: null, // transparencia que cubre toda la pantalla
	e_btSalir: null,
	e_btReiniciar: null,
	
	init: function() {
		
		this.requires("2D, Canvas, Image, Persist")
								.attr({ y: 140, z: 10000 }).image("img/global/perdiste.png");
		this.e_fondo = Crafty.e("2D, Canvas, Color, Persist")
								.attr({ w:1280, h:800, z:9999, alpha:0.75 })
								.color("#000000");
								
		
		this.e_btSalir = Crafty.e("Boton, Tweener, Persist")
								.attr({ x: 70, y: this._y + 371, z: this._z })
								.Boton("sprPAU_btSalir", "sprPAU_btSalir2");
		this.e_btReiniciar = Crafty.e("Boton, Tweener, Persist")
								.attr({ x: 174, y: this._y + 370, z: this._z })
								.Boton("sprPAU_btReiniciar", "sprPAU_btReiniciar2");
						
		this.ocultar();
		
		// Acciones de los botones
		var self = this;
		
		// Volver al menú de cuadros
		this.e_btSalir.bind("MouseUp", function() {
			self.ocultar();
			gesActividad.terminar();
			if (Crafty.isPaused()) Crafty.pause(); // despausamos crafty	
			Crafty.scene('MenuCuadros');
		});
		
		// Reiniciar esta actividad
		this.e_btReiniciar.bind("MouseUp", function() {
			self.ocultar();
			if (Crafty.isPaused()) Crafty.pause(); // despausamos crafty	
			gesActividad.reiniciar();
		});
	},
	
	mostrar: function() {
		this.visible = true;
		this.e_fondo.visible = true;
		this.e_btSalir.visible = true;
		this.e_btReiniciar.visible = true;
		//Crafty.pause();
		Crafty.trigger("RenderScene");
		return this;
	},
	
	ocultar: function() {
		console.log(Crafty.isPaused());
		if (Crafty.isPaused()) Crafty.pause();
		this.visible = false;
		this.e_fondo.visible = false;
		this.e_btSalir.ocultar();
		this.e_btReiniciar.ocultar();
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/base/AC_Pista.js*/
// Representa el mensaje emergente de pista al principio de cada escena
Crafty.c("AC_Pista", {
	e_msg: null, // Sprite de mensaje
	e_cubierta: null, // Cubierta de pantalla completa
	xIni: 0, // Coords de inicio
	xFin: 0, // Coords de finalización
	actConfig: null, // Referencia a la configuración de la pista en la actividad
	
	init: function() {
		this.requires("2D, Canvas, sprAC_fonPistaIzq, Tweener, Persist");
		this.e_msg = Crafty.e("2D, Canvas, sprAC_msgPista, Persist");
		this.attach(this.e_msg);
		
		this.z = 9000;
		this.e_msg.z = this._z;
		
		this.e_cubierta = Crafty.e("2D, Canvas, Mouse, Persist")
								.attr({ w: 1280, h: 800, z: 900, visible: false });
		this.ocultar(); // Inicia oculto
	},
	
	// Muestra y luego esconde la pista
	// pasar izquierda TRUE para que salga por la izquierda, sino sale por la derecha
	mostrar: function() {
		this.actConfig = gesActividad.config.pista;
		var izquierda = this.actConfig.ladoIzq;
		
		this.mensajePista(gesActividad.nivel, gesActividad.subnivel);
		this.visible = true;
		this.e_msg.visible = true;
		
		// ponemos la pista a la izquierda o a la derecha
		if (izquierda) {
			this.removeComponent("sprAC_fonPistaDer").addComponent("sprAC_fonPistaIzq");
			this.xIni = -this._w;
			this.xFin = -20;
			// Temporalmente volvemos a x=0 para no alterar el offset
			this.x = 0;
			this.e_msg.x = 225;
		}
		else {
			this.removeComponent("sprAC_fonPistaIzq").addComponent("sprAC_fonPistaDer");
			this.xIni = 1280 + this._w;
			this.xFin = 1280 - this._w + 20;
			
			this.x = 0;
			this.e_msg.x = 95;
		}
		this.x = this.xIni;
		this.y = this.actConfig.y;
		this.e_msg.y = this.y + 43;
		
		
		// Cubrimos con una capa transparente que evite interactuar antes de tiempo
		this.e_cubierta.visible = true;
		
		// Animación de entrada y salida
		var self = this;
		var xMid = (izquierda ? (this.xIni + 460) : (this.xIni - 950));
		
		this.addTween({ x: xMid }, "easeInCubic", 20, function() {
			this.addTween({ x: this.xFin }, "easeOutElastic", 50, function() {
				Crafty.e("DelayFrame").delay(function() {
					self.addTween({ x: self.xIni }, "easeInCubic", 15, function() {
						this.ocultar();
						// Mostramos e iniciamos el temporizador
						gesActividad.temporizador.mostrar().iniciar();
					});
				}, 55);
			});
		});
		
		return this;
	},
	
	// Establece el mensaje de la pista de acuerdo con el nivel y subnivel
	mensajePista: function(nivel, subnivel) {
		var fila = 0;
		var col = 0;
		
		var numMsg = nivel * 6 + subnivel;
				
		if (numMsg >= 5) {
			fila = Math.floor(numMsg / 5);
		}
		
		col = numMsg - (fila * 5);
		this.e_msg.sprite(col * 204, fila * 170);
		return this;
	},
	
	// Ubica la pista de forma oculta y la invisibiliza
	ocultar: function() {
		this.x = this.xIni;
		this.visible = false;
		this.e_msg.visible = false;
		this.e_cubierta.visible = false;
		return this;
	}
});

/*C:\uniserver\www\hdp\public_html\src/act/base/Temporizador.js*/
/**
 * Componente de temporizacion de actividades, esta fuertemente acoplado 
 * con juego.actividad, envia mensajes de terminacion o pausa.
 */
Crafty.c('Temporizador', {
	tiempoInicial: 0,
	id: 0,
	maxAncho: 0, // maximo de tamano de ancho de la barra
	anchoBarra : 0, // ancho actual de la barra
	msIntervalo: 33, // ms por intervalo
	contadorIntervalos: 0,
	maxIntervalos: 0, // contadorIntervalos cuenta hasta esto
	delta: 0,
	activo: false, // true si está contando tiempo
	
	e_barra: null, // barra que disminuye
	e_reloj: null, // reloj que se desplaza
	e_pausa: null, // botón de pausa
	e_panelPausa: null, // panel completo de interfaz de pausa
	
	intervalPausa: null, // Interval de pantalla de pausa que despacha los frames
	f_cbackTerminar: null, // función de callback a invocar cuando se termina el tiempo
	
	init: function() {
		var self = this;
		var w1 = Crafty.canvas._canvas.width;
		
		// dibujar en esta entidad la barra de fondo
		this.requires('2D, Canvas, sprBarraFondo, Persist');
		
		// calcular posicion x del temporizador (centrado)
		var w2 = this.w;
		var x0 = (w1 - w2) / 2.0;
		this.attr({ x:x0, y:713, z:900 });
		
		// dibujar la barra que va disminuyendo
		this.e_barra = Crafty.e('2D, Canvas, sprBarraTemporizador, Persist')
							.attr({x: this._x + 6, y: this._y + 4, z: this.z + 1});
		
		this.maxAncho = this.e_barra.w;
		
		this.e_reloj = Crafty.e('2D, Canvas, Mouse, sprReloj, Persist')
				.attr({x: this._x + 595, y: this._y - 25, z: this.z + 2});

		// Componente para pausar o despausar actividad
		this.e_pausa = Crafty.e("2D, Canvas, Mouse, sprPausa, Persist")
			.attr({x: this._x + 760, y: this._y - 25, z: this.z})
			.bind("MouseUp", function() {
				self.pausar();
			});
		
		this.e_panelPausa = Crafty.e("Pausa").Pausa(this);
		
		this.ocultar(); // Inicialmente oculto; mostrar manualmente con mostrar()
	},
	
	/**
	 * Empieza con el temporizador o hace que continue con su ejecucion
	 * hasta el limite de tiempo. 
	 * (actua como una funcion toogle de pausa y despausa)
	 */
	iniciar: function() {
		this.activo = true;
		this.delta = this.maxAncho * this.msIntervalo / this.tiempoInicial;
		this.maxIntervalos = Math.floor(this.tiempoInicial / this.msIntervalo);
		// iniciar temporizador de tiempo, cada msIntervalo milisegundos se ejecuta una funcion de actualizacion 
		var self = this;
		
		this.myInterval = setInterval(function() {
			self.actualizar();
			// si se llego al limite de tiempo, entonces terminar actividad.
			if ((++self.contadorIntervalos) >= self.maxIntervalos) {
				self.parar();
				gesActividad.mostrarPerdiste();
			}
		}, this.msIntervalo);
		
		return this;
	},
	
	/**
	 * Hace cambiar el tamaño de la barra y actualiza el contador. de segundos
	 * y milisegundos
	 */
	actualizar: function() {
		// disminuir el tamaño de la barra 
		this.anchoBarra = (this.e_barra.w - this.delta) > 0 ? this.e_barra.w - this.delta : 0;
		this.e_barra.crop(0, 0, this.anchoBarra, 18);
		// actualizar reloj para que se posicione siempre 
		this.e_reloj.x = this.e_barra.x + this.e_barra.w - 25;
		return this;
	},
	
	/**
	 * Se llama cuando el tiempo se ha agotado, o cuando la actividad se 
	 * ha ganado.
	 */
	parar: function() {
		if (this.activo) {
			clearInterval(this.myInterval);
			this.activo = false;
			this.ocultarBtPausa();
		}
		return this;
	},
	
	// Reinicia todas las variables del temporizador
	reset: function() {
		this.delta = 0;
		this.activo = false;
		this.contadorIntervalos = 0;
		this.e_barra.crop(0, 0, 618, 18);
		this.actualizar();
		return this;
	},
	
	// Pausa el juego
	// La entidad de panel de pausa tiene su propio timer aparte de Crafty
	pausar: function() {
		clearInterval(this.myInterval);
		this.e_pausa.visible = false;
		Crafty.pause();
		this.e_panelPausa.mostrar();
		return this;
	},
	
	// Des-pausa el juego
	despausar: function() {
		Crafty.pause();
		this.iniciar();
		this.e_pausa.visible = true;
		return this;
	},
	
	// Muestra el temporizador en pantalla
	mostrar: function() {
		this.visible = true;
		this.e_barra.visible = true;
		this.e_reloj.visible = true;
		this.e_pausa.visible = true;
		return this;
	},
	
	// Oculta el temporizador
	ocultar: function() {
		this.visible = false;
		this.e_barra.visible = false;
		this.e_reloj.visible = false;
		this.e_pausa.visible = false;
		return this;
	},
	
	// Incrementa el tiempo el número de intérvalos dado
	incrementar: function(ms) {
		var numInt = Math.floor(ms / this.msIntervalo);
		this.contadorIntervalos -= numInt;
		if (this.contadorIntervalos < 0)
			this.contadorIntervalos = 0;
		
		var nuevoAncho = this.anchoBarra + numInt * this.delta;
		if (nuevoAncho > this.maxAncho) nuevoAncho = this.maxAncho;
		this.e_barra.crop(0, 0, nuevoAncho, 18);
		return this;
	},
	
	setDuracion: function(t) {
		this.tiempoInicial = t;
		return this;
	},
	
	mostrarBtPausa: function() {
		this.e_pausa.visible = true;
		return this;
	},
	
	ocultarBtPausa: function() {
		this.e_pausa.visible = false;
		return this;
	},
	
	// Devuelve el tiempo restante
	getTiempoRestante: function() {
		var tRestante = this.tiempoInicial - this.contadorIntervalos * this.msIntervalo;
		return tRestante;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/base/Pausa.js*/
Crafty.c("Pausa", {
	_objTempo: null, // Referencia al objeto Temporizador (creador)
	
	e_fondo: null, //fondo transparente de la pausa que evita eventos no deseados sobre componentes de la actividad en primer plano
	e_sombra: null, // Sombra del bloque
	e_arbol: null, // arbol
	e_leyenda: null, // texto "Pausa"
	
	e_btSalir: null,
	e_btReiniciar: null,
	e_btContinuar: null,
	
	_interval: null, // timer propio de este panel
	hojasInterval: null, // Intervalo de caída de hojas
	arrHojas: [], // Referencias de hojas que caen
	
	init: function() {
		this.requires("2D, Canvas, Color, Persist")
								.attr({ x: 0, y: 150, w: 1280, h: 475, z: 10000, alpha: 0.8 })
								.color("#111111");
		this.crearEntidades();
		
		this.ocultar(); // Panel inicialmente oculto
	},
	
	crearEntidades: function() {
		this.e_fondo = Crafty.e("2D, Canvas, Color, Persist, Mouse")//esta entidad no va a permitir que se ejecuten eventos de clic sobre la actividad
								.attr({x:0, y:0, z:this._z-1, w:1280, h:800, alpha:0.0})
								.color("#000000")
								.bind("MouseDown", function(){})
								.bind("MouseUp", function(){})
								.bind("MouseMove", function(){})
						
		this.e_sombra = Crafty.e("2D, Canvas, Color, Persist")
								.attr({ y: this._y + 475, z: this._z, w: 1280, h: 7, alpha: 0.28 })
								.color("#000000");
		this.e_arbol = Crafty.e("2D, Canvas, Image, Persist")
								.image("img/global/pau-arbol.png")
								.attr({ x: 481, y: this._y + 60, z: this._z });
		this.e_leyenda = Crafty.e("2D, Canvas, Image, Persist")
								.image("img/global/pau-leyenda.png")
								.attr({ x: 583, y: this._y + 345, z: this._z });
		
		this.e_btSalir = Crafty.e("Boton, Tweener, Persist")
								.attr({ x: 70, y: this._y + 371, z: this._z })
								.Boton("sprPAU_btSalir", "sprPAU_btSalir2");
		this.e_btReiniciar = Crafty.e("Boton, Tweener, Persist")
								.attr({ x: 174, y: this._y + 370, z: this._z })
								.Boton("sprPAU_btReiniciar", "sprPAU_btReiniciar2");
		this.e_btContinuar = Crafty.e("Boton, Tweener, Persist")
								.attr({ x: 309, y: this._y + 375, z: this._z })
								.Boton("sprPAU_btContinuar", "sprPAU_btContinuar2");
		
		// Acciones de los botones
		var self = this;
		
		// Volver al menú de cuadros
		this.e_btSalir.bind("MouseUp", function() {
			self.ocultar();
			if (Crafty.isPaused()) Crafty.pause(); // despausamos crafty	
			gesActividad.terminar();
			Crafty.scene('MenuCuadros');
		});
		
		// Reiniciar esta actividad
		this.e_btReiniciar.bind("MouseUp", function() {
			self.ocultar();
			if (Crafty.isPaused()) Crafty.pause(); // despausamos crafty	
			gesActividad.reiniciar();
		});
		
		// Despausar el juego
		this.e_btContinuar.bind("MouseUp", function() {
			self.ocultar();
			self._objTempo.despausar();
		});
	},
	
	Pausa: function(obj_t) {
		this._objTempo = obj_t;
		return this;
	},
	
	// avanza manualmente el enterFrame de los hijos
	tic: function(f) {
		//Crafty.timer.step()
		this.trigger("EnterFrame");
		
		this.e_btSalir.trigger("EnterFrame", { frame: f, dt: 1000 / 60 });;
		this.e_btReiniciar.trigger("EnterFrame");
		this.e_btContinuar.trigger("EnterFrame");
		for (i = 0 ; i < this._children.length ; i++) {
			this._children[i].trigger("EnterFrame", { frame: f, dt: 1000 / 60 });
		}
		Crafty.DrawManager.drawAll();
		Crafty.trigger("RenderScene");
		Crafty.trigger("PostRender");
	},
	
	
	mostrar: function() {
		this.visible = true;
		this.e_fondo.visible = true;
		this.e_sombra.visible = true;
		this.e_arbol.visible = true;
		this.e_leyenda.visible = true;
		
		var self = this;
		
		setTimeout(function() {
			self.e_btSalir.attr({alpha: 0, visible: true}).addTween({ alpha: 1 }, "linear", 10);
			self.e_btReiniciar.attr({alpha: 0, visible: true}).addTween({ alpha: 1 }, "linear", 15);
			self.e_btContinuar.attr({alpha: 0, visible: true}).addTween({ alpha: 1 }, "linear", 20);
		}, 300);
		
		this.hojasInterval = setInterval(function() {
			self.soltarHoja();
		}, 1000);
		
		// Iniciamos un timer propio para despachar las frames en la pantalla de Pausa
		var i = 0;
		Crafty.trigger("RenderScene");
		
		this._interval = setInterval(function() {
			self.tic(i);
			i++;
		}, 20);
	},
	
	ocultar: function() {
		// Quitamos las hojas
		clearInterval(this.hojasInterval);
		var numHojas = this._children.length;
		for (i = 0 ; i < numHojas ; i++) {
			this._children[0].cancelTweener();
			this._children[0].visible = false;
			this._children[0].destroy();
		}
		
		this.visible = false;
		this.e_fondo.visible = false;
		this.e_sombra.visible = false;
		this.e_arbol.visible = false;
		this.e_leyenda.visible = false;
		this.e_btSalir.ocultar();
		this.e_btReiniciar.ocultar();
		this.e_btContinuar.ocultar();
		
		clearInterval(this._interval);
	},
	
	
	// Dejar caer una hoja desde una posición aleatoria
	soltarHoja: function() {
		var e_h = Crafty.e("PAU_Hoja");
		e_h.PAU_Hoja(this.e_arbol);
		this.attach(e_h);
	}
});

// Hoja que cae del arbol
Crafty.c("PAU_Hoja", {
	_padre: null, // referencia al arbol del que caen las hojas
	
	init: function() {
		this.requires("2D, Canvas, Tweener, SpriteAnimation, sprPAU_hoja");
		this.reel("girar", 700, [[0,0],[0,7],[0,14],[0,21],[0,28],[0,35],[0,42]]);
	},
	PAU_Hoja: function(padre) {
		this._padre = padre;
		
		this.x = padre._x + 74 + randomFloat(0, 160);
		this.y = padre._y + 160 + randomFloat(0, 20);
		
		this.attr({ z: padre._z, visible: true});
		this.animate("girar", -1);
		
		this.addTween({ y: this._y + 65 }, "easeOutCubic", 250, function() {
			this.destroy();
		});
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/base/Actividad.js*/
/**
 * Objeto global que gestiona las actividades del videojuego
 * Encargado de iniciar y detener las actividades con su puntaje e interfaces
 * Se crea sólo una vez
 */
var Actividad = function() {
	this.objAct = null; // referencia a una actividad para mostrar
	this.nivel = -1; // número de nivel actual
	this.subnivel = -1; // número de subnivel actual
	this.config = null; // referencia a la configuración del subnivel
	this.e_pista = Crafty.e("AC_Pista");
	this.temporizador = Crafty.e("Temporizador");
	this.panelPerdiste = Crafty.e("AC_Perdiste");

	this.temporizador.f_cbackTerminar = this.mostrarPerdiste;
};

// Muestra la pista y al terminar inicia el temporizador
Actividad.prototype.mostrarPista = function() {
	this.e_pista.mostrar(); // Mostrar la pista
	return this;
};


// Inicia una actividad
// nivel va de 0 a 4, subnivel va de 0 a 5
Actividad.prototype.ejecutar = function(nivel, subnivel) {
	// Cargamos la información y el objeto de la actividad
	this.nivel = nivel;
	this.subnivel = subnivel;
	this.config = niveles[nivel].subnivel[subnivel];
	this.objAct = this.config.actividad();

	// Obtenemos los recursos de la actividad
	var arrNomRec = ["morro", "belalcazar", "parque", "puente", "valencia"];
	var recursosAct = Recursos[arrNomRec[nivel]][subnivel];

	// Reconfiguramos el temporizador
	this.temporizador.reset();
	var duracionAct = (debug) ? 900000 : this.config.duracion;
	this.temporizador.setDuracion(duracionAct);

	// Reseteamos física
	resetBox2D();
	actPuntaje.initDato(); // Configuramos el dato de la actividad en la pantalla de puntaje

	// Cargar los recursos en RAM antes de iniciar actividad 
	var self = this;
	cargarRecursos(recursosAct, true, function() {
		Crafty.enterScene("Actividad", self);
		//reproducir el audio de fondo
		gesSonido.crear(recursosAct.musica[0], recursosAct.musica[1]);
		gesSonido.reproducirMusica(recursosAct.musica[0]);
		
		//self.mostrarPuntaje();
	});
};

// Reinicia la actividad actual
Actividad.prototype.reiniciar = function() {
	this.terminar();
	if (this.objAct.terminarActividad)
		this.objAct.terminarActividad();
	
	this.objAct = this.config.actividad();
	console.log("reiniciar actividad " + this.nivel + " - " + this.subnivel);

	this.temporizador.reset();
	var duracionAct = (debug) ? 100000 : this.config.duracion;
	this.temporizador.setDuracion(duracionAct);

	actPuntaje.ocultar();
	Crafty.enterScene("Actividad", this);
	
};

Actividad.prototype.siguienteActiv = function() {
	this.terminar();
	actPuntaje.ocultar();
	//verificar si la siguiente actividad corresponde a un test
	if (this.subnivel >= 5) {
		gestorTest.iniciarTest(this.nivel);
	} else {
		this.ejecutar(this.nivel, this.subnivel + 1);
	}
};


// Calcula y muestra la interfaz de puntaje
Actividad.prototype.mostrarPuntaje = function() {
	actPuntaje.puntosMax = 5000;
	
	// Calculamos el número de puntos a partir del t restante
	var tRestante = this.temporizador.getTiempoRestante();
	var calificacion = tRestante / this.temporizador.tiempoInicial; // [0:1]
	var puntosObtenidos = Math.floor(calificacion * 6000);
	console.log(tRestante, this.temporizador.tiempoInicial)
	
	// Actualizamos progreso
	progreso[this.nivel].puntaje[this.subnivel] = puntosObtenidos;
	progreso[this.nivel].baudilios[this.subnivel] = Math.floor(puntosObtenidos / (actPuntaje.puntosMax * 0.33));
	console.log(progreso[this.nivel])
	
	// Desbloquear siguiente nivel si es el caso
	if (this.subnivel === 5) {
		if (this.nivel < 4) {
			progreso[this.nivel + 1].bloqueado = false;
		}
	}
	
	actPuntaje.puntos = puntosObtenidos;
	actPuntaje.animMostrar();
};

// Muestra la interfaz de perdiste
Actividad.prototype.mostrarPerdiste = function() {
	this.detener();
	this.panelPerdiste.mostrar();
	this.temporizador.ocultarBtPausa();
	return this;
};

// Resetear Box2D y detener el temporizador
Actividad.prototype.detener = function() {
	this.temporizador.parar();
	if (this.objAct.b2a) {
		this.objAct.b2a.destruir();
		delete this.objAct.b2a;
	}
	if (this.objAct.terminarActividad)
		this.objAct.terminarActividad();

	resetBox2D(); // limpiamos Box2D
};

// Detener la actividad y ocultar el temporizador
Actividad.prototype.terminar = function() {
	this.detener();
	this.temporizador.ocultar();
	return this;
};
/*C:\uniserver\www\hdp\public_html\src/act/base/esc-actividad.js*/
// Escena que representa una de las actividades (subniveles)
Crafty.defineScene("Actividad", function(objActividad) {
	// Inicializamos esta actividad
	objActividad.objAct.init();
	
	objActividad.mostrarPista(); // Mostramos la pista (al ocultarse la pista inicia el temporizador)
});
/*C:\uniserver\www\hdp\public_html\src/puntaje/sprites.js*/
function spritesPuntaje() {
	Crafty.sprite("img/puntaje/cortinas.png", {
		sprAP_cortinaSup: [0, 197, 951, 132],
		sprAP_cortinaInf: [0, 0, 951, 195]
	});

	Crafty.sprite("img/puntaje/digitos.png", {
		sprAP_digi0: [0, 0, 47, 62]
	});

	Crafty.sprite("img/puntaje/baudilio.png", {
		sprAP_baudilio: [0, 0, 107, 99]
	});

	Crafty.sprite("img/particulas/triangulo.png", {
		sprAP_particula: [0, 0, 23, 21]
	});
	
	Crafty.sprite("img/puntaje/comillas.png", {
		sprAP_comillaIni: [0, 0, 32, 25],
		sprAP_comillaFin: [33, 0, 32, 25]
	});
	
	Crafty.sprite("img/puntaje/spr-datos.png", {
		sprAP_dato: [0, 0, 170, 204]
	});

	Crafty.sprite("img/puntaje/botones.png", {
		sprAP_btAtras: [9, 0, 60, 60],
		sprAP_btAtras2: [9, 61, 60, 60],
		sprAP_btRepetir: [0, 122, 79, 62],
		sprAP_btRepetir2: [0, 187, 79, 62],
		sprAP_btSig: [12, 250, 55, 54],
		sprAP_btSig2: [12, 305, 55, 54]
	});
}
/*C:\uniserver\www\hdp\public_html\src/puntaje/componentes.js*/
// Un baudilio
Crafty.c("AP_Baudilio", {
	frame: 0, // fotograma de la animación de llenado [0:5]
	init: function() {
		this.requires("2D, Canvas, sprAP_baudilio, Delay, Tweener");
	},
	avanzar: function() {
		this.frame++;
		this.sprite(0, (this.frame * 99));
		return this;
	},
	// Destacar el baudilio
	brillar: function() {
		this.addTween({x: this._x - 5, y: this._y - 5, w: this._w + 10, h: this._h + 10}, "easeOutBounce", 30);
		var part = new Particulas({
			componentes: "sprAP_particula, SpriteAnimation",
			x: this._x + 5, y: this._y, z: this._z,
			vx: 0,
			deltaVx: 2,
			periodo: 25,
			deltaOriX: 90, deltaOriY: 10,
			numParticulas: 6,
			magnitud: 30,
			duracion: 30,
			atenuacion: 10,
			f_crear: function(ent) {
				ent.reel("giro", 400, [[0, 0], [23, 0], [46, 0], [69, 0]]).animate("giro", -1);
			}
		});
		part.iniciar();
	},
	lleno: function() {
		return (this.frame >= 5);
	},
	
	// Vacía el baudilio para poder volverse a llenar desde el principio
	reset: function() {
		this.frame = 0;
		this.sprite(0, 0);
		this.w = 107;
		this.h = 99;
		return this;
	}
});

// Uno de los digitos del número de puntaje
Crafty.c("AP_Digito", {
	numero: 0,
	init: function() {
		this.requires("2D, Canvas, sprAP_digi0");
	},
	digito: function(num) {
		if (num === 0)
			this.sprite(0, 0);
		else if (num === 1)
			this.sprite(0, 65);
		else if (num === 2)
			this.sprite(0, 128);
		else if (num === 3)
			this.sprite(0, 192);
		else if (num === 4)
			this.sprite(0, 256);
		else if (num === 5)
			this.sprite(0, 319);
		else if (num === 6)
			this.sprite(0, 383);
		else if (num === 7)
			this.sprite(0, 447);
		else if (num === 8)
			this.sprite(0, 510);
		else if (num === 9)
			this.sprite(0, 574);

		this.numero = num;
		return this;
	},
	// Proxy de funciones de incremento variable
	incrementar: function(n) {
		var incr = this.numero + n;
		if (incr > 9)
			incr = 0;
		this.digito(incr);
		return incr;
	}
});

// Administra el conjunto de digitos del puntaje
Crafty.c("AP_Numero", {
	e_digito0: null,
	e_digito1: null,
	e_digito2: null,
	e_digito3: null,
	e_baud1: null,
	e_baud2: null,
	e_baud3: null,
	maximo: 0, // Puntaje para 3 baudilios llenos
	total: 0, // Puntaje total obtenido
	cuenta: 0, // Cuenta del número hasta el total
	puntosBaudilio: 0, // puntos aprox. necesarios para llenar un baudilio completo
	puntosLlenar: 0, // puntos aprox. necesarios para avanzar 1 fotograma la animación de llenado
	puntosFinal: 0, // puntos faltantes de los cálculos aproximados para agregar al tercer baudilio
	cuentaLlenar: 0, // cuenta de animación de baudilio
	baudiliosLlenos: 0, // baudilios que ya se han llenado durante el conteo

	init: function() {
		this.requires("2D");
	},
	// Setter de referencias a baudilios
	baudilios: function(e_b1, e_b2, e_b3) {
		this.e_baud1 = e_b1;
		this.e_baud2 = e_b2;
		this.e_baud3 = e_b3;
		return this;
	},
	// Invocar cuando ya se ha posicionado
	Numero: function() {
		this.e_digito0 = Crafty.e("AP_Digito, Persist").attr({x: this._x, y: this._y, z: this._z, visible: false});
		this.e_digito1 = Crafty.e("AP_Digito, Persist").attr({x: this._x + 50, y: this._y, z: this._z, visible: false});
		this.e_digito2 = Crafty.e("AP_Digito, Persist").attr({x: this._x + 100, y: this._y, z: this._z, visible: false});
		this.e_digito3 = Crafty.e("AP_Digito, Persist").attr({x: this._x + 150, y: this._y, z: this._z, visible: false});
		return this;
	},
	// Incrementar la cuenta del número completo
	aumentar: function() {
		var dif = this.total - this.cuenta;
		var incr;
		if (dif > 300)
			incr = 10;
		else if (dif > 50)
			incr = 5;
		else
			incr = 1;

		// incrementar contadores
		this.cuenta = this.cuenta + incr;
		this.cuentaLlenar = this.cuentaLlenar + incr;

		// actualizar sprite de digitos
		num = this.e_digito3.incrementar(incr);
		if (num === 0) {
			num = this.e_digito2.incrementar(1);
			if (num === 0) {
				num = this.e_digito1.incrementar(1);
				if (num === 0) {
					this.e_digito0.incrementar(1);
				}
			}
		}

		// actualizar sprite de baudilios
		if (this.baudiliosLlenos < 3) {
			if (this.baudiliosLlenos === 2 && this.e_baud3.frame === 4) {
				if (this.cuenta >= this.maximo) {
					this.e_baud3.avanzar();
					this.e_baud3.brillar();
					this.baudiliosLlenos++;
				}
			}
			else {
				if (this.cuentaLlenar >= this.puntosLlenar) {
					var refBaud;
					if (this.baudiliosLlenos === 0) {
						refBaud = this.e_baud1;
					} else if (this.baudiliosLlenos === 1) {
						refBaud = this.e_baud2;
					} else if (this.baudiliosLlenos === 2) {
						refBaud = this.e_baud3;
					}

					refBaud.avanzar();
					if (refBaud.lleno()) {
						refBaud.brillar();
						this.baudiliosLlenos++;
					}

					this.cuentaLlenar = this.puntosLlenar - this.cuentaLlenar;
				}
			}
		}

		return this;
	},
	// Inicia el conteo hasta el número total
	contar: function(total, max) {
		this.cuenta = 0;
		this.baudiliosLlenos = 0;
		
		this.total = total;
		this.maximo = max;

		this.puntosBaudilio = Math.floor(max * 0.33);
		this.puntosLlenar = Math.round(this.puntosBaudilio * 0.2);
		this.puntosFinal = this.puntosLlenar + max - (this.puntosLlenar * 15);

		this.visible = true;
		this.e_digito0.visible = true;
		this.e_digito1.visible = true;
		this.e_digito2.visible = true;
		this.e_digito3.visible = true;
		
		this.bind("EnterFrame", function() {
			if (this.cuenta < this.total) {
				this.aumentar();
			}
			else {
				this.unbind("EnterFrame");
			}
		});

		return this;
	},
	
	// Oculta los números y detiene cualquier conteo
	ocultar: function() {
		this.visible = false;
		this.cuenta = 0;
		this.unbind("EnterFrame");
		this.e_digito0.digito(0);
		this.e_digito0.visible = false;
		this.e_digito1.digito(0);
		this.e_digito1.visible = false;
		this.e_digito2.digito(0);
		this.e_digito2.visible = false;
		this.e_digito3.digito(0);
		this.e_digito3.visible = false;
		this.e_baud1.reset();
		this.e_baud2.reset();
		this.e_baud3.reset();
		return this;
	}
	
});
/*C:\uniserver\www\hdp\public_html\src/puntaje/Puntaje.js*/
// Objeto que gestiona la pantalla de puntaje
function ActPuntaje() {
	this.puntos = -1; // puntuación a mostrar
	this.puntosMax = -1; // máxima puntuación del nivel

	this.e_cortinaSup = null;
	this.e_cortinaInf = null;
	this.e_bloRojo = null;
	this.e_fonTexto = null;
	this.e_muyBien = null;
	this.e_lblPuntuacion = null;
	this.e_numPuntos = null;
	this.e_baudilio1 = null;
	this.e_baudilio2 = null;
	this.e_baudilio3 = null;
	this.e_dato = null;
	this.e_datoImg = null;
	this.e_btSalir = null;
	this.e_btRepetir = null;
	this.e_btSiguiente = null;
	this.e_comillaIni = null;
	this.e_comillaFin = null;

	//estos numeros representan la actividad actual, se utilizan para conocer 
	//la siguiente actividad 
	this.config = null;

	this.init();
};


// Inicialización del objeto
ActPuntaje.prototype.init = function init() {
	this.crearEntidades();
};

// Crear las entidades de la interfaz de puntaje
ActPuntaje.prototype.crearEntidades = function crearEntidades() {
	this.e_fondo = Crafty.e("2D, Canvas, Color, Persist, Mouse")//esta entidad no va a permitir que se ejecuten eventos de clic sobre la actividad
			.attr({x:0, y:0, z:1010, w:1280, h:800, alpha:0.0, visible:false})
			.color("#000000")
			.bind("MouseDown", function(){})
			.bind("MouseUp", function(){})
			.bind("MouseMove", function(){})
	// contenedores
	this.e_bloRojo = Crafty.e("2D, Canvas, Image, Tweener, Persist")
			.attr({x: 1280, y: 0, z: 1010, visible: false})
			.image("img/puntaje/blo-rojo.png");
	this.e_cortinaSup = Crafty.e("2D, Canvas, sprAP_cortinaSup, Tweener, Persist")
			.attr({x: 0, y: -195, z: 1005, visible: false});
	this.e_cortinaInf = Crafty.e("2D, Canvas, sprAP_cortinaInf, Tweener, Persist")
			.attr({x: 0, y: 800, z: 1005, visible: false});
	this.e_bloTexto = Crafty.e("2D, Canvas, Image, Tweener, Persist")
			.attr({x: 1280, y: 0, z: 1001, alpha: 1, visible: false})
			.image("img/puntaje/fon-texto.png");

	// Info de puntaje
	this.e_muyBien = Crafty.e("2D, Canvas, Image, Tweener, Persist")
			.attr({x: 981, y: 46, z: 1020, alpha: 0.0, visible: false})
			.image("img/puntaje/muy-bien.png");
	this.e_lblPuntuacion = Crafty.e("2D, Canvas, Image, Tweener, Persist")
			.attr({x: 1012, y: 369, z: 1020, alpha: 0.0, visible: false})
			.image("img/puntaje/txt-puntuacion.png");

	this.e_baudilio1 = Crafty.e("AP_Baudilio, Persist").attr({x: 1000, y: 520, z: 1020, alpha: 0.0, visible: false});
	this.e_baudilio2 = Crafty.e("AP_Baudilio, Persist").attr({x: 1132, y: 520, z: 1020, alpha: 0.0, visible: false});
	this.e_baudilio3 = Crafty.e("AP_Baudilio, Persist").attr({x: 1067, y: 627, z: 1020, alpha: 0.0, visible: false});

	this.e_numPuntos = Crafty.e("AP_Numero, Persist")
			.attr({x: 1020, y: 417, z: 1020})
			.Numero()
			.baudilios(this.e_baudilio1, this.e_baudilio2, this.e_baudilio3);

	this.e_dato = Crafty.e("BloqueTexto, Persist").attr({ x: 270, y: 170, z: 1025, visible: false });
	this.e_comillaIni = Crafty.e("2D, Canvas, sprAP_comillaIni, Persist").attr({ x: 220, y: 165, z: 1020, visible: false });
	this.e_comillaFin = Crafty.e("2D, Canvas, sprAP_comillaFin, Persist").attr({ z: 1020, visible: false });
	
	this.e_datoImg = Crafty.e("2D, Canvas, sprAP_dato, Tweener, Persist")
			.attr({x: 980, y: 600, z: 1005, visible: false });

	this.e_btSalir = Crafty.e('Boton, Tweener, Persist')
			.attr({z: 1020, visible: false}).posIni(63, 685)
			.Boton("sprAP_btAtras", "sprAP_btAtras2");
	this.e_btRepetir = Crafty.e('Boton, Tweener, Persist')
			.attr({z: 1020, visible: false}).posIni(155, 683)
			.Boton("sprAP_btRepetir", "sprAP_btRepetir2");
	this.e_btSiguiente = Crafty.e('Boton, Tweener, Persist')
			.attr({z: 1020, visible: false}).posIni(275, 688)
			.Boton("sprAP_btSig", "sprAP_btSig2");
	
	
	//asignar comportamento a los botones
	var self = this;
	this.e_btSalir.bind("MouseUp", function() {
		self.reset();
		gesActividad.terminar();
		Crafty.scene("MenuCuadros");
	});
	this.e_btRepetir.bind("MouseUp", function() {
		gesActividad.reiniciar();
	});
	this.e_btSiguiente.bind("MouseUp", function() {
		gesActividad.siguienteActiv();
	});
};

// Configuramos el texto e imagen del dato a mostrar
ActPuntaje.prototype.initDato = function() {
	this.e_dato.reset();
	this.config = gesActividad.config;
	this.e_dato.BloqueTexto(this.config.dato, true);
	this.e_comillaFin.attr({x: this.e_dato.ultPosX + 25, y: this.e_dato._y + this.e_dato.altoBloque - 50 });
	this.e_datoImg.sprite(gesActividad.subnivel * 170, gesActividad.nivel * 204);
	return this;
};

// Resetea el estado y contenido del panel de puntaje
ActPuntaje.prototype.ocultar = function() {
	// Evitamos que se sigan disparando partículas
	this.e_fondo.attr({ x: 1280, visible: false });
	this.e_bloRojo.attr({ x: 1280, visible: false });
	this.e_cortinaSup.attr({ y: -195, visible: false });
	this.e_cortinaInf.attr({ y: 800, visible: false });
	this.e_bloTexto.attr({ x: 1280, visible: false });
	this.e_muyBien.attr({ alpha: 0.0, visible: false });
	this.e_lblPuntuacion.attr({ alpha: 0.0, visible: false });
	this.e_baudilio1.attr({ alpha: 0.0, visible: false }).reset();
	this.e_baudilio2.attr({ alpha: 0.0, visible: false }).reset();
	this.e_baudilio3.attr({ alpha: 0.0, visible: false }).reset();
	this.e_datoImg.attr({ x: 980, visible: false });
	this.e_dato.ocultar();
	this.e_btSalir.ocultar();
	this.e_btRepetir.ocultar();
	this.e_btSiguiente.ocultar();
	this.e_numPuntos.ocultar();
	this.e_comillaIni.visible = false;
	this.e_comillaFin.visible = false;
	return this;
};

ActPuntaje.prototype.reset = function ocultar() {
	this.e_dato.reset();
	this.ocultar();
	/*
	var self = this;
	// primero deslizamos el bloque rojo para ocultarlo 
	this.e_bloRojo.addTween({x: 1280 + this.e_bloRojo.w}, "easeOutCubic", 25);
	self.e_cortinaSup.addTween({x: self.e_cortinaSup.x, y: -self.e_cortinaSup.h}, "easeOutCubic", 45);
	self.e_cortinaInf.addTween({x: self.e_cortinaInf.x, y: 800 + self.e_cortinaInf.h}, "easeOutCubic", 20);
	// Deslizamos el bloque de texto para ocultarlo
	self.e_bloTexto.addTween({x: 1280 + self.e_bloTexto.w}, "easeOutCubic", 20);
	// ocultar el texto y la imagen del dato
	self.e_dato.addTween({x: 1280 + self.e_dato.w}, "linear", 30);
	self.e_datoImg.addTween({y: 800 + self.e_datoImg.h}, "easeOutBack", 50);
	self.e_btSalir.addTween({y: 800 + self.e_btSalir.h}, "easeOutCubic", 45);
	self.e_btRepetir.addTween({y: 800 + self.e_btRepetir.h}, "easeOutCubic", 45);
	self.e_btSiguiente.addTween({x: 800 + self.e_btSiguiente.h}, "easeOutCubic", 45);
	// ocultar el "muy bien" y la información de puntaje
	self.e_muyBien.addTween({x: 1280 + self.e_muyBien.w}, "linear", 10);
	self.e_lblPuntuacion.addTween({x: 1280 + self.e_muyBien.w}, "linear", 10);
	// Mostramos los baudilios
	self.e_baudilio1.addTween({x: 1280 + self.e_baudilio1.w}, "linear", 20);
	self.e_baudilio2.addTween({x: 1280 + self.e_baudilio2.w}, "linear", 20);
	self.e_baudilio3.addTween({x: 1280 + self.e_baudilio3.w}, "linear", 20);
	Crafty("AP_Digito").destroy();
	self.e_numPuntos.destroy();
	*/
};

// Animaciòn para mostrar la interfaz de puntaje y dato
// invocada en mostrarPuntaje()
ActPuntaje.prototype.animMostrar = function() {
	var self = this;
	//mostramos el fondo para evitar eventos no deseados sobre la actividad en primer plano
	this.e_fondo.attr({x:0, visible: true});
	// primero deslizamos el bloque rojo
	this.e_bloRojo.attr({visible: true}).addTween({x: 938}, "easeOutCubic", 25, function() {
		// deslizamos las cortinas
		self.e_cortinaSup.attr({visible: true}).addTween({x: self.e_cortinaSup.x, y: 0}, "easeOutCubic", 45);
		self.e_cortinaInf.attr({visible: true}).addTween({x: self.e_cortinaInf.x, y: 605}, "easeOutCubic", 20, function() {
			// Deslizamos el bloque de texto
			self.e_bloTexto.attr({visible: true}).addTween({x: 179}, "easeOutCubic", 20, function() {
				// Mostramos el texto y la imagen del dato
				self.e_comillaIni.attr({ visible: true });
				self.e_dato.animMostrar(function() {
					self.e_comillaFin.visible = true;
					self.e_btSalir.attr({ visible: true }).addTween({ alpha:1 }, "linear", 15);
					self.e_btRepetir.attr({ visible: true }).addTween({ alpha:1 }, "linear", 15);
					self.e_btSiguiente.attr({ visible: true }).addTween({ alpha:1 }, "linear", 15);
				});	
	
				self.e_datoImg.attr({visible: true})
						.addTween({x: 1280 - self.e_bloRojo.w - self.e_datoImg.w + 15}, "easeOutCubic", 50);
			});
		});

		
		
		// mostramos el "muy bien" y la información de puntaje
		var yIni = self.e_muyBien._y;
		self.e_muyBien
				.attr({y: yIni + 20, visible: true})
				.addTween({alpha: 1.0}, "linear", 10)
				.addTween({y: yIni}, "easeOutElastic", 60);

		self.e_lblPuntuacion.attr({visible: true}).addTween({alpha: 1.0}, "linear", 10);

		// Mostramos los baudilios
		self.e_baudilio1.attr({visible: true}).addTween({alpha: 1.0}, "linear", 20);
		self.e_baudilio2.attr({visible: true}).delay(function() {
			this.addTween({alpha: 1.0}, "linear", 20);
		}, 100);
		self.e_baudilio3.attr({visible: true}).delay(function() {
			this.addTween({alpha: 1.0}, "linear", 20);
		}, 200);

		// Contamos hasta el puntaje total
		self.e_numPuntos.contar(self.puntos, self.puntosMax);
	});

	return this;
};



/*C:\uniserver\www\hdp\public_html\src/act/morro/1/sprites.js*/
function spritesMorro1() {
	Crafty.sprite("img/act/morro/1/spr-capas-1.png", {
		sprM1_capa1: [0,0,1280,59],
		sprM1_capa2: [0,60,1280,142],
		sprM1_capa3: [0,203,1280,167],
		sprM1_capa4: [0,371,1280,165],
		sprM1_capa5: [0,537,1280,145],
		sprM1_capa6: [0,683,1280,160],
		sprM1_capa7: [0,844,1280,159],
		sprM1_capa8: [0,1004,1280,199],
		sprM1_capa9: [0,1204,1280,178]
	});
	Crafty.sprite("img/act/morro/1/spr-capas-2.png", {
		sprM1_capa10: [0,0,1280,163],
		sprM1_capa11: [0,165,1280,152],
		sprM1_capa12: [0,318,1280,142],
		sprM1_capa13: [0,461,1280,128],
		sprM1_capa14: [0,590,1280,122],
		sprM1_capa15: [0,713,1280,100],
		sprM1_capa16: [0,814,1280,76],
		sprM1_capa17: [0,891,1280,87],
		sprM1_capa18: [0,979,1280,96],
		sprM1_capa19: [0,1076,1280,77],
		sprM1_capa20: [0,1154,1280,63],
		sprM1_capa21: [0,1218,1280,38]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/morro/1/componentes.js*/
/**
 * Componentes de Morro - Actividad 1
 */

Crafty.c("M1Capa", {
	posYmostrar: 0, // Posición Y de la capa en su lugar adecuado
	posYocultar: 0, // Posición Y de la capa oculta
	tiempoTween: 25, // ms de duración del tween completo de aparecer / desaparecer
	estado: -2, // -2: oculto e invisible. -1: ocultando. 1: mostrando. 2: mostrandose y visible

	init: function() {
		this.requires("2D, Canvas, Tweener");
		this.visible = false;
		return this;
	},
	
	// NumCapa: de 0 a 20 (de abajo a arriba).
	// yMostrar: posición Y de la capa en su lugar adecuado
	// yOcultar: posición Y de la capa en su lugar oculto
	M1Capa: function(numCapa, yMostrar, yOcultar) {
		this.requires("sprM1_capa" + numCapa);
		this.posYmostrar = yMostrar;
		this.posYocultar = yOcultar;
		//this.y = yMostrar;
		this.y = yOcultar;
		return this;
	},
	mostrar: function() {
		this.visible = true;
		this.cancelTweener();

		this.estado = 1;
		this.addTween({y: this.posYmostrar}, 'easeInOutQuad', this.tiempoTween, function() {
			this.estado = 2;
		});

		return this;
	},
	ocultar: function() {
		this.cancelTweener();
		this.estado = -1;
		this.addTween({y: this.posYocultar}, 'easeInOutQuad', this.tiempoTween, function() {
			this.visible = false;
			this.estado = -2;
		});
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/morro/1/actividad.js*/
/**
 * Actividad 1 Morro
 * Dato: Es una montaña artificial prehispánica -al parecer data del año 1600 - 600 a.C.- de carácter ceremonial funerario, ubicada en el costado noreste de Popayán, considerado el sitio arqueológico más importante de la ciudad.
 * Interacción: Construir el morro mediante toque rápido
 */
function ActMorro1() {
	this.aciertosObjetivo = 0;
	this.temporizadorActividad = 0;
	this.toque = null;
	this.arrCapas = new Array(21);
	this.particulas = null;

	this.e_morroVerde = null;
	this.e_obrero = null;
	
	this.coordsX = [[164,1280],[0,1280],[0,1280],[0,1257],[0,1195],[0,1217],[0,1167],[0,1129],[0,996],[0,949],[0,930],[0,882],[0,840],[0,795],[0,753],[0,708],[18,642],[39,590],[125,506],[182,454],[239,383]]; // Coordenadas xIni y xFin de las capas en pantalla

	this.init = function() {
		Crafty.e("2D, Canvas, Image").image("img/act/morro/1/fondo.jpg");

		// Inicializamos las capas de la construcción
		var yMostrar = [743, 660, 632, 608, 613, 582, 556, 490, 475, 457, 438, 421, 406, 385, 365, 349, 308, 279, 265, 250, 248];
		var yOcultar = [0, 744, 710, 659, 674, 646, 623, 577, 546, 554, 510, 483, 450, 449, 446, 424, 378, 338, 320, 315, 287];
		for (i = 0; i < 21; i++) {
			this.arrCapas[i] = Crafty.e("M1Capa").M1Capa(i + 1, yMostrar[i] + 4, yOcultar[i]).attr({z: 50 - i});
		}

		this.toque = new ToqueRapido();
		this.toque.incremento = ((debug) ? 4 : 4);
		this.toque
				.init(this)
				.callbackCambio(this.cambioVal)
				.callbackMaximo(this.ganarActividad);
		this.toque.val = 10;
		this.toque.vMin = 10;
		
		// Inicialmente mostramos las primeras capas
		for (i = 0; i < 3; i++) {
			this.arrCapas[i].visible = true;
			this.arrCapas[i].estado = 2;
			this.arrCapas[i].y = yMostrar[i];
		}

		// morro verde
		this.e_morroVerde = Crafty.e("2D, Canvas, Image, Tween")
				.image("img/act/morro/1/morro-verde.png")
				.attr({ z: 200, alpha: 0.0, visible: false });

		// obrero
		this.e_obrero = Crafty.e("2D, Canvas, Image, Delay, Tween")
				.image("img/act/morro/1/obrero.png")
				.attr({x: 310, y: 265, z: 199, visible: false });
		
		this.particulas = new Particulas({
			componentes: "spr_polvo, SpriteAnimation",
			x: 480, y: 440, z: 600,
			vx: 0,
			deltaVx: 2,
			periodo: 90,
			deltaOriY: 10, deltaOriX: 430,
			numParticulas: 3,
			magnitud: 10,
			duracion: 33,
			atenuacion: 12,
			f_crear: function(ent) {
				ent.reel("giro", 400, [[0, 0], [32, 0], [64, 0], [96, 0]]).animate("giro", -1);
			}
		});
		
		Crafty.e("Gesto")
				.Gesto(1, { coords: [600, 300], duracion: 200, retardo: 40 });
		
		return this;
	};

	// función a ejecutar cuando cambia el valor del ToqueRapido
	// su ámbito es el objeto ToqueRapido (referirse a este objeto con this._padre)
	this.cambioVal = function cambioVal() {
		var val = this.val;
		var numCapa = Math.floor(val / 5);
		this._padre.mostrarCapa(numCapa);
	};

	this.mostrarCapa = function mostrarCapa(n) {
		var i;
		if (n > 20)
			n = 20; // máximo 20

		if (this.arrCapas[n].estado === 2) {
			// capa ya visible; asegurarnos de que las capas de arriba se oculten
			for (i = 20; i > n; i--) {
				if (this.arrCapas[i].estado > 0) {
					this.arrCapas[i].ocultar();
				}
			}
		}
		else if (this.arrCapas[n].estado < 0) {
			// capa descendiendo o invisible; mostrar esta y las de abajo
			for (i = 1; i <= n; i++) {
				if (this.arrCapas[i].estado < 0) {
					this.arrCapas[i].mostrar();
				}
			}
			
			var ultcapa = n;
			var e_ultcapa = this.arrCapas[ultcapa];
			this.particulas.y = e_ultcapa._y - 20;
			this.particulas.x = this.coordsX[ultcapa][0];
			this.particulas.deltaOriX = this.coordsX[ultcapa][1];
			this.particulas.deltaOriY = e_ultcapa._h / 2;
			this.particulas.iniciar();
		}
	};


	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	// Sólo invocada al ganar la actividad
	this.ganarActividad = function ganarActividad() {
		gesActividad.temporizador.parar();
		
		var self = this._padre;
		this._padre.e_morroVerde.visible = true;
		this._padre.e_morroVerde.tween({alpha: 1.0}, 1000);

		this._padre.e_obrero.delay(function() {
			this.visible = true;
			this.tween({y: 117}, 150);
		}, 1000);
		
		Crafty.e("Delay").delay(function() {
			gesActividad.mostrarPuntaje();
			self.terminarActividad();
		}, 1500);
		return this;
	};
}
;
/*C:\uniserver\www\hdp\public_html\src/act/morro/2/sprites.js*/
function spritesMorro2() {
	Crafty.sprite("img/act/morro/2/piezas.png", {
		sprM2_pieza0: [20, 0, 256, 176],
		sprM2_pieza1: [62, 177, 172, 83],
		sprM2_pieza2: [58, 261, 180, 84],
		sprM2_pieza3: [0, 346, 296, 84],
		sprM2_pieza4: [51, 432, 194, 127],
		sprM2_pieza5: [41, 560, 214, 180],
		sprM2_pieza6: [112, 741, 74, 81]
	});

	Crafty.sprite("img/act/morro/2/piezas-hov.png", {
		sprM2_pieza0h: [20, 0, 256, 176],
		sprM2_pieza1h: [62, 177, 172, 83],
		sprM2_pieza2h: [58, 261, 180, 84],
		sprM2_pieza3h: [0, 346, 296, 84],
		sprM2_pieza4h: [51, 432, 194, 127],
		sprM2_pieza5h: [41, 560, 214, 180],
		sprM2_pieza6h: [112, 741, 74, 81]
	});

	Crafty.sprite("img/act/morro/2/trampas.png", {
		sprM2_trampa0: [35, 0, 228, 164],
		sprM2_trampa1: [59, 165, 179, 95],
		sprM2_trampa2: [59, 261, 180, 117],
		sprM2_trampa3: [51, 379, 195, 128],
		sprM2_trampa4: [28, 508, 242, 148],
		sprM2_trampa5: [0, 657, 297, 114],
		sprM2_trampa6: [101, 772, 96, 131]
	});

	Crafty.sprite("img/act/morro/2/trampas-hov.png", {
		sprM2_trampa0h: [35, 0, 228, 164],
		sprM2_trampa1h: [59, 165, 179, 95],
		sprM2_trampa2h: [59, 261, 180, 117],
		sprM2_trampa3h: [51, 379, 195, 128],
		sprM2_trampa4h: [28, 508, 242, 148],
		sprM2_trampa5h: [0, 657, 297, 114],
		sprM2_trampa6h: [101, 772, 96, 131]
	});

	Crafty.sprite("img/act/morro/2/huecos.png", {
		sprM2_hueco0: [20, 2, 257, 175],
		sprM2_hueco1: [62, 178, 172, 83],
		sprM2_hueco2: [58, 262, 180, 84],
		sprM2_hueco3: [0, 347, 296, 85],
		sprM2_hueco4: [51, 434, 195, 127],
		sprM2_hueco5: [41, 562, 213, 179],
		sprM2_hueco6: [110, 742, 70, 81]
	});

	Crafty.sprite("img/act/morro/2/fijos.png", {
		sprM2_fijo0: [20, 0, 256, 177],
		sprM2_fijo1: [62, 178, 172, 82],
		sprM2_fijo2: [58, 261, 180, 84],
		sprM2_fijo3: [0, 346, 296, 84],
		sprM2_fijo4: [51, 432, 194, 128],
		sprM2_fijo5: [41, 561, 214, 179],
		sprM2_fijo6: [110, 741, 76, 81]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/morro/2/componentes.js*/
/**
 * Componentes de Morro - Actividad 2
 */

// Bloque arrastable con soporte de física
Crafty.c("M2Bloque", {
	num: 0, // ID del bloque
	b2shape: null, // Arreglo de posiciones [x,y] relativas a la entidad. Describe el polígono de colisión
	callbackDestroy: null, // Función de callback al destruir este objeto
	_padre: null, // Referencia al objeto creador
	_e_hueco: null, // Referencia a la entidad hueco correspondiente (si aplica)
	destX1: 0, // posiciones que definien el MBR del hueco correspondiente
	destX2: 0,
	destY1: 0,
	destY2: 0,
	insertable: true, // false si es una trampa
	
	// fase: 0 normal, 1 hover
	cambiarSprite: function(fase) {
		
		var sprNombre = (this.insertable) ? "sprM2_pieza" : "sprM2_trampa";
		if (fase === 1) {
			this.removeComponent(sprNombre + this.num);
			this.addComponent(sprNombre + this.num + "h");
		}
		else {
			this.removeComponent(sprNombre + this.num + "h");
			this.addComponent(sprNombre + this.num);
		}
	},
	
	init: function() {
		this.requires("B2arrastre, Tweener");
		this.arrastrable = true;

		this.bind("MouseDown", function(e) {
			this.cambiarSprite(1);
		});
		
		this.bind("MouseUp", function(e) {
			if (this.insertable) {
				var pos = mouseCoords(e);
				if (pos.x > this.destX1 && pos.x < this.destX2 && pos.y > this.destY1 && pos.y < this.destY2) {
					this.arrastrable = false;
					this.unbind("MouseUp");
					this.unbind("MouseDown");
					this.unbind("MouseMove");
					
					world.DestroyBody(this.body);
					
					var grados = this.rotation;
					while (grados < 0) { grados += 360; }
					while (grados >= 360) { grados -= 360; }
					this.rotation = grados;

					this.addTween({
							rotation: (grados > 180) ? 360 : 0,
							x: this.destX1,
							y: this.destY1
						},
						'easeInOutQuad',
						25,
						function() { this.fijar(); });
				}
				else {
					this.cambiarSprite(0);
				}
			}
			else {
				this.cambiarSprite(0);
			}
		});
		
		return this;
	},
	
	M2Bloque: function(objPadre, e_hueco, num, b2shape, spr) {
		this._padre = objPadre;
		this.num = num;
		if(spr){
			this.requires(spr);
		}else{
			this.requires("sprM2_pieza" + num);
		}
		this._e_hueco = e_hueco;
		
		switch (num) {
			case 0: this.areaMap([102,0],[255,7],[215,87],[73,176],[0,168]); break;
			case 1: this.areaMap([43,0],[169,3],[131,80],[2,75]); break;
			case 2: this.areaMap([47,0],[179,5],[136,82],[0,77]); break;
			case 3: this.areaMap([43,1],[109,1],[294,47],[278,81],[1,77]); break;
			case 4: this.areaMap([63,0],[192,1],[135,127],[0,123]); break;
			case 5: this.areaMap([59,2],[188,2],[211,98],[178,173],[26,179],[1,128]); break;
			case 6: this.areaMap([33,2],[72,0],[40,79],[0,80]); break;
		}
		
		if (b2shape.length > 0) {
			this.b2shape = b2shape;
			this.box2d({
				bodyType:'dynamic',
				density: 0.000001,
				friction: 0.5,
				restitution: 0.2,
				shape: this.b2shape
			});
		}
		this.body.SetAngularDamping(3);
		
		this.B2arrastre(this._padre.b2a);
		
		// obtenemos las coordenadas de destino
		this.destX1 = e_hueco._x;
		this.destY1 = e_hueco._y;
		this.destX2 = this.destX1 + e_hueco._w;
		this.destY2 = this.destY1 + e_hueco._h;
		return this;
	},
	
	M2Trampa: function(objPadre, num, b2shape) {
		this._padre = objPadre;
		this.num = num;
		this.insertable = false;
		this.requires("sprM2_trampa" + num);
		switch (num) {
			case 0: this.areaMap([0,157],[94,0],[229,4],[134,162]); break;
			case 1: this.areaMap([50,0],[178,3],[133,95],[1,90]); break;
			case 2: this.areaMap([1,109],[70,0],[178,38],[135,116]); break;
			case 3: this.areaMap([63,2],[190,1],[135,127],[1,124]); break;
			case 4: this.areaMap([87,0],[240,7],[199,87],[72,147],[0,140]); break;
			case 5: this.areaMap([69,2],[133,2],[295,77],[279,111],[2,106]); break;
		}
		
		if (b2shape.length > 0) {
			this.b2shape = b2shape;
			this.box2d({
				bodyType:'dynamic',
				density: 0.000001,
				friction: 0.5,
				restitution: 0.2,
				shape: this.b2shape
			});
		}
		this.body.SetAngularDamping(3);
		this.B2arrastre(this._padre.b2a);
		
		return this;
	},
	
	// Fijar el bloque en su lugar y no permitir que lo vuelvan a manipular
	fijar: function() {
		this.requires("sprM2_fijo" + this.num);
		this.z = 3; // Detrás de las otras piezas
		this._e_hueco.visible = false;
		
		var par = new Particulas({
			componentes: "spr_polvo, SpriteAnimation",
			x: this._x, y: this._y, z: 5,
			vx: 0,
			deltaVx: 2,
			periodo: 50,
			deltaOriY: this._h,
			deltaOriX: this._w - 40,
			numParticulas: 6,
			magnitud: 10,
			duracion: 20,
			atenuacion: 8,
			f_crear: function(ent) {
				ent.reel("giro", 400, [[0,0],[32,0],[64,0],[96,0]]).animate("giro", -1);	
			}
		});
		par.iniciar();
		this._padre.bloqueFijado(); // Notificar al padre
	}
});



// Hueco donde se inserta el bloque
Crafty.c("M2Hueco", {
	num: 0, // ID del bloque corespondiente
	_padre: null, // Referencia al objeto creador
	
	init: function() {
		this.requires("2D, Canvas");
		return this;
	},
	
	M2Hueco: function(objPadre, num,spr) {
		this._padre = objPadre;
		this.num = num;
		if(spr){
			this.requires(spr);
		}
		this.requires("sprM2_hueco" + num);
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/morro/2/actividad.js*/
/**
 * Actividad 2 Morro
 * Dato: 
 * Interacción: Enchoclar piezas en los huecos
 */
var ActMorro2 = function() {
	this.e_piso = null; // Entidad que se pasa como referencia para el MouseBind
	this.huecos = Array(7);
	this.trampas = Array(6);
	this.totAciertos = 7; // Total de bloques fijados para ganar
	this.aciertos = 0; // Cuenta de aciertos
	this.b2a = new B2arrastre();

	this.init = function() {
		this.crearEntidades();
		this.b2a.init(this.e_piso); // Inicializamos el objeto gestor de arrastre de la escena
		
		Crafty.e("Gesto")
				.Gesto(2, { coords: [449, 570], coordsFin: [578, 300], repetir: 2, retardo: 40, desplX: 180 });
		
		return this;
	};

	// Crea las entidades de esta actividad
	this.crearEntidades = function() {
		Crafty.e("2D, Canvas, Image").image("img/act/morro/2/fondo.jpg");
		Crafty.e("2D, Canvas, Image").image("img/act/morro/2/hierba.png").attr({x: 280, y: 195, z: 6});

		// Cuerpo del piso (dividido en 2 partes por su concavidad)
		this.e_piso = Crafty.e('2D, Canvas, Box2D').attr({x: 0, y: 632})
				.box2d({
					bodyType: 'static',
					shape: [[0, 0], [545, 17], [764, 31], [764, 779], [0, 779]]
				});
		Crafty.e('2D, Canvas, Box2D').attr({x: 0, y: 631})
				.box2d({
					bodyType: 'static',
					shape: [[765, 32], [1280, 8], [1280, 779], [765, 779]]
				});
				
		// Paredes
		Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 0], [1280, 0]]});
		Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 0], [0, 800]]});
		Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[1280, 0], [1280, 800]]});
		this.crearBloques();
	};

	// Retorna un entero aleatorio entre 0 y max
	this.rand = function(max) {
		return Math.floor(Math.random() * (max));
	};

	// Crear los bloques de esta escena
	this.crearBloques = function() {
		this.huecos[0] = Crafty.e("M2Hueco").attr({x: 288, y: 236, z: 5}).M2Hueco(this, 0);
		this.huecos[1] = Crafty.e("M2Hueco").attr({x: 526, y: 245, z: 5}).M2Hueco(this, 1);
		this.huecos[2] = Crafty.e("M2Hueco").attr({x: 381, y: 335, z: 5}).M2Hueco(this, 2);
		this.huecos[3] = Crafty.e("M2Hueco").attr({x: 540, y: 341, z: 5}).M2Hueco(this, 3);
		this.huecos[4] = Crafty.e("M2Hueco").attr({x: 658, y: 247, z: 5}).M2Hueco(this, 4);
		this.huecos[5] = Crafty.e("M2Hueco").attr({x: 821, y: 245, z: 5}).M2Hueco(this, 5);
		this.huecos[6] = Crafty.e("M2Hueco").attr({x: 994, y: 242, z: 5}).M2Hueco(this, 6);

		Crafty.e("M2Bloque").attr({x: this.rand(900), y: 400, z: 10})
				.M2Bloque(this, this.huecos[0], 0, [[102, 0], [255, 7], [215, 87], [73, 176], [0, 168]]);
		Crafty.e("M2Bloque").attr({x: 900, y: this.rand(400), z: 10})
				.M2Bloque(this, this.huecos[1], 1, [[43, 0], [169, 3], [131, 80], [2, 75]]);
		Crafty.e("M2Bloque").attr({x: 25, y: this.rand(400), z: 10})
				.M2Bloque(this, this.huecos[2], 2, [[47, 0], [179, 5], [136, 82], [0, 77]]);
		Crafty.e("M2Bloque").attr({x: this.rand(900), y: 350, z: 10})
				.M2Bloque(this, this.huecos[3], 3, [[43, 1], [109, 1], [294, 47], [278, 81], [1, 77]]);
		Crafty.e("M2Bloque").attr({x: 300, y: 0, z: 10})
				.M2Bloque(this, this.huecos[4], 4, [[63, 0], [192, 1], [135, 127], [0, 123]]);
		Crafty.e("M2Bloque").attr({x: this.rand(900), y: 150, z: 10})
				.M2Bloque(this, this.huecos[5], 5, [[59, 2], [188, 2], [211, 98], [178, 173], [26, 179], [1, 128]]);
		Crafty.e("M2Bloque").attr({x: 200, y: this.rand(400), z: 10})
				.M2Bloque(this, this.huecos[6], 6, [[33, 2], [72, 0], [40, 79], [0, 80]]);

		this.trampas[0] = Crafty.e("M2Bloque").attr({x: 0, y: 50, z: 10}).M2Trampa(this, 0, [[0, 157], [94, 0], [229, 4], [134, 162]]);
		this.trampas[1] = Crafty.e("M2Bloque").attr({x: this.rand(900), y: this.rand(400), z: 10}).M2Trampa(this, 1, [[50, 0], [178, 3], [133, 95], [1, 90]]);
		this.trampas[2] = Crafty.e("M2Bloque").attr({x: this.rand(900), y: 100, z: 10}).M2Trampa(this, 2, [[1, 109], [70, 0], [178, 38], [135, 116]]);
		this.trampas[3] = Crafty.e("M2Bloque").attr({x: 900, y: this.rand(400), z: 10}).M2Trampa(this, 3, [[63, 2], [190, 1], [135, 127], [1, 124]]);
		this.trampas[4] = Crafty.e("M2Bloque").attr({x: this.rand(900), y: 0, z: 10}).M2Trampa(this, 4, [[87, 0], [240, 7], [199, 87], [72, 147], [0, 140]]);
		this.trampas[5] = Crafty.e("M2Bloque").attr({x: this.rand(900), y: 409, z: 10}).M2Trampa(this, 5, [[69, 2], [133, 2], [295, 77], [279, 111], [2, 106]]);
	};

	// Invocada por cada bloque al ser fijado
	this.bloqueFijado = function() {
		this.aciertos++;
		if (this.aciertos >= this.totAciertos) {
			this.ganarActividad();
		}
	},
	
	// Sólo invocada al ganar la actividad
	this.ganarActividad = function ganarActividad() {
		gesActividad.temporizador.parar();

		for (i = 0; i < 6; i++) {
			this.trampas[i].attr({alpha: 1.0}).addTween({alpha: 0.0}, 'linear', 45, function() {
				world.DestroyBody(this.body);
				this.destroy();
			});
		}

		Crafty.e("Delay").delay(function() {
			gesActividad.mostrarPuntaje();
		}, 1500);
		
		return this;
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function terminarActividad() {
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/morro/3/sprites.js*/
function spritesMorro3() {
	Crafty.sprite("img/act/morro/3/piedras.png", {
		sprM3_piedra1: [0, 4, 84, 83],
		sprM3_piedra2: [100, 4, 77, 89],
		sprM3_piedra3: [184, 4, 61, 63],
		sprM3_piedra4: [265, 3, 48, 53],
		sprM3_piedra5: [329, 0, 48, 53],
		sprM3_piedra6: [392, 4, 53, 52],
		sprM3_piedra7: [455, 4, 52, 50],
		sprM3_piedra8: [578, 5, 37, 36],
		sprM3_piedra9: [620, 3, 38, 38],
		sprM3_piedra10: [668, 4, 37, 36],
		sprM3_piedra11: [712, 5, 37, 25],
		sprM3_piedra12: [755, 4, 26, 25],
		sprM3_piedra13: [789, 4, 27, 26],
		sprM3_piedra14: [514, 4, 56, 45],
		sprM3_piedra15: [818, 0, 59, 46], //esta es la piedra que esta en el suelo
		sprM3_vasija: [883, 0, 57, 51],
		sprM3_moneda: [944, 0, 50, 50]
	});

	Crafty.sprite("img/act/morro/3/ventilador.png", {
		sprM3_ventiladorBase: [0, 0, 239, 256],
		sprM3_ventiladorAspa: [242, 0, 185, 185]
	});

	Crafty.sprite("img/act/morro/3/nube.png", {
		sprM3_nube: [0, 0, 631, 168]
	});

	Crafty.sprite(347, 473, "img/act/morro/3/lluvia.png", {
		sprM3_LluviaAnimada: [0, 0]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/morro/3/componentes.js*/

Crafty.c('Nube', {
	ventilador: null,
	velocidadRetorno: 0,
	velocidad: 0,
	e_lluvia: null,
	
	init: function() {
		this.requires('2D, Canvas, sprM3_nube')
				.bind('EnterFrame', function() {
					if (this.x >= -10 && this.x <= 1280 - this.w) {
						this.x -= this.velocidadRetorno;
					}
					if (this.x < 1110 - this.w) {
						this.x += this.velocidad;
					}
				});
		
		this.e_lluvia = Crafty.e("2D, Canvas, sprM3_LluviaAnimada, SpriteAnimation, Tweener")
				.attr({x: this.x + 30, y: this.y + 130, z: 3});
		this.e_lluvia.ocultar = function() {
			this.addTween({ alpha: 0 }, "linear", 5);
		};

		this.e_lluvia.reel("lloviendo", 1000, [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0],
			[0, 1], [1, 1], [2, 1], [3, 1]]);
		this.e_lluvia.animate('lloviendo', -1);
		this.attach(this.e_lluvia);
	},
	pararNube: function(ms) {
		var estaNube = this;
		this.max
		Crafty.e("Delay").delay(function() {
			estaNube.e_lluvia.ocultar();
			estaNube.unbind('EnterFrame');
		}, ms);
		return this;
	}
});

Crafty.c('Piedras', {
	init: function() {
		this.seAplicoFisica = false;
		this.piedras = [];
		//this.nPiedras = 15;
		this.nPiedras = 9;

		this.attrPiedras = [
			{x: 730, y: 269, z: 2, r: 1}, {x: 683, y: 312, z: 2, r: 1.1}, {x: 820, y: 186, z: 2, r: 0.8},
			{x: 695, y: 265, z: 2, r: 0.65}, {x: 758, y: 220, z: 2, r: 0.7}, {x: 774, y: 177, z: 2, r: 0.7},
			{x: 797, y: 239, z: 2, r: 0.6}, {x: 723, y: 240, z: 2, r: 0.5}, {x: 167, y: 574, z: 2, r: 1},
			{x: 735, y: 273, z: 2, r: 1}, {x: 762, y: 250, z: 2, r: 1}, {x: 775, y: 229, z: 2, r: 1}, 
			{x: 674, y: 370, z: 2, r: 1}, {x: 710, y: 284, z: 2, r: 1}, {x: 671, y: 332, z: 2, r: 1}
		];
		
		this.nPiedras = 9;
		
		//dibujar las piedras en las posiciones dadas y asignarles un numero.
		for (var i = 0; i < this.nPiedras; i++) {
			var sprite = 'sprM3_piedra' + (1 + i);
			this.piedras[i] = Crafty.e('2D, Canvas, Box2D, ' + sprite)
									.attr(this.attrPiedras[i]);
			
			var shp = new b2CircleShape(this.attrPiedras[i].r);
			if (i !== this.nPiedras - 1) {
				this.piedras[i].box2d({
					bodyType: 'dynamic',
					shape: shp,
					friction: 1
				});
			}
									
			this.piedras[i].num = 1 + i;
		}

		//dibujar el piso para las piedras
		this.pisoBox2D = Crafty.e('PisoBox2D');
		this.pisoBox2D.coordenadas = [[0,626],[314,592],[443,601],[522,598],[576,545],[781,350],[910,187],[1108,0]];
		this.pisoBox2D.dibujarPiso();
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/morro/3/actividad.js*/
// Actividad lluvia

var ActMorro3 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 0;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	
	this.velocidadAngular = 1; //velocidad angular de ventilador
	this.aceleracionFriccion = -0.09; //aceleracion friccion
	this.nubeVelocidadRetorno = 1; //velocidad con la que se devuelve la nube
	this.nubeMaxX = 870; // Cuando la nube llega a esta posición se gana la interacción
	this.e_vasija = null;
	this.e_moneda = null;
          
	this.init = function() {
		//colocar fondo de actividad
		Crafty.e('Fondo').image(gesActividad.config.fondo);
		
		// primer plano
		Crafty.e("2D, Canvas, Image").attr({ y:3, z:20 }).image("img/act/morro/3/capa-suelo.png");

		//dibujar el ventilador y su base
		this.ventilador = Crafty.e('Ventilador, sprM3_ventiladorAspa')
								.attr({x: 39, y: 226, z: 1});
		this.ventilador.va = this.velocidadAngular;
		this.ventilador.af = this.aceleracionFriccion;
		this.ventilador.base = Crafty.e('2D, Canvas, sprM3_ventiladorBase');
		this.ventilador.baseY = 4;
		this.ventilador.arrancar();

		//Dibujar las piedras que se ubican en la colina
		this.piedras = Crafty.e('Piedras');
		
		// Vasija y moneda
		this.e_vasija = Crafty.e("Canvas, 2D, sprM3_vasija, Tweener").attr({ x: 750, y: 300, z: 1, rotation: -40 });
		this.e_moneda = Crafty.e("Canvas, 2D, sprM3_moneda, Tweener").attr({ x: 810, y: 227, z: 1, rotation: -40 });
		
		//Dibujar la nube y asignar el ventilador que lo sopla
		this.nube = Crafty.e('Nube');
		this.nube.e_padre = this; // Referencia al objeto creador
		var nubeMaxX = this.nubeMaxX;
		
		this.nube.attr({x: -10, y: 18, z: 2})
					.bind('EnterFrame', function() {
						//con esta velocidad la nube avanza
						this.velocidad = this.e_padre.ventilador.va / 2.0;
						//con el acierto de esta condicion se gana la actividad
						if (this.x + 397 >= nubeMaxX) {
							this.unbind("EnterFrame");
							this.e_padre.ganarActividad();
						}
					});
		this.nube.velocidadRetorno = this.nubeVelocidadRetorno;
		
		Crafty.box2D.pause(); // suspendemos la física hasta que se gane la partida
		
		Crafty.e("Gesto")
				.Gesto(3, { coords: [132, 321], duracion: 155, retardo: 40, radio: 100 });
		
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		this.ventilador.bloquear();
		
		var self = this;
		setTimeout(function() {
			self.e_vasija.addTween({ x: self.e_vasija._x - 20, y: self.e_vasija._y - 10}, "easeOutCubic", 100);
			self.e_moneda.addTween({ x: self.e_moneda._x - 10, y: self.e_moneda._y - 20}, "easeOutCubic", 100);
		}, 2000);

		Crafty.box2D.unpause();
		this.nube.pararNube(100);

		setTimeout(function() {
			gesActividad.mostrarPuntaje();
		}, 4000);
	};
	
	//se ejecuta cuando se pierde la actividad por el tiempo, para evitar que el componente de lluvia siga avanzando
	this.terminarActividad = function(){
		//parar la nube para que no siga avanzando y no permita que se ejecute "this.ganarActividad()"
		this.nube.unbind("EnterFrame");
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/morro/4/sprites.js*/
function spritesMorro4() {
	Crafty.sprite("img/act/morro/4/calaca.png", {
		sprM4_calavera: [18, 59, 73, 75],
		sprM4_hueco: [115, 74, 96, 65]
	});

	Crafty.sprite("img/act/morro/4/morrito.png", {
		sprM4_morrito: [0, 0, 106, 189]
	});

	Crafty.sprite(150, 288, "img/act/morro/4/numeros.png", {
		sprM4_numero: [0, 0]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/morro/4/componentes.js*/
Crafty.c("Morrito", {
	nid: 0, // Identificador del morrito, util para debugging
	yIni: 0, // Posición y inicial
	trampa: false, // True si este morrito es trampa
	e_hueco: null,
	e_calaca: null,
	e_puntaje: null, // Referencia a la entidad que administra el puntaje y los eventos de morritos
	bloqueado: false, // true para evitar que el morrito responda a eventos de mouse
	arrancado: false, // true cuando este morrito ha sido arrancado
	objPartic: null, // Referencia al generador de partículas
	
	init: function() {
		this.requires('2D, Canvas, Mouse, sprM4_morrito, SpriteAnimation, Tweener');
		this.e_hueco = Crafty.e('2D, Canvas, sprM4_hueco').attr({ visible: false });
		this.e_calaca = Crafty.e('2D, Canvas, sprM4_calavera, Tweener').attr({ visible: false });
		this.reel("saleRaiz", 250, [[0,0],[106,0],[212,0],[318,0],[424,0],[530,0]]);
		
		this.areaMap(new Crafty.polygon([5,66], [61,25], [109,86], [101,118], [28,119]));
		this.bind('MouseUp', this.arrancar);
	},
	
	Morrito: function(nid, e_punt, yIni, objPart) {
		this.objPartic = objPart;
		this.nid = nid;
		this.e_puntaje = e_punt;
		this.yIni = yIni;
		return this;
	},
	
	// Arranca este morrito de la tierra
	arrancar: function() {
		if (!this.bloqueado) {
			//mostrar entidades de hueco y calavera
			this.e_hueco.visible = true;
			if (!this.trampa) this.e_calaca.visible = true;

			// Disparar partículas
			this.objPartic.y = this._y + 30;
			this.objPartic.x = this._x;
			this.objPartic.iniciar();
					
			//animar morrito, direccion de movimiento
			this.bloqueado = true;
			this.animate("saleRaiz", 1);
			this.addTween({ y: (this.yIni - 150), alpha: 0 }, 'easeOutCubic', 35, function() {	
				if (!this.trampa) {
					this.e_calaca.addTween({ y: (this.e_calaca.y - 20) }, 'easeOutCubic', 15);
					this.arrancado = true;
				}
				this.visible = false;
				this.e_puntaje.reportarArranque(this);
			});
		}
	},
	
	// Configura este morrito como una trampa
	esTrampa: function() {
		this.trampa = true;
		return this;
	},
	
	// Vuelve a enterrar este morrito
	enterrar: function() {
		this.arrancado = false;
		this.visible = true;
		this.reelPosition(0).pauseAnimation();
		this.e_calaca.addTween({ y: (this.e_calaca.y + 20) }, 'easeInCubic', 10);
		this.addTween({ y: this.yIni, alpha: 1 }, 'easeInCubic', 15, function() {
			this.e_hueco.visible = false;
			this.e_calaca.visible = false;
			this.bloqueado = false;
		});
		return this;
	}
});


Crafty.c('Puntaje', {
	numFaltan: 0, // Calaveras que faltan por desenterrar
	morritos: null, // referencia al arreglo de morritos
	numArrancados: 0, // cuenta morritos ya arrancados
	maxEnterrar: 3, // número máximo de morritos a volver a enterrar
	_padre: null,
	
	init: function() {
		this.requires("2D");
	},
	
	Puntaje: function(padre, numIni) {
		this._padre = padre;
		this.morritos = padre.morritos;
		this.numFaltan = numIni;
		this.actualizar();
	},
	
	// Reportarle a esta entidad que se ha arrancado un morrito
	// esTrampa es TRUE si se arrancó una trampa
	reportarArranque: function(morro) {
		var esTrampa = morro.trampa;
		
		if (!esTrampa) {
			// acierto!
			if (this.numFaltan > 0) this.numFaltan--;
			this.numArrancados++;
			
			if (this.numFaltan === 0) {
				this._padre.ganarActividad();
			}
		}
		else {
			// trampa: volver a enterrar este morro y otros 3 destapados aleatorios
			var i;
			
			morro.enterrar();
			
			var numEnterrar = (this.numArrancados > this.maxEnterrar) ? 3 : this.numArrancados;
			var morroTemp;
			
			// Enterrar <numEnterrar> morritos
			for (i = 0 ; i < numEnterrar ; i++) {
				// Encontrar un morrito aleatorio arrancado
				do {
					morroTemp = this.morritos[randomInt(0, 17)];
				} while (!morroTemp.arrancado);
				morroTemp.enterrar();
				this.numArrancados--;
				this.numFaltan++;
			}
		}
		
		this.actualizar();
	},
	
	actualizar: function() {
		Crafty("PuntajeLetra").destroy();
		var numString = this.numFaltan + '';
		for (var i = 0; i < numString.length; i++) {
			var letra = Crafty.e('PuntajeLetra, 2D, Canvas, Sprite, sprM4_numero, PosicionXY');
			letra.attr({x: this._x + (letra.w * i), y: this._y, z: this._z});
			letra.sprite(numString[i], 0);
		}
		
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/morro/4/actividad.js*/
var ActMorro4 = function() {
	this.totAciertos = 0; //con esta cantidad se gana la actividad
	this.duracion = 0;
	this.attrsMorritos = null;
	this.animacionActiva = false;
	this.e_puntaje = null;
	this.numTrampas = 4; // Número de morritos trampa
	this.morritos = []; // Arreglo con entidades de morritos
	this.particulas = null;
	    
    this.init = function() {
		Crafty.e('Fondo').image(gesActividad.config.fondo);
		Crafty.e('2D, Canvas, Image')
				.attr({ z: 2 })
				.image('img/act/morro/4/montana.png');
		
		this.e_puntaje = Crafty.e('Puntaje').attr({ x: 960, y: 21, z: 1 });
		this.e_puntaje.numero = 14;

		this.particulas = new Particulas({
			componentes: "spr_polvo, SpriteAnimation",
			x: 480, y: 440, z: 600,
			vx: 0,
			deltaVx: 2,
			periodo: 90,
			deltaOriY: 70, deltaOriX: 90,
			numParticulas: 3,
			magnitud: 10,
			duracion: 33,
			atenuacion: 12,
			f_crear: function(ent) {
				ent.reel("giro", 400, [[0, 0], [32, 0], [64, 0], [96, 0]]).animate("giro", -1);
			}
		});

		//posiciones de los morritos
		this.attrsMorritos = [
			{x: 114, y: 166, z: 5}, {x: 244, y: 156, z: 5}, {x: 375, y: 139, z: 5},
			{x: 502, y: 122, z: 5}, {x: 622, y: 101, z: 5}, {x: 745, y: 83, z: 5},
			{x: 118, y: 297, z: 5}, {x: 275, y: 291, z: 5}, {x: 419, y: 283, z: 5},
			{x: 564, y: 258, z: 5}, {x: 711, y: 234, z: 5}, {x: 866, y: 227, z: 5},
			{x: 146, y: 458, z: 5}, {x: 314, y: 460, z: 5}, {x: 479, y: 435, z: 5},
			{x: 651, y: 422, z: 5}, {x: 803, y: 398, z: 5}, {x: 954, y: 371, z: 5}
		];
		
		var attrs;
		var objPart = this.particulas;
		
		for (i = 0; i < 18; i++) {
			attrs = this.attrsMorritos[i];
			var m = Crafty.e('Morrito')
							.Morrito(i, this.e_puntaje, attrs.y, this.particulas)
							.attr(attrs);
			m.attr0 = attrs;
			
			//posicionar el hueco y la calavera
			m.e_hueco.attr({ x: attrs.x + 5, y: attrs.y + 60, z: 4 });
			m.e_calaca.attr({ x: attrs.x + 20, y: attrs.y + 35, z: 4 });
			
			this.morritos.push(m);
		}
		
		// Elegimos las posiciones de las trampas y las almacenamos en un arrray
		var arrPosTrampas = Array(this.numTrampas);
		var i, posTrampa;
		for (i = 0 ; i < this.numTrampas ; i++) {
			do {
				posTrampa = randomInt(0, 17);
			} while (arrPosTrampas.indexOf(posTrampa) > -1);
			arrPosTrampas[i] = posTrampa;
		}
		
		// Establecemos las trampas
		for (i = 0 ; i < this.numTrampas ; i++) {
			this.morritos[arrPosTrampas[i]].esTrampa();
		}
		
		this.e_puntaje.Puntaje(this, 14); // Inicializamos el objeto puntaje
		
		Crafty.e("Gesto")
				.Gesto(1, { coords: [166, 245], duracion: 150, retardo: 40, deltaX: 130, deltaY: -13 });
		
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
	};

	//se invoca cuando se termina el tiempo, se gana o se pierde la actividad
	this.terminarActividad = function() {
		return this;
	};
};

/*C:\uniserver\www\hdp\public_html\src/act/morro/5/sprites.js*/
function spritesMorro5() {
	Crafty.sprite(1280, 301, "img/act/morro/5/pasto.png", {
		sprM5_pasto: [0, 0]
	});
	Crafty.sprite("img/act/morro/5/ganchos.png", {
		sprM5_ganchos: [0, 0, 570, 1045]
	});
	Crafty.sprite("img/act/morro/5/fondo.jpg", {
		sprM5_fondo: [0, 0, 1280, 1174]
	});
	Crafty.sprite("img/act/morro/5/manivela.png", {
		sprM5_manivela: [0, 0, 186, 208]
	});
	Crafty.sprite("img/act/morro/5/polea_fuerza.png", {
		sprM5_poleaFuerza: [0, 0, 186, 186]
	});
	Crafty.sprite("img/act/morro/5/palanca.png", {
		sprM5_palanca: [0, 0, 43, 146]
	});
	Crafty.sprite("img/act/morro/5/vasija.png", {
		sprM5_vasija: [0, 0, 100, 186]
	});
	Crafty.sprite("img/act/morro/5/vasija_sola.png", {
		sprM5_vasijaSola: [0, 0, 100, 186]
	});
	Crafty.sprite("img/act/morro/5/cuerda_vasija.png", {
		sprM5_cuerda: [0, 0, 23, 685]
	});
	Crafty.sprite(23, 685, "img/act/morro/5/cuerda_prueba.png", {
		sprM5_cuerdaAnimada: [0, 0]
	});
	Crafty.sprite(23, 440, "img/act/morro/5/cuerda_prueba.png", {
		sprM5_cuerdaEntrePoleasAnimada: [0, 0]
	});

	Crafty.sprite("img/act/morro/5/vasija_rota.png", {
		sprM5_vasijaRota1: [0, 0, 93, 54],
		sprM5_vasijaRota2: [18, 55, 57, 38],
		sprM5_vasijaRota3: [18, 94, 58, 51],
		sprM5_vasijaRota4: [0, 145, 93, 59],
		sprM5_vasijaRota5: [16, 205, 61, 35],
		sprM5_vasijaRota6: [16, 240, 61, 47],
	});

	Crafty.sprite(58, 110, "img/act/morro/5/secuencia_cuerda.png", {
		sprM5_nudo: [0, 0]
	});

	Crafty.sprite("img/act/morro/5/piedras.png", {
		sprM5_piedra1: [0, 51, 47, 25],
		sprM5_piedra2: [46, 0, 114, 76],
		sprM5_piedra3: [159, 36, 67, 40],
		sprM5_piedra4: [225, 30, 63, 46]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/morro/5/componentes.js*/
Crafty.c("Vasija", {
	cuerpoVasija: null,
	mJoint: null,
	cuerda: null,
	polea: null,
	e_nudo: null,
	e_vasijaSola: null, // Vasija que se muestra sola, sin romperse
	suelta: false, // true al soltarse, bandera para evitar bucles
		
	init: function() {
		this.requires('2D, Canvas, sprM5_vasija');
		this.origin(52,15);
		
		this.e_nudo = Crafty.e("2D, Canvas, SpriteAnimation, sprM5_nudo");
		this.e_nudo.reel('soltarse', 800, [
			[0, 0], [1, 0], [2, 0], [3, 0],
			[4, 0], [3, 0], [2, 0], [3, 0],
			[4, 0], [3, 0], [4, 0]
		]);
		
		this.e_nudo.visible = false;
	},
	
	Vasija: function(attr, attrNudo, polea, cuerda, cuerdaEntrePoleas, padre) {
		this.attr(attr);
		this.e_nudo.attr(attrNudo);
		this.polea = polea;
        this.cuerda = cuerda;
        this.cuerdaEntrePoleas = cuerdaEntrePoleas;
        this.actividad = padre;
		
		this.cuerda.attach(this.e_nudo);
		this.e_nudo.y = this.cuerda.h + 233;
		
		return this;
	},
	
	//disminuir tamaño de la cuerda, subir vasija y verificar momento de romper la vasija
	aumentar: function(fuerza) {
		var pot = 5;
		fuerza *= pot;
		if (fuerza > 0) {
			if (this.cuerda.h - fuerza > 0 &&
					this.cuerda.h - fuerza < this.cuerda.maxH &&
					this.y - fuerza > 44) {
				this.cuerda.y -= fuerza;
				this.cuerdaEntrePoleas.resumeAnimation();
				this.y -= fuerza;
			}
			if (this.visible) {
				this.actualizarJoint();
				if (fuerza > 0.8 * pot) { //2 maximo
					if (!this.suelta) this.soltarse();
				}
			}
		}
	},
	//aumentar tamaño de la cuerda y bajar vasija
	disminuir: function() {
		if (this.y + 5 < 645) {
			this.polea.rotation -= 1;
			this.y += 2;
			this.actualizarJoint();
		}
		else {
			this.cuerda.pauseAnimation();
			this.cuerdaEntrePoleas.pauseAnimation();
		}
		if (this.cuerda.y < -25) {
			this.cuerda.y += 2;
		}
	},
	
	//colocar el cuerpo respecto a la vasija
	actualizarJoint: function() {
		this.cx = (this._x + 51) / 32;
		this.cy = (this._y + 20) / 32;
		this.mJoint.SetTarget(new b2Vec2(this.cx, this.cy));
		this.rotation = Crafty.math.radToDeg(this.cuerpoVasija.body.GetAngle());
		
		if (this.y < 90) {
			this.actividad.ganarActividad();
			this.actualizarJoint = function() {
			};
		}
	},
	
	soltarse: function() {
		this.suelta = true;
		this.e_nudo.visible = true;
		this.e_nudo.animate('soltarse', 1);
		
		this.removeComponent("sprM5_vasija").addComponent("sprM5_vasijaSola");
		
		this.bind('EnterFrame', function() {
			this.x = this.cuerpoVasija._x;
			this.y = this.cuerpoVasija._y - 60;
			
			if (this._y > 520) {
				this.unbind('EnterFrame');
				this.romperse();
			}
		});
		
		world.DestroyJoint(this.mJoint);
	},
	
	//accion que se ejecuta cuando se rompe la vasija, mostrar fragmentos de vasija
	romperse: function() {
		Crafty.box2D.world.DestroyBody(this.cuerpoVasija.body);
		this.cuerpoVasija.destroy();

		this.visible = false;
		var yRomp = this._y;
		var xRomp = this._x;
		var attrVasijaRota = [
			{x: xRomp + 2, y: yRomp + 27, z: 2}, {x: xRomp, y: yRomp + 75, z: 2},
			{x: xRomp + 40, y: yRomp + 72, z: 2}, {x: xRomp + 2, y: yRomp + 102, z: 2},
			{x: xRomp + 34, y: yRomp + 121, z: 2}, {x: xRomp + 22, y: yRomp + 135, z: 2}
		];
		var attrShapeVasija = [
			[[0, 51], [34, 0], [63, 0], [92, 50]],
			[[3, 1], [54, 8], [43, 37], [0, 25]],
			[[11, 7], [54, 1], [53, 50], [0, 39]],
			[[0, 0], [92, 23], [19, 57]],
			[[0, 16], [57, 0], [45, 32]],
			[[0, 17], [16, 0], [61, 15], [29, 49]]
		];
		var v = new Array(6);
		var i;
		for (i = 0 ; i < 6 ; i++) {
			console.log("crear entidad")
			v[i] = Crafty.e("2D, Canvas, sprM5_vasijaRota" + (1 + i) + ", Box2D");
			v[i].attr(attrVasijaRota[i]);
			v[i].box2d({
				bodyType: 'dynamic',
				shape: attrShapeVasija[i],
				friction: 0.3
			});
			v[i].body.ApplyImpulse({x: (i % 2 == 0 ? 5 : -5), y: -2}, v[i].body.GetWorldCenter());
		}

		
		Crafty.e("Delay").delay(function() {
			gesActividad.mostrarPerdiste();
		}, 2000);
			
	/*
		};
		
		var polygon = new Crafty.polygon([0, 77], [49, 22], [102, 84], [61, 186], [39, 186]);
		
		
		this.e_vasijaSola.collision(polygon)
				.onHit('piedraCollision', this.romperse));
		
		Crafty.e("Delay").delay(function() {
			gesActividad.mostrarPerdiste();
		}, 2000);
		*/
	},

	//crear un cuerpo box2d, que simula el volumen de la vasija.
	crearVolumen: function() {
		this.cuerpoVasija = Crafty.e("2D, Canvas, Box2D")
				.attr({x: this.x, y: this.y + 65, z: 2})
				.box2d({
					bodyType: 'dynamic',
					shape: [[20, 0], [46, 0], [81, 0], [100, 16],[93, 64], [75, 102], [49, 121],[31, 106], [3, 49], [1, 20]],		
					density: 1,
					restitution: 0
				});
		
		var ljd = new Box2D.Dynamics.Joints.b2MouseJointDef();
		ljd.bodyA = Crafty.box2D.world.GetGroundBody();
		ljd.bodyB = this.cuerpoVasija.body;
		var tx = this._x + 51;
		var ty = this._y + 25;
		ljd.target = new b2Vec2(tx / 32, ty / 32);
		ljd.collideConnected = true;
		ljd.maxForce = 1000.0 * this.cuerpoVasija.body.GetMass();
		ljd.dampingRatio = 0;
		this.mJoint = Crafty.box2D.world.CreateJoint(ljd);
		this.cuerpoVasija.body.SetAwake(true);
	},
	
	// Detiene la interacción
	detener: function() {
		this.unbind('EnterFrame');
		return this;
	}
});


Crafty.c('CuerdaAnimada', {
	init: function() {
		this.requires('2D, Canvas, SpriteAnimation');
		this.reel('cuerdaAnimada', 500, [[0, 0], [1, 0], [2, 0], [1, 0]]);
		this.animate('cuerdaAnimada', -1);
		this.pauseAnimation();
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/morro/5/actividad.js*/
var ActMorro5 = function() {
    //con esta cantidad se gana la actividad
    this.totAciertos = 0;
    //tiempo en que se cambia de un topo a otro (milisegundos)
    this.duracion = 0;
    //si se ha ganado la actividad
    this.actividadGanada = false;

    this.init = function() {
        this.attrPasto = {x: 0, y: 1174 - 301, z: 3};
        this.attrComplementoPolea = {x: 664, y: 0, z: 4};
        this.attrPolea = {x: 926, y: 516, z: 10};
        this.attrCuerda = {x: 688, y: 277, z: 1};
        this.attrCuerdaEntrePoleas = {x: 750, y: 262, z: 1};
        this.attrVasija = {x: 648, y: 940, z: 2};
        this.attrNudo = {x: 669, y: 920, z: 2};
        this.polPasto = new Crafty.polygon([
            [4, 245], [637, 125], [695, 135], [777, 108],
            [1102, 78], [1274, 78], [1274, 300], [3, 300]]);
		
        this.coordPisoBox2D = [
            [126, 794], [360, 749], [637, 704],
            [686, 716], [709, 715], [766, 690],
            [966, 671], [1164, 657], [1271, 655]
        ];

        var posp = 305;
        this.attrPiedras = [
            {x: 516, y: posp + 690, z: 2}, {x: 566, y: posp + 635, z: 2},
            {x: 669, y: posp + 630, z: 2}, {x: 732, y: posp + 645, z: 2}
        ];
        this.attrShapePiedras = [
            [[1, 5], [8, 1], [24, 0], [45, 13], [45, 20], [39, 22], [10, 24], [0, 15]],
            [[2, 61], [35, 15], [65, 0], [82, 2], [109, 19], [113, 38], [91, 64], [50, 76], [8, 72]],
            [[19, 2], [48, 3], [65, 11], [67, 16], [59, 28], [40, 39], [24, 40], [7, 34], [1, 25]],
            [[2, 22], [20, 4], [49, 5], [64, 23], [50, 37], [11, 46], [1, 41]]
        ];

        this.fondo = Crafty.e("2D, Canvas, sprM5_fondo, Tweener");

        this.pasto = Crafty.e('2D, Canvas, sprM5_pasto')
                .attr(this.attrPasto);

        this.complementoPolea = Crafty.e("2D, Canvas, sprM5_ganchos")
                .attr(this.attrComplementoPolea);

        this.polea = Crafty.e('Ventilador, sprM5_manivela');
        this.polea.attr(this.attrPolea).origin(89, 118);
        this.polea.va = 4; //this.velocidadAngular;
        this.polea.af = -0.1; //this.aceleracionFriccion;
        this.polea.base = Crafty.e('2D, Canvas');

        this.cuerda = Crafty.e('sprM5_cuerdaAnimada')
                .addComponent('CuerdaAnimada')
                .attr(this.attrCuerda);
        this.cuerda.maxH = this.cuerda.h;

        this.cuerdaEntrePoleas = Crafty.e('sprM5_cuerdaEntrePoleasAnimada')
                .addComponent('CuerdaAnimada')
                .attr(this.attrCuerdaEntrePoleas);
        this.cuerdaEntrePoleas.rotation = -39;

        this.vasija = Crafty.e('Vasija')
							.Vasija(this.attrVasija, this.attrNudo, this.polea, this.cuerda, this.cuerdaEntrePoleas, this);

        Crafty.e('2D, Canvas, Box2D')
			.box2d({
				bodyType: 'static',
				shape: [[336,749],[641,699],[641,800],[336,800]]
			});
		
		Crafty.e('2D, Canvas, Box2D')
			.box2d({
				bodyType: 'static',
				shape: [[751,684],[1014,659],[1014,800],[751,800]]
			});

        this.piedras = [];
        for (var i = 0; i < 4; i++) {
            this.piedras[i] = Crafty.e('2D, Canvas, piedraCollision,  Collision, sprM5_piedra' + (1 + i));
            this.piedras[i].attr(this.attrPiedras[i]);
            this.fondo.attach(this.piedras[i]);
        }

        this.fondo.attach(this.pasto);
        this.fondo.attach(this.complementoPolea);
        this.fondo.attach(this.polea);
        this.fondo.attach(this.cuerda);
        this.fondo.attach(this.cuerdaEntrePoleas);
        this.fondo.attach(this.vasija);

        this.fondo.attrShapePiedras = this.attrShapePiedras;
        this.fondo.piedras = this.piedras;
        this.fondo.vasija = this.vasija;
        this.fondo.polea = this.polea;
        //animacion principal y colocar piedras con fisica//200
        this.fondo.addTween({x: this.fondo.x, y: this.fondo.y - 301}, 'easeInOutCubic', 200, this.asignarFisica);
        
		var e_fondo = this.fondo;
		var eg = Crafty.e("Gesto")
				.Gesto(3, { coords: [1012, 632], duracion: 155, retardo: 40, radio: 90, desplY: -2.5 });
		
		return this;
    };

    this.asignarFisica = function() {
        for (var i = 0; i < this.attrShapePiedras.length; i++) {
            this.piedras[i].addComponent('Box2D');
            this.piedras[i].box2d({
                bodyType: 'dynamic',
                shape: this.attrShapePiedras[i],
                friction: 0.3,
                density: 1.2,
				restitution: 0.1
            });
            this.piedras[i].collision(new Crafty.polygon(this.attrShapePiedras[i]));
        }

        this.vasija.crearVolumen();
        this.polea.barra = this.vasija;
        this.polea.arrancar();
        this.polea.origin(89, 118);
    };

    this.ganarActividad = function() {
        gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		this.terminarActividad();
    };

    // tareas finales
    this.terminarActividad = function() {
		this.vasija.detener();
		this.polea.bloquear();
        return this;
    };
};
/*C:\uniserver\www\hdp\public_html\src/act/morro/6/sprites.js*/
function spritesMorro6() {
	Crafty.sprite("img/act/morro/6/spr-piezas.png", {
		// nombrado: spr_M6f<num. fila de abajo a arriba, de 0 a 4>c<num. columna de 0 a 6>
		sprM6_f0c0: [0, 0, 76, 47],
		sprM6_f1c1: [0, 62, 156, 99],
		sprM6_f0c1: [0, 162, 173, 69],
		sprM6_f3c2: [0, 232, 169, 50],
		sprM6_f2c2: [0, 284, 173, 45],
		sprM6_f1c2: [0, 330, 173, 59],
		sprM6_f0c2: [0, 390, 173, 70],
		sprM6_f4c3: [0, 461, 84, 21],
		sprM6_f3c3: [0, 475, 113, 55],
		sprM6_f2c3: [0, 531, 173, 55],
		sprM6_f1c3: [0, 587, 173, 67],
		sprM6_f0c3: [0, 655, 173, 75],
		sprM6_f3c4: [0, 731, 78, 43],
		sprM6_f2c4: [0, 775, 103, 26],
		sprM6_f1c4: [0, 802, 173, 72],
		sprM6_f0c4: [0, 875, 173, 66],
		sprM6_f0c5: [0, 946, 100, 85]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/morro/6/componentes.js*/
/**
 * Componentes de Morro - Actividad 6
 */

// Bloque arrastable con soporte de física
Crafty.c("M6Bloque", {
	fila: 0, // Posición del bloque en el monte (fila 0-3, col 0-5)
	col: 0,
	b2shape: null, // Arreglo de posiciones [x,y] relativas a la entidad. Describe el polígono de colisión
	callbackDestroy: null, // Función de callback al destruir este objeto
	_padre: null, // Referencia al objeto creador

	init: function() {
		this.requires("B2arrastre");
		this.arrastrable = true;

		this.bind("EnterFrame", function() {
			if (this.fueraDePantalla()) {
				world.DestroyBody(this.body);
				this.destroy();
				this._padre.saleBloque(this.fila, this.col);
			}
		});

		return this;
	},
	fueraDePantalla: function() {
		return (this._x > (Crafty.viewport._width + 180) || this._x < -(this._w + 180) || this._y > 800);
	},
	
	M6Bloque: function(objPadre, nFila, nCol, b2shape) {
		this._padre = objPadre;
		this.fila = nFila;
		this.col = nCol;
		this.requires("sprM6_f" + nFila + "c" + nCol);
		if (b2shape.length > 0) {
			this.b2shape = b2shape;
			this.box2d({
				bodyType: 'dynamic',
				density: 0.000001,
				friction: 0.5,
				restitution: 0.2,
				shape: this.b2shape
			});
		}
		this.body.SetAngularDamping(3);
		
		this.B2arrastre(this._padre.b2a);
		
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/morro/6/actividad.js*/
/**
 * Actividad 6 Morro
 * Dato: 
 * Interacción: Remover las piezas de la cima del morro
 */

var ActMorro6 = function() {

	//si se ha ganado la actividad
	this.actividadGanada = false;

	// Arreglos de entidades de las 6 columnas de piezas
	this.arrCol0 = Array(1);
	this.arrCol1 = Array(2);
	this.arrCol2 = Array(4);
	this.arrCol3 = Array(4);
	this.arrCol4 = Array(4);
	this.arrCol5 = Array(1);

	this.numBloques = 16; // Cuántos bloques hay en la pantalla
	this.e_estatua = null; // Estatua de belalcazar
	this.e_sombra = null; // Sombra de la estatua de belalcazar
	this.e_guias = null; // Guías de bloques
	this.e_piso = null; // Entidad que se pasa como referencia para el MouseBind
	
	this.b2a = new B2arrastre(); // objeto gestor de arrastre de la escena

	this.init = function() {
		this.crearEntidades();
		this.b2a.init(this.e_piso);
		
		Crafty.e("Gesto")
				.Gesto(2, { coords: [590, 420], coordsFin: [600, 120], repetir: 2, retardo: 40, desplX: 130 });
		
		return this;
	};

	// Crea las entidades de esta actividad
	this.crearEntidades = function() {
		Crafty.e("2D, Canvas, Image").image("img/act/morro/6/fondo.jpg");
		var e_morro = Crafty.e("2D, Canvas, Image,Tween")
				.image("img/act/morro/6/morro-base.png")
				.attr({y: 450, z: 10});

		// Cuerpo del piso (dividido en 2 partes por su concavidad)
		this.e_piso = Crafty.e('2D, Canvas, Box2D').attr({x: 0, y: 0})
				.box2d({
					bodyType: 'static',
					shape: [[0, 595], [217, 463], [251, 458], [522, 452], [798, 462], [798, 800], [0, 800]]
				});
		Crafty.e('2D, Canvas, Box2D').attr({x: 0, y: 0})
				.box2d({
					bodyType: 'static',
					shape: [[798, 462], [1035, 456], [1093, 456], [1146, 471], [1280, 567], [1280, 800], [798, 800]]
				});
		
		// tapa en el techo
		Crafty.e('2D, Canvas, Box2D').attr({x: 0, y: 0})
				.box2d({
					bodyType: 'static',
					shape: [[0, 0], [1280, 0]]
				});

		this.crearBloques();

		this.e_guias = Crafty.e("2D, Canvas, Image, Tween")
				.image("img/act/morro/6/guia.png")
				.attr({x: 125, y: 140, z: 15, alpha: 1.0});

		this.e_estatua = Crafty.e("2D, Canvas, Image, Tweener")
				.image("img/act/morro/6/estatua.png")
				.attr({x: 333, y: 460, z: 6});
		this.e_estatua.visible = false;

		this.e_sombra = Crafty.e("2D, Canvas, Image, Tween")
				.image("img/act/morro/6/sombra.png")
				.attr({x: 355, y: 450, z: 15, alpha: 0.0});
		this.e_sombra.visible = false;
	};

	// Crear los bloques de esta escena (invocada por crearActividades)
	this.crearBloques = function() {
		this.arrCol0[0] = Crafty.e("M6Bloque").attr({x: 245, y: 409}).M6Bloque(this, 0, 0, [[0, 47], [75, 1], [75, 45]]);
		this.arrCol1[0] = Crafty.e("M6Bloque").attr({x: 321, y: 387}).M6Bloque(this, 0, 1, [[1, 22], [22, 8], [170, 1], [170, 62], [0, 67]]);
		this.arrCol2[0] = Crafty.e("M6Bloque").attr({x: 490, y: 385}).M6Bloque(this, 0, 2, [[1, 3], [171, 1], [172, 68], [0, 65]]);
		this.arrCol3[0] = Crafty.e("M6Bloque").attr({x: 661, y: 386}).M6Bloque(this, 0, 3, [[2, 0], [171, 10], [172, 76], [2, 69]]);
		this.arrCol4[0] = Crafty.e("M6Bloque").attr({x: 831, y: 392}).M6Bloque(this, 0, 4, [[1, 1], [172, 2], [172, 60], [1, 68]]);
		this.arrCol5[0] = Crafty.e("M6Bloque").attr({x: 1004, y: 370}).M6Bloque(this, 0, 5, [[1, 1], [98, 82], [0, 84]]);

		this.arrCol1[1] = Crafty.e("M6Bloque").attr({x: 343, y: 297}).M6Bloque(this, 1, 1, [[3, 97], [149, 0], [149, 92]]);
		this.arrCol2[1] = Crafty.e("M6Bloque").attr({x: 490, y: 331}).M6Bloque(this, 1, 2, [[1, 1], [171, 1], [171, 55], [1, 57]]);
		this.arrCol3[1] = Crafty.e("M6Bloque").attr({x: 661, y: 332}).M6Bloque(this, 1, 3, [[2, 1], [171, 1], [171, 65], [2, 56]]);
		this.arrCol4[1] = Crafty.e("M6Bloque").attr({x: 831, y: 330}).M6Bloque(this, 1, 4, [[1, 3], [102, 1], [171, 43], [171, 66], [1, 68]]);

		this.arrCol2[2] = Crafty.e("M6Bloque").attr({x: 492, y: 289}).M6Bloque(this, 2, 2, [[2, 5], [170, 2], [170, 44], [2, 44]]);
		this.arrCol3[2] = Crafty.e("M6Bloque").attr({x: 663, y: 278}).M6Bloque(this, 2, 3, [[2, 12], [60, 2], [170, 24], [170, 51], [2, 53]]);
		this.arrCol4[2] = Crafty.e("M6Bloque").attr({x: 832, y: 305}).M6Bloque(this, 2, 4, [[1, 1], [76, 2], [103, 22], [2, 24]]);

		this.arrCol2[3] = Crafty.e("M6Bloque").attr({x: 496, y: 250}).M6Bloque(this, 3, 2, [[0, 43], [56, 6], [71, 1], [91, 1], [120, 13], [163, 38]]);
		this.arrCol3[3] = Crafty.e("M6Bloque").attr({x: 722, y: 250}).M6Bloque(this, 3, 3, [[2, 28], [34, 6], [61, 1], [89, 7], [110, 16], [110, 52]]);
		this.arrCol4[3] = Crafty.e("M6Bloque").attr({x: 832, y: 268}).M6Bloque(this, 3, 4, [[1, 1], [74, 40], [1, 38]]);

		/*this.arrCol0[0].arrastrable = true;
		 this.arrCol1[1].arrastrable = true;
		 this.arrCol2[3].arrastrable = true;
		 this.arrCol3[3].arrastrable = true;
		 this.arrCol4[3].arrastrable = true;
		 this.arrCol5[0].arrastrable = true;*/

	};

	// Sólo invocada al ganar la actividad
	this.ganarActividad = function ganarActividad() {
		gesActividad.temporizador.parar();
		
		if (!this.actividadGanada) {
			this.actividadGanada = true;
			console.log("WIN");
			var self = this;

			// Mostramos la animación final
			this.e_guias.tween({alpha: 0.0}, 300);

			var part = new Particulas({
				componentes: "spr_polvo, SpriteAnimation",
				x: 480,
				y: 440,
				z: 600,
				vx: 0,
				deltaVx: 2,
				periodo: 90,
				deltaOriY: 0,
				deltaOriX: 430,
				numParticulas: 16,
				magnitud: 10,
				duracion: 33,
				atenuacion: 12,
				f_crear: function(ent) {
					ent.reel("giro", 400, [[0, 0], [32, 0], [64, 0], [96, 0]]).animate("giro", -1);
				}
			});
			part.iniciar();

			this.e_estatua.visible = true;
			this.e_estatua.addTween({y: 0}, "easeInOutQuad", 85, function() {
				self.e_sombra.visible = true;
				self.e_sombra.tween({alpha: 1.0}, 300);
				
				self.terminarActividad();
				gesActividad.mostrarPuntaje();
			});

		}

		return this;
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function terminarActividad() {
		return this;
	};

	// Invocado por un callback en los bloques
	// Registra la salida de un bloque de la pantalla
	this.saleBloque = function(fila, col) {
		this.numBloques--;
		if (this.numBloques <= 0) {
			this.ganarActividad();
		}
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/1/sprites.js*/
function spritesBelalcaz1() {
	Crafty.sprite("img/act/belalcaz/1/fondo.png", {
		sprB1_fondo: [0, 0, 1280, 634]
	});
	Crafty.sprite("img/act/belalcaz/1/primer-plano.png", {
		sprB1_priPlano: [0, 0, 1280, 321]
	});

	Crafty.sprite("img/act/belalcaz/1/asta.png", {
		sprB1_baseEst: [0, 0, 24, 323]
	});

	Crafty.sprite("img/act/belalcaz/1/estandarte.png", {
		sprB1_estandarte: [0, 0, 80, 105]
	});
	Crafty.sprite(140, 195, "img/act/belalcaz/1/numeros.png", {
		sprB1_numBel1: [0, 0],
		sprB1_numBel2: [0, 1],
		sprB1_numBel3: [0, 2],
		sprB1_numBel4: [0, 3],
		sprB1_numBel5: [0, 4],
		sprB1_numBel6: [0, 5],
		sprB1_numBel7: [0, 6],
		sprB1_numBel8: [0, 7],
		sprB1_numBel9: [0, 8]
	});
	Crafty.sprite(544 / 4, 194, "img/act/belalcaz/1/anio.png", {
		sprB1_numFecha1: [0, 0],
		sprB1_numFecha2: [1, 0],
		sprB1_numFecha3: [2, 0],
		sprB1_numFecha4: [3, 0]
	});

	Crafty.sprite(242, 229, "img/act/belalcaz/1/caballo.png", {
		sprB1_caballo: [0, 0]
	});
        
}
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/1/componentes.js*/
Crafty.c("B1_Numero", {
	maxY: 450,
	atenua: 0.4, // (porcentaje) atenuación por choque con el suelo
	
	init: function() {
		this.requires("Arrastrable");
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/1/actividad.js*/
/**
 * Actividad de numneros, el jugador debe tomar unos numeros
 * y arrastraslos hacia unas lineas punteadas
 * para formar el numero "1537"
 * @returns {ActBelalcaz1}
 */
var ActBelalcaz1 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;
	this.particulas = null;

	this.init = function() {
		var est = this;
		var areaNumeros = [];
		var numeros = [];
		var wmax = 544 / 4;
		var cont = 0;
		var numI = [1, 5, 3, 7];

		//colocar fondo de actividad
		Crafty.e('2D, Canvas, sprB1_fondo')
				.attr({x: 0, y: 0, z: 0});
		Crafty.e('2D, Canvas, sprB1_priPlano')
				.attr({x: 0, y: 479, z: 5});

		// Fuegos artificiales
		this.particulas = new Particulas({
			componentes: "spr_fuegosArt, SpriteAnimation",
			x: 375, y: 120, z: 600,
			vx: 0,
			deltaVx: 5,
			periodo: 6,
			deltaOriY: 193, deltaOriX: 504,
			numParticulas: 10,
			magnitud: 125,
			duracion: 63,
			atenuacion: 22,
			f_crear: function(ent) {
				ent.reel("quemar", 400, [[0, 0], [23, 0], [46, 0], [69, 0]]).animate("quemar", -1);
			}
		});
		

		//crear las areas de empate para los numeros.
		for (var i = 0; i < 4; i++) {
			areaNumeros[i] = Crafty.e('AreaCajon')
					.addComponent('sprB1_numFecha' + (1 + i))
					.attr({x: 368 + (i * (544 / 4)), y: 118, z: 2});
			areaNumeros[i].numero = numI[i];
		}

		numI = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 2, 5, 3, 1, 7, 8, 5, 7];

		for (var i = 0; i < numI.length; i++) {
			//efecto de caida de los numeros al inicio de la actividad
			setTimeout(function() {
				//rangos de posiciones donde se ubicaran los numeros que caen
				var xPos = Crafty.math.randomNumber(100 + wmax, 850);

				//obtener un elemento del array de los numeros que van a caer
				var elem = Crafty.math.randomElementOfArray(numI);
				var index = numI.indexOf(elem);
				var I = parseInt(numI.splice(index, 1));

				//componentes que representan los numeros que son arrastrables
				numeros[cont] = Crafty.e('B1_Numero, sprB1_numBel' + I);
				numeros[cont].attr({x: xPos, y: -numeros[cont].h, z: 3});
				//asignar una velocidad en x aleatoria para efecto de dispercion
				numeros[cont].vx = Crafty.math.randomElementOfArray([Crafty.math.randomNumber(-6, -3), Crafty.math.randomNumber(3, 6)]);
				numeros[cont].spr = "sprB1_numBel" + I;
				numeros[cont].act = est;
				numeros[cont].art_cayendo = true;

				//el area es seleccionada solo si es un numero que pertenece al conjunto [1,5,3,7]
				var k = I === 1 ? 0 :
						((I === 5) ? 1 :
								((I === 3) ? 2 :
										((I === 7) ? 3 : -1)));
				if (k !== -1) {
					//asignar area de empate solo a los numeros que coinciden en sus sprites
					numeros[cont].areaCajon = areaNumeros[k];
				}
				cont++;
			}, Crafty.math.randomInt(0, 200));
		}
		
		Crafty.e("Gesto")
				.Gesto(2, { coords: [574, 550], coordsFin: [574, 216], repetir: 2, retardo: 40, desplX: 146 });
		
		return this;
	};

	//verificar si ya se han colocados todos los numeros.
	this.arrastreCompleto = function() {
		//contar el numero de entidades de tipo Completo
		this.aciertos = Crafty("Completo").length;
		if (this.aciertos === this.totAciertos) {
			this.ganarActividad();
		}
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		var est = this;
		//ocultar cada numero despues de ganar la actividad. efecto de ocultarse
		Crafty("Arrastrable").each(function() {
			if (!this.has("Completo")) {
				this.addTween({x: this.x, y: 800}, 'easeOutQuad', Crafty.math.randomInt(40, 80), function() {
					this.destroy();
				});
			}
		});
		var caballo = Crafty.e("Caballo").Caballo("sprB1_caballo");
		var posCX = -caballo.w;
		var posCY = 428;
		caballo.attr({x: posCX, y: posCY, z: 4});
		var baseEstandarte = Crafty.e("2D, Canvas, sprB1_baseEst, Tween")
				.attr({x: posCX + 172, y: 288, z: caballo.z - 1});
		var estandarte = Crafty.e("2D, Canvas, sprB1_estandarte, Tween")
				.attr({x: posCX + 130, y: 340, z: baseEstandarte.z + 1});

		estandarte.dir = 1;
		estandarte.maxR = 20;
		estandarte.dR = 2;
		estandarte.rango = estandarte.maxR;
		estandarte.origin(estandarte.w / 2, 0)
				.bind("EnterFrame", function() {
					this.rotation += this.dir * this.dR;
					if (this.rotation > this.maxR) {
						this.dir = -1;
						this.maxR = Crafty.math.randomNumber(this.rango, this.rango + 5);
						this.dR = Crafty.math.randomNumber(1, 2);
					}
					if (this.rotation < -this.maxR) {
						this.dir = 1;
						this.maxR = Crafty.math.randomNumber(this.rango, this.rango + 5);
						this.dR = Crafty.math.randomNumber(1, 2);
						this.rango -= 1;
					}
					if (this.rango < 0) {
						this.rotation = 0;
						this.unbind("EnterFrame");
					}
				});

		baseEstandarte.rotation = 10;
		baseEstandarte.attach(estandarte);
		caballo.attach(baseEstandarte);

		caballo.caminar({x: 800, y: caballo.y}, 40, function() {
			baseEstandarte.tween({x: baseEstandarte.x, y: baseEstandarte.y - 60, rotation: 0}, 120);
			caballo.detach(baseEstandarte);
			baseEstandarte.bind("TweenEnd", function() {
				est.particulas.iniciar();
				baseEstandarte.tween({x: baseEstandarte.x, y: baseEstandarte.y + 60}, 60);
				baseEstandarte.unbind("TweenEnd");
				setTimeout(function() {
					estandarte.unbind("EnterFrame");
					estandarte.tween({rotation: 0}, 1000);
				}, 500);

				caballo.caminar({x: 1280 + caballo.w, y: caballo.y}, 40, function() {
					gesActividad.mostrarPuntaje();
				});
			});
		});
	};

};
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/2/sprites.js*/
function spritesBelalcaz2() {
	Crafty.sprite("img/act/belalcaz/2/fondo.png", {
        sprB2_fondo: [0, 0, 1280, 578]
    });
    Crafty.sprite("img/act/belalcaz/2/cascada.png", {
        sprB2_cascada: [0, 0, 1280, 759]
    });
    Crafty.sprite("img/act/belalcaz/2/fondo_agua.png", {
        sprB2_reflejAgua: [0, 0, 1058, 313]
    });
    Crafty.sprite("img/act/belalcaz/2/espada.png", {
        sprB2_espada: [0, 0, 30, 87]
    });
    Crafty.sprite("img/act/belalcaz/2/troncos.png", {
		sprB2_tronco1: [0,0,223,82],
		sprB2_tronco2: [0,84,223,68],
		sprB2_tronco3: [31,154,161,77],
		sprB2_tronco4: [0,233,223,68],
		sprB2_tronco5: [0,303,223,68],
		sprB2_tronco6: [31,373,161,77],
		sprB2_tronco7: [0,452,223,68],
		sprB2_tronco8: [0,522,223,68],
		sprB2_tronco9: [31,592,161,77],
		sprB2_tronco10: [0,671,223,68],
		sprB2_tronco11: [0,741,223,68],
		sprB2_tronco12: [31,811,161,76]
    });
    Crafty.sprite("img/act/belalcaz/2/titulos.png", {
        sprB2_granCacique: [0, 0, 223, 126],
        sprB2_pioya: [0, 125, 223, 96],
        sprB2_tierras: [0, 222, 223, 96]
    });
    Crafty.sprite("img/act/belalcaz/2/troncos_lineas.png", {
        sprB2_troncoLinea1: [0, 0, 226, 86],
        sprB2_troncoLinea2: [0, 85, 226, 70],
        sprB2_troncoLinea3: [31, 155, 167, 80]
    });
    Crafty.sprite("img/act/belalcaz/2/primer_plano.png", {
        sprB2_plano1: [0, 0, 1280, 800]
    });
    Crafty.sprite("img/act/belalcaz/2/agua_2.png", {
        sprB2_espumaAgua1: [0, 0, 817, 418]
    });
    Crafty.sprite("img/act/belalcaz/2/agua_1.png", {
        sprB2_espumaAgua2: [0, 0, 569, 439],
        sprB2_espumaAgua3: [0, 437, 569, 366],
        sprB2_espumaAgua4: [0, 802, 569, 451],
        sprB2_espumaAgua5: [0, 1249, 569, 377]
    });

    //recursos tomados de otras actividades:
    Crafty.sprite(242, 229, "img/act/belalcaz/1/caballo.png", {
        sprB2_caballo: [0, 0]
    });

    Crafty.sprite(44, 29, "img/act/belalcaz/2/cocodrilo.png", {
        sprB2_cocodrilo: [0, 0]
    });//fin recursos usados de otras actividades
}
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/2/componentes.js*/
Crafty.c("Cocodrilo", {
    emerger: false,
    init: function() {
        this.requires('2D, Canvas, SpriteAnimation');
    },
    Cocodrilo: function(spr) {
        this.requires(spr)
                .reel("emerger", 1000, [[5, 0], [4, 0], [3, 0], [2, 0], [1, 0], [0, 0]])
                .reel("sumergir", 1000, [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0]])
                .reel("bajo_agua", Crafty.math.randomInt(0, 200), [[5, 0]])
                .animate("bajo_agua", 1)
                .bind('AnimationEnd', function() {
                    var tmin = 120, tmax = 240;
                    var est = this;
                    //si finalizo la animacion de emerger entonces que se quede quieto
                    Crafty.e("DelayFrame").delay(function() {
						if (est.getReel().id === "emerger") {
                            est.animate("sumergir", 1);
                        }
                        else {
                            est.animate("emerger", 1);
                        }
					}, Crafty.math.randomInt(tmin, tmax));
                });
        return this;
    }
});


Crafty.c("Tronco", {
    dejar_caer: false,
    tomado: false,
	
	xIni: 0, // Coordenadas iniciales del tronco
	yIni: 0,
	zIni: 10, // z original antes de ser tomado
	xFin: 0, // Coords finales
	yFin: 0,
	ay: 0.8, // aceleración gravitacional apra caer
    
	init: function() {
		this.requires('Arrastrable');
		//quitar comportamiento de componente arrastrable
		//this.unbind("EnterFrame");
		
		this.bind("MouseDown", function() {
			//quitamos comportamiento inicial
			this.cancelTweener();
			//this.unbind("EnterFrame", this.caer);
			this.z = 20;
			if (this.rotation !== 0) {
				this.addTween({ rotation: 0}, "linear", 5);
			}
			this.tomado = true;
		});
		
		
		this.bind("MouseUp", function() {
			this.soltar();
		})/*
		.bind("MouseDown", function() {
			//quitamos comportamiento inicial
			this.cancelTweener();
			this.unbind("EnterFrame", this.caer);
			this.z = 20;
			if (this.rotation !== 0) {
				this.addTween({ rotation: 0}, "linear", 5);
			}
			this.tomado = true;
		})
		.bind("MouseOut", function() {
			if (this.tomado) {
				this.soltar();
			}
		});*/
    },
	
    //movimiento inicial del tronco, salir y esconderse
    movInicial: function() {
		this.dejar_caer = false;
		
		// Escogemos la posición de salida del tronco
		var rand = randomInt(11, 14);
		this.z = rand;
		this.zIni = this.z;
		
		switch (rand) {
			case 11:
				this.xIni = randomInt(400, 430);
				this.yIni = randomInt(542, 590);
				break;
			case 12:
				this.xIni = randomInt(500, 560);
				this.yIni = randomInt(540, 580);
				break;
			case 13:
				this.xIni = randomInt(944, 986);
				this.yIni = randomInt(566, 610);
				break;
			case 14:
				this.xIni = randomInt(455, 533);
				this.yIni = randomInt(596, 610);
				break;
		}
		this.x = this.xIni;
		this.y = this.yIni;
		this.xFin = this.xIni - this._w;
		this.yFin = this.yIni - this._h;
		this.rotation = 20;
		this.visible = true;
		
		this.cancelTweener();
		this.addTween({ alpha: 1 }, "linear", 8);
		this.addTween({ x: this.xFin + (this._w / 2) }, "easeOutCubic", 40);
		this.addTween({ y: this.yFin, rotation: 10 }, "easeOutCubic", 40, function() {
			this.addTween({ x: this.xFin, rotation: -10 }, "linear", 50);
			this.addTween({ y: 800 }, "easeInCubic", 60, function() {
				this.visible = false;
				this.alpha = 0;
			});
		});
    },
	
	
   // Cuando se suelta el click del tronco
	soltar: function() {
		this.z = this.zIni;
		this.cancelTweener();
		this.tomado = false;
		
		return this;
    }
	
});




/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/2/actividad.js*/
/**
 * Actividad de los troncos, el jugador debe tomar unos troncos
 * y hacerlos encajar en sobre una figura punteada,
 * al final un caballo da unos saltos.
 * @returns {ActBelalcaz2}
 */
var ActBelalcaz2 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 10000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;
	this.delayTroncos = null; // entidad DelayFrame que lanza los troncos

	this.init = function() {
		this.iniciarComponentes();

		this.e_caballo.espada("sprB2_espada");

		var tr = this.tronco;
		this.e_caballo.caminar({x: 80, y: this.e_caballo.y}, 20, function() {
			//this.pauseAnimation();
		});

		//efecto de movimiento en el lago
		this.vx = 1.8;
		this.e_fondoAgua.vx = Crafty.math.randomNumber(0.05, 0.3);
		this.e_fondoAgua.bind("EnterFrame", function() {
			this.x += this.vx;
			if (this.x < 210 || this.x > 220) {
				this.vx = -this.vx;
			}
		});

		//efecto de movimiento en la espuma del agua
		Crafty("Espuma").each(function() {
			this.posY0 = this.y;
			this.posYMax = this.y + 10;
			this.vy = Crafty.math.randomNumber(0.5, 1.5);
			this.bind("EnterFrame", function() {
				this.y += this.vy;
				if (this.y < this.posY0 || this.y > this.posYMax) {
					this.vy = -this.vy;
					this.posYMax = this.posY0 + Crafty.math.randomInt(15, 20);
				}
			});
		});

		//configurar los troncos 
		for (var i = 0; i < 12; i++) {
			var tr = this.tronco[i];
			tr.act = this;
			if (i < 3) {//tomar los tres primeros troncos y asignarles el area de encaje
				tr.areaCajon = this.areaTronco[i];
			}
			tr.rotation = Crafty.math.randomNumber(15, 25);
			tr.visible = false;
			tr.presionado = false;
			tr.dejar_caer = false;
		}

		var self = this;
		this.delayTroncos = Crafty.e("DelayFrame").interval(function() {
			var tr, rnd;
			var recursion = 100;
			while (recursion > 0) {
				rnd = Crafty.math.randomInt(0, self.tronco.length - 1);
				tr = self.tronco[rnd];
				if (!tr.visible) {
					tr.movInicial();
					recursion = 0;
				}
				else {
					recursion--;
				}
			}
		}, 40);
		
		Crafty.e("Gesto")
				.Gesto(2, { coords: [466, 606], coordsFin: [467, 231], repetir: 2, retardo: 40, desplX: 304 });
		
		return this;
	};

	this.iniciarComponentes = function() {
		//colocar fondo de actividad
		Crafty.e('2D, Canvas, sprB2_fondo');
		Crafty.e('2D, Canvas, sprB2_cascada').attr({z: 10});
		Crafty.e('2D, Canvas, sprB2_plano1').attr({z: 20});
		var caballo = Crafty.e("Caballo").Caballo("sprB2_caballo");
		caballo.attr({x: -caballo.w, y: 100, z: 9});
		var cocodrilo1 = Crafty.e('Cocodrilo').Cocodrilo("sprB2_cocodrilo").attr({x: 267, y: 88, z: 3});
		var cocodrilo2 = Crafty.e('Cocodrilo').Cocodrilo("sprB2_cocodrilo");
		cocodrilo2.attr({x: 367, y: 71, z: 3, w: cocodrilo1.w * 0.8, h: cocodrilo1.h * 0.8});

		var fondoAgua = Crafty.e("2D, Canvas, sprB2_reflejAgua").attr({x: 215, y: 0, z: 1});
		Crafty.e("2D, Canvas, Espuma, sprB2_espumaAgua1").attr({x: -151, y: 432, z: 11});
		Crafty.e("2D, Canvas, Espuma, sprB2_espumaAgua2").attr({x: 839, y: 546, z: 18 });
		Crafty.e("2D, Canvas, Espuma, sprB2_espumaAgua3").attr({x: 540, y: 492, z: 12 });
		Crafty.e("2D, Canvas, Espuma, sprB2_espumaAgua4").attr({x: 389, y: 484, z: 15 });
		Crafty.e("2D, Canvas, Espuma, sprB2_espumaAgua5").attr({x: 184, y: 532, z: 12 });
		
		var tit_cacique = Crafty.e("2D, Canvas, Titulo, Tweener, sprB2_granCacique").attr({ x: 350, y: 50, alpha: 0 });
		var tit_pioya = Crafty.e("2D, Canvas, Titulo, Tweener, sprB2_pioya").attr({ x: 640, y: 76, alpha: 0 });
		var tit_tierras = Crafty.e("2D, Canvas, Titulo, Tweener, sprB2_tierras").attr({ x: 915, y: 68, alpha: 0 });
		
		var trL_cacique = Crafty.e("2D, Canvas, sprB2_troncoLinea1").attr({x: 350, y: 184, z: 10});
		var trL_pioya = Crafty.e("2D, Canvas, sprB2_troncoLinea2").attr({x: 642, y: 190, z: 10});
		var trL_tierras = Crafty.e("2D, Canvas, sprB2_troncoLinea3").attr({x: 950, y: 186, z: 10});
		trL_cacique.e_titulo = tit_cacique;
		trL_pioya.e_titulo = tit_pioya;
		trL_tierras.e_titulo = tit_tierras;

		this.tronco = [];
		for (var i = 0; i < 12; i++) {
			var I = (1 + i);
			var tr = Crafty.e("Tronco, sprB2_tronco" + String(I));
			this.tronco[i] = tr;
		}

		this.e_caballo = caballo;
		this.e_fondoAgua = fondoAgua;
		this.areaTronco = [trL_cacique, trL_pioya, trL_tierras];
		this.titulos = [tit_cacique, tit_pioya, tit_tierras];
	};

	// cada vez que se enchocla un tronco, mostrar su leyenda y verificar si ya están todos
	this.arrastreCompleto = function(e_tronco) {
		e_tronco.areaCajon.e_titulo.alpha = 1;
		
		this.aciertos = Crafty("Completo").length;
		if (this.aciertos === this.totAciertos) {
			this.ganarActividad();
		}
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		this.delayTroncos.destroy();
		Crafty("DelayFrame").each(function() { this.destroy(); });
		Crafty("Espuma").each(function() { this.unbind("EnterFrame"); });
		return this;
	};

	this.ganarActividad = function() {
		var self = this;
		gesActividad.temporizador.parar();
		this.e_caballo.saltar();
		
		Crafty.e("DelayFrame").delay(function() {
			self.terminarActividad();
			gesActividad.mostrarPuntaje();
		}, 180);
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/3/B3_Guerra.js*/
// Gestor de la guerra entre Belalcazar y los indìgenas
Crafty.c("B3_Guerra", {
	posBalance: 640, // Posición de choque entre belal y los indios. 0 = equilibrio (1280 / 2).
	v: 0.5, // Velocidad del punto de choque
	minV: -1.5, // Mínimo
	maxV: 0.5, // Máximo
	aIndios: -0.005, // Aceleración provocada por los indios
	incrClick: 0.08, // Incremento a v al hacer click en Belal
	framesEspada: 0, // Cuenta las frames que quedan de ventaja de espada
	
	e_belalcazar: null, // referencia a belalcazar
	indios: null, // Referencia al arreglo de indìgenas
	
	activ: null, // referencia a la actividad
	
	init: function() {
		
	},
	
	B3_Guerra: function(e_b, arrInd) {
		this.e_belalcazar = e_b;
		this.indios = arrInd;
		return this;
	},
	
	
	// Inicia el bucle de guerra
	iniciar: function() {
		this.bind("EnterFrame", function() {
			this.frame();
			
			// Avisar si hemos ganado o perdido
			if (this.posBalance >= 1280) {
				this.unbind("EnterFrame");
				this.activ.cbk_ganar();
			}
			else if (this.posBalance <= 0) {
				this.unbind("EnterFrame");
				this.activ.cbk_perder();
			}
		});
	},
	
	// Incrementa la velocidad del punto de choque dentro del umbral
	incrementarV: function() {
		if (this.v <= this.maxV) {
			this.v += this.incrClick;
		}
		return this;
	},
	
	// Actualizar posiciones de Belal y los indios segùn el balance
	actualizarPos: function() {
		this.e_belalcazar.x = this.posBalance - this.e_belalcazar._w;
		var i = 0;
		for (i = 0 ; i < 5 ; i++) {
			this.indios[i].x = this.posBalance + (i * 150);
		}

		return this;
	},
	
	// Activar la ventaja temporal de la espada
	ventajaEspada: function() {
		this.maxV = 1;
		this.incrClick = 0.16;
		this.framesEspada = 300;
		this.e_belalcazar.espada("sprB3_espada");
		return this;
	},
	
	// Activar la desventaja de la lanza
	ventajaLanza: function() {
		this.maxV = 0.2;
		if (this.v > 0.2) this.v = 0.2;
		this.incrClick = 0.04;
		this.framesEspada = 300;
		this.e_belalcazar.espada("");
		return this;
	},

	// Cada frame, actualizar posiciones
	frame: function() {
		this.posBalance += this.v;
		
		// Aplicar la aceleraciòn si la velocidad no supera cierto umbral
		if (this.v >= this.minV) {
			this.v += this.aIndios;
		}
		
		this.e_belalcazar.e_barra.actualizar(this.v);
		
		this.actualizarPos();
		
		// Actualizamos framesEspada
		if (this.framesEspada > 0) {
			if (this.framesEspada === 1) {
				this.maxV = 0.5;
				this.incrClick = 0.08;
				if (this.v > 0.5) this.v = 0.5;
				this.e_belalcazar.espada("");
			}
			this.framesEspada--;
		}
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/3/sprites.js*/
function spritesBelalcaz3() {
	Crafty.sprite("img/act/belalcaz/3/elementos.png", {
        sprB3_lanzaCae: [0, 0, 130, 173],
        sprB3_espadaCae: [0, 175, 130, 133],
        sprB3_hoja1: [28, 310, 51, 52],
        sprB3_hoja2: [28, 364, 51, 52],
        sprB3_hoja3: [28, 418, 51, 50]
    });
	
    Crafty.sprite(139, 183, "img/act/belalcaz/3/indio-salto.png", {
        sprB3_indioSalto: [0, 0]
    });

    //recursos tomados de otras actividades:
    Crafty.sprite(242, 229, "img/act/belalcaz/1/caballo.png", {
        sprB3_caballo: [0, 0]
    });
    Crafty.sprite("img/act/belalcaz/2/espada.png", {
        sprB3_espada: [0, 0, 30, 87]
    });
}

/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/3/componentes.js*/
// Barra indicadora que acompaña al caballo
Crafty.c("B3_Barra", {
	e_barra: null,
	positivo: true, // false si el valor de al barra es negativo
	
	init: function() {
		this.requires("2D, Canvas, Color").attr({ w: 110, h: 20, z: 49, alpha: 0.5 }).color("#271300");
		
		this.e_barra = Crafty.e("2D, Canvas, Color").color("#B58010").attr({ x: 52, y: 2, h: 16, z: 50 });
		this.e_barra.origin(0, 8);
		this.e_barra.rotation = 0;
		this.e_barra.color("#4DB849");
		
		this.attach(this.e_barra);
	},
	
	// Actualiza el tamaño de la barra según el valor
	actualizar: function(v) {
		var anchoBarra = v * 33;
		
		if (anchoBarra > 0) {
			if (!this.positivo) {
				this.e_barra.rotation = 0;
				this.e_barra.color("#4DB849");
				this.positivo = true;
			}
			this.e_barra.w = anchoBarra;
				
		}
		else {
			if (this.positivo) {
				this.e_barra.rotation = 180;
				this.e_barra.color("#AF2800");
				this.positivo = false;
			}
			this.e_barra.w = -anchoBarra;
		}
	}
});

Crafty.c("B3_Indigena", {
	init: function() {
		var periodo = randomInt(0, 100) + 750;
		this.requires('2D, Canvas, sprB3_indioSalto, SpriteAnimation')
			.reel("saltar", periodo, [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0]]);
		this.animate("saltar", -1);
	}
});

Crafty.c("B3_Hoja", {
	vx: 0, // Velocidad en x
	vy: 2,
	ax: -0.1, // Aceleración en x
	
	init: function() {
		this.requires('2D, Canvas, sprB3_hoja' + randomInt(1, 3));
		this.z = 15;
		
		this.bind("EnterFrame", function() {
			this.y += this.vy;
			this.vy += 0.07;
			this.x += this.vx;
			this.vx += this.ax;
			
			// Hora de destruir esta hoja?
			if (this.y >= 800 || this.x < -52 || this.x > 1335) {
				this.destroy();
			}
		});
	},
	
	// Setter de la aceleración
	acel: function(a) {
		this.ax = a * 0.1;
		return this;
	}
	
});

// Arma que cae
Crafty.c("B3_Arma", {
	vx: 0, // Velocidad en x
	vy: 2,
	ax: -0.1, // Aceleración en x
	espada: true, // false si es lanza, true si es espada
	
	init: function() {
		this.espada = (randomInt(0, 2) === 0);
		this.requires('2D, Canvas, Mouse, ' + (this.espada ? "sprB3_espadaCae" : "sprB3_lanzaCae"));
		this.z = 15;
		
		this.bind("EnterFrame", function() {
			this.y += this.vy;
			this.vy += 0.08;
			this.x += this.vx;
			this.vx += this.ax;
			
			// Hora de destruir esta arma?
			if (this.y >= 800 || this.x < -130 || this.x > 1280) {
				this.destroy();
			}
		});
	},
	
	// Setter de la aceleración
	acel: function(a) {
		this.ax = a * 0.1;
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/3/actividad.js*/
/** Actividad de guerra de Belalcazar
 */
var ActBelalcaz3 = function() {
	this.e_caballo = null;
	this.indigenas = null; // arreglo de entidades de indìgenas
	this.guerra = Crafty.e("B3_Guerra"); // Objeto que gestiona el estado de la guerra
	this.particulas = null;
	
	this.init = function() {
		var guerra = this.guerra;
		var self = this;
		
		this.crearEntidades();
		guerra.B3_Guerra(this.e_caballo, this.indigenas);
		guerra.activ = this;
		
		this.e_caballo.bind("MouseUp", function() {
			guerra.incrementarV();
		});
		
		// Anexamos al caballo el indicador de item bueno o malo
		this.e_caballo.e_aviso = Crafty.e("Advertencia").attr({ x: 140, y: 350, z: 50 });
		this.e_caballo.attach(this.e_caballo.e_aviso);
		
		// Anexamos al caballo una barra para mostrar la velocidad
		this.e_caballo.e_barra = Crafty.e("B3_Barra").attr({ x: 50, y: 360, z: 50 });
		this.e_caballo.attach(this.e_caballo.e_barra);
		
		guerra.iniciar();
		
		Crafty.e("DelayFrame").interval(function() {
			Crafty.e("B3_Hoja").acel(guerra.v).attr({ x: randomInt(50, 1200), y: -53 });
		}, 40);
		
		Crafty.e("DelayFrame").interval(function() {
			Crafty.e("B3_Arma")
					.acel(guerra.v)
					.attr({ x: randomInt(50, 1200), y: -175 })
					.bind("MouseDown", function() {
						self.particulas.x = this._x;
						self.particulas.y = this._y;
						self.particulas.iniciar();
						
						this.destroy();
						if (this.espada) {
							guerra.ventajaEspada();
							self.e_caballo.e_aviso.mostrar(0, 30);
						} else {
							guerra.ventajaLanza();
							self.e_caballo.e_aviso.mostrar(1, 30);
						}
					});
		}, 100);
		
		this.particulas = new Particulas({
			componentes: "spr_nube, SpriteAnimation",
			z: 600,
			vx: 0,
			deltaVx: 4,
			periodo: 5,
			deltaOriY: 5, deltaOriX: 5,
			numParticulas: 3,
			magnitud: 100,
			duracion: 20,
			atenuacion: 80,
			f_crear: function(ent) {
				ent.reel("explota", 400, [[0,0],[96,0],[192,0],[288,0]]).animate("explota", -1);
			}
		});
		
		var g = Crafty.e("Gesto")
				.Gesto(1, { coords: [this.e_caballo._x + 110, this.e_caballo._y + 100], duracion: 180, retardo: 40 });
		this.e_caballo.attach(g);
		
		return this;
	};
	
	// Callback invocado al ganar
	this.cbk_ganar = function() {
		this.e_caballo.unbind("MouseUp");
		this.ganarActividad();
	};
	
	// Callback invocado al perder
	this.cbk_perder = function() {
		Crafty("DelayFrame").destroy();
		this.terminarActividad();
		gesActividad.mostrarPerdiste();
	};

	this.crearEntidades = function() {
		Crafty.e('2D, Canvas, Image').image("img/act/belalcaz/3/plano3.png").attr({z: 1});
		Crafty.e('2D, Canvas, Image, Oscilador')
				.image("img/act/belalcaz/3/agua.png")
				.attr({ z: 2, x: 15 })
				.oscilarX(10, 200);
		Crafty.e('2D, Canvas, Image, Oscilador')
				.image("img/act/belalcaz/3/cascada.png")
				.attr({x: 0, y: 409, z: 3})
				.oscilarY(4, 30);
		Crafty.e('2D, Canvas, Image').image("img/act/belalcaz/3/plano2.png").attr({z: 4, y: 10});
		Crafty.e('2D, Canvas, Image').image("img/act/belalcaz/3/plano1.png").attr({x: 784, y: 550, z: 20});
		Crafty.e('2D, Canvas, Image').image("img/act/belalcaz/3/oso_anteojos.png").attr({x: 10, y: 640, z: 16});
	 
		//crear los indigenas, estos salen de la parte derecha del canvas
		this.indigenas = [];
		this.indigenas[0] = Crafty.e('B3_Indigena').attr({ x: 1000, y: 420, z: 10 });
		this.indigenas[1] = Crafty.e('B3_Indigena').attr({ x: 800, y: 432, z: 10 });
		this.indigenas[2] = Crafty.e('B3_Indigena').attr({ x: 600, y: 445, z: 10 });
		this.indigenas[3] = Crafty.e('B3_Indigena').attr({ x: 400, y: 434, z: 10 });
		this.indigenas[4] = Crafty.e('B3_Indigena').attr({ x: 200, y: 434, z: 10 });

		this.e_caballo = Crafty.e("Caballo, Mouse").Caballo("sprB3_caballo");
		this.e_caballo.attr({x: 0, y: 400, z: 10});
		
	};

	// Sólo invocada al ganar la actividad
	this.ganarActividad = function ganarActividad() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		this.terminarActividad();
		return this;
	};
	
	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		Crafty("DelayFrame").destroy();
		Crafty("B3_Arma").destroy();
		Crafty("B3_Hoja").destroy();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/4/sprites.js*/
function spritesBelalcaz4() {
	Crafty.sprite("img/act/belalcaz/4/fondo.jpg", {
		sprB4_fondo: [0, 0, 380, 798]
	});
	Crafty.sprite("img/act/belalcaz/4/mapa.jpg", {
		sprB4_mapa: [0, 0, 1031, 857]
	});
	Crafty.sprite("img/act/belalcaz/4/primer_plano.png", {
		sprB4_priPlano: [0, 0, 699, 652]
	});

	Crafty.sprite("img/act/belalcaz/4/flechas_1.png", {
		sprB4_flecha1: [0, 0, 304, 509]
	});

	Crafty.sprite("img/act/belalcaz/4/flechas_2.png", {
		sprB4_flecha2: [0, 0, 102, 135],
		sprB4_flecha3: [20, 136, 60, 98],
		sprB4_flecha4: [9, 236, 80, 53]
	});

	Crafty.sprite("img/act/belalcaz/4/ciudades.png", {
		sprB4_ciuCal: [54, 1, 69, 34],
		sprB4_ciuNei: [40, 37, 97, 34],
		sprB4_ciuPop: [17, 73, 143, 44],
		sprB4_ciuQui: [37, 119, 102, 47],
		sprB4_ciuGua: [0, 168, 176, 44]
	});

	Crafty.sprite("img/act/belalcaz/4/botones.png", {
		sprB4_btnRojoSol: [0, 0, 95, 173],
		sprB4_btnRojArr: [7, 175, 81, 86],
		sprB4_btnRojAbj: [7, 263, 81, 86],
		sprB4_btnVerAbj: [7, 351, 81, 86],
		sprB4_diaVer: [5, 427, 85, 101],
		sprB4_diaRoj: [5, 530, 85, 101]
	});
	
	Crafty.sprite("img/act/belalcaz/4/fechas.png", {
		sprB4_fec1534: [0, 1, 176, 133],
		sprB4_fec1535: [0, 136, 176, 133],
		sprB4_fec1536: [0, 271, 176, 133],
		sprB4_fec1537: [0, 406, 176, 133],
		sprB4_fec1539: [0, 541, 176, 131]
	});
        Crafty.sprite(242, 229, "img/act/belalcaz/1/caballo.png", {
            sprB4_caballo: [0, 0]
        });

        Crafty.sprite("img/act/belalcaz/2/espada.png", {
            sprB4_espada: [0, 0, 30, 87]
        });
}
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/4/componentes.js*/
Crafty.c("B4_Fecha", {
	ano: 0,
	x0: 0,
	y0: 0,
	w0: 0,
	h0: 0,
	
	init: function() {
		this.requires("2D, Canvas, Tweener");
	},
	
	B4_Fecha: function(ano) {
		this.ano = ano;
		this.requires("sprB4_fec" + ano);
		this.w0 = this._w;
		this.h0 = this._h;
		
		return this;
	},
	
	mostrar: function() {
		this.x0 = this._x;
		this.y0 = this._y;
		
		this.addTween({ x: this._x - 30, y: this._y - 15, w: this._w + 60, h: this._h + 30, alpha: 1 }, "easeOutElastic", 40, function() {
			this.addTween({ x: this._x + 48, y: this._y + 40, w: this._w - 110, h: this._h - 80 }, "easeInCubic", 10, function() {
				
			});
		});
		
		return this;
	},
	
	ocultar: function() {
		if (this.alpha > 0) {
			this.addTween({ alpha: 0 }, "linear", 5, function() {
				this.x = this.x0;
				this.y = this.y0;
				this.w = this.w0;
				this.h = this.h0;
			});
		}
		
		return this;
	}
});

Crafty.c("B4_Boton", {
	v: {ant: null, sig: null}, //objeto que referencia al camino anterior y al  siguiente
	sprOK: null, //sprite de cambio de boton
	estado: 0,
	bloqueado: false,
	numero: 0, // número en la secuencia [0:4]
	flecha: null,
	act: null, // referencia a la actividad
	
	init: function() {
		this.requires('2D, Canvas, Mouse, sprB4_btnRojArr');
		
		this.bind("MouseDown", function() {
			if (!this.bloqueado) {
				this.removeComponent('sprB4_btnRojArr').addComponent('sprB4_btnRojAbj');
				this.estado = 1;
			}
		});
		
		this.bind("MouseOut", function() {
			if (!this.bloqueado) {
				if (this.estado === 1) {
					this.removeComponent('sprB4_btnRojAbj').addComponent('sprB4_btnRojArr');
				}
			}
		});
		
		this.bind("MouseUp", function() {
			if (!this.bloqueado) {
				this.bloqueado = true;
				
				if (this.numero === 0) {
					this.iluminar();
				}
				else if (this.numero > 0 && this.v.ant.estado === 2) {
					this.iluminar();
				}
				else {
					this.act.iniPosCaballo();

					var vBtn = Crafty("B4_Boton");
					var cont = vBtn.length - 1;
					var myint = setInterval(function() {
						if (cont >= 0) {
							var btn = Crafty(vBtn[cont]);
							btn.cambiarOriginal();
						} else {
							clearInterval(myint);
						}
						cont -= 1;
					}, 50);
				}
			}
		});
	},
	
	B4_Boton: function(num) {
		this.numero = num;
		return this;
	},	
	
	// actualiza el estado de la fecha y la flecha
	actualizarFiguras: function(mostrar) {
		var fecha = this.v.fecha;
		var flecha = this.v.flecha;
		if (mostrar) {
			if (this.estado === 2) {
				fecha.mostrar();
				
				if (flecha !== null) {
					flecha.tween({x: flecha.x, y: flecha.y, alpha: 1}, 100);
				}
			}
		} else {
			fecha.ocultar();
			if (flecha !== null) {
				flecha.tween({x: flecha.x, y: flecha.y, alpha: 0}, 100);
			}
		}
	},
	
	iluminar: function() {
		this.estado = 2;
		this.cambiarSpriteActivo(this.sprOK);
		this.act.sigPosCaballo();
		this.actualizarFiguras(true);
		
		if (this.numero === 4) {
			this.act.ganarActividad();
		}
		
	},
	
	cambiarSpriteActivo: function(nvSprAct) {
		this.removeComponent(this.spriteNormal);
		this.removeComponent(this.spriteActivo);
		this.spriteActivo = nvSprAct;
		this.spriteNormal = nvSprAct;
		this.addComponent(this.spriteActivo);
	},
	
	cambiarOriginal: function() {
		this.estado = 0;
		this.bloqueado = false;
		this.removeComponent('sprB4_btnRojAbj').addComponent('sprB4_btnRojArr');
		this.actualizarFiguras(false);
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/4/actividad.js*/
/**
 * @returns {ActBelalcaz4}
 */
var ActBelalcaz4 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 10000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;


	this.init = function() {
		this.iniciarComponentes();

		//proporcionar tamaño de caballo y poner espada
		this.caballo.prop(0.6, "sprB4_espada");
		this.caballo.posiciones = [
			{x: 200, y: 398, t: 10},
			{x: 378, y: 400, t: 10},
			{x: 280, y: 580, t: 10},
			{x: 540, y: 50, t: 50}, // Cali
			{x: 568, y: 218, t: 40},
			{x: 888, y: 204, t: 10}
		];
		this.caballo.posActual = 0;
		var vpp = this.caballo.posiciones[this.caballo.posActual];
		this.caballo.caminar({x: vpp.x, y: vpp.y}, 20);

		this.fecQui.alpha = 0;
		this.fecGua.alpha = 0;
		this.fecCal.alpha = 0;
		this.fecPop.alpha = 0;
		this.fecNei.alpha = 0;

		this.flecha1.alpha = 0;
		this.flecha2.alpha = 0;
		this.flecha3.alpha = 0;
		this.flecha4.alpha = 0;

		this.btnQui.v = {ant: null, sig: this.btnGua, flecha: null, fecha: this.fecQui};
		this.btnGua.v = {ant: this.btnQui, sig: this.btnCal, flecha: this.flecha1, fecha: this.fecGua};
		this.btnCal.v = {ant: this.btnGua, sig: this.btnPop, flecha: this.flecha2, fecha: this.fecCal};
		this.btnPop.v = {ant: this.btnCal, sig: this.btnNei, flecha: this.flecha3, fecha: this.fecPop};
		this.btnNei.v = {ant: this.btnPop, sig: null, flecha: this.flecha4, fecha: this.fecNei};


		this.btnQui.sprOK = "sprB4_btnVerAbj";
		this.btnGua.sprOK = "sprB4_btnVerAbj";
		this.btnCal.sprOK = "sprB4_btnVerAbj";
		this.btnPop.sprOK = "sprB4_btnVerAbj";
		this.btnNei.sprOK = "sprB4_btnVerAbj";

		this.btnQui.act = this;
		this.btnGua.act = this;
		this.btnCal.act = this;
		this.btnPop.act = this;
		this.btnNei.act = this;

		return this;
	};

	this.iniciarComponentes = function() {
		//colocar fondo de actividad
		Crafty.e('2D, Canvas, sprB4_fondo').attr({z: 1});
		var map = Crafty.e('2D, Canvas, sprB4_mapa');
		map.attr({x: 266, z: 2});
		var pj = Crafty.e('2D, Canvas, sprB4_priPlano');
		pj.attr({x: 0, y: 800 - pj.h, z: 10});

		//personajes de la actividad
		//this.caballo = Crafty.e("Caballo, Ubicador").attr({x: 898, y: 34, z: 6});
		this.caballo = Crafty.e("Caballo").Caballo("sprB4_caballo").attr({x: 50, y: 398, z: 10});


		//elementos de decoracion: flechas
		this.flecha1 = Crafty.e('2D, Canvas, sprB4_flecha2, Tween').attr({x: 497, y: 527, z: 7});
		this.flecha2 = Crafty.e('2D, Canvas, sprB4_flecha1, Tween').attr({x: 394, y: 118, z: 7});
		this.flecha3 = Crafty.e('2D, Canvas, sprB4_flecha3, Tween').attr({x: 645, y: 194, z: 7});
		this.flecha4 = Crafty.e('2D, Canvas, sprB4_flecha4, Tween').attr({x: 748, y: 190, z: 7});

		//titulos de ciudades
		this.ciuCal = Crafty.e('2D, Canvas, sprB4_ciuCal').attr({x: 789, y: 115, z: 5});
		this.ciuNei = Crafty.e('2D, Canvas, sprB4_ciuNei').attr({x: 939, y: 197, z: 5});
		this.ciuPop = Crafty.e('2D, Canvas, sprB4_ciuPop').attr({x: 793, y: 267, z: 5});
		this.ciuQui = Crafty.e('2D, Canvas, sprB4_ciuQui').attr({x: 611, y: 477, z: 5});
		this.ciuGua = Crafty.e('2D, Canvas, sprB4_ciuGua').attr({x: 504, y: 660, z: 5});

		//titulos de ciudades
		this.fecQui = Crafty.e('B4_Fecha').B4_Fecha(1534).attr({x: 487, y: 345, z: 8});
		this.fecGua = Crafty.e('B4_Fecha').B4_Fecha(1535).attr({x: 376, y: 530, z: 8});
		this.fecCal = Crafty.e('B4_Fecha').B4_Fecha(1536).attr({x: 661, y: 0, z: 8});
		this.fecPop = Crafty.e('B4_Fecha').B4_Fecha(1537).attr({x: 665, y: 152, z: 8});
		this.fecNei = Crafty.e('B4_Fecha').B4_Fecha(1539).attr({x: 814, y: 70, z: 8});

		this.btnQui = Crafty.e('B4_Boton').B4_Boton(0).attr({ x: 518, y: 446, z: 5 });
		this.btnGua = Crafty.e('B4_Boton').B4_Boton(1).attr({ x: 408, y: 632, z: 5 });
		this.btnCal = Crafty.e('B4_Boton').B4_Boton(2).attr({ x: 692, y: 100, z: 5 });
		this.btnPop = Crafty.e('B4_Boton').B4_Boton(3).attr({ x: 700, y: 254, z: 5 });
		this.btnNei = Crafty.e('B4_Boton').B4_Boton(4).attr({ x: 844, y: 166, z: 5 });
	};

	this.sigPosCaballo = function() {
		this.caballo.posActual += 1;
		var vpp = this.caballo.posiciones[this.caballo.posActual];
		this.caballo.caminar({x: vpp.x, y: vpp.y}, vpp.t);
	};

	this.iniPosCaballo = function() {
		this.caballo.posActual = 0;
		var vpp = this.caballo.posiciones[this.caballo.posActual];
		this.caballo.caminar({x: vpp.x, y: vpp.y}, 30);
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		var self = this;
		console.log("ganar actividad");
		setTimeout(function() {
			self.caballo.caminar({x: self.caballo._x + 100, y: -200 }, 75, function() {
				gesActividad.mostrarPuntaje();
			});
		}, 500);
	};
};

/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/5/sprites.js*/
function spritesBelalcaz5() {
	Crafty.sprite(333, 249, "img/act/belalcaz/5/barco.png", {
		sprB5_barco: [0, 0]
	});

	Crafty.sprite(331, 177, "img/act/belalcaz/5/sombra.png", {
		sprB5_bSombra: [0, 0]
	});

	Crafty.sprite(93, 120, "img/act/belalcaz/5/ojo.png", {
		sprB5_ojo: [0, 0]
	});

	Crafty.sprite("img/act/belalcaz/5/elementos.png", {
		sprB5_barril: [28, 0, 41, 107],
		sprB5_coronaPequena: [17, 108, 62, 37],
		sprB5_coronaGrande: [0, 145, 97, 71]
	});

	Crafty.sprite("img/act/parque/3/onomatopeyas.png", {
		sprB5_kapaw: [0, 178, 156, 109]
	});

}
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/5/componentes.js*/

//Componente del barco, debe poder detectar algunos componentes
Crafty.c("B5_Barco", {
	vx: 0,
	vxmax :2.5,
	dir : 1,//1 para derecha -1 para izquierda
	vy: 1,
	y0: 198,
	
	init: function() {
		this.requires("2D, Canvas, sprB5_barco, Mouse, SpriteAnimation");
		//asignar sombra
		this.sombra = Crafty.e("2D, Canvas, sprB5_bSombra, Sprite, Tweener")
				.attr({x: this.x, y: this.y + this.h - 30, z: 21, visible: false });
		
		this.attach(this.sombra);
		
		this.corona = Crafty.e("2D, Canvas, sprB5_coronaPequena").attr({ visible: false });
		
		this.bind("MouseDown",function(){
			this.vx += 0.15;
			if(this.vx > this.vxmax){
				this.vx = this.vxmax;
			}
		});
	},
	
	// cada frame, actualizar posición del barco
	//movimiento del barco en dos direcciones al inicio direccion hacia la derecha
	//cuando llega a la montaña da un giro y se regresa
	frame: function() {
		//movimiento en el eje X
		this.x += this.vx * this.dir;

		// cuando llega al limite derecho, rota y recoge la corona
		if (this.dir === 1 && this.x > 1180) {
			this.dir = -1;
			this.sprite(1, 0);
			this.sombra.sprite(1, 0);
			this.act.coronaGrande.visible = false;
			this.corona.attr({ x: this.x + this.w / 2 - this.corona.w / 2 + 25, y: this.y - this.corona.h, z: this.z, visible: true });
			this.attach(this.corona);
		}
		else if (this.dir === -1 && this.x < -60) {
			this.unbind("EnterFrame");
			this.sprite(0, 0);
			this.act.ganarActividad();
		}

		//movimiento en el ejeY
		this.y += this.vy;
		if (this.y > this.y0 + Crafty.math.randomInt(5, 15)) {
			this.vy = -0.5;
		}
		if (this.y < this.y0) {
			this.vy = Crafty.math.randomNumber(0.2, 1);
		}

		if(this.vx > 0){
			this.vx -= 0.01;
		}
	},
	
	// mostrar el barco porprimera vez
	aparecer: function() {
		this.bind("EnterFrame", this.frame);
		this.visible = true;
		this.sombra.visible = true;
		this.vx = 2;
		return this;
	},
	
	//funcion invocada para hundir al barco en el mar
	desaparecer: function() {
		this.unbind("EnterFrame");
		this.visible = false;
		this.destroy();
		this.sombra.destroy();
		if (this.corona) {
			this.corona.destroy();
		}
		return this;
	},
	
	// Fuerza el barco a detenerse
	detenerse: function() {
		this.vx = 0;
		this.removeComponent("Mouse");
		return this;
	},
	
    //retorna un objeto con los limites donde debe aparecer el ojo
    limitesOjo : function(){
            var liminf = 0;
            var limsup = 0;
            if(this.dir === 1){
                liminf= this.x;
                if(this.x + this.w > 1280){
                    limsup = 1280-100;
                }else{
                    limsup=this.x+this.w + 150;
                }
            }else{
                if(this.x + this.w > 1280){
                    limsup = 1280 - 100;
                }else{
                    limsup = this.x + this.w;
                }
                if(this.x - 200 < 0){
                    liminf = 0;
                }else{
                    liminf = this.x - 150;
                }
            }
            return {liminf:liminf, limsup:limsup};
        }
});

//area tocable para crear barriles
Crafty.c("B5_AreaBarriles", {
	t_delay: 1000, //demora en que se activan el evento del mouse
	bloqueado: false,
	init: function() {
		this.requires("2D, Canvas, Mouse");
	},
	B5AreaBarriles: function(ojo, barco) {
		var self = this;
		this.e_ojo = ojo;
		this.e_barco = barco;
		Crafty.e("2D, Canvas, Image")
				.attr({x: 40, y: this.h})
				.image("img/act/belalcaz/5/linea_punteada.png");
		
		this.bind("MouseDown", function(e) {
			if (!this.bloqueado) {
				this.bloqueado = true;
				var pos = mouseCoords(e);
				Crafty.e("B5_Barril")
						.attr({ x: pos.x, y: pos.y, z: this.e_ojo.z })
						.B5_Barril(self);
				setTimeout(function() {
					self.bloqueado = false;
				}, self.t_delay);
			}
		});
		return this;
	},
	golpearOjo: function() {
		this.e_ojo.visible = false;
	}
});

//compoenetes barriles, debe detectar el ojo 
Crafty.c("B5_Barril", {
	ay: 0.5,
	vy: 0.0,
	init: function() {
		this.requires("2D, Canvas, sprB5_barril");
		this.alpha = 0;
	},
	
	B5_Barril: function(area) {
		this.e_area = area;
		this.bind("EnterFrame", function() {
			if (this.alpha < 1) { this.alpha += 0.08; }
			this.vy += this.ay;
			this.y = this._y + this.vy;
			if (this.y > 800) {
				this.unbind("EnterFrame");
				this.destroy();
			}
			//Verificar que ambos componetes se toquen
			if (this.x + this.w > this.e_area.e_ojo.x &&
					this.x < this.e_area.e_ojo.x + this.e_area.e_ojo.w &&
					this.y + this.h > this.e_area.e_ojo.y &&
					this.y + this.h < this.e_area.e_ojo.y + this.e_area.e_ojo.h &&
					this.y + this.h < this.e_area.e_ojo.ymin) {//verificar que sea mayor del nuvel del mar
				if (!this.yapego) {//verificacion para que el barril solamente pueda golpear una sola vez el ojo
					this.yapego = true;
					this.e_area.e_ojo.golpearOjo();
					//mostrar Mensaje onomatopeya
					Crafty.e("2D, Canvas, Tweener, sprB5_kapaw")
							.attr({x: this.x, y: this.y, z: this.z})
							.addTween({alpha: 0}, 'easeOutQuad', 0, function() {
								this.destroy();
							});
				}
			}
		});
		return this;
	}
});

Crafty.c("B5_Ojo", {
	bestia: null, //referencia a la bestia que sale del agua
	e_advertencia: null, // advertencia que se muestra cuando el ojo toca el barco
	ymax: 0,
	ymin: 0,
	xmin: 100, // límites estáticos de pos X del ojo
	xmax: 1100,
	cuenta: 0, // indicador de tiempo en que mantiene contacto el ojo con el barco
	cuentaMax: 60, // frames de colision para que el ojo llame la bestia
	limxi: 0, // Rango dinámico de pos X del ojo
	limxs: 0,
	
	init: function() {
		this.requires("2D, Canvas, sprB5_ojo, Tweener");
		
		this.e_advertencia = Crafty.e("Advertencia");
		this.e_advertencia.attr({ x: 70, y: -76 });
		this.attach(this.e_advertencia);
	},
	
	B5_Ojo: function(barco, y0) {
		this.e_barco = barco;
		this.ymax = y0;//posicion por encima del mar 
		this.ymin = y0 + this.h; //posicion por debajo del mar
		this.z = this.e_barco.z;
		this.emerger(); //iniciar el movimiento en alguna posicion del ejeX
		
		this.bestia = Crafty.e("2D, Canvas, Image, Tweener")
				.attr({ y: y0 + 110, z: this.e_barco.z + 1 })
				.image("img/act/belalcaz/5/bestia.png");
		
		this.bind("EnterFrame", this.colisionBarco);

		return this;
	},
	
	// Verifica si está tocando al barco y llama a la bestia
	colisionBarco: function() {
		if (this.x + this.w > this.e_barco.x &&
				this.x < this.e_barco.x + this.e_barco.w &&
				this.y + this.h > this.e_barco.y &&
				this.y + this.h < this.e_barco.y + this.e_barco.h)
		{
			this.cuenta += 1;
			if (this.cuenta >= this.cuentaMax) {
				if (!this.siLlamarBestia) {//verificacion para que el barril solamente pueda golpear una sola vez el ojo
					this.siLlamarBestia = true;
					this.unbind("EnterFrame", this.colisionBarco);
					var self = this;

					this.e_advertencia.mostrar(2, 40);
					
					// sumergimos el ojo
					this.cancelTweener();
					this.addTween({ y: this.ymin }, "easeInOutCubic", 50);
					this.cuenta = 0;
					
					Crafty.e("DelayFrame").delay(function() {
						self.llamarBestia();
					}, 50);
				}
			}
		}
		var limitesBarco = this.e_barco.limitesOjo();
		if (limitesBarco.liminf < this.xmin) limitesBarco.liminf = this.xmin;
		if (limitesBarco.limsup > this.xmax) limitesBarco.limsup = this.xmax;
		this.limxi = limitesBarco.liminf;
		this.limxs = limitesBarco.limsup;
	},
	
	//mover ojo en el eje x haciendo algunos movimientos
	emerger: function() {
		var self = this;
		this.sprite(0, 0);
		
		this.cancelTweener();
		this.addTween({ y: this.ymax }, "easeOutQuad", 30, function() {
			Crafty.e("DelayFrame").delay(function() {
				self.sumergir();
			}, 90);
		});
		return this;
	},
	
	//sumergir el componente al mar
	sumergir: function() {
		var self = this;
		var y1 = this.ymin;//siguiente posicion por debajo del mar

		this.cancelTweener();
		this.addTween({ y: y1 }, "easeInCubic", 25, function() {
			this.cuenta = 0; //reiniciar la cuenta 
			Crafty.e("DelayFrame").delay(function() {
				if (self.y >= self.ymin) {
					self.x = randomInt(self.limxi, self.limxs);
					self.emerger();
				}
			}, 60);
		});

	},
	//funcion que se llama cuando el barril toca el ojo, para poder ocultarlo debajo del mar
	golpearOjo: function() {
		this.cuenta = 0;//reiniciar la cuenta del tiempo para saber si se toca el ojo y el barco
		this.cancelTweener();
		this.sprite(1, 0);
		this.sumergir();
		return this;
	},
	
	llamarBestia: function() {
		var self = this;
		this.e_barco.detenerse();
		var y0 = this.y + 100;
		
		//ubicar la bestia de forma que el ojo quede en la boca de la bestia.
		var posx = this.e_barco.x + this.e_barco.w / 2 - this.bestia.w / 2;
		self.e_barco.sombra.addTween({alpha: 0.0}, "easeInOutCubic", 40);
		
		//movimiento de salida posterior bajada y borrado de 
		this.bestia.attr({x: posx})
				.addTween({y: -250}, "easeInOutCubic", 60, function() {
					self.e_barco.desaparecer();
					self.destroy();
					Crafty.e("DelayFrame").delay(function() {
						self.bestia.addTween({y: y0 + 20}, "easeInCubic", 40, function() {
							Crafty.e("DelayFrame").delay(function() {
								gesActividad.mostrarPerdiste();
							}, 60);
						});
					}, 25);
				});
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/5/actividad.js*/
/**
 * Actividad 5 actividad del barco.
 * @returns {ActBelalcaz5}
 */
var ActBelalcaz5 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;
	
	this.barco = null; // referencia a la entidad barco

	this.init = function() {

		var self = this;
		this.iniciarComponentes();

		//movimiento de brillo del agua
		this.elem[0].vx = Crafty.math.randomNumber(0.05, 0.3);
		this.elem[1].vx = Crafty.math.randomNumber(0.05, 0.3);
		this.elem[0].x0 = this.elem[0].x;
		this.elem[1].x0 = this.elem[1].x;
		
		var movAgua = function() {
			this.x += this.vx;
			if (this.x > this.x0 + 10) {
				this.vx = -Crafty.math.randomNumber(0.05, 0.3);
			}
			if (this.x < this.x0) {
				this.vx = Crafty.math.randomNumber(0.05, 0.3);
			}
		};
		this.elem[0].bind("EnterFrame", movAgua);
		this.elem[1].bind("EnterFrame", movAgua);

		this.barco = Crafty.e("B5_Barco").attr({ visible: false });

		Crafty.e("DelayFrame").delay(function() {
			self.elem[2].addTween({y: self.elem[2].y + self.elem[2].h}, 'easeOutQuad', 70);
			self.elem[3].addTween({x: -self.elem[3].w}, 'easeOutQuad', 55);
			self.elem[4].addTween({x: 1280}, 'easeOutQuad', 40);
			self.elem[5].addTween({x: 1160}, 'easeOutQuad', 50, function() {
				
				self.barco.attr({ x: -self.barco.w + 50, y: 198, z: 10, visible: true });
				self.barco.act = self;
				self.barco.aparecer();
				
				// 2 gestos: uno para el barco y otro para los barriles
				var g = Crafty.e("Gesto")
					.Gesto(1, { coords: [self.barco._x + 230, self.barco._y + 200], duracion: 180, retardo: 40 });
				self.barco.attach(g);
				
				Crafty.e("Gesto")
						.Gesto(1, { coords: [230, 60], duracion: 180, retardo: 40, deltaX: 180 });
				
				//ojo que sale del mar y verifica que toque el barco para que la bestia se coma el barco
				self.ojo = Crafty.e("B5_Ojo")
						.attr({x: 300, y: 500})
						//referencia al barco que debe vigilar,
						//posicion e y inicial y posicion minima y maxima de desplazamiento sobre eje x
						.B5_Ojo(self.barco, 323);
				
				self.areaBarriles.B5AreaBarriles(self.ojo, self.barco);
			});

		}, 60);

		//poner los tiburones a moverse
		this.elem[6].bind("EnterFrame", function() {
			this.x += 0.2;
		});
		this.elem[7].bind("EnterFrame", function() {
			this.x += 0.2;
		});
		
		
		
		return this;
	};

	this.iniciarComponentes = function() {
		this.barco = {}; //componente del barco de belalcazar 
		this.ojo = {}; //componente del ojo que observa el barco
		this.elem = []; //elementos de la actividad montañas y todo lo demas
		//poner fondo a la actividad
		Crafty.e("2D, Canvas, Image").image('img/act/belalcaz/5/fondo.jpg').attr({z: 0});
		//elementos estaticos sin movimiento
		Crafty.e("2D, Canvas, Image").image("img/act/belalcaz/5/aves.png").attr({x: 667, y: 344, z: 0});
		Crafty.e("2D, Canvas, Image").image("img/act/belalcaz/5/mar.png").attr({x: 0, y: 425, z: 20});
		//poner a mover estos dos brillos
		this.elem[0] = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/belalcaz/5/mar_brillo_1.png").attr({x: 294, y: 448, z: 21});
		this.elem[1] = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/belalcaz/5/mar_brillo_2.png").attr({x: 299, y: 443, z: 21});
		//quitar estas tres montañas hacia abajo y hacia los lados, dejar solamente la montaña del mar
		this.elem[2] = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/belalcaz/5/montana_1.png").attr({x: -29, y: 326, z: 5});
		this.elem[3] = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/belalcaz/5/montana_2.png").attr({x: -208, y: 365, z: 30});
		this.elem[4] = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/belalcaz/5/montana_3.png").attr({x: 1090, y: 460, z: 30});
		//montaña del mar sale despues del ocultamiento de las otras montañas
		this.elem[5] = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/belalcaz/5/montana_mar.png").attr({x: 1280, y: 285, z: 20});
		//dibujar los tiburones en el mar, dos 
		this.elem[6] = Crafty.e("2D, Canvas, Image")
				.image("img/act/belalcaz/5/tiburon.png")
				.attr({x: 264, y: 642, z: 25});
		this.elem[7] = Crafty.e("2D, Canvas, Image")
				.image("img/act/belalcaz/5/tiburon.png")
				.attr({x: 975, y: 507, z: 25});
		//area de toque de los barriles que salen en caida libre
		this.areaBarriles = Crafty.e("B5_AreaBarriles")
				.attr({x: 0, y: 0, z: 50, w: 1280, h: 168});

		//corona tgrande que va encima de la montana mar
		this.coronaGrande = Crafty.e("2D, Canvas, sprB5_coronaGrande")
				.attr({x: 1280 + 20, y: 193, z: this.elem[5].z});
		this.elem[5].attach(this.coronaGrande);
		return this;
	};


	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
                this.ojo.destroy();
		return this;
	};

	this.ganarActividad = function() {
                this.ojo.destroy();
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
                return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/6/sprites.js*/
function spritesBelalcaz6() {
	Crafty.sprite("img/act/belalcaz/6/elementos.png", {
		sprB6_corazon: [81, 77, 59, 48],
		sprB6_sol: [0, 77, 80, 90],
		sprB6_cartagena: [0, 173, 98, 249],
		sprB6_tumba: [154, 142, 228, 247]
	});

	Crafty.sprite(76, 76, "img/act/belalcaz/6/elementos.png", {
		sprB6_cabeza: [0, 0]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/6/componentes.js*/
Crafty.c("Laberinto_cabeza", {
	fila: -1,
	columna: -1,
	corazones: 0,
	cor: [],
	m: null,
	init: function() {
		this.requires("2D, Canvas, Tweener");
	},
	
	Laberinto_cabeza: function(spr) {
		this._spr = spr;
		this.requires(spr);
		this.m = matrizLaberinto();
		this.buscarPosIni();
		return this;
	},
	
	//buscar una posicion inicial donde se pueda arrancar
	buscarPosIni: function() {
		// Elegimos una posición de inicio aleatoria
		var arrPosIni = [[1,0],[2,1],[4,3],[4,7],[2,6]];
		var posIni = arrPosIni[randomInt(0, 4)];
		this.fila = posIni[0];
		this.columna = posIni[1];

		var posx = this.m[this.fila][this.columna].posCab.x;
		var posy = this.m[this.fila][this.columna].posCab.y;
		this.attr({x: posx, y: posy, z: 15});
		this.direccion = "";
		
		//poner en posicion los 5 corazones: 
		this.cor[0] = Crafty.e("Corazon").posicionInicial(0, 0);
		this.cor[1] = Crafty.e("Corazon").posicionInicial(0, 5);
		this.cor[2] = Crafty.e("Corazon").posicionInicial(4, 5);
		this.cor[3] = Crafty.e("Corazon").posicionInicial(5, 5);
		this.cor[4] = Crafty.e("Corazon").posicionInicial(5, 9);

		this.m[0][0].corazon = this.cor[0];
		this.m[0][5].corazon = this.cor[1];
		this.m[4][5].corazon = this.cor[2];
		this.m[5][5].corazon = this.cor[3];
		this.m[5][9].corazon = this.cor[4];
		return this.sigPos();//dibujar las posiciones que se puedan realizar	
	},
	
	//por cada posicion siguiente 
	sigPos: function() {
		var self = this;
		//obtener todas las siguientes posiciones 
		var sig = this.m[this.fila][this.columna];
		var destinos = sig.d;

		//construir un  componente por cada uno de los siguientes destinos
		for (var i = 0; i < destinos.length; i++) {
			var destinoX = destinos[i][0];
			var destinoY = destinos[i][1];
			var posxsol = 140 + destinoX * 105;
			var posysol = 62 + destinoY * 105;

			var destinoSol = Crafty.e("2D, Canvas, sprB6_sol, Soles, Mouse, Tweener")
					.attr({x: posxsol, y: posysol, z: this.z - 3});
			destinoSol.fila = destinoY;
			destinoSol.columna = destinoX;
			
			destinoSol.bind("MouseDown", function() {
				Crafty("Soles").each(function() {
					this.unbind("MouseDown");
					this.addTween({alpha: 0}, 'easeInOutQuad', 20, function() {
						this.destroy();
					});
				});
				self.determinarDireccion(this.columna).mover(this.fila, this.columna);
			});
		}
		return this;
	},
	
	/**
	 * mover la cabeza hacia una posicion en la matriz
	 * @param {type} posX posicion equivalente a al fila en la matriz
	 * @param {type} posY posicion equivalente a la columnav en la matriz
	 */
	mover: function(fila, columna) {
		var self = this;
		var sigposx = 150 + columna * 104;
		var sigposy = 68 + fila * 105;
		this.fila = fila;
		this.columna = columna;
		//this.attr({x: sigposx, y: sigposy});
		//this.sigPos();

		this.addTween({ x: sigposx, y: sigposy }, 'easeInOutQuad', 20, function() {
			var cor = self.m[fila][columna].corazon;
			if (cor !== null) {
				// Ocultamos el corazón e incrementamos el tiempo
				gesActividad.temporizador.incrementar(4000);
				cor.ocultar();
				self.m[fila][columna].corazon = null;
				self.corazones += 1;
				
				if (self.corazones === 5) {
					self.actividad.e_cartagena.mostrar();
				}
			}
			
			if (this.corazones === 5) {
				var cartag = this.actividad.e_cartagena;
				
				if (cartag.fila === this.fila && cartag.col === this.columna) {
					this.actividad.ganarActividad();
				}
			}
			
			self.sigPos();
		});
		
		
	},
	
	//determina la direccion de acuerdo a la posicion en X y en Y actuales del componente.
	determinarDireccion: function(col) {
		if (this.columna !== col) {
			if (this.columna < col) {
				this.sprite(0, 0);
			}
			else {
				this.sprite(1, 0);
			}
		}
		return this;
	}
});


Crafty.c("Corazon", {
	init: function() {
		this.requires("2D, Canvas, sprB6_corazon");
	},
	
	Corazon: function() {

	},
	
	posicionInicial: function(fila, columna) {
		this.fila = fila;
		this.columna = columna;
		this.attr({x: 128 + 25 + this.columna * 105, y: 53 + 33 + this.fila * 105, z: 14});
		return this;
	},
	
	ocultar: function() {
		this.destroy();
		return this;
	}
});

function matrizLaberinto() {
	var filas = 6;
	var columnas = 10;

	/**
	 * Posibles destino de cada 
	 * @type Array
	 */
	var destinos = [
		//fila 0:
		[
			[[1, 0]], //0,0
			[[2, 0], [1, 1], [0, 0]], //1,0
			[[4, 0], [2, 1], [1, 0]], //2,0
			null, //3,0
			[[4, 2], [2, 0]], //4,0
			[[7, 0]], //5,0
			null, //6,0
			[[7, 1], [5, 0]], //7,0
			[[9, 0], [8, 2]], //8,0
			[[9, 5], [8, 0]]//9,0
		],
		//fila 1:
		[
			[[1, 1], [0, 5]], //0,1
			[[0, 1], [1, 0]], //1,1
			[[3, 1], [2, 0]], //2,1
			[[3, 2], [2, 1]], //3,1
			null, //4,1
			[[7, 1], [5, 2]], //5,1
			null, //6,1
			[[5, 1], [7, 0]], //7,1
			null, //8,1
			null //9,1
		],
		//fila 2:
		[
			null, //0,2
			[[1, 3]], //1,2
			[[3, 2], [2, 3]], //2,2
			[[2, 2], [3, 1]], //3,2
			[[5, 2], [4, 3], [4, 0]], //4,2
			[[4, 2], [5, 1]], //5,2
			[[7, 2]], //6,2
			[[8, 2], [7, 4], [6, 2]], //7,2
			[[8, 5], [7, 2], [8, 0]], //8,2
			null//9,2
		],
		//fila 3:
		[
			null, //0,3
			[[2, 3], [1, 2]], //1,3
			[[3, 3], [1, 3], [2, 2]], //2,3
			[[3, 4], [2, 3]], //3,3
			[[5, 3], [4, 4], [4, 2]], //4,3
			[[6, 3], [5, 4], [4, 3]], //5,3
			[[6, 5], [5, 3]], //6,3
			null, //7,3
			null, //8,3
			null //9,3
		],
		//fila 4:
		[
			null, //0,4
			[[2, 4], [1, 5]], //1,4
			[[2, 5], [1, 4]], //2,4
			[[3, 3]], //3,4
			[[4, 3]], //4,4
			[[5, 3]], //5,4
			null, //6,4
			[[7, 2]], //7,4
			null, //8,4
			null //9,4
		],
		//fila 5:
		[
			[[1, 5], [0, 1]], //0,5
			[[1, 4], [0, 5]], //1,5
			[[5, 5], [2, 4]], //2,5
			null, //3,5
			null, //4,5
			[[2, 5]], //5,5
			[[8, 5], [6, 3]], //6,5
			null, //7,5
			[[6, 5], [8, 2]], //8,5
			[[9, 0]]//9,5
		]
	];

	/**
	 * Funcion para generar una matriz (array de varios array)
	 * @param {type} filas numero de filas que va a tener la matriz
	 * @param {type} columnas numero de columnas 
	 * @param {type} f Funcion que determina el contenido de la celda.
	 */
	function armarMatriz(filas, columnas, f) {
		var matriz = [];
		for (var i = 0; i < filas; i++) {
			matriz[i] = [];
			for (var j = 0; j < columnas; j++) {
				matriz[i][j] = f(i, j);
			}
		}
		return matriz;
	}

	/**
	 * Calcular las posiciones de las cabezas   
	 */
	var posicionesCabeza = armarMatriz(filas, columnas, function(i, j) {
		return {
			x: 150 + j * 104,
			y: 68 + i * 105
		};
	});

	/**
	 * Calcular las posiciones de los corazones   
	 */
	var posicionesCorazon = armarMatriz(filas, columnas, function(i, j) {
		return {
			x: 161 + j * 104,
			y: 85 + i * 105
		};
	});

	/**
	 * Calcular las posiciones de los corazones   
	 */
	var posicionesSol = armarMatriz(filas, columnas, function(i, j) {
		return {
			x: 152 + j * 105,
			y: 78 + i * 105
		};
	});

	/**
	 * Funcion para retornar el contenido de una celda del labertinto
	 * debe tener los destinos, indicadores si es corazon y si esta activo
	 * y la posicion en pixeles de la celda
	 * @param {type} i posicion en x
	 * @param {type} j posicion en y
	 * @returns {matrizLaberinto.celda.Anonym$1}
	 */
	function celda(i, j) {
		return {
			d: destinos[i][j],
			corazon: null,
			activo: false,
			posCab: posicionesCabeza[i][j],
			posCor: posicionesCorazon[i][j],
			posSol: posicionesSol[i][j]
		};
	}

	/**
	 * Matriz que representa el laberinto de la actividad
	 * contenido de cada celda: 
	 * posMov : matriz con los posibles movimientos a las celdas vecinas
	 * corazon: bandera para indicar true si hay un corazon.
	 * activo: bandera para indicar si hay que calcular/mostrar los posibles movimientos.
	 * pos: array con posiciones a X y Y relativas a la matriz
	 */
	this.matriz = armarMatriz(filas, columnas, celda);
	return this.matriz;
}

// icono de salida del laberinto
Crafty.c("B6_Cartagena", {
	fila: 0, // posición
	col: 0,
	x0: 0,
	y0: 0,
	
	init: function() {
		var arrPosIni = [[1,0],[4,2],[8,0],[1,3]];
		var posIni = arrPosIni[randomInt(0, 3)];
		this.col = posIni[0];
		this.fila = posIni[1];
		this.x0 = 140 + posIni[0] * 105;
		this.y0 = 70 + posIni[1] * 105;
		
		this.requires("2D, Canvas, sprB6_cartagena, Tweener")
				.attr({ x: this.x0, y: this.y0, z: 10, alpha: 0, visible: false });
	},
	
	mostrar: function() {
		this.visible = true;
		this.addTween({ alpha: 1 }, "linear", 5);
		this.x -= 50;
		this.y -= 50;
		this.w += 100;
		this.h += 100;
		this.addTween({ x: this.x0, y: this.y0, w: this._w - 100, h: this._h - 100 }, "easeOutElastic", 70);
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/belalcaz/6/actividad.js*/
/**
 * Actividad de laberinto de belalcazar
 * @returns {ActBelalcaz6}
 */
var ActBelalcaz6 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;
	this.e_cartagena = null; // salida del laberinto

	this.init = function() {
		this.iniciarComponentes();
		Crafty("Soles").each(function() {
			Crafty.e("Gesto")
						.Gesto(1, { coords: [this.x + 45, this.y + 50], duracion: 90, retardo: 40 });
		});
		return this;
	};


	this.iniciarComponentes = function() {
		Crafty.e("2D, Canvas, Image").image("img/act/belalcaz/6/fondo.jpg").attr({z: 0});
		var arbusto = Crafty.e("2D, Canvas, Image").image("img/act/belalcaz/6/plano1_arbusto.png");
		arbusto.attr({x: 0, y: 800 - arbusto.h, z: 20});
		this.cabeza = Crafty.e("Laberinto_cabeza").Laberinto_cabeza("sprB6_cabeza");
		this.cabeza.actividad = this;
		
		// Agregamos la salida del laberinto (cartagena)
		this.e_cartagena = Crafty.e("B6_Cartagena");
	};

	//verificar si ya se han colocados todos los numeros.
	this.arrastreCompleto = function() {
		//contar el numero de entidades de tipo Completo
		if (this.aciertos === this.totAciertos) {
			this.ganarActividad();
		}
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		Crafty("Soles").each(function() {
			this.destroy();
		});
		this.cabeza.destroy();
		return this;
	};

	this.ganarActividad = function() {
		Crafty("Soles").each(function() {
			this.destroy();
		});
		
		var cabeza = this.cabeza;
		var e_tumba = Crafty.e("2D, Canvas, Tweener, sprB6_tumba").attr({ alpha: 0, z: 15 });
		e_tumba.x = cabeza._x + 10;
		e_tumba.y = cabeza._y - 30;
		
		// Mostramos la cortina negra
		Crafty.e("2D, Canvas, Color, Tweener")
				.color("#000000")
				.attr({ w: 1280, h: 800, z: 14, alpha: 0 })
				.addTween({ alpha: 1 }, "linear", 10, function() {
					cabeza.addTween({ y: this._y - 50, alpha: 0 }, "easeInQuart", 60, function() {
						e_tumba.addTween({ alpha: 1 }, "linear", 30, function() {
							gesActividad.temporizador.parar();
							gesActividad.mostrarPuntaje();
						});
					});
				});
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/parque/1/sprites.js*/
function spritesParque1() {
        Crafty.sprite("img/act/parque/1/nubes.png", {
                sprP1_nube0: [0, 0, 213, 77],
                sprP1_nube1: [0, 80, 230, 60],
                sprP1_nube2: [0, 143, 128, 56]
        });
        Crafty.sprite(53, 68, "img/act/parque/1/numerosayuda.png", {
                sprP1_numero: [0, 0]
        });
        Crafty.sprite("img/act/parque/1/botones.png", {
                sprP1_btPregunta: [0, 0, 56, 84],
                sprP1_btPregunta2: [0, 88, 56, 84]
        });




}
/*C:\uniserver\www\hdp\public_html\src/act/parque/1/componentes.js*/

Crafty.c("P1BloqueManz", {
        juego: {}, //referencia a la matriz representacion matricial del juego
        fila: -1, // posicion de la fila en la matriz
        columna: -1, //posicion de la columna en la matriz
        e_numero: null, //entidad que se comporta como numero.
        init: function() {
                this.requires("2D, Canvas, Image, Tweener, Mouse");
        },
        P1BloqueManz: function(numero, juego, fila, columna) {
                this.image("img/act/parque/1/manzana" + (1 + numero) + ".png")
                this.numero = numero;
                this.juego = juego;
                this.filaIni = fila;
                this.columnaIni = columna;
                this.fila = fila;
                this.columna = columna;
                this.velMov = 10;
                this.e_numero = Crafty.e("2D, Canvas, sprP1_numero, Sprite, Tweener")
                        .sprite(0, this.numero);
                this.e_numero.attr({
                        x: this.x + this.w / 2 - this.e_numero.w / 2,
                        y: this.y + this.h / 2 - this.e_numero.h / 2,
                        z: this.z + 1
                });
                this.attach(this.e_numero);
                return this;
        },
        //asignar evento de movimiento.
        iniciar: function() {
                this.bind("MouseDown", function() {
                        this.imprimirMatriz();
                        if (this.juego.matriz[this.fila][this.columna] == 1) {
                                //validar por cada posicion si tiene el vecino vacio
                                // a la derecha
                                if (this.actPosicion(this.fila, this.columna + 1)) {
                                        return;
                                }
                                //a la izquierda
                                if (this.actPosicion(this.fila, this.columna - 1)) {
                                        return;
                                }
                                // hacia arriba
                                if (this.actPosicion(this.fila - 1, this.columna)) {
                                        return;
                                }
                                // hacia abajo
                                if (this.actPosicion(this.fila + 1, this.columna)) {
                                        return;
                                }
                        }
                });
                return this;
        },
        imprimirMatriz: function() {
                console.log(this.juego.matriz);
        },
        actPosicion: function(nfila, ncolumna) {
                if (this.juego.matriz[nfila] != null) {
                        if (this.juego.matriz[nfila][ncolumna] == 0) { // si hay un cero en la posicion dada, intercambiar valores
                                this.mover(nfila, ncolumna);
                                this.verificarPosicion();
                                return true;
                        }
                }
                return false;
        },
        //calcula la nueva posicion en la matriz y saca su siguiente posicion
        mover: function(nfila, ncolumna, cllbck) {
                //quitar el bloque de la posicion actual
                this.juego.matriz[this.fila][this.columna] = 0;
                this.juego.matriz[nfila][ncolumna] = 1;
                //calcular nueva posicion
                var nposx = this.juego.posiciones[nfila][ncolumna].x;
                var nposy = this.juego.posiciones[nfila][ncolumna].y;
                //colocarlo en una posicion nueva
                this.addTween({x: nposx, y: nposy}, "easeInOutQuad", this.velMov, function() {
                        if (cllbck) {
                                cllbck();
                        }
                });
                //actualizar posiciones
                this.fila = nfila;
                this.columna = ncolumna;
        },
        verificarPosicion: function() {
                var posCorrecta = true;
                Crafty("P1BloqueManz").each(function() {
                        if (this.fila != this.filaIni || this.columna != this.columnaIni) {
                                posCorrecta = false;
                        }
                });
                if (posCorrecta) {
                        this.juego.posicionesOK();
                }
        },
        mostrarNumero: function(sw) {
                this.e_numero.addTween({alpha: (sw ? 1.0 : 0.0)}, "linear", 20);
                return this;
        }
});




/*C:\uniserver\www\hdp\public_html\src/act/parque/1/actividad.js*/
/**
 * Actividad parque caldas, armar la estructura monumento del FJCaldas
 * @returns {ActParque1}
 */
var ActParque1 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		var self = this;
		Crafty.e('2D, Canvas, Color')
				.attr({x: 0, y: 0, z: 0, h: 800, w: 1280})
				.color("#1A1A1A");

		this.crearEntidades();
		//cambiar la velocidad con la que se mueve 
		//animacion inicial, revolver
		this.juegoB.manzanas[7].mover(2, 2, function() {
			self.juegoB.manzanas[4].mover(2, 1, function() {
				self.juegoB.manzanas[5].mover(1, 1, function() {
					self.juegoB.manzanas[2].mover(1, 2, function() {
						self.juegoB.manzanas[1].mover(0, 2, function() {
							self.juegoB.manzanas[0].mover(0, 1, function() {
								self.juegoB.manzanas[3].mover(0, 0, function() {
									self.juegoB.manzanas[6].mover(1, 0, function() {
										self.juegoB.manzanas[4].mover(2, 0, function() {
											self.juegoB.manzanas[5].mover(2, 1, function() {
												self.juegoB.manzanas[2].mover(1, 1, function() {
													self.juegoB.manzanas[1].mover(1, 2, function() {
														self.juegoB.manzanas[0].mover(0, 2, function() {
															self.juegoB.manzanas[3].mover(0, 1, function() {
																Crafty("P1BloqueManz").each(function() {
																	this.velMov = 25;
																	this.iniciar();
																	this.mostrarNumero();
																});
																self.e_btPregunta.bind("MouseDown", function() {
																	Crafty("P1BloqueManz").each(function() {
																		this.mostrarNumero(true);
																		var self = this;
																		setTimeout(function() {
																			self.mostrarNumero(false);
																		}, 1500);
																	});
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
		Crafty("P1Nube").each(function() {
			this.x0 = this.x;
			this.vx = Crafty.math.randomNumber(0.05, 0.5);
			this.bind("EnterFrame", function() {
				this.x += this.vx;
				if (this.x > 1280) {
					this.y = Crafty.math.randomInt(0, 600);
					this.x = -this.w;
				}
			});
		});

		return this;
	};

	this.crearEntidades = function() {
		var self = this;
		//objeto indicador de posiciones del juego
		this.juegoB = {
			posiciones: [
				[{x: 215, y: 3, z: 10}, {x: 487, y: 3, z: 10}, {x: 759, y: 3, z: 10}],
				[{x: 215, y: 269, z: 10}, {x: 487, y: 269, z: 10}, {x: 759, y: 269, z: 10}],
				[{x: 215, y: 535, z: 10}, {x: 487, y: 535, z: 10}, {x: 759, y: 535, z: 10}]
			],
			matriz: [[1, 1, 1], [1, 1, 1], [1, 1, 0]],
			manzanas: [],
			posicionesOK: function() {
				self.ganarActividad();
			}
		};
		//representacion matricial de las manzanas
		this.manzFondo = [];//fondo del juego
		var count = 0; //var local contador
		for (var i = 0; i < this.juegoB.matriz.length; i++) {
			for (var j = 0; j < this.juegoB.matriz[0].length; j++) {
				var posx = this.juegoB.posiciones[i][j].x;
				var posy = this.juegoB.posiciones[i][j].y;
				var posz = this.juegoB.posiciones[i][j].z;
				//dibujar fondo del juego
				this.manzFondo[i] = Crafty.e("2D, Canvas, Image")
						.image("img/act/parque/1/manzana9.png")
						.attr({x: posx, y: posy, z: posz - 1});

				if (this.juegoB.matriz[i][j] == 1) {
					this.juegoB.manzanas[count] = Crafty.e("P1BloqueManz")
							.attr({x: posx, y: posy, z: posz})
							.P1BloqueManz(count, this.juegoB, i, j);
					count += 1;
				}
			}
		}

		//mostrar las nubes
		Crafty.e("2D, Canvas, sprP1_nube0, P1Nube").attr({x: 56, y: 200, z: 50});
		Crafty.e("2D, Canvas, sprP1_nube1, P1Nube").attr({x: 941, y: 237, z: 50});
		Crafty.e("2D, Canvas, sprP1_nube2, P1Nube").attr({x: 532, y: 510, z: 50});
		Crafty.e("2D, Canvas, sprP1_nube2, P1Nube").attr({x: 766, y: 411, z: 50});
		//dibujar el boton de ayuda
		this.e_btPregunta = Crafty.e('Boton, Tweener').attr({z: 60})
				.Boton("sprP1_btPregunta", "sprP1_btPregunta2").posIni(1127, 540);
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/parque/2/sprites.js*/
function spritesParque2() {
	Crafty.sprite("img/act/parque/2/partes.png", {
		sprP1_estatua0: [0, 0, 128, 171],
		sprP1_estatua1: [2, 173, 126, 172],
		sprP1_estatua2: [0, 347, 83, 77],
		sprP1_estatua3: [0, 426, 79, 78],
		sprP1_estatua4: [0, 506, 79, 77],
		sprP1_estatua5: [0, 585, 60, 63],
		sprP1_estatua6: [0, 650, 118, 95],
		sprP1_estatua7: [0, 747, 102, 94]
	});

	Crafty.sprite("img/act/parque/2/sombras.png", {
		sprP1_sombra0: [118, 0, 190, 164],
		sprP1_sombra1: [116, 170, 192, 163],
		sprP1_sombra2: [5, 343, 304, 164],
		sprP1_sombra3: [0, 514, 308, 207]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/parque/2/componentes.js*/
/**
 * Componentes de Parque - Actividad 2
 */

// Parte de Monumento de PArque Caldas arrastrable con soporte de física
Crafty.c("P2Bloque", {
	num: 0, // ID del bloque
	b2shape: null, // Arreglo de posiciones [x,y] relativas a la entidad. Describe el polígono de colisión
	callbackDestroy: null, // Función de callback al destruir este objeto
	_padre: null, // Referencia al objeto creador
	_e_hueco: null, // Referencia a la entidad hueco correspondiente (si aplica)
	destX1: 0, // posiciones que definien el MBR del hueco correspondiente
	destX2: 0,
	destY1: 0,
	destY2: 0,
	insertable: true, // false si es una trampa

	init: function() {
		this.requires("B2arrastre, Tweener");
		this.arrastrable = true;


		this.bind("MouseUp", function(e) {
			var self = this;
			if (this.insertable) {
				var pos = mouseCoords(e);
				if (pos.x > this.destX1 && pos.x < this.destX2 && pos.y > this.destY1 && pos.y < this.destY2) {
					if (self._bloqObliga != null) {
						var pasa = true;
						//verificar por cada uno de los bloques que son obligatorios de que esten colocados
						//para poder ubicarlo en su posicion correcta
						for (var i = 0; i < self._bloqObliga.length; i++) {
							Crafty("P2Bloque").each(function() {
								if (this.num == self._bloqObliga[i]) {
									if (this.arrastrable) {
										pasa = false;
									}
								}
							});
						}
						if (!pasa) {
							return;
						}
					}

					this.arrastrable = false;
					this.unbind("MouseUp");
					this.unbind("MouseDown");
					this.unbind("MouseMove");

					world.DestroyBody(this.body);

					var grados = this.rotation;
					while (grados < 0) {
						grados += 360;
					}
					while (grados >= 360) {
						grados -= 360;
					}
					this.rotation = grados;

					this.addTween({
						rotation: (grados > 180) ? 360 : 0,
						x: this.destX1,
						y: this.destY1
					}, 'easeInOutQuad', 25, function() {
						this.fijar();
						this.ponerSombra();
					});
				}
			}
		});

		return this;
	},
	P2Bloque: function(objPadre, e_hueco, num, b2shape, spr, bloqobli) {
		this._padre = objPadre;
		this.num = num;
		this.requires(spr);
		this._e_hueco = e_hueco;
		this._b2shape = b2shape;
		this._bloqObliga = bloqobli;

		switch (num) {
			case 0:
				this.areaMap([24, 0], [126, 0], [126, 170], [0, 170]);
				break;
			case 1:
				this.areaMap([0, 0], [103, 0], [126, 170], [0, 170]);
				break;
			case 2:
				this.areaMap([32, 0], [56, 0], [84, 76], [0, 76]);
				break;
			case 3:
				this.areaMap([0, 0], [77, 1], [54, 77], [23, 76]);
				break;
			case 4:
				this.areaMap([23, 0], [46, 0], [76, 74], [0, 77]);
				break;
			case 5:
				this.areaMap([22, 0], [46, 0], [59, 53], [2, 53]);
				break;
			case 6:
				this.areaMap([11, 0], [69, 0], [118, 56], [104, 83], [69, 94], [0, 93]);
				break;
			case 7:
				this.areaMap([10, 0], [80, 0], [101, 93], [2, 93]);
				break;
		}

		if (b2shape.length > 0) {
			this.b2shape = b2shape;
			this.box2d({
				bodyType: 'dynamic',
				density: 500, //0.000001,
				friction: 0.5,
				restitution: 0.2,
				shape: this.b2shape
			});
		}
		this.body.SetAngularDamping(3);

		this.B2arrastre(this._padre.b2a);

		// obtenemos las coordenadas de destino
		this.destX1 = e_hueco._x;
		this.destY1 = e_hueco._y;
		this.destX2 = this.destX1 + e_hueco._w;
		this.destY2 = this.destY1 + e_hueco._h;
		return this;
	},
	// Fijar el bloque en su lugar y no permitir que lo vuelvan a manipular
	fijar: function() {
		this.z -= 1; // Detrás de las otras piezas
		this._e_hueco.visible = false;

		var par = new Particulas({
			componentes: "spr_polvo, SpriteAnimation",
			x: this._x, y: this._y, z: 5,
			vx: 0,
			deltaVx: 2,
			periodo: 50,
			deltaOriY: this._h,
			deltaOriX: this._w - 40,
			numParticulas: 6,
			magnitud: 10,
			duracion: 20,
			atenuacion: 8,
			f_crear: function(ent) {
				ent.reel("giro", 400, [[0, 0], [32, 0], [64, 0], [96, 0]]).animate("giro", -1);
			}
		});
		par.iniciar();
		this._padre.bloqueFijado(); // Notificar al padre
	},
	//colocar segun sea el bloque la sombra correspondiente
	ponerSombra: function() {
		if (this.num == 0) {
			Crafty.e("2D, Canvas, sprP1_sombra0, Tweener")
					.attr({x: 437, y: 533, z: 1, alpha: 0})
					.addTween({alpha: 1}, 'easeInOutQuad', 15);
		}
		if (this.num == 1) {
			Crafty.e("2D, Canvas, sprP1_sombra1, Tweener")
					.attr({x: 550, y: 533, z: 1, alpha: 0})
					.addTween({alpha: 1}, 'easeInOutQuad', 15);
		}
		if (this.num == 3) {
			Crafty.e("2D, Canvas, sprP1_sombra2, Tweener")
					.attr({x: 439, y: 533, z: 1, alpha: 0})
					.addTween({alpha: 1}, 'easeInOutQuad', 15);
		}
		if (this.num == 4) {
			Crafty.e("2D, Canvas, sprP1_sombra3, Tweener")
					.attr({x: 434, y: 533, z: 1, alpha: 0})
					.addTween({alpha: 1}, 'easeInOutQuad', 15);
		}
	}
});



// Hueco donde se inserta el bloque
Crafty.c("P2Hueco", {
	num: 0, // ID del bloque corespondiente
	_padre: null, // Referencia al objeto creador

	init: function() {
		this.requires("2D, Canvas");
		return this;
	},
	P2Hueco: function(objPadre, num, spr) {
		this._padre = objPadre;
		this.num = num;
		this.requires(spr);//asignarle la sprite al componente
		return this;
	}
});





/*C:\uniserver\www\hdp\public_html\src/act/parque/2/actividad.js*/
/**
 * Actividad parque caldas, armar la estructura monumento del FJCaldas
 * @returns {ActParque1}
 */
var ActParque2 = function() {
	this.e_piso = null; // Entidad que se pasa como referencia para el MouseBind
	this.huecos = Array(8);
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.b2a = new B2arrastre();

	
	this.init = function() {
		this.crearEntidades();
		// Inicializamos el objeto gestor de arrastre de la escena

		this.b2a.init(this.e_piso);
		this.desMonumento();
		if (!cocoon) {
			Crafty.box2D.showDebugInfo();
		}
		return this;
	};


	this.crearEntidades = function() {
		Crafty.e("2D, Canvas, Image").image("img/act/parque/2/fondo.jpg").attr({z: 0});
		// Cuerpo del piso 
		this.e_piso = Crafty.e('2D, Canvas, Box2D')
				.box2d({
					bodyType: 'static',
					shape: [[0, 550], [1280, 550]]
				});
		// Paredes
		Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 0], [1280, 0]]});
		Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 0], [0, 800]]});
		Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[1280, 0], [1280, 800]]});
		Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 800], [1280, 800]]});
		this.crearPartes();
		return this;
	};

	this.crearPartes = function() {
		var n = 8;
		//posiciones donde deben estar ubicados los bloques
		this.attrPartes = [
			{x: 496, y: 362, z: 5, alpha: 0.1},
			{x: 622, y: 362, z: 5, alpha: 0.1},
			{x: 526, y: 288, z: 5, alpha: 0.1},
			{x: 583, y: 288, z: 5, alpha: 0.1},
			{x: 637, y: 288, z: 5, alpha: 0.1},
			{x: 591, y: 46, z: 5, alpha: 0.1},
			{x: 581, y: 100, z: 5, alpha: 0.1},
			{x: 569, y: 194, z: 5, alpha: 0.1}
		];
		//figuras de los bloques
		this.attrPartesBloques = [
			[[24, 0], [126, 0], [126, 170], [0, 170]],
			[[0, 0], [103, 0], [126, 170], [0, 170]],
			[[32, 0], [56, 0], [84, 76], [0, 76]],
			[[0, 0], [77, 1], [54, 77], [23, 76]],
			[[23, 0], [46, 0], [76, 74], [0, 77]],
			[[22, 0], [46, 0], [59, 53], [2, 53]],
			[[11, 0], [69, 0], [118, 56], [104, 83], [69, 94], [0, 93]],
			[[10, 0], [80, 0], [101, 93], [2, 93]]
		];
		//estos son los bloques obligatorios que deben estar ubicados para poder ponerlo en la posicion correcta
		this.bloquesObli = [
			null,
			null,
			[0],
			[0, 1],
			[1],
			[6],
			[7],
			[2, 4]
		];

		//crear los huecos en las posiciones donde deben ir encajando y los bloques en la misma posicion
		for (var i = 0; i < n; i++) {
			//crear el hueco para hacer encajar las partes del monumento
			this.huecos[i] = Crafty.e("P2Hueco")
					.attr(this.attrPartes[i])
					.P2Hueco(this, i, "sprP1_estatua" + i);
			//partes del monumento
			Crafty.e("P2Bloque")
					.attr({x: this.attrPartes[i].x, y: this.attrPartes[i].y, z: 10})
					.P2Bloque(this, //referencia a la actividad padre
							this.huecos[i], //referencia al hueco donde va a encajar
							i, //numero asignado como identificador
							this.attrPartesBloques[i], //figura de componente
							"sprP1_estatua" + i, //sprite de componente
							this.bloquesObli[i]);//bloques que deben estar encajados para que encaje
		}
	};

	//Hacer mover los bloques para diferentes partes. (aplicar un impulso)
	this.desMonumento = function() {
		var self = this;
		Crafty.e("2D, Canvas, Color, Ubicador").color("blue").attr({z: 20, h: 10, w: 10})

		Crafty.e("Delay").delay(function() {
			Crafty("P2Bloque").each(function() {
				//obteniendo la fuerza necesaria para mover los bloques
				var force = new b2Vec2(
						(Crafty.math.randomElementOfArray([-1, 1]) * this.body.GetMass() * 10),
						-this.body.GetMass() * 3);
				this.body.ApplyImpulse(force, this.body.GetWorldCenter());
			});
			Crafty.e("Delay").delay(function() {
				Crafty("BolaDestroy").each(function() {
					world.DestroyBody(this.body);
				});
			}, 2000);
		}, 1000);

	};

	//verificar si ya se han colocados todos los numeros.
	// Invocada por cada bloque al ser fijado
	this.bloqueFijado = function() {
		this.aciertos++;
		if (this.aciertos >= this.totAciertos) {
			this.ganarActividad();
		}
	};


	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		var self = this;
		Crafty.e("2D, Canvas, Image, Tweener")
				.attr({z: 1, alpha: 0})
				.image("img/act/parque/2/fondo_color.jpg")
				.addTween({alpha: 1}, 'easeInOutQuad', 25, function() {
					gesActividad.mostrarPuntaje();
				});
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/parque/3/sprites.js*/
function spritesParque3() {
	Crafty.sprite(119, 95, "img/act/parque/3/hormiga_camina.png", {
		sprP3_hcamina: [0, 0]
	});
	Crafty.sprite(122, 100, "img/act/parque/3/hormiga_muerta.png", {
		sprP3_hmuerta: [0, 0]
	});
	Crafty.sprite(120, 95, "img/act/parque/3/hormiga_muerde.png", {
		sprP3_hmuerde: [0, 0]
	});
	Crafty.sprite("img/act/parque/3/enredadera.png", {
		sprP3_enredadera8: [0, 0, 69, 68],
		sprP3_enredadera7: [0, 70, 60, 65],
		sprP3_enredadera6: [0, 137, 52, 64],
		sprP3_enredadera5: [0, 203, 48, 64],
		sprP3_enredadera4: [0, 269, 60, 73],
		sprP3_enredadera3: [0, 344, 57, 61],
		sprP3_enredadera2: [0, 407, 56, 48],
		sprP3_enredadera1: [0, 457, 55, 65],
		sprP3_enredadera0: [0, 524, 18, 37]
	});

	//Onomatopeyas
	Crafty.sprite("img/act/parque/3/onomatopeyas.png", {
		sprP3_bien: [15, 0, 125, 78],
		sprP3_splat: [16, 81, 125, 95],
		sprP3_kapaw: [0, 178, 156, 109],
		sprP3_crunch: [10, 289, 135, 130],
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/parque/3/componentes.js*/
Crafty.c("P3_GeneradorHormigas", {
	bloqueado: false,
	x0: 670, //POSICION x DONDE DEBE IR A PARAR LA HORMIGA
	y0: 500, //posicion y donde debe ir a parar la hormiga
	mint: 1000, //tiempo minimo de generacion de hormiga
	maxt: 2000, //tiempo maximo de generacion de hormiga
	numHormigasMax: 0, //numeo de hormigas maximo por escena
	init: function() {
		//posiciones de salida de las hormigas.
		this.posxyz = [
			//x:posicion inicialen x, y:posicion inicial en y, z:posicion inicial en z, 
			//xfinal: posicion final en x, yfinal: posicion final en y, t:tiempo desde la posicion inicial hasta la posicion final
			//der: indica si la hormiga mira para la derecha o la izquierda.
			{x: -88, y: 512, z: 20, xfinal: 520, yfinal: 475, t: 300, der: true},
			{x: -80, y: 750, z: 20, xfinal: 525, yfinal: 480, t: 330, der: true},
			{x: 116, y: 764, z: 20, xfinal: 530, yfinal: 485, t: 350, der: true},
			{x: 378, y: 774, z: 20, xfinal: 540, yfinal: 490, t: 330, der: true},
			{x: 778, y: 778, z: 20, xfinal: 635, yfinal: 495, t: 300, der: false},
			{x: 1014, y: 786, z: 20, xfinal: 620, yfinal: 475, t: 350, der: false},
			{x: 1192, y: 786, z: 20, xfinal: 635, yfinal: 495, t: 300, der: false},
			{x: 1252, y: 610, z: 20, xfinal: 620, yfinal: 490, t: 330, der: false},
			{x: 1242, y: 498, z: 20, xfinal: 635, yfinal: 480, t: 350, der: false}
		];
	},
	P3_GeneradorHormigas: function(rama, max) {
		this.rama = rama;
		this.numHormigasMax = max;
		this.generar();
		return this;
	},
	//si el numero actual de hormigas en escena es menor al tope entonces genera una hormiga.
	generar: function() {
		var self = this;
                //generar un numero determinado de hormigas
                if(Crafty("P3_Hormiga").length < self.numHormigasMax ){
                    //bloquear el gnerador de hormigas en caso que se haya excedido el numero de hormigas
                    Crafty.e("Delay").delay(function() {
                                if (!self.bloqueado) {
                                        //self.bloqueado = Crafty("P3_Hormiga").length >= self.numHormigasMax ? true : false;
                                        self.nuevaHormiga().generar();
                                }
                    }, Crafty.math.randomInt(this.mint, this.maxt));
                }else{
                    this.bloqueado = true;
                }
		return this;
	},
	//genera en una posicion aleatoria una hormiga.
	nuevaHormiga: function() {
		var pos = Crafty.math.randomElementOfArray(this.posxyz);
		Crafty.e("P3_Hormiga")
				.P3_Hormiga(this, pos.der)
				.attr({x: pos.x, y: pos.y, z: pos.z})
				.addTween({x: pos.xfinal, y: pos.yfinal}, "easeOutSine", pos.t, function() {
					this.comer();
				});
		return this;
	},
	//intentar generar una hormiga solo si ya se ha llagado al tope de hormigas.
	hormigaMuerta: function() {
                if (this.bloqueado) {
                        this.bloqueado = false;
                        this.generar();
		}
		return this;
	}
});


Crafty.c("P3_Hormiga", {
	e_padre: null, //referencia al generador de hormigas
	der: false, //conoce la spprite
	spr_caminando: "sprP3_hcamina",
	spr_muerde: "sprP3_hmuerde",
	spr_muerta: "sprP3_hmuerta",
	init: function() {
		this.requires("2D, Canvas, Hormiga, SpriteAnimation, Mouse, Tweener");
		return this;
	},
	P3_Hormiga: function(e_padre, der) {
		this.e_padre = e_padre;
		this.der = der;
		this.caminar()
				.bind("MouseDown", function(e) {
					this.removeComponent("Mouse")
							.unbind("MouseDown")
							.cancelTweener()
							.morir();
					Crafty.e("Onomatopeya").Onomatopeya(Crafty.math.randomInt(2, 3), {x: this.x, y: this.y});
				});
		return this;
	},
	caminar: function() {
		this.addComponent(this.spr_caminando);
		this.reel("camina", 1000, this.der ? [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]] : [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0]])
				.animate("camina", -1);
		return this;
	},
	comer: function() {
		this.cancelTweener()
				.removeComponent(this.spr_caminando)
				.addComponent(this.spr_muerde)
				.reel("muerde", 500, this.der ? [[0, 1], [1, 1], [2, 1]] : [[0, 0], [1, 0], [2, 0]])
				.animate("muerde", -1)
				.bind("EnterFrame", function() {
					this.e_padre.rama.hormigaComeRama(this);
				});
		return this;
	},
	morir: function() {
		this.removeComponent(this.spr_caminando)
				.addComponent(this.spr_muerta)
				.reel("morir", 500, this.der ? [[0, 1], [1, 1], [2, 1]] : [[0, 0], [1, 0], [2, 0]])
				.animate("morir", 1);
		var self = this;
		Crafty.e("Delay").delay(function() {
			self.addTween({x: this.x, y: this.y, alpha: 0.0}, "easeOutSine", 25, function() {
				this.destroy();
				//intentar generar una nueva hormiga de acuerdo al numero de hormigas que hay
				self.e_padre.hormigaMuerta();
			});
		}, 2000);
		return this;
	}
});



Crafty.c("P3_Regadera", {
	rama: null,
	count: 0,
	init: function() {
		this.requires("2D, Canvas, Image, Mouse").image("img/act/parque/3/regadera.png");
	},
	P3_Regadera: function(rama) {
		this.rama = rama;
		this.bind("MouseDown", function() {
			this.generarGota({x: Crafty.math.randomInt(530, 680), y: Crafty.math.randomInt(153, 213), z: this.z});
			this.rama.regaderaRociaAgua(this);
		});
		return this;
	},
	generarGota: function(pos) {
		var gota = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/parque/3/gota.png")
				.attr({x: pos.x, y: pos.y, z: 2});
		gota.vy = 0;
		gota.bind("EnterFrame", function() {
			this.vy += 0.5;
			this.y += this.vy;
			if (this.y > Crafty.math.randomInt(570, 600)) {
				this.vy = 0;
				if (!this.unsolollamado) {
					this.unsolollamado = true;
					this.addTween({alpha: 0}, "easeOutSine", 20, function() {
						this.destroy();
					});
				}
			}
		});
		return this;
	},
	pararRegar: function() {
		this.removeComponent("Mouse").unbind("MouseDown");
	}
});

Crafty.c("P3_Rama", {
	indexEnredadera: -1,
	posEnredadera: [],
	enredadera: [],
	init: function() {
		this.requires("2D, Canvas, Image").image("img/act/parque/3/rama.png");
		this.indexEnredadera = 0;
	},
	P3_Rama: function(actividad, tope, dc, dch) {
		this.actividad = actividad;
		var cont = 1;
		this.posEnredadera = [//posiciones sobre la rama de las enredaderas
			{x: 604, y: 531, z: 0, cre: (++cont) * tope}, {x: 608, y: 456, z: 0, cre: (++cont) * tope},
			{x: 611, y: 400, z: 0, cre: (++cont) * tope}, {x: 607, y: 319, z: 0, cre: (++cont) * tope},
			{x: 603, y: 234, z: 0, cre: (++cont) * tope}, {x: 605, y: 168, z: 0, cre: (++cont) * tope},
			{x: 611, y: 100, z: 0, cre: (++cont) * tope}, {x: 609, y: 15, z: 0, cre: (++cont) * tope},
			{x: 584, y: -30, z: 0, cre: (++cont) * tope}
		];
		this.dc = dc;
		this.dch = dch;
		this.crecimiento = this.posEnredadera[0].cre; //el contador que regula en que momento se crece la redadera
		this.crecerEnredadera();
		return this;
	},
	regaderaRociaAgua: function(regadera) {
		var self = this;
		if (this.indexEnredadera >= this.posEnredadera.length) {
			//no dejar que la regadera bote mas agua, hay que ahorrar agua.
			regadera.pararRegar();
			//dibujar flores en la punta de la rama.
			var flor1 = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/parque/3/flor.png")
					.attr({x: this.x - 35, y: this.y - 30, z: this.z + 10, rotation: 45, alpha: 0});
			var flor2 = Crafty.e("2D, Canvas, Image, Tweener").image("img/act/parque/3/flor.png")
					.attr({x: this.x + 35, y: this.y + 20, z: this.z + 10, alpha: 0});
			flor1.addTween({alpha: 1}, "easeOutSine", 10);
			flor2.addTween({alpha: 1}, "easeOutSine", 10, function() {
				self.actividad.ganarActividad();
			});
		}
		else {
			this.crecerEnredadera();
		}
		return this;
	},
	hormigaComeRama: function(hormiga) {
		this.quitarEnredadera();
		if (Crafty("Onomatopeya").length < 8) {//verificar que no hayan muchas onomatopyeas para evitar que se llene de entidades
			if (Crafty.math.randomInt(0, 150) == 0) { //como son tantos llamados a esta funcion se debe controlar
				Crafty.e("Onomatopeya").Onomatopeya(4, {x: hormiga.x + Crafty.math.randomInt(-100, 100), y: hormiga.y - Crafty.math.randomInt(10, 300)});
			}
		}
		return this;
	},
	crecerEnredadera: function() {
		var pos = this.posEnredadera[this.indexEnredadera];
		if (pos) {
			this.crecimiento += this.dc;
			if (this.crecimiento > pos.cre) {//si el crecimiento supera el tope establecido, crece la redadera
				this.enredadera[this.indexEnredadera] = Crafty.e("2D, Canvas, Tweener, Enredadera, sprP3_enredadera" + this.indexEnredadera)
						.attr({x: pos.x, y: pos.y, z: pos.z, alpha: 0})
						.addTween({alpha: 1}, "easeOutSine", 50);
				this.indexEnredadera += 1;
			}
		}
		return this;
	},
	quitarEnredadera: function() {
		var pos = this.posEnredadera[this.indexEnredadera - 1];
		if (pos) {
			this.crecimiento -= this.dch;
			if (this.crecimiento < 0) {
				this.crecimiento = 0;
			}
			if (this.crecimiento < pos.cre) {//si el crecimiento supera el tope establecido, crece la redadera
				this.indexEnredadera -= 1;
				Crafty("sprP3_enredadera" + this.indexEnredadera).each(function() {
					this.destroy();
				});
				if (Crafty("Enredadera").length <= 0) {
					this.actividad.perder();
				}
			}
		}
		return this;
	}
});

Crafty.c("Onomatopeya", {
	spr: "",
	init: function() {
		this.requires("2D, Canvas, Tweener");
		return this;
	},
	Onomatopeya: function(codigo, pos) {
		this.spr = codigo == 1 ? "sprP3_bien"
				: (codigo == 2 ? "sprP3_splat"
						: (codigo == 3 ? "sprP3_kapaw"
								: "sprP3_crunch"));
		this.requires(this.spr);
		this.attr({x: pos.x - this.w / 2, y: pos.y - this.h / 2, z: 30})
				.addTween({alpha: 0}, "easeOutSine", 80, function() {
					this.destroy();
				});
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/parque/3/actividad.js*/
/**
 * Actividad parque caldas, armar la estructura monumento del FJCaldas
 * @returns {ActParque1}
 */
var ActParque3 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;


	this.init = function() {
		this.crearEntidades();
		return this;
	};

	this.crearEntidades = function() {
		Crafty.e("2D, Canvas, Image").image("img/act/parque/3/fondo.jpg").attr({x: 0, y: 0, z: 0});

		var tope = 300;
		var numHormigas = 20;
		var dc = 10;//delta de crecimiento cuando se riega 
		var dch = 0.1;//Delta de decrecimiento cuando se la come una hormiga
		this.rama = Crafty.e("P3_Rama").attr({x: 614, y: -30}).P3_Rama(this, tope, dc, dch);
		this.regadera = Crafty.e("P3_Regadera").attr({x: 300, y: 40, z: 50}).P3_Regadera(this.rama);

		this.priplano = Crafty.e("2D, Canvas, Image").image("img/act/parque/3/primer_plano.png");
		this.priplano.attr({x: 0, y: Crafty.viewport.height - this.priplano.h, z: 1});

		this.generadorHormigas = Crafty.e("P3_GeneradorHormigas")
				.P3_GeneradorHormigas(this.rama, numHormigas);
		
		return this;
	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		this.generadorHormigas.bloqueado = true;
		Crafty("Hormiga").each(function() {
			this.destroy();//eliminar las hormigas porque no son necesarias
		});
		return this;
	};

	//es invocada cuando las hormigas se comen la enredadera
	this.perder = function() {
		this.generadorHormigas.bloqueado = true;
		gesActividad.mostrarPerdiste();
		Crafty("Hormiga").each(function() {
			this.destroy();//eliminar las hormigas porque no son necesarias
		});
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		this.generadorHormigas.bloqueado = true;
		Crafty("Hormiga").each(function() {
			this.destroy();//eliminar las hormigas porque no son necesarias
		});
		Crafty.e("Delay")
				.delay(function() {
					gesActividad.mostrarPuntaje();
				}, 500);
		return this;
	};
};

/*C:\uniserver\www\hdp\public_html\src/act/parque/4/sprites.js*/
function spritesParque4() {
	Crafty.sprite("img/act/parque/4/barras.png", {
		sprP4_barraE0: [0, 0, 442, 56],
		sprP4_barraM0: [0, 63, 289, 55],
		sprP4_barraM1: [0, 125, 190, 55]
	});
	
	Crafty.sprite("img/act/parque/4/cofre_grande.png", {
		sprP4_cofre: [0, 0, 74, 46]
	})
}
/*C:\uniserver\www\hdp\public_html\src/act/parque/4/componentes.js*/
Crafty.c("P4Barras", {
	e_barras: [],
	vx: 1,
	/**
	 * Generar las barras
	 * @param {type} spr correponde a la sprite
	 * @param {type} n numero de barras
	 * @param {type} x0 posicion inicial de movimiento en el eje x
	 * @param {type} y0 posicion inicial de moviemintoe en el eje y
	 * @param {type} vx velocidad de desplazamiento de las barras sobre el eje x
	 * @param {type} desp distancia entre las barras
	 * @param {type} dir direccion de movimiento (izquierda o derecha)
	 * @returns {Anonym$0}
	 */
	P4Barras: function(spr, n, x0, y0, vx, desp, dir) {
		this.spr = spr;
		this.n = n;
		this.x0 = x0;
		this.y0 = y0;
		this.vx = vx;
		this.desp = desp;
		this.dir = dir;

		for (var i = 0; i < n; i++) {
			this.e_barras[i] = Crafty.e("P4Barra, Box2D, " + this.spr);
			this.e_barras[i].attr({x: this.x0 + i * (this.e_barras[i].w + this.desp), y: this.y0})
					.P4Barra(this.vx, this.dir)
					.box2d({
						bodyType: 'kinestatic',
						shape: this.dir == 0 ? [[0, 0], [442, 0], [442, 24], [0, 24]]
								: [[0, 0], [this.e_barras[i].w, 0], [this.e_barras[i].w, 24], [0, 24]]
					});
		}
		return this;
	}
});

Crafty.c("P4Barra", {
	dir: "",
	vx: 0,
	init: function() {
		this.requires("2D, Canvas");
	},
	P4Barra: function(vx, dir) {
		this.vx = vx;
		this.dir = dir;
                if(this.dir != 0){
                    this.requires("BarraColision");
                }
		return this;
	},
	arrancar: function() {
		this.body.SetLinearVelocity(new b2Vec2(this.dir * this.vx, 0))
		this.bind("EnterFrame", function() {
			if (this.x + this.w < 0) {
				this.body.SetPosition(new b2Vec2(1280 / 32, this.y / 32));
			}
			if (this.x > 1280) {
				this.body.SetPosition(new b2Vec2(-this.w / 32, this.y / 32));
			}
		});
		return this;
	}
});

// Parte de Monumento de PArque Caldas arrastrable con soporte de física
Crafty.c("P4Cofre", {
	num: 0, // ID del bloque
	b2shape: null, // Arreglo de posiciones [x,y] relativas a la entidad. Describe el polígono de colisión
	callbackDestroy: null, // Función de callback al destruir este objeto
	_padre: null, // Referencia al objeto creador
	_e_hueco: null, // Referencia a la entidad hueco correspondiente (si aplica)
	destX1: 0, // posiciones que definien el MBR del hueco correspondiente
	destX2: 0,
	destY1: 0,
	destY2: 0,
	insertable: true, // false si es una trampa

	init: function() {
		this.requires("B2arrastre, Tweener, sprP4_cofre");
		this.arrastrable = true;
		this.bind("MouseUp", function(e) {
			var self = this;
			if (this.insertable) {
				var pos = mouseCoords(e);
				// obtenemos las coordenadas de destino
				var band = false;
				var self = this;
				Crafty("P4Hueco").each(function() {
					var destX1 = this._x;
					var destY1 = this._y;
					var destX2 = destX1 + this._w;
					var destY2 = destY1 + this._h;
					if (pos.x > destX1 && pos.x < destX2 && pos.y > destY1 && pos.y < destY2) {
						band = true;
						self.destX1 = destX1;
						self.destY1 = destY1;
						this.destroy();
					}
				});
				if (band) {
					this.enchoclar();
				}
			}
		}).bind("EnterFrame", function() {
                    //verificar el caso en que se haya salido del cuadro (escena(
                    //entonces se trae hacia el centro para que se pueda arrastrar ed nuevo.
                    if(this.y < -50 || this.y > 850 || this.x < -50 || this.x > 1320){
                        this.body.SetPosition(new b2Vec2(632/32.0, 594/32.0));
                    } 
                })
		return this;
	},
	P4Cofre: function(objPadre, b2shape) {
		this._padre = objPadre;
		this._b2shape = b2shape;
		this.areaMap([0, 0], [0, this.h], [this.w, this.h], [this.w, 0]);
		if (b2shape.length > 0) {
			this.b2shape = b2shape;
			this.box2d({
				bodyType: 'dynamic',
				density: 500, //0.000001,
				friction: 0.5,
				restitution: 0.2,
				shape: this.b2shape
			});
		}
		this.body.SetAngularDamping(3);
		this.B2arrastre(this._padre.b2a);
		return this;
	},
        enchoclar : function(){
            this.arrastrable = false;
            this.unbind("MouseUp");
            this.unbind("MouseDown");
            this.unbind("MouseMove");

            world.DestroyBody(this.body);
            this.body = null;
            var grados = this.rotation;
            while (grados < 0) {
                    grados += 360;
            }
            while (grados >= 360) {
                    grados -= 360;
            }
            this.rotation = grados;
            this.addTween({
                    rotation: (grados > 180) ? 360 : 0,
                    x: this.destX1,
                    y: this.destY1
            }, 'easeInOutQuad', 25, function() {
                    this.fijar();
            });  
        },
	// Fijar el bloque en su lugar y no permitir que lo vuelvan a manipular
	fijar: function() {
		var par = new Particulas({
			componentes: "spr_polvo, SpriteAnimation",
			x: this._x, y: this._y, z: 5,
			vx: 0,
			deltaVx: 2,
			periodo: 50,
			deltaOriY: this._h,
			deltaOriX: this._w - 40,
			numParticulas: 6,
			magnitud: 10,
			duracion: 20,
			atenuacion: 8,
			f_crear: function(ent) {
				ent.reel("giro", 400, [[0, 0], [32, 0], [64, 0], [96, 0]]).animate("giro", -1);
			}
		});
		par.iniciar();
		this._padre.bloqueFijado(); // Notificar al padre
		return this;
	}
});



// Hueco donde se inserta el ataud
Crafty.c("P4Hueco", {
	num: 0, // ID del bloque corespondiente
	_padre: null, // Referencia al objeto creador

	init: function() {
		this.requires("2D, Canvas");
		return this;
	},
	P4Hueco: function(objPadre) {
		this._padre = objPadre;
		//this.num = num;
		//this.requires(spr);//asignarle la sprite al componente
		return this;
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/parque/4/actividad.js*/
/**
 * Actividad de los ataudes, consiste en arrastrar los ataudes sobre una serie de obstaculos
 * intentar no tocarlos para hacerlos enchoclar sobre los huecos.
 * @returns {ActParque4}
 */
var ActParque4 = function() {
	this.e_piso = null; // Entidad que se pasa como referencia para el MouseBind
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;
	this.b2a = new B2arrastre();
	
	this.init = function() {
		this.crearEntidades();
		this.b2a.init(this.e_piso);
		Crafty("P4Barra").each(function() {
			this.arrancar();
		});
		Crafty.e("2D, Canvas, Image").attr({x: 568, y: -6, z: 20}).image("img/act/parque/4/lampara.png");
		Crafty.e("2D, Canvas, Image").attr({x: 132, y: -48, z: 20}).image("img/act/parque/4/lampara.png");
		return this;
	};
	this.crearEntidades = function() {
		var self = this;
		//crear fondo
		Crafty.e("2D, Canvas, Image").image("img/act/parque/4/fondo.jpg").attr({x: 0, y: 0, z: 0});
		var piso = Crafty.e("2D, Canvas, Image").image("img/act/parque/4/piso.png");
		piso.attr({y: Crafty.viewport.height - piso.h, z: 10});
		//aqui van 4 barras grandes
		Crafty.e("P4Barras").P4Barras("sprP4_barraM0", 3, 33, 218, 1, 184, 1);
		//aqui van 4 barras pequeÃ±as
		Crafty.e("P4Barras").P4Barras("sprP4_barraM1", 4, 93, 318, 1.5, 225, -1);
		//aqui van 2 barras grandes estaticas
		Crafty.e("P4Barras").P4Barras("sprP4_barraE0", 2, 38, 404, 0, 320, 0);
		//aqui van 5 barras pequeÃ±as 
		Crafty.e("P4Barras").P4Barras("sprP4_barraM1", 5, 39, 488, 2, 118, 1);
		this.posCofres = [
			{x: 11, y: 622}, {x: 95, y: 631}, {x: 177, y: 638},
			{x: 258, y: 643}, {x: 340, y: 644}, {x: 425, y: 643},
			{x: 515, y: 642}, {x: 595, y: 634}, {x: 678, y: 626},
			{x: 772, y: 620}, {x: 856, y: 615}, {x: 941, y: 609},
			{x: 1025, y: 608}, {x: 1105, y: 607}, {x: 1190, y: 613}
		];
		this.cofres = [];
		var numCofres = this.posCofres.length;
		for (var i = 0; i < numCofres; i++) {
			var forma = [[0, 18], [0, 9], [37, 0], [74, 8], [74, 18], [70, 46], [7, 46]];
			var hueco = Crafty.e("P4Hueco").P4Hueco(this);
			this.cofres[i] = Crafty.e("P4Cofre").attr(this.posCofres[i]).P4Cofre(this, forma);
			var posx = 61 + (this.cofres[i].w + 1) * i; //posicion en el ejex
			hueco.attr({x: posx, y: 68, w: this.cofres[i].w, h: this.cofres[i].h});
		}



		var piso = Crafty.e("PisoBox2D");
		piso.coordenadas = [
			[0, 668], [130, 682], [296, 692], [524, 688],
			[718, 670], [940, 656], [1110, 654], [1276, 666]
		];
		piso.dibujarPiso();
		Crafty.e('2D, Canvas, Box2D').attr({x:0,y:-800,w:1280,h:800}).box2d({bodyType: 'static', shape: 'box'});
		Crafty.e('2D, Canvas, Box2D').attr({x:-800,y:0,w:800,h:800}).box2d({bodyType: 'static', shape: 'box'});
		Crafty.e('2D, Canvas, Box2D').attr({x:1280,y:0,w:800,h:800}).box2d({bodyType: 'static', shape: 'box'});
		this.e_piso = Crafty.e('2D, Canvas, Box2D').attr({x:0,y:800,w:1280,h:800}).box2d({bodyType: 'static', shape: 'box'});
		if (!cocoon) {
			Crafty.box2D.showDebugInfo();
		}
	};
	//verificar si ya se han colocados todos los numeros.
	// Invocada por cada bloque al ser fijado
	this.bloqueFijado = function() {
		this.aciertos++;
		if (this.aciertos >= this.totAciertos) {
			this.ganarActividad();
		}
	};
	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
                Crafty("Box2D").each(function(){
                    if(this.body){
                        world.DestroyBody(this.body);
                    }
                });
                return this;
	};
	this.ganarActividad = function() {
                Crafty("Box2D").each(function(){
                    if(this.body){
                        world.DestroyBody(this.body);
                    }
                });
                gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
                return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/parque/5/sprites.js*/
function spritesParque5() {
	Crafty.sprite("img/act/parque/5/engranajes.png", {
		sprP5_engranaje0: [0, 0, 66, 66],
		sprP5_engranaje1: [0, 68, 41, 41],
		sprP5_engranaje2: [0, 112, 35, 35],
		sprP5_engranaje3: [0, 149, 31, 31],
		sprP5_engranaje4: [0, 182, 27, 27]
	});
	Crafty.sprite("img/act/parque/5/carruaje.png", {
		sprP5_carro0: [0, 0, 96, 62],
		sprP5_carro1: [0, 65, 96, 86],
		sprP5_carro2: [0, 154, 96, 98]
	});

	Crafty.sprite(61, 115, "img/act/parque/5/hombre-fuerza.png", {
		sprP5_hFuerzaIzq: [0, 0],
		sprP5_hFuerzaDer: [6, 0]
	});
	Crafty.sprite(57, 129, "img/act/parque/5/hombre-sube.png", {
		sprP5_hSubeIzq: [0, 0],
		sprP5_hSubeDer: [4, 0]
	});
}
/*C:\uniserver\www\hdp\public_html\src/act/parque/5/componentes.js*/
Crafty.c("P5_AreaToque", {
	init: function() {
		this.requires("2D, Canvas, Mouse");
	},
	P5_AreaToque: function(carro, p1, p2) {
		var self = this;
		this.carro = carro;
		this.contToques = 0;
		this.dcontToques = 1.5;
		this.dmcontToques = 0.1;
		this.maxcontToques = 15;

		this.genEngranajes = {
			generar: function() {
				var i = Crafty.math.randomElementOfArray([1, 2, 3]);
				var engranaje = Crafty.e("P5_Engranaje, sprP5_engranaje" + i)
						.attr({x: 610, y: 253, z: 22})
						.P5_Engranaje(true, 0.3, 1, self.carro);
			}
		};

		this.bind("MouseDown", function() {
			this.contToques += this.dcontToques;
			this.animar();
		}).bind("EnterFrame", function() {
			if (this.contToques >= this.maxcontToques) {
				this.contToques = 0;
				this.genEngranajes.generar();
			}
			this.contToques -= this.dmcontToques;
			if (this.contToques < 0) {
				this.contToques = 0;
			}
		});

		//al finalizar una animacion se debe verificar si se debe animar al otro
		this.p1 = p1;
		this.p2 = p2;
		this.p1.otro = this.p2;
		this.p2.otro = this.p1;
		this.p1.bind("AnimationEnd", this.p1.cll_animationEnd);
		this.p2.bind("AnimationEnd", this.p2.cll_animationEnd);
		return this;
	},
	animar: function() {
		//permitir que los personajes se animen
		this.p1.band = true;
		this.p2.band = true;
		//si no hay una animacion ejecutandose por parte de ambos persoanjes entonces el primer personaje se anima.
		if (!this.p1.isPlaying("fuerza") && !this.p1.isPlaying("sube")
				&& !this.p2.isPlaying("fuerza") && !this.p2.isPlaying("sube")) {
			this.p1.fuerza();
		}
		Crafty("P5_Engranaje").each(function() {
			this.decrecerVelocidad();
		});
		return this;
	}
});

Crafty.c("P5_Personaje", {
	init: function() {
		this.requires("2D, Canvas, SpriteAnimation, Mouse");
	},
	P5_Personaje: function(dir) {
		this.dir = dir;
		if (dir == -1) {
			this.spr_fuerza = "sprP5_hFuerzaIzq";
			this.spr_sube = "sprP5_hSubeIzq";
			this.spr_fuerza_reel = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0]];
			this.spr_sube_reel = [[0, 0], [1, 0], [2, 0], [3, 0]];
		} else {
			this.spr_fuerza = "sprP5_hFuerzaDer";
			this.spr_sube = "sprP5_hSubeDer";
			this.spr_fuerza_reel = [[6, 0], [7, 0], [8, 0], [9, 0], [10, 0], [11, 0]];
			this.spr_sube_reel = [[4, 0], [5, 0], [6, 0], [7, 0]];
		}
		this.fuerza();
		return this;
	},
	cll_animationEnd: function(reel_obj) {
		//esta bandera indica si se realizo la animacion o no
		if (this.band) {
			if (reel_obj.id == "fuerza") {
				this.sube();
				this.otro.fuerza();
			}
			if (reel_obj.id == "sube") {
				this.fuerza();
				this.otro.sube();
			}
			//al final se marca como falsa para que no se anime de nuevo.
			this.band = false;
		}
	},
	fuerza: function() {
		if (!this.isPlaying("fuerza")) {
			var w_old = this.w;
			var h_old = this.h;
			this.removeComponent(this.spr_sube)
			this.addComponent(this.spr_fuerza)
					.reel("fuerza", 500, this.spr_fuerza_reel)
					.animate("fuerza", 1);
			if (h_old && w_old) {
				this.x -= this.w - w_old;
				this.y -= this.h - h_old;
			}
		}
		return this;
	},
	sube: function() {
		if (!this.isPlaying("sube")) {
			var w_old = this.w;
			var h_old = this.h;
			this.removeComponent(this.spr_fuerza);
			this.addComponent(this.spr_sube)
					.reel("sube", 500, this.spr_sube_reel)
					.animate("sube", 1);
			if (h_old && w_old) {
				this.x -= this.w - w_old;
				this.y -= this.h - h_old;
			}
		}
		return this;
	}
});

Crafty.c("P5_Engranaje", {
	init: function() {
		this.requires("2D, Canvas");
	},
	P5_Engranaje: function(fisica, vr, dir, carro) {
		this.fisica = fisica;
		this.vr = vr;
		this.dvr = 0.5;//delta de crecimiento con clic
		this.ddvr = 0.01;//delta de decrecimiento con enterframe
		this.vrmax = 3;
		this.dir = dir;
		this.carro = carro;
		var dist = 50;

		this.con = [
			{a: 0.00102906359, b: -1.8532426075, c: 1040.8636592742},
			{a: 0.0015456989, b: -2.5744623656, c: 1289.8911290323},
			{a: 0.0011613743, b: -2.0379452285, c: 1104.6389868952}
		];

		if (fisica) {
			this.areaMouse = Crafty.e("2D, Canvas, Arrastrable");
			var am = this.areaMouse;
			am.unbind("EnterFrame")
			am.attr({x: this.x - dist, y: this.y - dist, w: this.w + 2 * dist, h: this.h + 2 * dist, z: this.z - 1});
			am.obj = this;
			am.vx = 1;
			am.vy = 1;
			am.ax = 0.08;
			am.xmax = 1280;
			am.C = Crafty.math.randomElementOfArray(this.con);
			am.attach(this);
			am.origin(am.w / 2.0, am.h / 2.0)
			am.bind("MouseDown", function() {
				this.unbind("EnterFrame");
				this.bind("EnterFrame", function() {
					if (this.obj.x > this.obj.carro.x && this.obj.x < this.obj.carro.x + this.obj.carro.w
							&& this.obj.y > this.obj.carro.y && this.obj.y < this.obj.carro.y + this.obj.carro.h) {
						this.unbind("EnterFrame")
						this.obj.carro.aumentarCarga();
						this.obj.destroy();
						this.destroy();
					}
				});
			}).bind("MouseUp", function() {
				this.caer();
			}).bind("MouseOut", function() {
				this.caer();
			}).bind("EnterFrame", function() {
				//el movimiento en y lo define una funcion cuadratica
				//nota: se le resta dist porque es la distancia quqe aumentaba con el area del mouse.
				this.y = this.C.a * this.x * this.x + this.C.b * this.x + this.C.c - dist;
				this.x += this.vx;
				this.vx += this.ax;
				if (this.x > this.xmax) {
					this.destroy();
					this.obj.destroy();
				}
			});
			am.caer = function() {
				this.bind("EnterFrame", function() {
					this.vy += 0.1;
					this.y += this.vy;
					if (this.y > 800) {
						this.destroy();
					}
				});
			};
		} else {
			this.origin(this.w / 2.0, this.h / 2.0)
					.bind("EnterFrame", function() {
						this.rotation += this.vr * this.dir;
						this.vr -= this.ddvr;
						if (this.vr <= 0.0) {
							this.vr = 0;
						}
					});
		}
		return this;
	},
	decrecerVelocidad: function() {
		this.vr += this.dvr;
		if (this.vr >= this.vrmax) {
			this.vr = this.vrmax;
		}
		return this;
	}
});

Crafty.c("P5_Carro", {
	init: function() {
		this.requires("2D, Canvas, Tweener");
		this.spr = [];
		for (var i = 0; i < 3; i++) {
			this.spr[i] = "sprP5_carro" + i;
		}
		this.spr_cont = 0;
		this.eng_cont = 0;

		this.lim1 = 2;
		this.lim2 = 5;
		this.lim3 = 7;
	},
	P5_Carro: function(actividad) {
		this.actividad = actividad;
		this.cambiarSprite();
		this.r1x = this.x - 32;
		this.r2x = this.x + 58;
		this.ry = this.y + 20;
		this.rueda1 = Crafty.e("2D, Canvas, Image").image("img/act/parque/5/llanta.png")
				.attr({x: this.r1x, y: this.ry, z: this.z + 1});
		this.rueda2 = Crafty.e("2D, Canvas, Image").image("img/act/parque/5/llanta.png")
				.attr({x: this.r2x, y: this.ry, z: this.z + 1});
		this.rueda1.origin(this.rueda1.w / 2.0, this.rueda1.h / 2.0);
		this.rueda2.origin(this.rueda2.w / 2.0, this.rueda2.h / 2.0);
		this.attach(this.rueda1).attach(this.rueda2);
		return this;
	},
	aumentarCarga: function() {
		if (this.eng_cont == this.lim1 || this.eng_cont == this.lim2 || this.eng_cont == this.lim3) {
			this.cambiarSprite();
		}
		if (this.eng_cont >= this.lim3) {
			this.actividad.ganarActividad();
		}
		this.eng_cont++;
		return this;
	},
	cambiarSprite: function() {
		if (this.spr_cont < this.spr.length) {
			var w_old = this.w;
			var h_old = this.h;
			if (h_old && w_old) {
				var yr1_old = this.rueda1.y;
				var yr2_old = this.rueda2.y;
			}
			this.removeComponent(this.spr[this.spr_cont - 1]);
			this.addComponent(this.spr[this.spr_cont]);
			if (h_old && w_old) {
				this.x -= this.w - w_old;
				this.y -= this.h - h_old;
				this.rueda1.y = yr1_old;
				this.rueda2.y = yr2_old;
			}
			this.spr_cont++;
		}
		return this;
	},
	mover: function(xnew) {
		this.rueda1.bind("EnterFrame", function() {
			this.rotation += 1;
		});
		this.rueda2.bind("EnterFrame", function() {
			this.rotation += 1;
		});
		var self = this;
		this.addTween({x: xnew, y: this.y}, 'easeInOutQuad', 340, function() {
			self.rueda1.unbind("EnterFrame");
			self.rueda2.unbind("EnterFrame");
		});
		return this;
	}
});


/*C:\uniserver\www\hdp\public_html\src/act/parque/5/actividad.js*/
/**
 * Actividad 5 de parque, la idea es con toque rapido generar engranajes para
 * llevarlos hacia una canastica ubicada en el suelo, el juego termina 
 * cuando hay 7 engranajes en la canastica.
 * @returns {ActParque5}
 */
var ActParque5 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.nubes.bind("EnterFrame", function() {
			var av = 0.1;
			if (!this.dir) {
				this.dir = 1;
			}
			if (this.x > 0) {
				this.dir = -1;
			}
			if (this.x < -30) {
				this.dir = 1;
			}
			this.x += av * this.dir;
		});

		this.carro.mover(1117);
		return this;
	};

	this.crearEntidades = function() {
		var self = this;
		//objeto indicador de posiciones del juego
		Crafty.e("2D, Canvas, Image").image("img/act/parque/5/fondo.jpg").attr({z: 0});
		this.nubes = Crafty.e("2D, Canvas, Image").image("img/act/parque/5/nubes.png").attr({x: -30, z: 0})

		this.torre = Crafty.e("2D, Canvas, Image").image("img/act/parque/5/torre.png");
		this.torre.attr({x: 0, y: 800 - this.torre.h, z: 10});

		Crafty.e("2D, Canvas, Image").image("img/act/parque/5/cuerda.png").attr({x: 614, y: 304, z: 20});
		Crafty.e("2D, Canvas, Image").image("img/act/parque/5/cuerda.png").attr({x: 660, y: 296, z: 20});
		Crafty.e("2D, Canvas, Image").image("img/act/parque/5/cubo.jpg").attr({x: 551, y: 611, z: 25});
		Crafty.e("2D, Canvas, Image").image("img/act/parque/5/cubo.jpg").attr({x: 661, y: 611, z: 25});
		Crafty.e("P5_Engranaje, sprP5_engranaje0").attr({x: 606, y: 275, z: 25}).P5_Engranaje(false, 1.5, 1);
		Crafty.e("P5_Engranaje, sprP5_engranaje1").attr({x: 628, y: 231, z: 25}).P5_Engranaje(false, 0.5, -1);
		Crafty.e("P5_Engranaje, sprP5_engranaje2").attr({x: 610, y: 237, z: 22}).P5_Engranaje(false, 0.8, 1);
		Crafty.e("P5_Engranaje, sprP5_engranaje3").attr({x: 619, y: 223, z: 22}).P5_Engranaje(false, 1.5, 1);
		Crafty.e("P5_Engranaje, sprP5_engranaje3").attr({x: 608, y: 253, z: 22}).P5_Engranaje(false, 0.5, -1);
		Crafty.e("P5_Engranaje, sprP5_engranaje3").attr({x: 603, y: 270, z: 22}).P5_Engranaje(false, 0.8, 1);
		Crafty.e("P5_Engranaje, sprP5_engranaje4").attr({x: 628, y: 267, z: 25}).P5_Engranaje(false, 1.5, 1);

		this.carro = Crafty.e("P5_Carro").attr({x: 791, y: 596, z: 30}).P5_Carro(this);
		this.personajeIzq = Crafty.e("P5_Personaje").attr({x: 563, y: 496, z: 30}).P5_Personaje(-1);
		this.personajeDer = Crafty.e("P5_Personaje").attr({x: 652, y: 496, z: 30}).P5_Personaje(1);

		//esta area se coloca sobre los personajes para generen los engranajes y aplicar animacion sobre los personajes
		this.areaToque = Crafty.e("P5_AreaToque").attr({x: 518, y: 450, w: 250, h: 230, z: 50})
				.P5_AreaToque(this.carro, this.personajeIzq, this.personajeDer);
		return this;

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		Crafty("P5_Engranaje").each(function() {
			if (this.fisica) {
				this.destroy();
			}
		});
		Crafty("P5_AreaToque").each(function() {
			this.destroy();
		});
		return this;
	};
	this.ganarActividad = function() {
		Crafty("P5_Engranaje").each(function() {
			if (this.fisica) {
				this.destroy();
			}
		});
		Crafty("P5_AreaToque").each(function() {
			this.destroy();
		});
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};

/*C:\uniserver\www\hdp\public_html\src/act/parque/6/sprites.js*/
function spritesParque6() {
        Crafty.sprite("img/act/parque/6/catedral_partes.png", {
                sprP6_parte1: [0, 0, 404, 171],
                sprP6_parte2: [0, 174, 345, 47],
                sprP6_parte3: [0, 224, 342, 46],
                sprP6_parte4: [11, 271, 59, 261],
                sprP6_parte5: [90, 271, 59, 261],
                sprP6_parte6: [170, 271, 30, 261],
                sprP6_parte7: [221, 271, 30, 261],
                sprP6_parte8: [272, 271, 30, 261],
                sprP6_parte9: [323, 271, 30, 261]
        });

        Crafty.sprite("img/act/parque/6/catedral_cupula.png", {
                sprP6_parte0: [0, 0, 171, 260]
        });

}
/*C:\uniserver\www\hdp\public_html\src/act/parque/6/componentes.js*/
// Hueco donde se inserta el bloque
Crafty.c("P6Hueco", {
	num: 0, // ID del bloque corespondiente
	_padre: null, // Referencia al objeto creador

	init: function() {
		this.requires("2D, Canvas");
		return this;
	},
	P6Hueco: function(objPadre, num, spr) {
		this._padre = objPadre;
		this.num = num;
		this.requires(spr);//asignarle la sprite al componente
		return this;
	}
});

Crafty.c("P6Parte", {
	num: 0, // ID del bloque
	b2shape: null, // Arreglo de posiciones [x,y] relativas a la entidad. Describe el polígono de colisión
	callbackDestroy: null, // Función de callback al destruir este objeto
	_padre: null, // Referencia al objeto creador
	_e_hueco: null, // Referencia a la entidad hueco correspondiente (si aplica)
	destX1: 0, // posiciones que definien el MBR del hueco correspondiente
	destX2: 0,
	destY1: 0,
	destY2: 0,
	insertable: true, // false si es una trampa

	init: function() {
		this.requires("B2arrastre, Tweener");
		this.arrastrable = true;


		this.bind("MouseUp", function(e) {
			var self = this;
			if (this.insertable) {
				var pos = mouseCoords(e);
				if (pos.x > this.destX1 && pos.x < this.destX2 && pos.y > this.destY1 && pos.y < this.destY2) {
					if (self._bloqObliga != null) {
						var pasa = true;
						//verificar por cada uno de los bloques que son obligatorios de que esten colocados
						//para poder ubicarlo en su posicion correcta
						for (var i = 0; i < self._bloqObliga.length; i++) {
							Crafty("P6Parte").each(function() {
								if (this.num == self._bloqObliga[i]) {
									if (this.arrastrable) {
										pasa = false;
									}
								}
							});
						}
						if (!pasa) {
							return;
						}
					}

					this.arrastrable = false;
					this.unbind("MouseUp");
					this.unbind("MouseDown");
					this.unbind("MouseMove");

					world.DestroyBody(this.body);

					var grados = this.rotation;
					while (grados < 0) {
						grados += 360;
					}
					while (grados >= 360) {
						grados -= 360;
					}
					this.rotation = grados;

					this.addTween({
						rotation: (grados > 180) ? 360 : 0,
						x: this.destX1,
						y: this.destY1
					}, 'easeInOutQuad', 25, function() {
						this.fijar();
					});
				}
			}
		});

		return this;
	},
	P6Parte: function(objPadre, e_hueco, num, b2shape, spr, bloqobli) {
		this._padre = objPadre;
		this.num = num;
		this.requires(spr);
		this._e_hueco = e_hueco;
		this._b2shape = b2shape;
		this._bloqObliga = bloqobli;

		switch (num) {
			case 0:
				this.areaMap([84, 0], [146, 113], [175, 193], [168, 257], [1, 258], [0, 190], [30, 114]);
				break;
			case 1:
				this.areaMap([200, 0], [374, 30], [401, 64], [404, 166], [0, 167], [0, 67], [24, 35]);
				break;
			case 2:
				this.areaMap([19, 0], [343, 0], [342, 44], [19, 49], [0, 20]);
				break;
			case 3:
				this.areaMap([2, 0], [326, 0], [343, 22], [324, 46], [0, 45]);
				break;
			case 4:
			case 5:
			case 8:
			case 9:
				this.areaMap([0, 0], [34, 0], [34, 258], [0, 258]);
				break;
			case 6:
			case 7:
				this.areaMap([0, 0], [60, 0], [60, 258], [0, 258]);
				break;
		}

		if (b2shape.length > 0) {
			this.b2shape = b2shape;
			this.box2d({
				bodyType: 'dynamic',
				density: 500, //0.000001,
				friction: 0.5,
				restitution: 0.2,
				shape: this.b2shape
			});
		}
		this.body.SetAngularDamping(3);
		this.B2arrastre(this._padre.b2a);
		// obtenemos las coordenadas de destino
		this.destX1 = e_hueco._x;
		this.destY1 = e_hueco._y;
		this.destX2 = this.destX1 + e_hueco._w;
		this.destY2 = this.destY1 + e_hueco._h;
		return this;
	},
	// Fijar el bloque en su lugar y no permitir que lo vuelvan a manipular
	fijar: function() {
		this.z -= 1; // Detrás de las otras piezas
		this._e_hueco.visible = false;

		var par = new Particulas({
			componentes: "spr_polvo, SpriteAnimation",
			x: this._x, y: this._y, z: 5,
			vx: 0,
			deltaVx: 2,
			periodo: 50,
			deltaOriY: this._h,
			deltaOriX: this._w - 40,
			numParticulas: 6,
			magnitud: 10,
			duracion: 20,
			atenuacion: 8,
			f_crear: function(ent) {
				ent.reel("giro", 400, [[0, 0], [32, 0], [64, 0], [96, 0]]).animate("giro", -1);
			}
		});
		par.iniciar();
		this._padre.bloqueFijado(); // Notificar al padre
	}
});
/*C:\uniserver\www\hdp\public_html\src/act/parque/6/actividad.js*/
/**
 * @returns {ActParque1}
 */
var ActParque6 = function() {
	//con esta cantidad se gana la actividad
	 this.totAciertos = 0;
	 //tiempo en que se cambia de un topo a otro (milisegundos)
	 this.duracion = 20000;
	 //si se ha ganado la actividad
	 this.actividadGanada = false;
	 //si se ha ganado la actividad
	 this.aciertos = 0;
	 this.b2a = new B2arrastre();
	 
	 
	 this.init = function() {
	 this.crearEntidades();
	 this.desMonumento();
	 // Inicializamos el objeto gestor de arrastre de la escena
	 this.b2a.init(this.e_piso);
	 
	 if (!cocoon) {
	 Crafty.box2D.showDebugInfo();
	 }
	 return this;
	 };
	 
	 this.crearEntidades = function() {
	 Crafty.e("2D, Canvas, Image").image("img/act/parque/6/fondo.jpg").attr({x: 0, y: 0, z: 0});
	 Crafty.e("2D, Canvas, Image").image("img/act/parque/6/casas.png").attr({x: 0, y: 440, z: 2});
	 Crafty.e("2D, Canvas, Image").image("img/act/parque/6/catedral.png").attr({x: 300, y: 53, z: 20, alpha: 0.1});
	 Crafty.e("2D, Canvas, Image").image("img/act/parque/6/nubes.png").attr({z: 1});
	 this.piso = Crafty.e("2D, Canvas, Image").image("img/act/parque/6/piso.png");
	 this.piso.attr({y: 800 - this.piso.h, z: 3});
	 
	 // Cuerpo del piso 
	 this.e_piso = Crafty.e('2D, Canvas, Box2D')
	 .box2d({
	 bodyType: 'static',
	 shape: [[0, 750], [1280, 750]]
	 });
	 // Paredes
	 Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 0], [1280, 0]]});
	 Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 0], [0, 800]]});
	 Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[1280, 0], [1280, 800]]});
	 Crafty.e('2D, Canvas, Box2D').box2d({bodyType: 'static', shape: [[0, 800], [1280, 800]]});
	 this.crearPartes();
	 };
	 
	 this.crearPartes = function() {
	 var n = 10;
	 //posiciones donde deben estar ubicados los bloques
	 this.attrPartes = [
	 {x: 555, y: 53, z: 15, alpha: 0.1},
	 {x: 439, y: 280, z: 15, alpha: 0.1},
	 {x: 300, y: 439, z: 15, alpha: 0.1},
	 {x: 639, y: 440, z: 15, alpha: 0.1},
	 {x: 528, y: 455, z: 15, alpha: 0.1},
	 {x: 692, y: 455, z: 15, alpha: 0.1},
	 {x: 364, y: 455, z: 15, alpha: 0.1},
	 {x: 453, y: 455, z: 15, alpha: 0.1},
	 {x: 795, y: 455, z: 15, alpha: 0.1},
	 {x: 883, y: 455, z: 15, alpha: 0.1}
	 ];
	 //figuras de los bloques
	 this.attrPartesBloques = [
	 [[84, 0], [146, 113], [175, 193], [168, 257], [1, 258], [0, 190], [30, 114]],
	 [[200, 0], [374, 30], [401, 64], [404, 166], [0, 167], [0, 67], [24, 35]],
	 [[19, 0], [343, 0], [342, 44], [19, 49], [0, 20]],
	 [[2, 0], [326, 0], [343, 22], [324, 46], [0, 45]],
	 [[0, 0], [59, 0], [59, 261], [0, 261]],
	 [[0, 0], [59, 0], [59, 261], [0, 261]],
	 [[0, 0], [30, 0], [30, 261], [0, 261]],
	 [[0, 0], [30, 0], [30, 261], [0, 261]],
	 [[0, 0], [30, 0], [30, 261], [0, 261]],
	 [[0, 0], [30, 0], [30, 261], [0, 261]],
	 ];
	 //estos son los bloques obligatorios que deben estar ubicados para poder ponerlo en la posicion correcta
	 this.bloquesObli = [
	 [1],
	 [2, 3],
	 [4, 5, 6],
	 [7, 8, 9],
	 null,
	 null,
	 null,
	 null,
	 null,
	 null
	 ];
	 
	 this.huecos = [];
	 
	 
	 //crear los huecos en las posiciones donde deben ir encajando y los bloques en la misma posicion
	 for (var i = 0; i < n; i++) {
	 //crear el hueco para hacer encajar las partes del monumento
	 this.huecos[i] = Crafty.e("P6Hueco")
	 .attr(this.attrPartes[i])
	 .P6Hueco(this, i, "sprP6_parte" + i);
	 //partes de la catedral
	 Crafty.e("P6Parte")
	 .attr({x: this.attrPartes[i].x, y: this.attrPartes[i].y, z: 20})
	 .P6Parte(this, //referencia a la actividad padre
	 this.huecos[i], //referencia al hueco donde va a encajar
	 i, //numero asignado como identificador
	 this.attrPartesBloques[i], //figura de componente
	 "sprP6_parte" + i, //sprite de componente
	 this.bloquesObli[i]);//bloques que deben estar encajados para que encaje
	 }
	 };
	 
	 //Hacer mover los bloques para diferentes partes. (aplicar un impulso)
	 this.desMonumento = function() {
	 var self = this;
	 Crafty.e("Delay").delay(function() {
	 Crafty("P6Parte").each(function() {
	 //obteniendo la fuerza necesaria para mover los bloques
	 var force = new b2Vec2(
	 (Crafty.math.randomElementOfArray([-1, 1]) * this.body.GetMass() * 10),
	 -this.body.GetMass() * 3);
	 this.body.ApplyImpulse(force, this.body.GetWorldCenter());
	 });
	 Crafty.e("Delay").delay(function() {
	 Crafty("BolaDestroy").each(function() {
	 world.DestroyBody(this.body);
	 });
	 }, 2000);
	 }, 1000);
	 
	 };
	 
	 //verificar si ya se han colocados todos los numeros.
	 // Invocada por cada bloque al ser fijado
	 this.bloqueFijado = function() {
	 this.aciertos++;
	 if (this.aciertos >= this.totAciertos) {
	 this.ganarActividad();
	 }
	 };
	 // Siempre invocada al terminar la actividad
	 this.terminarActividad = function() {
	 return this;
	 };
	 
	 this.ganarActividad = function() {
         gesActividad.temporizador.parar();
	 gesActividad.mostrarPuntaje();
	 return this;
	 };
};
/*C:\uniserver\www\hdp\public_html\src/act/puente/1/sprites.js*/
function spritesPuente1() {
}
/*C:\uniserver\www\hdp\public_html\src/act/puente/1/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/puente/1/actividad.js*/
/**
 * 
 */
var ActPuente1 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/puente/2/sprites.js*/
function spritesPuente2() {
}
/*C:\uniserver\www\hdp\public_html\src/act/puente/2/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/puente/2/actividad.js*/
/**
 * Actividad parque caldas, armar la estructura monumento del FJCaldas
 * @returns {ActParque1}
 */
var ActPuente2 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/puente/3/sprites.js*/
function spritesPuente3() {
}
/*C:\uniserver\www\hdp\public_html\src/act/puente/3/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/puente/3/actividad.js*/
/**
 */
var ActPuente3 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/puente/4/sprites.js*/
function spritesPuente4() {
}
/*C:\uniserver\www\hdp\public_html\src/act/puente/4/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/puente/4/actividad.js*/
/**
 */
var ActPuente4 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/puente/5/sprites.js*/
function spritesPuente5() {
}
/*C:\uniserver\www\hdp\public_html\src/act/puente/5/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/puente/5/actividad.js*/
/**
 */
var ActPuente5 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/puente/6/sprites.js*/
function spritesPuente6() {
}
/*C:\uniserver\www\hdp\public_html\src/act/puente/6/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/puente/6/actividad.js*/
/**
 */
var ActPuente6 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/valencia/1/sprites.js*/
function spritesValencia1() {
}
/*C:\uniserver\www\hdp\public_html\src/act/valencia/1/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/valencia/1/actividad.js*/
/**
 * 
 */
var ActValencia1 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/valencia/2/sprites.js*/
function spritesValencia2() {
}
/*C:\uniserver\www\hdp\public_html\src/act/valencia/2/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/valencia/2/actividad.js*/
/**
 */
var ActValencia2 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/valencia/3/sprites.js*/
function spritesValencia3() {
}
/*C:\uniserver\www\hdp\public_html\src/act/valencia/3/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/valencia/3/actividad.js*/
/**
 */
var ActValencia3 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/valencia/4/sprites.js*/
function spritesValencia4() {
}
/*C:\uniserver\www\hdp\public_html\src/act/valencia/4/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/valencia/4/actividad.js*/
/**
 */
var ActValencia4 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/valencia/5/sprites.js*/
function spritesValencia5() {
}
/*C:\uniserver\www\hdp\public_html\src/act/valencia/5/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/valencia/5/actividad.js*/
/**
 */
var ActValencia5 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/act/valencia/6/sprites.js*/
function spritesValencia6() {
}
/*C:\uniserver\www\hdp\public_html\src/act/valencia/6/componentes.js*/

/*C:\uniserver\www\hdp\public_html\src/act/valencia/6/actividad.js*/
/**
 */
var ActValencia6 = function() {
	//con esta cantidad se gana la actividad
	this.totAciertos = 4;
	//tiempo en que se cambia de un topo a otro (milisegundos)
	this.duracion = 20000;
	//si se ha ganado la actividad
	this.actividadGanada = false;
	//si se ha ganado la actividad
	this.aciertos = 0;

	this.init = function() {
		this.crearEntidades();
		this.ganarActividad();
		return this;
	};

	this.crearEntidades = function() {

	};

	// Siempre invocada al terminar la actividad
	this.terminarActividad = function() {
		return this;
	};

	this.ganarActividad = function() {
		gesActividad.temporizador.parar();
		gesActividad.mostrarPuntaje();
		return this;
	};
};
/*C:\uniserver\www\hdp\public_html\src/datos/recursos.js*/
// Contiene arreglos de recursos a cargar y descargar
var Recursos = {
	// Recursos que nunca se descargan de memoria (disponibles globalmente)
	global: {
		cargado: false,
		spritesListas: false,
		rutas: [
			"img/carga/pvd-titulo.png", "img/carga/pvd-logos.png",
			"img/global/bt-atras.png",
			"img/global/temporizador.png",
			"img/global/fondo-pistas.png", "img/global/pistas.png",
			"img/puntaje/botones.png", "img/puntaje/blo-rojo.png", "img/puntaje/muy-bien.png", "img/puntaje/txt-puntuacion.png", "img/puntaje/cortinas.png", "img/puntaje/digitos.png", "img/puntaje/baudilio.png",
			"img/particulas/triangulo.png", "img/puntaje/fon-texto.png", "img/puntaje/comillas.png", "img/puntaje/spr-datos.png",
			"img/global/myriad.png", "img/global/font-asap36.png", "img/global/font-asap36bold.png",
			"img/global/pau-botones.png", "img/global/pau-arbol.png", "img/global/pau-hoja.png", "img/global/pau-leyenda.png",
			"img/global/perdiste.png",
			"img/global/mano.png", "img/global/gestos.png", "img/global/advertencias.png",
			"img/test/linea.png", "img/test/numeros.png",
			"img/carga/pajaro.png", "img/carga/cargando.png", "img/carga/logo.png"

		],
		initSprites: spritesGlobal
	},
	// Menú principal y sus sub-menús
	menuPrincipal: {
		cargado: false,
		spritesListas: false,
		rutas: [
			"img/menu-pri/fondo.png", "img/menu-pri/piso-frente.png", "img/menu-pri/piso-fondo.png", "img/menu-pri/nube-izq.png", "img/menu-pri/nube-der.png", "img/menu-pri/caballo-somb.png", "img/menu-pri/logo.png", "img/menu-pri/logo-config.png", "img/menu-pri/caballo.png", "img/menu-pri/bt-jugar.png", "img/menu-pri/bt-opciones.png", "img/menu-pri/bt-configurac.png",
			"img/menu-pri/fon-dialogo.png", "img/menu-pri/creditos.png"
		],
		initSprites: spritesMenuPri
	},
	// Menú de cuadros
	menuCuadros: {
		cargado: false,
		spritesListas: false,
		rutas: [
			"img/menu-cuadros/fondo.jpg", "img/menu-cuadros/logo.png", "img/menu-cuadros/grilla1-hor.png", "img/menu-cuadros/grilla1-ver.png", "img/menu-cuadros/grilla2-hor.png", "img/menu-cuadros/grilla2-ver.png", "img/puntaje/btn_regresar.png",
			"img/menu-cuadros/numeros-act.png", "img/menu-cuadros/baudilio-peq.png",
			"img/menu-cuadros/candado.png", "img/menu-cuadros/monedas.png", "img/menu-cuadros/numeros.png", "img/menu-cuadros/num-total.png", "img/menu-cuadros/bt-atras.png",
			"img/menu-cuadros/sombra-sup.png", "img/menu-cuadros/sombra-inf.png", "img/menu-cuadros/sombra-izq.png", "img/menu-cuadros/sombra-der.png",
			"img/menu-cuadros/c1gra.jpg", "img/menu-cuadros/c2gra.jpg", "img/menu-cuadros/c3gra.jpg", "img/menu-cuadros/c4gra.jpg", "img/menu-cuadros/c5gra.jpg",
			"img/menu-cuadros/c1.png", "img/menu-cuadros/c2.png", "img/menu-cuadros/c3.png", "img/menu-cuadros/c4.png", "img/menu-cuadros/c5.png",
			"img/menu-cuadros/c1desv.jpg", "img/menu-cuadros/c2desv.jpg", "img/menu-cuadros/c3desv.jpg", "img/menu-cuadros/c4desv.jpg", "img/menu-cuadros/c5desv.jpg"],
		initSprites: spritesMenuCuadros
	},
	// Escena de test
	test: {
		cargado: false,
		spritesListas: false,
		rutas: [
			"img/test/linea.png",
			"img/test/llave.png",
			"img/menu-pri/bt-dialogo.png",
			"img/test/prueba_de_nuevo.png"
		],
		initSprites: spritesTest
	},
	// Subniveles morro
	morro: [
		{
			act: 1,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/morro/1/fondo.jpg",
				"img/act/morro/1/morro-verde.png",
				"img/act/morro/1/obrero.png",
				"img/act/morro/1/spr-capas-1.png",
				"img/act/morro/1/spr-capas-2.png"
			],
			musica: ["morro1", "audio/act/morro/morro1.ogg"],
			initSprites: spritesMorro1
		},
		{
			act: 2,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/morro/2/fondo.jpg",
				"img/act/morro/2/hierba.png",
				"img/act/morro/2/piezas.png",
				"img/act/morro/2/piezas-hov.png",
				"img/act/morro/2/trampas.png",
				"img/act/morro/2/trampas-hov.png",
				"img/act/morro/2/huecos.png",
				"img/act/morro/2/fijos.png"],
			musica: ["morro2", "audio/act/morro/morro2.ogg"],
			initSprites: spritesMorro2
		},
		{
			act: 3,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/morro/3/fondo.jpg",
				"img/act/morro/3/piedras.png",
				"img/act/morro/3/ventilador.png",
				"img/act/morro/3/nube.png",
				"img/act/morro/3/lluvia.png",
				"img/act/morro/3/capa-suelo.png"
			],
			musica: ["morro3", "audio/act/morro/morro3.ogg"],
			initSprites: spritesMorro3
		},
		{
			act: 4,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/morro/4/fondo.jpg",
				"img/act/morro/4/montana.png",
				"img/act/morro/4/calaca.png",
				"img/act/morro/4/morrito.png",
				"img/act/morro/4/numeros.png"
			],
			musica: ["morro4", "audio/act/morro/morro4.ogg"],
			initSprites: spritesMorro4
		},
		{
			act: 5,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/morro/5/pasto.png",
				"img/act/morro/5/ganchos.png",
				"img/act/morro/5/fondo.jpg",
				"img/act/morro/5/manivela.png",
				"img/act/morro/5/polea_fuerza.png",
				"img/act/morro/5/palanca.png",
				"img/act/morro/5/vasija.png",
				"img/act/morro/5/vasija_sola.png",
				"img/act/morro/5/cuerda_vasija.png",
				"img/act/morro/5/cuerda_prueba.png",
				"img/act/morro/5/vasija_rota.png",
				"img/act/morro/5/secuencia_cuerda.png",
				"img/act/morro/5/piedras.png"
			],
			musica: ["morro5", "audio/act/morro/morro5.ogg"],
			initSprites: spritesMorro5
		},
		{
			act: 6,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/morro/6/fondo.jpg",
				"img/act/morro/6/morro-base.png",
				"img/act/morro/6/guia.png",
				"img/act/morro/6/estatua.png",
				"img/act/morro/6/sombra.png",
				"img/act/morro/6/spr-piezas.png"
			],
			musica: ["morro6", "audio/act/morro/morro1.ogg"],
			initSprites: spritesMorro6
		}
	],
	// Subniveles belalcazar
	belalcazar: [
		{
			act: 1,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/belalcaz/1/fondo.png",
				"img/act/belalcaz/1/primer-plano.png",
				"img/act/belalcaz/1/asta.png",
				"img/act/belalcaz/1/estandarte.png",
				"img/act/belalcaz/1/numeros.png",
				"img/act/belalcaz/1/anio.png",
				"img/act/belalcaz/1/caballo.png"//este recurso es usado en otras actividades
			],
			musica: ["belal1", "audio/act/belalcaz/belalcaz1.ogg"],
			initSprites: spritesBelalcaz1
		},
		{
			act: 2,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/belalcaz/2/fondo.png",
				"img/act/belalcaz/2/cascada.png",
				"img/act/belalcaz/2/fondo_agua.png",
				"img/act/belalcaz/2/espada.png",
				"img/act/belalcaz/2/troncos.png",
				"img/act/belalcaz/2/titulos.png",
				"img/act/belalcaz/2/troncos_lineas.png",
				"img/act/belalcaz/2/primer_plano.png",
				"img/act/belalcaz/2/agua_2.png",
				"img/act/belalcaz/2/agua_1.png",
				"img/act/belalcaz/2/cocodrilo.png",
				//recurso de la anterior actividad
				"img/act/belalcaz/1/caballo.png"
			],
			musica: ["belal2", "audio/act/belalcaz/belalcaz2.ogg"],
			initSprites: spritesBelalcaz2
		},
		{
			act: 3,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/belalcaz/3/elementos.png",
				"img/act/belalcaz/3/cascada.png",
				"img/act/belalcaz/3/agua.png",
				"img/act/belalcaz/3/plano1.png",
				"img/act/belalcaz/3/plano2.png",
				"img/act/belalcaz/3/plano3.png",
				"img/act/belalcaz/3/oso_anteojos.png",
				"img/act/belalcaz/3/indio-salto.png",
				//recurso de la anterior actividad   
				"img/act/belalcaz/1/caballo.png",
				"img/act/belalcaz/2/espada.png"
			],
			musica: ["belal3", "audio/act/belalcaz/belalcaz3.ogg"],
			initSprites: spritesBelalcaz3
		},
		{
			act: 4,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/belalcaz/4/fondo.jpg",
				"img/act/belalcaz/4/mapa.jpg",
				"img/act/belalcaz/4/primer_plano.png",
				"img/act/belalcaz/4/flechas_1.png",
				"img/act/belalcaz/4/flechas_2.png",
				"img/act/belalcaz/4/ciudades.png",
				"img/act/belalcaz/4/botones.png",
				"img/act/belalcaz/4/fechas.png",
				//recurso de la anterior actividad   
				"img/act/belalcaz/1/caballo.png",
				"img/act/belalcaz/2/cocodrilo.png"
			],
			musica: ["belal4", "audio/act/belalcaz/belalcaz4.ogg"],
			initSprites: spritesBelalcaz4
		},
		{
			act: 5,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/belalcaz/5/fondo.jpg",
				"img/act/belalcaz/5/aves.png",
				"img/act/belalcaz/5/barco.png",
				"img/act/belalcaz/5/bestia.png",
				"img/act/belalcaz/5/elementos.png",
				"img/act/belalcaz/5/linea_punteada.png",
				"img/act/belalcaz/5/mar.png",
				"img/act/belalcaz/5/mar_brillo_1.png",
				"img/act/belalcaz/5/mar_brillo_2.png",
				"img/act/belalcaz/5/montana_1.png",
				"img/act/belalcaz/5/montana_2.png",
				"img/act/belalcaz/5/montana_3.png",
				"img/act/belalcaz/5/montana_mar.png",
				"img/act/belalcaz/5/ojo.png",
				"img/act/belalcaz/5/sombra.png",
				"img/act/belalcaz/5/tiburon.png",
				"img/act/parque/3/onomatopeyas.png"
			],
			musica: ["belal5", "audio/act/belalcaz/belalcaz5.ogg"],
			initSprites: spritesBelalcaz5
		},
		{
			act: 6,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/belalcaz/6/fondo.jpg",
				"img/act/belalcaz/6/elementos.png",
				"img/act/belalcaz/6/plano1_arbusto.png"
			],
			musica: ["belal6", "audio/act/belalcaz/belalcaz1.ogg"],
			initSprites: spritesBelalcaz6
		}
	],
	parque: [
		{
			act: 1,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/parque/1/carro.png",
				"img/act/parque/1/manzana1.png",
				"img/act/parque/1/manzana2.png",
				"img/act/parque/1/manzana3.png",
				"img/act/parque/1/manzana4.png",
				"img/act/parque/1/manzana5.png",
				"img/act/parque/1/manzana6.png",
				"img/act/parque/1/manzana7.png",
				"img/act/parque/1/manzana8.png",
				"img/act/parque/1/manzana9.png",
				"img/act/parque/1/nubes.png",
				"img/act/parque/1/botones.png",
				"img/act/parque/1/numerosayuda.png"
			],
			musica: ["parque1", "audio/act/parque/parque1.ogg"],
			initSprites: spritesParque1
		},
		{
			act: 2,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/parque/2/fondo.jpg",
				"img/act/parque/2/fondo_color.jpg",
				"img/act/parque/2/partes.png",
				"img/act/parque/2/sombras.png",
				"img/act/parque/2/caldas_completo.png"
			],
			musica: ["parque2", "audio/act/parque/parque2.ogg"],
			initSprites: spritesParque2
		},
		{
			act: 3,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/parque/3/enredadera.png",
				"img/act/parque/3/flor.png",
				"img/act/parque/3/fondo.jpg",
				"img/act/parque/3/gota.png",
				"img/act/parque/3/hormiga_camina.png",
				"img/act/parque/3/hormiga_muerde.png",
				"img/act/parque/3/hormiga_muerta.png",
				"img/act/parque/3/onomatopeyas.png",
				"img/act/parque/3/primer_plano.png",
				"img/act/parque/3/rama.png",
				"img/act/parque/3/regadera.png"
			],
			musica: ["parque3", "audio/act/parque/parque3.ogg"],
			initSprites: spritesParque3
		},
		{
			act: 4,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/parque/4/fondo.jpg",
				"img/act/parque/4/barras.png",
				"img/act/parque/4/cofre_grande.png",
				"img/act/parque/4/cofre_pequeno.png",
				"img/act/parque/4/lampara.png",
				"img/act/parque/4/piso.png"
			],
			musica: ["parque4", "audio/act/parque/parque4.ogg"],
			initSprites: spritesParque4
		},
		{
			act: 5,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/parque/5/fondo.jpg",
				"img/act/parque/5/carruaje.png",
				"img/act/parque/5/cubo.jpg",
				"img/act/parque/5/cuerda.png",
				"img/act/parque/5/engranajes.png",
				"img/act/parque/5/fondo_nubes.jpg",
				"img/act/parque/5/hombre-fuerza.png",
				"img/act/parque/5/hombre-sube.png",
				"img/act/parque/5/llanta.png",
				"img/act/parque/5/nubes.png",
				"img/act/parque/5/torre.png"
			],
			musica: ["parque5", "audio/act/parque/parque5.ogg"],
			initSprites: spritesParque5
		},
		{
			act: 6,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/parque/6/fondo.jpg",
				"img/act/parque/6/casas.png",
				"img/act/parque/6/catedral.png",
				"img/act/parque/6/catedral_cupula.png",
				"img/act/parque/6/catedral_partes.png",
				"img/act/parque/6/nubes.png",
				"img/act/parque/6/piso.png"
			],
			musica: ["parque6", "audio/act/parque/parque3.ogg"],
			initSprites: spritesParque6
		}
	],
	puente: [
		{
			act: 1,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/puente/1/fondo.jpg",
				"img/act/puente/1/partes_puente.png",
				"img/act/puente/1/personajes.png",
				"img/act/puente/1/primer_plano.png"
			],
			musica: ["puente1", "audio/act/puente/puente1.ogg"],
			initSprites: spritesPuente1
		},
		{
			act: 2,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/puente/2/fondo.jpg",
				"img/act/puente/2/hoja.png",
				"img/act/puente/2/indicador.png",
				"img/act/puente/2/numeros.png",
				"img/act/puente/1/personajes.png"
			],
			musica: ["puente2", "audio/act/puente/puente2.ogg"],
			initSprites: spritesPuente2
		},
		{
			act: 3,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/puente/3/fondo.png",
				"img/act/puente/3/ladrillo.png",
				"img/act/puente/3/ladrillo_sombra.png",
				"img/act/puente/3/lanzar.png",
				"img/act/puente/3/mesa.png",
				"img/act/puente/3/nube.png",
				"img/act/puente/3/primer_plano.png",
				"img/act/puente/3/puente_partes.png",
				"img/act/puente/3/torre_dividida.png"
			],
			musica: ["puente3", "audio/act/puente/puente3.ogg"],
			initSprites: spritesPuente3
		},
		{
			act: 4,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/puente/4/barro.png",
				"img/act/puente/4/barro_cal.png",
				"img/act/puente/4/cal.png",
				"img/act/puente/4/fondo.jpg",
				"img/act/puente/4/fondo_azul.png",
				"img/act/puente/4/iconos.png",
				"img/act/puente/4/mezcla_final.png",
				"img/act/puente/4/particula.png",
				"img/act/puente/4/sangre.png",
				"img/act/puente/4/sangre_barrro.png",
				"img/act/puente/4/sangre_cal.png",
				"img/act/puente/4/vasijas.png"
			],
			musica: ["puente4", "audio/act/puente/puente4.ogg"],
			initSprites: spritesPuente4
		},
		{
			act: 5,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/puente/5/fondo.png",
				"img/act/puente/5/nube.png",
				"img/act/puente/5/personajes.png",
				"img/act/puente/5/primer_plano.png",
				"img/act/puente/5/puente.png",
				"img/act/puente/5/segundo_plano.png"
			],
			musica: ["puente5", "audio/act/puente/puente5.ogg"],
			initSprites: spritesPuente5
		},
		{
			act: 6,
			cargado: false,
			spritesListas: false,
			rutas: [
				"img/act/puente/6/fondo.jpg",
				"img/act/puente/6/barra.png",
				"img/act/puente/6/brazos.png",
				"img/act/puente/6/indicador.png",
				"img/act/puente/6/nubes_1.png",
				"img/act/puente/6/nubes_2.png",
				"img/act/puente/6/personaje.png",
				"img/act/puente/6/pimer_plano.png",
				"img/act/puente/6/rotar.png"
			],
			musica: ["puente6", "audio/act/puente/puente2.ogg"],
			initSprites: spritesPuente6
		}
	],
	valencia: [
		{
			act: 1,
			cargado: false,
			spritesListas: false,
			rutas: [
			],
			musica: ["valencia1", "audio/act/valencia/valencia1.ogg"],
			initSprites: spritesValencia1
		},
		{
			act: 2,
			cargado: false,
			spritesListas: false,
			rutas: [
			],
			musica: ["valencia2", "audio/act/valencia/valencia2.ogg"],
			initSprites: spritesValencia2
		},
		{
			act: 3,
			cargado: false,
			spritesListas: false,
			rutas: [
			],
			musica: ["valencia3", "audio/act/valencia/valencia3.ogg"],
			initSprites: spritesValencia3
		},
		{
			act: 4,
			cargado: false,
			spritesListas: false,
			rutas: [
			],
			musica: ["valencia4", "audio/act/valencia/valencia4.ogg"],
			initSprites: spritesValencia4
		},
		{
			act: 5,
			cargado: false,
			spritesListas: false,
			rutas: [
			],
			musica: ["valencia5", "audio/act/valencia/valencia5.ogg"],
			initSprites: spritesValencia5
		},
		{
			act: 6,
			cargado: false,
			spritesListas: false,
			rutas: [
			],
			musica: ["valencia6", "audio/act/valencia/valencia6.ogg"],
			initSprites: spritesValencia6
		},
	]
};

/*C:\uniserver\www\hdp\public_html\src/main.js*/
var cocoon = (navigator.isCocoonJS);
var gesActividad; // Inicia las actividades
var actPuntaje; // Muestra el panel de puntaje y dato
var gesSonido; // Gestor de audios
var world = null; // Mundo Box2D
var debug = true; // True para activar el modo desarrollador

window.onload = function() {
	Crafty.init(1280, 800);
	if (!cocoon) {
		Crafty.canvas.init();
	}
	Crafty.timer.FPS(60);
	Crafty.timer.steptype("variable"); // variable, fixed, semifixed

	// Inicializamos el objeto único global Box2D
	Crafty.box2D.init(0, 10, 32, true);
	world = Crafty.box2D.world;
	//if (!cocoon) Crafty.box2D.showDebugInfo();

	gesSonido = new Sonido();

	// Cargamos recursos globales (incluídos sprites) antes de hacer cualquier cosa
	cargarRecursos(Recursos.global, false, function() {
		gesActividad = new Actividad(); // sólo inicializar 1 vez
		actPuntaje = new ActPuntaje();
		gestorTest = new Test(); //gestor de tests

		gesActividad.ejecutar(1, 5); // Nivel de 0 a 4, Subnivel de 0 a 5
		//gestorTest.iniciarTest(0);
		//Crafty.enterScene("Inicio");
		//gesSonido.silenciar();
	});
	
	// Desbloquear todos los niveles en modo debug
	if (debug) {
		for (i = 0 ; i < 5 ; i++) {
			progreso[i].bloqueado = false;
			progreso[i].puntaje = [1,1,1,1,1,1];
		}
	}
};
4